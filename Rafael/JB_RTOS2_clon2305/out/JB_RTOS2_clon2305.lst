
RTOS2_prj/JB_RTOS2_clon2305/out/JB_RTOS2_clon2305.elf:     file format elf32-littlearm
RTOS2_prj/JB_RTOS2_clon2305/out/JB_RTOS2_clon2305.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a003eed

Program Header:
0x70000001 off    0x0000d678 vaddr 0x1a005678 paddr 0x1a005678 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x00002cdc flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00005680 memsz 0x00005680 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a005680 align 2**15
         filesz 0x00000140 memsz 0x00000140 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005678  1a000000  1a000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  10000000  1a005680  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00010140  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00010140  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00010140  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00010140  2**2
                  CONTENTS
  6 .bss          00002b9c  10000140  10000140  00000140  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00010140  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00010140  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00010140  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00010140  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a005678  1a005678  0000d678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00010140  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00010140  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00010140  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00010140  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00010140  2**2
                  CONTENTS
 17 .noinit       00000000  10002cdc  10002cdc  00010140  2**2
                  CONTENTS
 18 .debug_info   00020ee3  00000000  00000000  00010140  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00004d3e  00000000  00000000  00031023  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00001000  00000000  00000000  00035d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00001040  00000000  00000000  00036d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  0001135d  00000000  00000000  00037da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   000143e0  00000000  00000000  000490fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0002e128  00000000  00000000  0005d4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      000000ef  00000000  00000000  0008b606  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000039  00000000  00000000  0008b6f5  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00002ec8  00000000  00000000  0008b730  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_loc    0000b47c  00000000  00000000  0008e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000140 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005678 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002cdc l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002c40 l     F .text	000000ac uartProcessIRQ
10002bbc l     O .bss	00000004 rxIsrCallbackUART0
10002bc0 l     O .bss	00000004 txIsrCallbackUART0
10002bc4 l     O .bss	00000004 txIsrCallbackUART2
10002bc8 l     O .bss	00000004 txIsrCallbackUART3
1a0053f0 l     O .text	00000048 lpcUarts
10002bcc l     O .bss	00000004 rxIsrCallbackUART2
10002bd0 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
10000140 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 DriverDinamicMemoryRTOS.c
00000000 l    df *ABS*	00000000 Task.c
00000000 l    df *ABS*	00000000 heap_4.c
1a000658 l     F .text	00000064 prvHeapInit
1000014c l     O .bss	00002000 ucHeap
1a0006bc l     F .text	00000058 prvInsertBlockIntoFreeList
10000148 l     O .bss	00000004 pxEnd
1000214c l     O .bss	00000004 xBlockAllocatedBit
10002150 l     O .bss	00000004 xFreeBytesRemaining
10002154 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10002158 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a0008a0 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a0008b2 l     F .text	0000001e prvIsQueueFull
1a0008d0 l     F .text	0000001a prvIsQueueEmpty
1a0008ea l     F .text	00000076 prvCopyDataToQueue
1a000960 l     F .text	00000024 prvCopyDataFromQueue
1a000984 l     F .text	0000006e prvUnlockQueue
1a000a78 l     F .text	00000022 prvInitialiseNewQueue
1a000cf4 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002160 l     O .bss	00000168 uxIdleTaskStack.10728
100022c8 l     O .bss	000005a0 uxTimerTaskStack.10735
10002868 l     O .bss	00000060 xIdleTaskTCB.10727
100028c8 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001224 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001250 l     F .text	00000092 prvInitialiseNewTask
1a0012e4 l     F .text	00000068 prvInitialiseTaskLists
1a00134c l     F .text	000000ac prvAddNewTaskToReadyList
1a0013f8 l     F .text	00000038 prvDeleteTCB
1a001430 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00147c l     F .text	00000028 prvIdleTask
1a0014a4 l     F .text	00000098 prvAddCurrentTaskToDelayedList
1000292c l     O .bss	00000004 pxDelayedTaskList
10002930 l     O .bss	00000004 pxOverflowDelayedTaskList
10002934 l     O .bss	0000008c pxReadyTasksLists
100029c0 l     O .bss	00000004 uxCurrentNumberOfTasks
100029c4 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100029c8 l     O .bss	00000004 uxPendedTicks
100029cc l     O .bss	00000004 uxSchedulerSuspended
100029d0 l     O .bss	00000004 uxTaskNumber
100029d4 l     O .bss	00000004 uxTopReadyPriority
100029d8 l     O .bss	00000014 xDelayedTaskList1
100029ec l     O .bss	00000014 xDelayedTaskList2
10002a00 l     O .bss	00000004 xNextTaskUnblockTime
10002a04 l     O .bss	00000004 xNumOfOverflows
10002a08 l     O .bss	00000014 xPendingReadyList
10002a1c l     O .bss	00000004 xSchedulerRunning
10002a20 l     O .bss	00000014 xSuspendedTaskList
10002a34 l     O .bss	00000014 xTasksWaitingTermination
10002a48 l     O .bss	00000004 xTickCount
10002a4c l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a00203c l     F .text	00000020 prvGetNextExpireTime
1a00205c l     F .text	00000048 prvInsertTimerInActiveList
1a0020a4 l     F .text	00000070 prvCheckForValidListAndQueue
1a002114 l     F .text	00000040 prvInitialiseNewTimer
1a0024e4 l     F .text	00000016 prvTimerTask
1a002270 l     F .text	00000078 prvSwitchTimerLists
1a0022e8 l     F .text	0000002c prvSampleTimeNow
1a002314 l     F .text	00000060 prvProcessExpiredTimer
1a002374 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0023e8 l     F .text	000000fc prvProcessReceivedCommands
10002a50 l     O .bss	00000004 pxCurrentTimerList
10002a54 l     O .bss	00000004 pxOverflowTimerList
10002a58 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002af8 l     O .bss	00000014 xActiveTimerList1
10002b0c l     O .bss	00000014 xActiveTimerList2
10002b20 l     O .bss	00000004 xLastTime.11777
10002b24 l     O .bss	00000050 xStaticTimerQueue.11827
10002b74 l     O .bss	00000004 xTimerQueue
10002b78 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a0024fc l     F .text	00000040 prvTaskExitError
1a00253c l     F .text	00000022 prvPortStartFirstTask
1a002564 l     F .text	0000000e vPortEnableVFP
1a0025d0 l       .text	00000000 pxCurrentTCBConst2
1a0026b0 l       .text	00000000 pxCurrentTCBConst
10002b7c l     O .bss	00000001 ucMaxSysCallPriority
10002b80 l     O .bss	00000004 ulMaxPRIGROUPValue
10000010 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000018 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a0028a0 l     F .text	00000010 clearInterrupt
1a0028b0 l     F .text	00000060 serveInterrupt
1000001c l     O .data	00000048 ultrasonicSensors
1a0052a8 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002934 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10002b88 l     O .bss	00000030 tickerObject.10478
00000000 l    df *ABS*	00000000 sapi_timer.c
1a002ea0 l     F .text	00000002 errorOcurred
1a002ea4 l     F .text	00000002 doNothing
10000064 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a0030c0 l     F .text	00000040 Board_LED_Init
1a003100 l     F .text	0000003c Board_TEC_Init
1a00313c l     F .text	0000003c Board_GPIO_Init
1a003178 l     F .text	00000038 Board_SPI_Init
1a0031b0 l     F .text	00000024 Board_I2C_Init
1a0031d4 l     F .text	00000030 Board_ADC_Init
1a005438 l     O .text	00000012 GpioPorts
1a005454 l     O .text	00000008 GpioButtons
1a00545c l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 system.c
10002bd4 l     O .bss	00000004 heap_end.10252
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005468 l     O .text	0000000c InitClkStates
1a005474 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00342c l     F .text	0000002c Chip_UART_GetIndex
1a00550c l     O .text	00000008 UART_BClock
1a005514 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0035d0 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0035e4 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0036a8 l     F .text	000000a8 pll_calc_divs
1a003750 l     F .text	00000104 pll_get_frac
1a003854 l     F .text	00000048 Chip_Clock_FindBaseClock
1a003ac0 l     F .text	00000022 Chip_Clock_GetDivRate
10002bd8 l     O .bss	00000008 audio_usb_pll_freq
1a005528 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005594 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
100000a4 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003e34 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003e48 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0048c8 l     F .text	00000048 std.isra.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a004c1c l     F .text	0000002c __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 impure.c
100000dc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a005680 l       .ARM.exidx	00000000 __exidx_end
1a005680 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a005678 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a005678 l       .bss_RAM5	00000000 __init_array_end
1a005678 l       .bss_RAM5	00000000 __preinit_array_end
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a005678 l       .bss_RAM5	00000000 __init_array_start
1a005678 l       .bss_RAM5	00000000 __preinit_array_start
1a0038e8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0032ac g     F .text	00000012 _isatty_r
1a0045d0 g     F .text	00000010 strcpy
1a003fd4 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a002f24 g     F .text	00000040 TIMER2_IRQHandler
1a002db0 g     F .text	00000014 uartRxRead
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0032c0 g     F .text	0000000a _lseek_r
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a004008 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002618 g     F .text	0000002c vPortExitCritical
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a004584 g     F .text	00000030 printf
1a002cec g     F .text	00000074 uartRxInterruptSet
1a005202 g     F .text	00000024 __sseek
1a00493c g     F .text	00000060 __sinit
10002bb8 g     O .bss	00000004 callBackFuncParams
1a0045e0 g     F .text	000000a8 __swbuf_r
1a000188  w    F .text	00000002 HardFault_Handler
1a00110c g     F .text	00000052 vQueueWaitForMessageRestricted
1a004910 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a003688 g     F .text	0000000c Chip_ADC_SetResolution
1a0026b4 g     F .text	0000002c SysTick_Handler
1a0034ac g     F .text	00000040 Chip_UART_SetBaud
1a002fb4 g     F .text	00000008 printString
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a00323c g     F .text	0000001c Board_UARTGetChar
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
10002be8 g     O .bss	00000004 SemTxUart
1a002650 g     F .text	00000064 PendSV_Handler
1a000d22 g     F .text	000000cc xQueueGenericSendFromISR
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
10002928 g     O .bss	00000004 pxCurrentTCB
1a0032a0 g     F .text	0000000a _fstat_r
53ff3952 g       *ABS*	00000000 __valid_user_code_checksum
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a0003f4 g     F .text	0000002a ModuleDinamicMemory_initialize
1a001b7c g     F .text	00000018 vTaskInternalSetTimeOutState
1a002f64 g     F .text	00000040 TIMER3_IRQHandler
1a003b4c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a002718 g     F .text	00000110 xPortStartScheduler
1a00455c g     F .text	00000016 memcpy
1a001a88 g     F .text	00000030 vTaskPlaceOnEventList
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a0048bc g     F .text	0000000c _cleanup_r
1a0026e0  w    F .text	00000038 vPortSetupTimerInterrupt
1a003f74 g     F .text	00000000 .hidden __aeabi_uldivmod
10002cdc g       .noinit	00000000 _noinit
1a000830 g     F .text	00000070 vPortFree
1a002e70 g     F .text	00000018 uartWriteString
10002cd8 g     O .bss	00000004 SystemCoreClock
1a003458 g     F .text	00000054 Chip_UART_Init
1a000f48 g     F .text	0000019c xQueueSemaphoreTake
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a002bc4 g     F .text	00000030 tickerCallback
1a002828 g     F .text	0000005c vPortValidateInterruptPriority
10002bec g     O .bss	00000004 SemRxUart
1a000194  w    F .text	00000002 UsageFault_Handler
1a003bc8 g     F .text	0000004c Chip_Clock_GetRate
1a00117a g     F .text	00000018 vListInsertEnd
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
1a002fa4 g     F .text	0000000e printInitUart
10002cc8 g     O .bss	00000008 tickCounter
1a0033b4 g     F .text	0000006c Board_SetupClocking
1a003318 g     F .text	00000020 _sbrk_r
1a005450 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0032cc g     F .text	0000004c _read_r
1a001174 g     F .text	00000006 vListInitialiseItem
1a00291c g     F .text	0000000a GPIO1_IRQHandler
1a000df0 g     F .text	00000158 xQueueReceive
10002c88 g     O .bss	00000040 xQueueRegistry
1a001208 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a002d60 g     F .text	00000038 uartRxInterruptCallbackSet
1a0002fc g     O .text	00000004 CRP_WORD
1a005640 g     O .text	00000004 _global_impure_ptr
1a004510 g     F .text	0000004c __libc_init_array
1a0042a4 g     F .text	0000026a .hidden __udivdi3
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a000714 g     F .text	0000011c pvPortMalloc
1a003258 g     F .text	0000003c Board_Init
1a003f70 g     F .text	00000002 _init
1a00115e g     F .text	00000016 vListInitialise
1a000480 g     F .text	000000c4 myTask_1
1a000114 g       .text	00000000 __data_section_table
1a0016b8 g     F .text	0000000c xTaskGetTickCount
1a000b78 g     F .text	0000017c xQueueGenericSend
1a0001a8  w    F .text	00000002 RTC_IRQHandler
10002cdc g       .bss	00000000 _ebss
1a002ea8 g     F .text	0000003c TIMER0_IRQHandler
1a002bf4 g     F .text	0000004c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a003e04 g     F .text	00000030 Chip_I2C_SetClockRate
1a001cf8 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a00058c g     F .text	000000cc CallbackRx
1a00389c g     F .text	0000004c Chip_Clock_EnableCrystal
1a001af0 g     F .text	0000008c xTaskRemoveFromEventList
1a001222 g     F .text	00000002 vApplicationMallocFailedHook
1a0001ac g     F .text	0000001a data_init
1a002ee4 g     F .text	00000040 TIMER1_IRQHandler
1a00561c g     O .text	00000020 __sf_fake_stderr
1a003de0 g     F .text	00000024 Chip_I2C_Init
10002bf0 g     O .bss	00000004 xPointerQueue
1a002e88 g     F .text	0000000a UART2_IRQHandler
1a002fbc g     F .text	00000010 printEnter
1a003a58 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0052ac g     O .text	00000136 gpioPinsInit
1a002e54 g     F .text	0000001a uartWriteByte
1a001e68 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003e60 g     F .text	00000012 Chip_SSP_SetClockRate
1a002bac g     F .text	00000016 gpioToggle
1a004c48 g     F .text	00000024 __sfputs_r
1a002928 g     F .text	0000000a GPIO2_IRQHandler
1a00522e g     F .text	0000001e memchr
00000000  w      *UND*	00000000 _printf_float
1a001b94 g     F .text	00000080 xTaskCheckForTimeOut
1a004ae8 g     F .text	00000088 _free_r
1a003b28 g     F .text	00000024 Chip_Clock_GetBaseClock
1a001c40 g     F .text	000000b8 xTaskPriorityInherit
10000140 g       .bss	00000000 _bss
1a003654 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000544 g     F .text	00000048 TaskTxUart
1a0016a8 g     F .text	00000010 vTaskSuspendAll
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a003e74 g     F .text	0000003e Chip_SSP_SetBitRate
1a0011c6 g     F .text	00000028 uxListRemove
10002bf4 g     O .bss	0000006d Data
1a003dbc g     F .text	00000002 Chip_GPIO_Init
1a00544c g     O .text	00000004 OscRateIn
1a002dd8 g     F .text	0000007c uartInit
1a00153c g     F .text	00000072 xTaskCreateStatic
10002cdc g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0019c0 g     F .text	000000c8 vTaskSwitchContext
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000a9a g     F .text	00000090 xQueueGenericCreateStatic
1a001ab8 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
10002c64 g     O .bss	00000020 ModuleData
1a003294 g     F .text	0000000a _close_r
1a002960 g     F .text	0000019c gpioInit
1a001e84 g     F .text	00000098 xTaskNotifyWait
1a0011f0 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002204 g     F .text	0000006c xTimerGenericCommand
1a004688 g     F .text	000000d8 __swsetup_r
1a001220 g     F .text	00000002 vApplicationStackOverflowHook
1a004004  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00499c g     F .text	00000074 __sfp
1a0051a8 g     F .text	00000022 __sread
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
10000144 g     O .bss	00000004 xTaskHandle_RxNotify
1a003228 g     F .text	00000014 Board_UARTPutChar
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a004868 g     F .text	00000054 _fflush_r
1a0055dc g     O .text	00000020 __sf_fake_stdin
1a003904 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004572 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	000000f4 main
1a000474 g     F .text	0000000a ModuleDinamicMemory_Free
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a001192 g     F .text	00000034 vListInsert
10002c84 g     O .bss	00000004 SemMutexUart
1a0025b0 g     F .text	00000024 SVC_Handler
10000014 g     O .data	00000004 DWT_CTRL
1a005226 g     F .text	00000008 __sclose
1a002154 g     F .text	00000064 xTimerCreateTimerTask
1a004b70 g     F .text	000000ac _malloc_r
1a002d98 g     F .text	00000018 uartTxReady
1a0018d0 g     F .text	000000a4 vTaskDelayUntil
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a003b58 g     F .text	0000003c Chip_Clock_EnableOpts
1a000b2a g     F .text	0000004e xQueueGenericCreate
1a003920 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003d64 g     F .text	00000058 fpuInit
1a0039d8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003364 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a001f1c g     F .text	00000120 xTaskGenericNotifyFromISR
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002afc g     F .text	00000058 gpioWrite
1a004584 g     F .text	00000030 iprintf
1a0017dc g     F .text	000000f4 xTaskResumeAll
1a001614 g     F .text	00000094 vTaskStartScheduler
1a003614 g     F .text	00000040 Chip_ADC_Init
1a003380 g     F .text	00000034 Board_SetupMuxing
1a0034ec g     F .text	000000e4 Chip_UART_SetBaudFDR
1a003338 g     F .text	0000002a _write_r
10002cd0 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
1a004e7c g     F .text	000000ea _printf_common
10002b84 g     O .bss	00000004 tickHookFunction
1000013c g     O .data	00000004 _impure_ptr
1a004760 g     F .text	00000108 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a002dc4 g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001c14 g     F .text	0000000c vTaskMissedYield
10002cdc g       .bss	00000000 _pvHeapStart
10000000 g     O .data	00000010 Frame_parameters
1a000178 g       .text	00000000 __section_table_end
1a003eb4 g     F .text	00000038 Chip_SSP_Init
1a0010e4 g     F .text	00000028 vQueueAddToRegistry
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0016c4 g     F .text	00000118 xTaskIncrementTick
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a003204 g     F .text	00000024 Board_Debug_Init
1a0009f4 g     F .text	00000084 xQueueGenericReset
10000140 g       .data	00000000 _edata
1a003dc0 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a0015ae g     F .text	00000066 xTaskCreate
1a003c14 g     F .text	00000150 Chip_SetupCoreClock
1a0051ca g     F .text	00000038 __swrite
1a002910 g     F .text	0000000a GPIO0_IRQHandler
1a004c6c g     F .text	00000210 _vfiprintf_r
1a000000 g     O .text	00000114 g_pfnVectors
1a003eec g     F .text	00000084 ResetISR
1a004a10 g     F .text	0000003c _fwalk_reent
1a003694 g     F .text	00000014 SystemCoreClockUpdate
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a001974 g     F .text	0000004c vTaskDelay
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a0055fc g     O .text	00000020 __sf_fake_stdout
1a001c20 g     F .text	00000020 xTaskGetSchedulerState
1a001da8 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a004004  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a004a4c g     F .text	0000009c __smakebuf_r
1a002578 g     F .text	0000002c pxPortInitialiseStack
1a004f68 g     F .text	00000240 _printf_i
1a003b94 g     F .text	00000034 Chip_Clock_Enable
1a002e94 g     F .text	0000000a UART3_IRQHandler
1a000420 g     F .text	0000003c ModuleDinamicMemory_send
10002be0 g     O .bss	00000004 __malloc_sbrk_start
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a0021b8 g     F .text	0000004c xTimerCreateStatic
1a003fa4 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a0045b4 g     F .text	0000001c strchr
1a002b54 g     F .text	00000058 gpioRead
1a002fcc g     F .text	000000f4 boardInit
1a0025d4 g     F .text	00000044 vPortEnterCritical
1a00045c g     F .text	00000016 ModuleDinamicMemory_receive
10002be4 g     O .bss	00000004 __malloc_free_list
1a004c6c g     F .text	00000210 _vfprintf_r
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a000d0c g     F .text	00000016 xQueueCreateMutex
1a003ae4 g     F .text	00000044 Chip_Clock_SetBaseClock
1a002884 g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a003420 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 ed 3e 00 1a 85 01 00 1a 89 01 00 1a     .....>..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a 52 39 ff 53     ............R9.S
	...
1a00002c:	b1 25 00 1a 9d 01 00 1a 00 00 00 00 51 26 00 1a     .%..........Q&..
1a00003c:	b5 26 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .&..............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a a9 2e 00 1a e5 2e 00 1a 25 2f 00 1a     ............%/..
1a00007c:	65 2f 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     e/..............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 89 2e 00 1a     ....y...........
1a0000ac:	95 2e 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000bc:	a9 01 00 1a 11 29 00 1a 1d 29 00 1a 29 29 00 1a     .....)...)..))..
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a005680 	.word	0x1a005680
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000140 	.word	0x00000140
1a000120:	1a005680 	.word	0x1a005680
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005680 	.word	0x1a005680
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005680 	.word	0x1a005680
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005680 	.word	0x1a005680
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000140 	.word	0x10000140
1a000154:	00002b9c 	.word	0x00002b9c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f002 fd60 	bl	1a002c40 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <UsageFault_Handler+0x4>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <DebugMon_Handler+0x4>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <DebugMon_Handler+0x8>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:


DEBUG_PRINT_ENABLE;

int main(void)
{
1a000300:	b500      	push	{lr}
1a000302:	b085      	sub	sp, #20
	// ---------- CONFIGURACIONES ------------------------------
	// Inicializar y configurar la plataforma
	boardConfig();
1a000304:	f002 fe62 	bl	1a002fcc <boardInit>
	// UART for debug messages
	debugPrintConfigUart( UART_USB, 115200 );
1a000308:	4c28      	ldr	r4, [pc, #160]	; (1a0003ac <main+0xac>)
1a00030a:	4620      	mov	r0, r4
1a00030c:	2103      	movs	r1, #3
1a00030e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000312:	f002 fe47 	bl	1a002fa4 <printInitUart>
	debugPrintlnString( "Blinky con freeRTOS y sAPI." );
1a000316:	7820      	ldrb	r0, [r4, #0]
1a000318:	4925      	ldr	r1, [pc, #148]	; (1a0003b0 <main+0xb0>)
1a00031a:	f002 fe4b 	bl	1a002fb4 <printString>
1a00031e:	7820      	ldrb	r0, [r4, #0]
1a000320:	f002 fe4c 	bl	1a002fbc <printEnter>



	uartConfig(UART_USB, 115200);
1a000324:	2003      	movs	r0, #3
1a000326:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00032a:	f002 fd55 	bl	1a002dd8 <uartInit>
	// Cambios RO 23.5 - Seteo un callback al evento de recepcion y habilito su interrupcion
	uartRxInterruptCallbackSet(UART_USB, CallbackRx);
1a00032e:	2003      	movs	r0, #3
1a000330:	4920      	ldr	r1, [pc, #128]	; (1a0003b4 <main+0xb4>)
1a000332:	f002 fd15 	bl	1a002d60 <uartRxInterruptCallbackSet>
	// Cambios RO 23.5 todas las interrupciones de UART_USB
	uartRxInterruptSet(UART_USB, true);
1a000336:	2003      	movs	r0, #3
1a000338:	2101      	movs	r1, #1
1a00033a:	f002 fcd7 	bl	1a002cec <uartRxInterruptSet>

	SemTxUart = xSemaphoreCreateBinary();
1a00033e:	2001      	movs	r0, #1
1a000340:	2100      	movs	r1, #0
1a000342:	2203      	movs	r2, #3
1a000344:	f000 fbf1 	bl	1a000b2a <xQueueGenericCreate>
1a000348:	4b1b      	ldr	r3, [pc, #108]	; (1a0003b8 <main+0xb8>)
1a00034a:	6018      	str	r0, [r3, #0]
	SemMutexUart =xSemaphoreCreateMutex() ;
1a00034c:	2001      	movs	r0, #1
1a00034e:	f000 fcdd 	bl	1a000d0c <xQueueCreateMutex>
1a000352:	4b1a      	ldr	r3, [pc, #104]	; (1a0003bc <main+0xbc>)
1a000354:	6018      	str	r0, [r3, #0]
	xPointerQueue = xQueueCreate(1 , sizeof(char *));
1a000356:	2001      	movs	r0, #1
1a000358:	2104      	movs	r1, #4
1a00035a:	2200      	movs	r2, #0
1a00035c:	f000 fbe5 	bl	1a000b2a <xQueueGenericCreate>
1a000360:	4b17      	ldr	r3, [pc, #92]	; (1a0003c0 <main+0xc0>)
1a000362:	6018      	str	r0, [r3, #0]
	xTaskCreate(TaskTxUart, (const char *)"TaskTxUart",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a000364:	2501      	movs	r5, #1
1a000366:	9500      	str	r5, [sp, #0]
1a000368:	2400      	movs	r4, #0
1a00036a:	9401      	str	r4, [sp, #4]
1a00036c:	4815      	ldr	r0, [pc, #84]	; (1a0003c4 <main+0xc4>)
1a00036e:	4916      	ldr	r1, [pc, #88]	; (1a0003c8 <main+0xc8>)
1a000370:	22b4      	movs	r2, #180	; 0xb4
1a000372:	4623      	mov	r3, r4
1a000374:	f001 f91b 	bl	1a0015ae <xTaskCreate>
	xTaskCreate(myTask_1, (const char *)"myTask_1",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, &xTaskHandle_RxNotify);
1a000378:	9500      	str	r5, [sp, #0]
1a00037a:	4b14      	ldr	r3, [pc, #80]	; (1a0003cc <main+0xcc>)
1a00037c:	9301      	str	r3, [sp, #4]
1a00037e:	4814      	ldr	r0, [pc, #80]	; (1a0003d0 <main+0xd0>)
1a000380:	4914      	ldr	r1, [pc, #80]	; (1a0003d4 <main+0xd4>)
1a000382:	22b4      	movs	r2, #180	; 0xb4
1a000384:	4623      	mov	r3, r4
1a000386:	f001 f912 	bl	1a0015ae <xTaskCreate>
//	xTaskCreate(Task_ToMayusculas_OP0, (const char *)"Task_ToMayusculas_OP0",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
//	xTaskCreate(Task_ToMinusculas_OP1, (const char *)"Task_ToMinusculas_OP1",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
//	xTaskCreate(Task_ReportStack_OP2, (const char *)"Task_ToMayusculas_OP0",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
//	xTaskCreate(Task_ReportHeap_OP3, (const char *)"Task_ToMinusculas_OP1",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);

	ModuleDinamicMemory_initialize(&ModuleData,50,xQueueGenericSend,xQueueGenericSendFromISR, xQueueReceive,xQueueGenericCreate,pvPortMalloc, vPortFree);
1a00038a:	4b13      	ldr	r3, [pc, #76]	; (1a0003d8 <main+0xd8>)
1a00038c:	9300      	str	r3, [sp, #0]
1a00038e:	4b13      	ldr	r3, [pc, #76]	; (1a0003dc <main+0xdc>)
1a000390:	9301      	str	r3, [sp, #4]
1a000392:	4b13      	ldr	r3, [pc, #76]	; (1a0003e0 <main+0xe0>)
1a000394:	9302      	str	r3, [sp, #8]
1a000396:	4b13      	ldr	r3, [pc, #76]	; (1a0003e4 <main+0xe4>)
1a000398:	9303      	str	r3, [sp, #12]
1a00039a:	4813      	ldr	r0, [pc, #76]	; (1a0003e8 <main+0xe8>)
1a00039c:	2132      	movs	r1, #50	; 0x32
1a00039e:	4a13      	ldr	r2, [pc, #76]	; (1a0003ec <main+0xec>)
1a0003a0:	4b13      	ldr	r3, [pc, #76]	; (1a0003f0 <main+0xf0>)
1a0003a2:	f000 f827 	bl	1a0003f4 <ModuleDinamicMemory_initialize>

	// Iniciar scheduler
	vTaskStartScheduler();
1a0003a6:	f001 f935 	bl	1a001614 <vTaskStartScheduler>

	while( TRUE ) {
	}
1a0003aa:	e7fe      	b.n	1a0003aa <main+0xaa>
1a0003ac:	10000140 	.word	0x10000140
1a0003b0:	1a00524c 	.word	0x1a00524c
1a0003b4:	1a00058d 	.word	0x1a00058d
1a0003b8:	10002be8 	.word	0x10002be8
1a0003bc:	10002c84 	.word	0x10002c84
1a0003c0:	10002bf0 	.word	0x10002bf0
1a0003c4:	1a000545 	.word	0x1a000545
1a0003c8:	1a005268 	.word	0x1a005268
1a0003cc:	10000144 	.word	0x10000144
1a0003d0:	1a000481 	.word	0x1a000481
1a0003d4:	1a005274 	.word	0x1a005274
1a0003d8:	1a000df1 	.word	0x1a000df1
1a0003dc:	1a000b2b 	.word	0x1a000b2b
1a0003e0:	1a000715 	.word	0x1a000715
1a0003e4:	1a000831 	.word	0x1a000831
1a0003e8:	10002c64 	.word	0x10002c64
1a0003ec:	1a000b79 	.word	0x1a000b79
1a0003f0:	1a000d23 	.word	0x1a000d23

1a0003f4 <ModuleDinamicMemory_initialize>:

#include "DriverDinamicMemoryRTOS.h"
#include "Task.h"
void ModuleDinamicMemory_initialize( Module_Data_t *obj , uint32_t MaxLength, xQueueSendFCN xQueueSendFCN,xQueueSendFromISRFCN xQueueSendFromISRFCN, xQueueReceiveFCN xQueueReceiveFCN, xQueueCreateFCN xQueueCreateFCN, pvPortMallocFCN pvPortMallocFCN,vPortFreeFCN vPortFreeFCN)
{
1a0003f4:	b570      	push	{r4, r5, r6, lr}
1a0003f6:	4604      	mov	r4, r0
1a0003f8:	4616      	mov	r6, r2
1a0003fa:	461d      	mov	r5, r3
1a0003fc:	9b05      	ldr	r3, [sp, #20]
	obj->xMaxStringLength = MaxLength;
1a0003fe:	7101      	strb	r1, [r0, #4]
	//obj->xPointerQueue = xQueueCreate( 2 , sizeof( char * ) ); /*cola punteros tipo char*/
	obj->xQueueCreateFunction =xQueueCreateFCN;
1a000400:	61c3      	str	r3, [r0, #28]
	obj->xPointerQueue = obj->xQueueCreateFunction( 2 , sizeof( char * ) , 0);
1a000402:	2002      	movs	r0, #2
1a000404:	2104      	movs	r1, #4
1a000406:	2200      	movs	r2, #0
1a000408:	4798      	blx	r3
1a00040a:	6020      	str	r0, [r4, #0]
	obj->xQueueSendFunction = xQueueSendFCN;
1a00040c:	60a6      	str	r6, [r4, #8]
	obj->xQueueSendFromISRFunction = xQueueSendFromISRFCN;
1a00040e:	60e5      	str	r5, [r4, #12]
	obj->xQueueReceiveFunction = xQueueReceiveFCN;
1a000410:	9b04      	ldr	r3, [sp, #16]
1a000412:	6123      	str	r3, [r4, #16]
	obj->pvPortMallocFunction = pvPortMallocFCN;
1a000414:	9b06      	ldr	r3, [sp, #24]
1a000416:	6163      	str	r3, [r4, #20]
	obj->vPortFreeFunction = vPortFreeFCN;
1a000418:	9b07      	ldr	r3, [sp, #28]
1a00041a:	61a3      	str	r3, [r4, #24]
1a00041c:	bd70      	pop	{r4, r5, r6, pc}
1a00041e:	bf00      	nop

1a000420 <ModuleDinamicMemory_send>:
}

void ModuleDinamicMemory_send( Module_Data_t *obj ,uint8_t Isr, long * const xHigherPriorityTaskWoken, char* pbuf ,uint32_t portMaxDelay)
{
1a000420:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000422:	b083      	sub	sp, #12
1a000424:	4604      	mov	r4, r0
1a000426:	460d      	mov	r5, r1
1a000428:	4617      	mov	r7, r2
1a00042a:	461e      	mov	r6, r3
	//char* PcStringToSend = pvPortMalloc( obj->xMaxStringLength );
	char* PcStringToSend = obj->pvPortMallocFunction( obj->xMaxStringLength );
1a00042c:	6943      	ldr	r3, [r0, #20]
1a00042e:	7920      	ldrb	r0, [r4, #4]
1a000430:	2100      	movs	r1, #0
1a000432:	4798      	blx	r3
1a000434:	9001      	str	r0, [sp, #4]
	/*Si quiero copiar un strig con una variable o si quiero solo copiar el buffer en crudo enviar*/
	strcpy(PcStringToSend ,pbuf);
1a000436:	4631      	mov	r1, r6
1a000438:	f004 f8ca 	bl	1a0045d0 <strcpy>

	/*Si uso el enviar en una isr*/
	if(Isr) obj->xQueueSendFromISRFunction(obj->xPointerQueue ,&PcStringToSend,xHigherPriorityTaskWoken, 0);
1a00043c:	b135      	cbz	r5, 1a00044c <ModuleDinamicMemory_send+0x2c>
1a00043e:	68e5      	ldr	r5, [r4, #12]
1a000440:	6820      	ldr	r0, [r4, #0]
1a000442:	a901      	add	r1, sp, #4
1a000444:	463a      	mov	r2, r7
1a000446:	2300      	movs	r3, #0
1a000448:	47a8      	blx	r5
1a00044a:	e005      	b.n	1a000458 <ModuleDinamicMemory_send+0x38>
	else  obj->xQueueSendFunction(obj->xPointerQueue ,&PcStringToSend,portMaxDelay, 0);
1a00044c:	68a5      	ldr	r5, [r4, #8]
1a00044e:	6820      	ldr	r0, [r4, #0]
1a000450:	a901      	add	r1, sp, #4
1a000452:	9a08      	ldr	r2, [sp, #32]
1a000454:	2300      	movs	r3, #0
1a000456:	47a8      	blx	r5
	//xQueueSend( obj->xPointerQueue ,&PcStringToSend,portMAX_DELAY );
}
1a000458:	b003      	add	sp, #12
1a00045a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a00045c <ModuleDinamicMemory_receive>:

char* ModuleDinamicMemory_receive(Module_Data_t *obj, uint32_t portMaxDelay){
1a00045c:	b500      	push	{lr}
1a00045e:	b083      	sub	sp, #12
1a000460:	460a      	mov	r2, r1

	char* pbuffer; /*Dato recibido*/
	obj->xQueueReceiveFunction( obj->xPointerQueue , &pbuffer, portMaxDelay );
1a000462:	6903      	ldr	r3, [r0, #16]
1a000464:	6800      	ldr	r0, [r0, #0]
1a000466:	a901      	add	r1, sp, #4
1a000468:	4798      	blx	r3
	//xQueueReceive( obj->xPointerQueue , &pbuffer, portMAX_DELAY );
	return pbuffer;
}
1a00046a:	9801      	ldr	r0, [sp, #4]
1a00046c:	b003      	add	sp, #12
1a00046e:	f85d fb04 	ldr.w	pc, [sp], #4
1a000472:	bf00      	nop

1a000474 <ModuleDinamicMemory_Free>:

void ModuleDinamicMemory_Free(Module_Data_t *obj , char *ultimo_mensaje){
1a000474:	b508      	push	{r3, lr}
	obj->vPortFreeFunction(ultimo_mensaje);
1a000476:	6983      	ldr	r3, [r0, #24]
1a000478:	4608      	mov	r0, r1
1a00047a:	4798      	blx	r3
1a00047c:	bd08      	pop	{r3, pc}
1a00047e:	bf00      	nop

1a000480 <myTask_1>:

QueueHandle_t xPointerQueue;
/*=================================================================================*/

void myTask_1( void* taskParmPtr )
{
1a000480:	b530      	push	{r4, r5, lr}
1a000482:	b085      	sub	sp, #20
	char *PtrSOF = NULL;
	char *PtrEOF = NULL;

	gpioWrite( LED1, ON );
1a000484:	202b      	movs	r0, #43	; 0x2b
1a000486:	2101      	movs	r1, #1
1a000488:	f002 fb38 	bl	1a002afc <gpioWrite>
	vTaskDelay( 1000 / portTICK_RATE_MS );
1a00048c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000490:	f001 fa70 	bl	1a001974 <vTaskDelay>
	gpioWrite( LED1, OFF );
1a000494:	202b      	movs	r0, #43	; 0x2b
1a000496:	2100      	movs	r1, #0
1a000498:	f002 fb30 	bl	1a002afc <gpioWrite>

	// Tarea periodica cada 500 ms
	portTickType xPeriodicity =  500 / portTICK_RATE_MS;
	portTickType xLastWakeTime = xTaskGetTickCount();
1a00049c:	f001 f90c 	bl	1a0016b8 <xTaskGetTickCount>
1a0004a0:	9003      	str	r0, [sp, #12]

	while(TRUE) {
		/*Notifica que llego trama lista*/
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
1a0004a2:	2000      	movs	r0, #0
1a0004a4:	4601      	mov	r1, r0
1a0004a6:	4602      	mov	r2, r0
1a0004a8:	f04f 33ff 	mov.w	r3, #4294967295
1a0004ac:	f001 fcea 	bl	1a001e84 <xTaskNotifyWait>

		/*Proteger datos para hacer copia local*/
		taskENTER_CRITICAL();
1a0004b0:	f002 f890 	bl	1a0025d4 <vPortEnterCritical>
		Frame_parameters.BufferAux = ModuleData.pvPortMallocFunction(sizeof(Data.Buffer));
1a0004b4:	4b1f      	ldr	r3, [pc, #124]	; (1a000534 <myTask_1+0xb4>)
1a0004b6:	695b      	ldr	r3, [r3, #20]
1a0004b8:	206a      	movs	r0, #106	; 0x6a
1a0004ba:	2100      	movs	r1, #0
1a0004bc:	4798      	blx	r3
1a0004be:	4c1e      	ldr	r4, [pc, #120]	; (1a000538 <myTask_1+0xb8>)
1a0004c0:	60a0      	str	r0, [r4, #8]
		strcpy((char*)Frame_parameters.BufferAux,(const char*)Data.Buffer);
1a0004c2:	68a0      	ldr	r0, [r4, #8]
1a0004c4:	491d      	ldr	r1, [pc, #116]	; (1a00053c <myTask_1+0xbc>)
1a0004c6:	f004 f883 	bl	1a0045d0 <strcpy>
		taskEXIT_CRITICAL();
1a0004ca:	f002 f8a5 	bl	1a002618 <vPortExitCritical>

		/*Busco posición del inicio de la trama*/
		PtrSOF = strchr((const char*)Frame_parameters.BufferAux, Frame_parameters._SOF);
1a0004ce:	68a0      	ldr	r0, [r4, #8]
1a0004d0:	7821      	ldrb	r1, [r4, #0]
1a0004d2:	f004 f86f 	bl	1a0045b4 <strchr>

		if( PtrSOF != NULL ){
1a0004d6:	4601      	mov	r1, r0
1a0004d8:	b1a8      	cbz	r0, 1a000506 <myTask_1+0x86>
			Frame_parameters.T[0] =  ( *(PtrSOF +  OFFSET_TAMANO)-'0' )*10 + (*(PtrSOF +  OFFSET_TAMANO + 1)-'0' ) ; /*T[0] -'0' *10 + T[1] - '0'*/
1a0004da:	7882      	ldrb	r2, [r0, #2]
1a0004dc:	3a30      	subs	r2, #48	; 0x30
1a0004de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0004e2:	0050      	lsls	r0, r2, #1
1a0004e4:	78cb      	ldrb	r3, [r1, #3]
1a0004e6:	4403      	add	r3, r0
1a0004e8:	3b30      	subs	r3, #48	; 0x30
1a0004ea:	b2db      	uxtb	r3, r3
1a0004ec:	70a3      	strb	r3, [r4, #2]
			Frame_parameters.Operation = *(PtrSOF +  OFFSET_OP)-'0';
1a0004ee:	784b      	ldrb	r3, [r1, #1]
1a0004f0:	3b30      	subs	r3, #48	; 0x30
1a0004f2:	b2db      	uxtb	r3, r3
1a0004f4:	7063      	strb	r3, [r4, #1]
			ModuleData.xMaxStringLength = Frame_parameters.T[0] + NUM_ELEMENTOS_REST_FRAME; /* + los demas elementos del frame*/
1a0004f6:	78a3      	ldrb	r3, [r4, #2]
1a0004f8:	3306      	adds	r3, #6
1a0004fa:	490e      	ldr	r1, [pc, #56]	; (1a000534 <myTask_1+0xb4>)
1a0004fc:	710b      	strb	r3, [r1, #4]

			printf( "T %d\r\n",Frame_parameters.T[0]); // QUITAR
1a0004fe:	78a1      	ldrb	r1, [r4, #2]
1a000500:	480f      	ldr	r0, [pc, #60]	; (1a000540 <myTask_1+0xc0>)
1a000502:	f004 f83f 	bl	1a004584 <iprintf>
		}

		/*Envía el puntero al buffer con la trama a la cola*/
		ModuleDinamicMemory_send(&ModuleData,0,NULL,(char*)Frame_parameters.BufferAux, portMAX_DELAY);
1a000506:	4c0c      	ldr	r4, [pc, #48]	; (1a000538 <myTask_1+0xb8>)
1a000508:	68a3      	ldr	r3, [r4, #8]
1a00050a:	4d0a      	ldr	r5, [pc, #40]	; (1a000534 <myTask_1+0xb4>)
1a00050c:	f04f 32ff 	mov.w	r2, #4294967295
1a000510:	9200      	str	r2, [sp, #0]
1a000512:	4628      	mov	r0, r5
1a000514:	2100      	movs	r1, #0
1a000516:	460a      	mov	r2, r1
1a000518:	f7ff ff82 	bl	1a000420 <ModuleDinamicMemory_send>

		/*Libero memoria del buffer aux*/
		ModuleData.vPortFreeFunction(Frame_parameters.BufferAux );
1a00051c:	69ab      	ldr	r3, [r5, #24]
1a00051e:	68a0      	ldr	r0, [r4, #8]
1a000520:	4798      	blx	r3
		gpioToggle( LEDB );
1a000522:	202a      	movs	r0, #42	; 0x2a
1a000524:	f002 fb42 	bl	1a002bac <gpioToggle>

		/*sincronizar-Permite transmitir por uart lo que se recibe por la cola*/
		//xSemaphoreGive(SemTxUart);
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000528:	a803      	add	r0, sp, #12
1a00052a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a00052e:	f001 f9cf 	bl	1a0018d0 <vTaskDelayUntil>
	}
1a000532:	e7b6      	b.n	1a0004a2 <myTask_1+0x22>
1a000534:	10002c64 	.word	0x10002c64
1a000538:	10000000 	.word	0x10000000
1a00053c:	10002bf4 	.word	0x10002bf4
1a000540:	1a005280 	.word	0x1a005280

1a000544 <TaskTxUart>:

void Task_ReportHeap_OP3( void* taskParmPtr ){

}
/*===========Task receive==================================================================================*/
void TaskTxUart( void* taskParmPtr ){
1a000544:	b570      	push	{r4, r5, r6, lr}
	while(true){
		/*sincronizar-Permite transmitir por uart lo que se recibe por la cola*/
		//if( pdTRUE == xSemaphoreTake(SemTxUart,portMAX_DELAY) )
		{
			/*Recibe por la cola*/
			rx = ModuleDinamicMemory_receive(&ModuleData, portMAX_DELAY);
1a000546:	4d0e      	ldr	r5, [pc, #56]	; (1a000580 <TaskTxUart+0x3c>)
1a000548:	4628      	mov	r0, r5
1a00054a:	f04f 31ff 	mov.w	r1, #4294967295
1a00054e:	f7ff ff85 	bl	1a00045c <ModuleDinamicMemory_receive>
1a000552:	4604      	mov	r4, r0

			xSemaphoreTake(SemMutexUart,portMAX_DELAY);
1a000554:	4e0b      	ldr	r6, [pc, #44]	; (1a000584 <TaskTxUart+0x40>)
1a000556:	6830      	ldr	r0, [r6, #0]
1a000558:	f04f 31ff 	mov.w	r1, #4294967295
1a00055c:	f000 fcf4 	bl	1a000f48 <xQueueSemaphoreTake>
			printf( "rx %s\r\n",rx );
1a000560:	4809      	ldr	r0, [pc, #36]	; (1a000588 <TaskTxUart+0x44>)
1a000562:	4621      	mov	r1, r4
1a000564:	f004 f80e 	bl	1a004584 <iprintf>
			xSemaphoreGive(SemMutexUart);
1a000568:	6830      	ldr	r0, [r6, #0]
1a00056a:	2100      	movs	r1, #0
1a00056c:	460a      	mov	r2, r1
1a00056e:	460b      	mov	r3, r1
1a000570:	f000 fb02 	bl	1a000b78 <xQueueGenericSend>

			/*Libera memoria dinamica*/
			ModuleDinamicMemory_Free(&ModuleData, rx);
1a000574:	4628      	mov	r0, r5
1a000576:	4621      	mov	r1, r4
1a000578:	f7ff ff7c 	bl	1a000474 <ModuleDinamicMemory_Free>
		}
	}
1a00057c:	e7e3      	b.n	1a000546 <TaskTxUart+0x2>
1a00057e:	bf00      	nop
1a000580:	10002c64 	.word	0x10002c64
1a000584:	10002c84 	.word	0x10002c84
1a000588:	1a005288 	.word	0x1a005288

1a00058c <CallbackRx>:
}

void CallbackRx( void *noUsado ){
1a00058c:	b530      	push	{r4, r5, lr}
1a00058e:	b085      	sub	sp, #20

	UBaseType_t uxSavedInterruptStatus;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000590:	2300      	movs	r3, #0
1a000592:	9303      	str	r3, [sp, #12]

	char c = uartRxRead( UART_USB );
1a000594:	2003      	movs	r0, #3
1a000596:	f002 fc0b 	bl	1a002db0 <uartRxRead>

	/*Verifica Inicio de trama*/
	if( Frame_parameters._SOF == c) Data.StartFrame = 1;
1a00059a:	4b2b      	ldr	r3, [pc, #172]	; (1a000648 <CallbackRx+0xbc>)
1a00059c:	781b      	ldrb	r3, [r3, #0]
1a00059e:	4601      	mov	r1, r0
1a0005a0:	4283      	cmp	r3, r0
1a0005a2:	d103      	bne.n	1a0005ac <CallbackRx+0x20>
1a0005a4:	2201      	movs	r2, #1
1a0005a6:	4b29      	ldr	r3, [pc, #164]	; (1a00064c <CallbackRx+0xc0>)
1a0005a8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	if(Data.StartFrame){
1a0005ac:	4b27      	ldr	r3, [pc, #156]	; (1a00064c <CallbackRx+0xc0>)
1a0005ae:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
1a0005b2:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0005b6:	d045      	beq.n	1a000644 <CallbackRx+0xb8>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0005b8:	f3ef 8311 	mrs	r3, BASEPRI
1a0005bc:	f04f 02a0 	mov.w	r2, #160	; 0xa0
1a0005c0:	f382 8811 	msr	BASEPRI, r2
1a0005c4:	f3bf 8f6f 	isb	sy
1a0005c8:	f3bf 8f4f 	dsb	sy
		/*Porteger acceso al buffer*/
		taskENTER_CRITICAL_FROM_ISR();
		Data.Buffer[Data.Index++]= c;
1a0005cc:	4b1f      	ldr	r3, [pc, #124]	; (1a00064c <CallbackRx+0xc0>)
1a0005ce:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
1a0005d2:	b2d2      	uxtb	r2, r2
1a0005d4:	1c50      	adds	r0, r2, #1
1a0005d6:	b2c0      	uxtb	r0, r0
1a0005d8:	f883 006b 	strb.w	r0, [r3, #107]	; 0x6b
1a0005dc:	5499      	strb	r1, [r3, r2]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0005de:	2200      	movs	r2, #0
1a0005e0:	f382 8811 	msr	BASEPRI, r2
		taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
	}
	else return;

	if(Data.Index > sizeof(Data)-1) Data.Index =0;
1a0005e4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
1a0005e8:	b2db      	uxtb	r3, r3
1a0005ea:	2b6c      	cmp	r3, #108	; 0x6c
1a0005ec:	d902      	bls.n	1a0005f4 <CallbackRx+0x68>
1a0005ee:	4b17      	ldr	r3, [pc, #92]	; (1a00064c <CallbackRx+0xc0>)
1a0005f0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	Data.Buffer[Data.Index] = 0;  /*char NULL pos siguiente*/
1a0005f4:	4a15      	ldr	r2, [pc, #84]	; (1a00064c <CallbackRx+0xc0>)
1a0005f6:	f892 306b 	ldrb.w	r3, [r2, #107]	; 0x6b
1a0005fa:	b2db      	uxtb	r3, r3
1a0005fc:	2000      	movs	r0, #0
1a0005fe:	54d0      	strb	r0, [r2, r3]
	if(Frame_parameters._EOF == c){
1a000600:	4b11      	ldr	r3, [pc, #68]	; (1a000648 <CallbackRx+0xbc>)
1a000602:	7b1b      	ldrb	r3, [r3, #12]
1a000604:	b2db      	uxtb	r3, r3
1a000606:	428b      	cmp	r3, r1
1a000608:	d111      	bne.n	1a00062e <CallbackRx+0xa2>
		Data.StartFrame = 0;
1a00060a:	4615      	mov	r5, r2
1a00060c:	4604      	mov	r4, r0
1a00060e:	f885 006c 	strb.w	r0, [r5, #108]	; 0x6c
		Data.Ready = 1;
1a000612:	2301      	movs	r3, #1
1a000614:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
		xTaskNotifyFromISR(xTaskHandle_RxNotify,0,eNoAction,&xHigherPriorityTaskWoken);
1a000618:	4b0d      	ldr	r3, [pc, #52]	; (1a000650 <CallbackRx+0xc4>)
1a00061a:	6818      	ldr	r0, [r3, #0]
1a00061c:	ab03      	add	r3, sp, #12
1a00061e:	9300      	str	r3, [sp, #0]
1a000620:	4621      	mov	r1, r4
1a000622:	4622      	mov	r2, r4
1a000624:	4623      	mov	r3, r4
1a000626:	f001 fc79 	bl	1a001f1c <xTaskGenericNotifyFromISR>
		Data.Index =0;
1a00062a:	f885 406b 	strb.w	r4, [r5, #107]	; 0x6b
		//		xSemaphoreTakeFromISR(SemMutexUart,xHigherPriorityTaskWoken);
		//		printf( "Recibimos <<%s>> por UART\r\n", Data.Buffer );
		//		xSemaphoreGiveFromISR(SemMutexUart,xHigherPriorityTaskWoken);
	}
	if(xHigherPriorityTaskWoken) portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a00062e:	9b03      	ldr	r3, [sp, #12]
1a000630:	b143      	cbz	r3, 1a000644 <CallbackRx+0xb8>
1a000632:	b13b      	cbz	r3, 1a000644 <CallbackRx+0xb8>
1a000634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000638:	4b06      	ldr	r3, [pc, #24]	; (1a000654 <CallbackRx+0xc8>)
1a00063a:	601a      	str	r2, [r3, #0]
1a00063c:	f3bf 8f4f 	dsb	sy
1a000640:	f3bf 8f6f 	isb	sy
}
1a000644:	b005      	add	sp, #20
1a000646:	bd30      	pop	{r4, r5, pc}
1a000648:	10000000 	.word	0x10000000
1a00064c:	10002bf4 	.word	0x10002bf4
1a000650:	10000144 	.word	0x10000144
1a000654:	e000ed04 	.word	0xe000ed04

1a000658 <prvHeapInit>:
1a000658:	4a12      	ldr	r2, [pc, #72]	; (1a0006a4 <prvHeapInit+0x4c>)
1a00065a:	f012 0f07 	tst.w	r2, #7
1a00065e:	d01e      	beq.n	1a00069e <prvHeapInit+0x46>
1a000660:	1dd1      	adds	r1, r2, #7
1a000662:	f021 0107 	bic.w	r1, r1, #7
1a000666:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a00066a:	4413      	add	r3, r2
1a00066c:	460a      	mov	r2, r1
1a00066e:	480e      	ldr	r0, [pc, #56]	; (1a0006a8 <prvHeapInit+0x50>)
1a000670:	6002      	str	r2, [r0, #0]
1a000672:	2100      	movs	r1, #0
1a000674:	6041      	str	r1, [r0, #4]
1a000676:	4413      	add	r3, r2
1a000678:	3b08      	subs	r3, #8
1a00067a:	f023 0307 	bic.w	r3, r3, #7
1a00067e:	480b      	ldr	r0, [pc, #44]	; (1a0006ac <prvHeapInit+0x54>)
1a000680:	6003      	str	r3, [r0, #0]
1a000682:	6059      	str	r1, [r3, #4]
1a000684:	6019      	str	r1, [r3, #0]
1a000686:	1a99      	subs	r1, r3, r2
1a000688:	6051      	str	r1, [r2, #4]
1a00068a:	6013      	str	r3, [r2, #0]
1a00068c:	4b08      	ldr	r3, [pc, #32]	; (1a0006b0 <prvHeapInit+0x58>)
1a00068e:	6019      	str	r1, [r3, #0]
1a000690:	4b08      	ldr	r3, [pc, #32]	; (1a0006b4 <prvHeapInit+0x5c>)
1a000692:	6019      	str	r1, [r3, #0]
1a000694:	4b08      	ldr	r3, [pc, #32]	; (1a0006b8 <prvHeapInit+0x60>)
1a000696:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a00069a:	601a      	str	r2, [r3, #0]
1a00069c:	4770      	bx	lr
1a00069e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a0006a2:	e7e4      	b.n	1a00066e <prvHeapInit+0x16>
1a0006a4:	1000014c 	.word	0x1000014c
1a0006a8:	10002158 	.word	0x10002158
1a0006ac:	10000148 	.word	0x10000148
1a0006b0:	10002154 	.word	0x10002154
1a0006b4:	10002150 	.word	0x10002150
1a0006b8:	1000214c 	.word	0x1000214c

1a0006bc <prvInsertBlockIntoFreeList>:
1a0006bc:	b410      	push	{r4}
1a0006be:	4b13      	ldr	r3, [pc, #76]	; (1a00070c <prvInsertBlockIntoFreeList+0x50>)
1a0006c0:	681a      	ldr	r2, [r3, #0]
1a0006c2:	4282      	cmp	r2, r0
1a0006c4:	d31b      	bcc.n	1a0006fe <prvInsertBlockIntoFreeList+0x42>
1a0006c6:	6859      	ldr	r1, [r3, #4]
1a0006c8:	185c      	adds	r4, r3, r1
1a0006ca:	4284      	cmp	r4, r0
1a0006cc:	d103      	bne.n	1a0006d6 <prvInsertBlockIntoFreeList+0x1a>
1a0006ce:	6840      	ldr	r0, [r0, #4]
1a0006d0:	4401      	add	r1, r0
1a0006d2:	6059      	str	r1, [r3, #4]
1a0006d4:	4618      	mov	r0, r3
1a0006d6:	6841      	ldr	r1, [r0, #4]
1a0006d8:	1844      	adds	r4, r0, r1
1a0006da:	42a2      	cmp	r2, r4
1a0006dc:	d113      	bne.n	1a000706 <prvInsertBlockIntoFreeList+0x4a>
1a0006de:	4c0c      	ldr	r4, [pc, #48]	; (1a000710 <prvInsertBlockIntoFreeList+0x54>)
1a0006e0:	6824      	ldr	r4, [r4, #0]
1a0006e2:	42a2      	cmp	r2, r4
1a0006e4:	d00d      	beq.n	1a000702 <prvInsertBlockIntoFreeList+0x46>
1a0006e6:	6852      	ldr	r2, [r2, #4]
1a0006e8:	4411      	add	r1, r2
1a0006ea:	6041      	str	r1, [r0, #4]
1a0006ec:	681a      	ldr	r2, [r3, #0]
1a0006ee:	6812      	ldr	r2, [r2, #0]
1a0006f0:	6002      	str	r2, [r0, #0]
1a0006f2:	4298      	cmp	r0, r3
1a0006f4:	d000      	beq.n	1a0006f8 <prvInsertBlockIntoFreeList+0x3c>
1a0006f6:	6018      	str	r0, [r3, #0]
1a0006f8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0006fc:	4770      	bx	lr
1a0006fe:	4613      	mov	r3, r2
1a000700:	e7de      	b.n	1a0006c0 <prvInsertBlockIntoFreeList+0x4>
1a000702:	6004      	str	r4, [r0, #0]
1a000704:	e7f5      	b.n	1a0006f2 <prvInsertBlockIntoFreeList+0x36>
1a000706:	6002      	str	r2, [r0, #0]
1a000708:	e7f3      	b.n	1a0006f2 <prvInsertBlockIntoFreeList+0x36>
1a00070a:	bf00      	nop
1a00070c:	10002158 	.word	0x10002158
1a000710:	10000148 	.word	0x10000148

1a000714 <pvPortMalloc>:
1a000714:	b570      	push	{r4, r5, r6, lr}
1a000716:	4604      	mov	r4, r0
1a000718:	f000 ffc6 	bl	1a0016a8 <vTaskSuspendAll>
1a00071c:	4b3f      	ldr	r3, [pc, #252]	; (1a00081c <pvPortMalloc+0x108>)
1a00071e:	681b      	ldr	r3, [r3, #0]
1a000720:	b1a3      	cbz	r3, 1a00074c <pvPortMalloc+0x38>
1a000722:	4b3f      	ldr	r3, [pc, #252]	; (1a000820 <pvPortMalloc+0x10c>)
1a000724:	681b      	ldr	r3, [r3, #0]
1a000726:	421c      	tst	r4, r3
1a000728:	d013      	beq.n	1a000752 <pvPortMalloc+0x3e>
1a00072a:	f001 f857 	bl	1a0017dc <xTaskResumeAll>
1a00072e:	2600      	movs	r6, #0
1a000730:	f000 fd77 	bl	1a001222 <vApplicationMallocFailedHook>
1a000734:	f016 0f07 	tst.w	r6, #7
1a000738:	d06e      	beq.n	1a000818 <pvPortMalloc+0x104>
1a00073a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00073e:	f383 8811 	msr	BASEPRI, r3
1a000742:	f3bf 8f6f 	isb	sy
1a000746:	f3bf 8f4f 	dsb	sy
1a00074a:	e7fe      	b.n	1a00074a <pvPortMalloc+0x36>
1a00074c:	f7ff ff84 	bl	1a000658 <prvHeapInit>
1a000750:	e7e7      	b.n	1a000722 <pvPortMalloc+0xe>
1a000752:	b194      	cbz	r4, 1a00077a <pvPortMalloc+0x66>
1a000754:	3408      	adds	r4, #8
1a000756:	f014 0f07 	tst.w	r4, #7
1a00075a:	d00e      	beq.n	1a00077a <pvPortMalloc+0x66>
1a00075c:	f024 0407 	bic.w	r4, r4, #7
1a000760:	3408      	adds	r4, #8
1a000762:	f004 0307 	and.w	r3, r4, #7
1a000766:	b143      	cbz	r3, 1a00077a <pvPortMalloc+0x66>
1a000768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00076c:	f383 8811 	msr	BASEPRI, r3
1a000770:	f3bf 8f6f 	isb	sy
1a000774:	f3bf 8f4f 	dsb	sy
1a000778:	e7fe      	b.n	1a000778 <pvPortMalloc+0x64>
1a00077a:	b134      	cbz	r4, 1a00078a <pvPortMalloc+0x76>
1a00077c:	4b29      	ldr	r3, [pc, #164]	; (1a000824 <pvPortMalloc+0x110>)
1a00077e:	681b      	ldr	r3, [r3, #0]
1a000780:	42a3      	cmp	r3, r4
1a000782:	d306      	bcc.n	1a000792 <pvPortMalloc+0x7e>
1a000784:	4b28      	ldr	r3, [pc, #160]	; (1a000828 <pvPortMalloc+0x114>)
1a000786:	681d      	ldr	r5, [r3, #0]
1a000788:	e009      	b.n	1a00079e <pvPortMalloc+0x8a>
1a00078a:	f001 f827 	bl	1a0017dc <xTaskResumeAll>
1a00078e:	2600      	movs	r6, #0
1a000790:	e7ce      	b.n	1a000730 <pvPortMalloc+0x1c>
1a000792:	f001 f823 	bl	1a0017dc <xTaskResumeAll>
1a000796:	2600      	movs	r6, #0
1a000798:	e7ca      	b.n	1a000730 <pvPortMalloc+0x1c>
1a00079a:	462b      	mov	r3, r5
1a00079c:	4615      	mov	r5, r2
1a00079e:	686a      	ldr	r2, [r5, #4]
1a0007a0:	42a2      	cmp	r2, r4
1a0007a2:	d202      	bcs.n	1a0007aa <pvPortMalloc+0x96>
1a0007a4:	682a      	ldr	r2, [r5, #0]
1a0007a6:	2a00      	cmp	r2, #0
1a0007a8:	d1f7      	bne.n	1a00079a <pvPortMalloc+0x86>
1a0007aa:	4a1c      	ldr	r2, [pc, #112]	; (1a00081c <pvPortMalloc+0x108>)
1a0007ac:	6812      	ldr	r2, [r2, #0]
1a0007ae:	42aa      	cmp	r2, r5
1a0007b0:	d014      	beq.n	1a0007dc <pvPortMalloc+0xc8>
1a0007b2:	681e      	ldr	r6, [r3, #0]
1a0007b4:	3608      	adds	r6, #8
1a0007b6:	682a      	ldr	r2, [r5, #0]
1a0007b8:	601a      	str	r2, [r3, #0]
1a0007ba:	686b      	ldr	r3, [r5, #4]
1a0007bc:	1b1b      	subs	r3, r3, r4
1a0007be:	2b10      	cmp	r3, #16
1a0007c0:	d914      	bls.n	1a0007ec <pvPortMalloc+0xd8>
1a0007c2:	1928      	adds	r0, r5, r4
1a0007c4:	f010 0f07 	tst.w	r0, #7
1a0007c8:	d00c      	beq.n	1a0007e4 <pvPortMalloc+0xd0>
1a0007ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007ce:	f383 8811 	msr	BASEPRI, r3
1a0007d2:	f3bf 8f6f 	isb	sy
1a0007d6:	f3bf 8f4f 	dsb	sy
1a0007da:	e7fe      	b.n	1a0007da <pvPortMalloc+0xc6>
1a0007dc:	f000 fffe 	bl	1a0017dc <xTaskResumeAll>
1a0007e0:	2600      	movs	r6, #0
1a0007e2:	e7a5      	b.n	1a000730 <pvPortMalloc+0x1c>
1a0007e4:	6043      	str	r3, [r0, #4]
1a0007e6:	606c      	str	r4, [r5, #4]
1a0007e8:	f7ff ff68 	bl	1a0006bc <prvInsertBlockIntoFreeList>
1a0007ec:	686a      	ldr	r2, [r5, #4]
1a0007ee:	490d      	ldr	r1, [pc, #52]	; (1a000824 <pvPortMalloc+0x110>)
1a0007f0:	680b      	ldr	r3, [r1, #0]
1a0007f2:	1a9b      	subs	r3, r3, r2
1a0007f4:	600b      	str	r3, [r1, #0]
1a0007f6:	490d      	ldr	r1, [pc, #52]	; (1a00082c <pvPortMalloc+0x118>)
1a0007f8:	6809      	ldr	r1, [r1, #0]
1a0007fa:	428b      	cmp	r3, r1
1a0007fc:	d201      	bcs.n	1a000802 <pvPortMalloc+0xee>
1a0007fe:	490b      	ldr	r1, [pc, #44]	; (1a00082c <pvPortMalloc+0x118>)
1a000800:	600b      	str	r3, [r1, #0]
1a000802:	4b07      	ldr	r3, [pc, #28]	; (1a000820 <pvPortMalloc+0x10c>)
1a000804:	681b      	ldr	r3, [r3, #0]
1a000806:	4313      	orrs	r3, r2
1a000808:	606b      	str	r3, [r5, #4]
1a00080a:	2300      	movs	r3, #0
1a00080c:	602b      	str	r3, [r5, #0]
1a00080e:	f000 ffe5 	bl	1a0017dc <xTaskResumeAll>
1a000812:	2e00      	cmp	r6, #0
1a000814:	d18e      	bne.n	1a000734 <pvPortMalloc+0x20>
1a000816:	e78b      	b.n	1a000730 <pvPortMalloc+0x1c>
1a000818:	4630      	mov	r0, r6
1a00081a:	bd70      	pop	{r4, r5, r6, pc}
1a00081c:	10000148 	.word	0x10000148
1a000820:	1000214c 	.word	0x1000214c
1a000824:	10002150 	.word	0x10002150
1a000828:	10002158 	.word	0x10002158
1a00082c:	10002154 	.word	0x10002154

1a000830 <vPortFree>:
1a000830:	b380      	cbz	r0, 1a000894 <vPortFree+0x64>
1a000832:	b538      	push	{r3, r4, r5, lr}
1a000834:	4604      	mov	r4, r0
1a000836:	f1a0 0508 	sub.w	r5, r0, #8
1a00083a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00083e:	4916      	ldr	r1, [pc, #88]	; (1a000898 <vPortFree+0x68>)
1a000840:	6809      	ldr	r1, [r1, #0]
1a000842:	420a      	tst	r2, r1
1a000844:	d108      	bne.n	1a000858 <vPortFree+0x28>
1a000846:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00084a:	f383 8811 	msr	BASEPRI, r3
1a00084e:	f3bf 8f6f 	isb	sy
1a000852:	f3bf 8f4f 	dsb	sy
1a000856:	e7fe      	b.n	1a000856 <vPortFree+0x26>
1a000858:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a00085c:	b140      	cbz	r0, 1a000870 <vPortFree+0x40>
1a00085e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000862:	f383 8811 	msr	BASEPRI, r3
1a000866:	f3bf 8f6f 	isb	sy
1a00086a:	f3bf 8f4f 	dsb	sy
1a00086e:	e7fe      	b.n	1a00086e <vPortFree+0x3e>
1a000870:	ea22 0201 	bic.w	r2, r2, r1
1a000874:	f844 2c04 	str.w	r2, [r4, #-4]
1a000878:	f000 ff16 	bl	1a0016a8 <vTaskSuspendAll>
1a00087c:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000880:	4a06      	ldr	r2, [pc, #24]	; (1a00089c <vPortFree+0x6c>)
1a000882:	6813      	ldr	r3, [r2, #0]
1a000884:	440b      	add	r3, r1
1a000886:	6013      	str	r3, [r2, #0]
1a000888:	4628      	mov	r0, r5
1a00088a:	f7ff ff17 	bl	1a0006bc <prvInsertBlockIntoFreeList>
1a00088e:	f000 ffa5 	bl	1a0017dc <xTaskResumeAll>
1a000892:	bd38      	pop	{r3, r4, r5, pc}
1a000894:	4770      	bx	lr
1a000896:	bf00      	nop
1a000898:	1000214c 	.word	0x1000214c
1a00089c:	10002150 	.word	0x10002150

1a0008a0 <prvGetDisinheritPriorityAfterTimeout>:
1a0008a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a0008a2:	b123      	cbz	r3, 1a0008ae <prvGetDisinheritPriorityAfterTimeout+0xe>
1a0008a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0008a6:	6818      	ldr	r0, [r3, #0]
1a0008a8:	f1c0 0007 	rsb	r0, r0, #7
1a0008ac:	4770      	bx	lr
1a0008ae:	2000      	movs	r0, #0
1a0008b0:	4770      	bx	lr

1a0008b2 <prvIsQueueFull>:
1a0008b2:	b510      	push	{r4, lr}
1a0008b4:	4604      	mov	r4, r0
1a0008b6:	f001 fe8d 	bl	1a0025d4 <vPortEnterCritical>
1a0008ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0008bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0008be:	429a      	cmp	r2, r3
1a0008c0:	d004      	beq.n	1a0008cc <prvIsQueueFull+0x1a>
1a0008c2:	2400      	movs	r4, #0
1a0008c4:	f001 fea8 	bl	1a002618 <vPortExitCritical>
1a0008c8:	4620      	mov	r0, r4
1a0008ca:	bd10      	pop	{r4, pc}
1a0008cc:	2401      	movs	r4, #1
1a0008ce:	e7f9      	b.n	1a0008c4 <prvIsQueueFull+0x12>

1a0008d0 <prvIsQueueEmpty>:
1a0008d0:	b510      	push	{r4, lr}
1a0008d2:	4604      	mov	r4, r0
1a0008d4:	f001 fe7e 	bl	1a0025d4 <vPortEnterCritical>
1a0008d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0008da:	b123      	cbz	r3, 1a0008e6 <prvIsQueueEmpty+0x16>
1a0008dc:	2400      	movs	r4, #0
1a0008de:	f001 fe9b 	bl	1a002618 <vPortExitCritical>
1a0008e2:	4620      	mov	r0, r4
1a0008e4:	bd10      	pop	{r4, pc}
1a0008e6:	2401      	movs	r4, #1
1a0008e8:	e7f9      	b.n	1a0008de <prvIsQueueEmpty+0xe>

1a0008ea <prvCopyDataToQueue>:
1a0008ea:	b570      	push	{r4, r5, r6, lr}
1a0008ec:	4604      	mov	r4, r0
1a0008ee:	4616      	mov	r6, r2
1a0008f0:	6b85      	ldr	r5, [r0, #56]	; 0x38
1a0008f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0008f4:	b95a      	cbnz	r2, 1a00090e <prvCopyDataToQueue+0x24>
1a0008f6:	6803      	ldr	r3, [r0, #0]
1a0008f8:	b11b      	cbz	r3, 1a000902 <prvCopyDataToQueue+0x18>
1a0008fa:	2000      	movs	r0, #0
1a0008fc:	3501      	adds	r5, #1
1a0008fe:	63a5      	str	r5, [r4, #56]	; 0x38
1a000900:	bd70      	pop	{r4, r5, r6, pc}
1a000902:	6840      	ldr	r0, [r0, #4]
1a000904:	f001 f9f8 	bl	1a001cf8 <xTaskPriorityDisinherit>
1a000908:	2300      	movs	r3, #0
1a00090a:	6063      	str	r3, [r4, #4]
1a00090c:	e7f6      	b.n	1a0008fc <prvCopyDataToQueue+0x12>
1a00090e:	b96e      	cbnz	r6, 1a00092c <prvCopyDataToQueue+0x42>
1a000910:	6880      	ldr	r0, [r0, #8]
1a000912:	f003 fe23 	bl	1a00455c <memcpy>
1a000916:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000918:	68a3      	ldr	r3, [r4, #8]
1a00091a:	4413      	add	r3, r2
1a00091c:	60a3      	str	r3, [r4, #8]
1a00091e:	6862      	ldr	r2, [r4, #4]
1a000920:	4293      	cmp	r3, r2
1a000922:	d319      	bcc.n	1a000958 <prvCopyDataToQueue+0x6e>
1a000924:	6823      	ldr	r3, [r4, #0]
1a000926:	60a3      	str	r3, [r4, #8]
1a000928:	2000      	movs	r0, #0
1a00092a:	e7e7      	b.n	1a0008fc <prvCopyDataToQueue+0x12>
1a00092c:	68c0      	ldr	r0, [r0, #12]
1a00092e:	f003 fe15 	bl	1a00455c <memcpy>
1a000932:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000934:	4252      	negs	r2, r2
1a000936:	68e3      	ldr	r3, [r4, #12]
1a000938:	4413      	add	r3, r2
1a00093a:	60e3      	str	r3, [r4, #12]
1a00093c:	6821      	ldr	r1, [r4, #0]
1a00093e:	428b      	cmp	r3, r1
1a000940:	d202      	bcs.n	1a000948 <prvCopyDataToQueue+0x5e>
1a000942:	6863      	ldr	r3, [r4, #4]
1a000944:	441a      	add	r2, r3
1a000946:	60e2      	str	r2, [r4, #12]
1a000948:	2e02      	cmp	r6, #2
1a00094a:	d001      	beq.n	1a000950 <prvCopyDataToQueue+0x66>
1a00094c:	2000      	movs	r0, #0
1a00094e:	e7d5      	b.n	1a0008fc <prvCopyDataToQueue+0x12>
1a000950:	b125      	cbz	r5, 1a00095c <prvCopyDataToQueue+0x72>
1a000952:	3d01      	subs	r5, #1
1a000954:	2000      	movs	r0, #0
1a000956:	e7d1      	b.n	1a0008fc <prvCopyDataToQueue+0x12>
1a000958:	2000      	movs	r0, #0
1a00095a:	e7cf      	b.n	1a0008fc <prvCopyDataToQueue+0x12>
1a00095c:	2000      	movs	r0, #0
1a00095e:	e7cd      	b.n	1a0008fc <prvCopyDataToQueue+0x12>

1a000960 <prvCopyDataFromQueue>:
1a000960:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000962:	b172      	cbz	r2, 1a000982 <prvCopyDataFromQueue+0x22>
1a000964:	b510      	push	{r4, lr}
1a000966:	68c3      	ldr	r3, [r0, #12]
1a000968:	4413      	add	r3, r2
1a00096a:	60c3      	str	r3, [r0, #12]
1a00096c:	6844      	ldr	r4, [r0, #4]
1a00096e:	42a3      	cmp	r3, r4
1a000970:	d301      	bcc.n	1a000976 <prvCopyDataFromQueue+0x16>
1a000972:	6803      	ldr	r3, [r0, #0]
1a000974:	60c3      	str	r3, [r0, #12]
1a000976:	460c      	mov	r4, r1
1a000978:	68c1      	ldr	r1, [r0, #12]
1a00097a:	4620      	mov	r0, r4
1a00097c:	f003 fdee 	bl	1a00455c <memcpy>
1a000980:	bd10      	pop	{r4, pc}
1a000982:	4770      	bx	lr

1a000984 <prvUnlockQueue>:
1a000984:	b538      	push	{r3, r4, r5, lr}
1a000986:	4605      	mov	r5, r0
1a000988:	f001 fe24 	bl	1a0025d4 <vPortEnterCritical>
1a00098c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000990:	b264      	sxtb	r4, r4
1a000992:	e003      	b.n	1a00099c <prvUnlockQueue+0x18>
1a000994:	f001 f93e 	bl	1a001c14 <vTaskMissedYield>
1a000998:	3c01      	subs	r4, #1
1a00099a:	b264      	sxtb	r4, r4
1a00099c:	2c00      	cmp	r4, #0
1a00099e:	dd08      	ble.n	1a0009b2 <prvUnlockQueue+0x2e>
1a0009a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0009a2:	b133      	cbz	r3, 1a0009b2 <prvUnlockQueue+0x2e>
1a0009a4:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0009a8:	f001 f8a2 	bl	1a001af0 <xTaskRemoveFromEventList>
1a0009ac:	2800      	cmp	r0, #0
1a0009ae:	d0f3      	beq.n	1a000998 <prvUnlockQueue+0x14>
1a0009b0:	e7f0      	b.n	1a000994 <prvUnlockQueue+0x10>
1a0009b2:	23ff      	movs	r3, #255	; 0xff
1a0009b4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
1a0009b8:	f001 fe2e 	bl	1a002618 <vPortExitCritical>
1a0009bc:	f001 fe0a 	bl	1a0025d4 <vPortEnterCritical>
1a0009c0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0009c4:	b264      	sxtb	r4, r4
1a0009c6:	e003      	b.n	1a0009d0 <prvUnlockQueue+0x4c>
1a0009c8:	f001 f924 	bl	1a001c14 <vTaskMissedYield>
1a0009cc:	3c01      	subs	r4, #1
1a0009ce:	b264      	sxtb	r4, r4
1a0009d0:	2c00      	cmp	r4, #0
1a0009d2:	dd08      	ble.n	1a0009e6 <prvUnlockQueue+0x62>
1a0009d4:	692b      	ldr	r3, [r5, #16]
1a0009d6:	b133      	cbz	r3, 1a0009e6 <prvUnlockQueue+0x62>
1a0009d8:	f105 0010 	add.w	r0, r5, #16
1a0009dc:	f001 f888 	bl	1a001af0 <xTaskRemoveFromEventList>
1a0009e0:	2800      	cmp	r0, #0
1a0009e2:	d0f3      	beq.n	1a0009cc <prvUnlockQueue+0x48>
1a0009e4:	e7f0      	b.n	1a0009c8 <prvUnlockQueue+0x44>
1a0009e6:	23ff      	movs	r3, #255	; 0xff
1a0009e8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
1a0009ec:	f001 fe14 	bl	1a002618 <vPortExitCritical>
1a0009f0:	bd38      	pop	{r3, r4, r5, pc}
	...

1a0009f4 <xQueueGenericReset>:
1a0009f4:	b538      	push	{r3, r4, r5, lr}
1a0009f6:	b940      	cbnz	r0, 1a000a0a <xQueueGenericReset+0x16>
1a0009f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009fc:	f383 8811 	msr	BASEPRI, r3
1a000a00:	f3bf 8f6f 	isb	sy
1a000a04:	f3bf 8f4f 	dsb	sy
1a000a08:	e7fe      	b.n	1a000a08 <xQueueGenericReset+0x14>
1a000a0a:	4604      	mov	r4, r0
1a000a0c:	460d      	mov	r5, r1
1a000a0e:	f001 fde1 	bl	1a0025d4 <vPortEnterCritical>
1a000a12:	6821      	ldr	r1, [r4, #0]
1a000a14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000a18:	fb03 1002 	mla	r0, r3, r2, r1
1a000a1c:	6060      	str	r0, [r4, #4]
1a000a1e:	2000      	movs	r0, #0
1a000a20:	63a0      	str	r0, [r4, #56]	; 0x38
1a000a22:	60a1      	str	r1, [r4, #8]
1a000a24:	3a01      	subs	r2, #1
1a000a26:	fb02 1303 	mla	r3, r2, r3, r1
1a000a2a:	60e3      	str	r3, [r4, #12]
1a000a2c:	23ff      	movs	r3, #255	; 0xff
1a000a2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000a36:	b9a5      	cbnz	r5, 1a000a62 <xQueueGenericReset+0x6e>
1a000a38:	6923      	ldr	r3, [r4, #16]
1a000a3a:	b91b      	cbnz	r3, 1a000a44 <xQueueGenericReset+0x50>
1a000a3c:	f001 fdec 	bl	1a002618 <vPortExitCritical>
1a000a40:	2001      	movs	r0, #1
1a000a42:	bd38      	pop	{r3, r4, r5, pc}
1a000a44:	f104 0010 	add.w	r0, r4, #16
1a000a48:	f001 f852 	bl	1a001af0 <xTaskRemoveFromEventList>
1a000a4c:	2800      	cmp	r0, #0
1a000a4e:	d0f5      	beq.n	1a000a3c <xQueueGenericReset+0x48>
1a000a50:	4b08      	ldr	r3, [pc, #32]	; (1a000a74 <xQueueGenericReset+0x80>)
1a000a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a56:	601a      	str	r2, [r3, #0]
1a000a58:	f3bf 8f4f 	dsb	sy
1a000a5c:	f3bf 8f6f 	isb	sy
1a000a60:	e7ec      	b.n	1a000a3c <xQueueGenericReset+0x48>
1a000a62:	f104 0010 	add.w	r0, r4, #16
1a000a66:	f000 fb7a 	bl	1a00115e <vListInitialise>
1a000a6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a6e:	f000 fb76 	bl	1a00115e <vListInitialise>
1a000a72:	e7e3      	b.n	1a000a3c <xQueueGenericReset+0x48>
1a000a74:	e000ed04 	.word	0xe000ed04

1a000a78 <prvInitialiseNewQueue>:
1a000a78:	b538      	push	{r3, r4, r5, lr}
1a000a7a:	461d      	mov	r5, r3
1a000a7c:	9c04      	ldr	r4, [sp, #16]
1a000a7e:	460b      	mov	r3, r1
1a000a80:	b149      	cbz	r1, 1a000a96 <prvInitialiseNewQueue+0x1e>
1a000a82:	6022      	str	r2, [r4, #0]
1a000a84:	63e0      	str	r0, [r4, #60]	; 0x3c
1a000a86:	6423      	str	r3, [r4, #64]	; 0x40
1a000a88:	2101      	movs	r1, #1
1a000a8a:	4620      	mov	r0, r4
1a000a8c:	f7ff ffb2 	bl	1a0009f4 <xQueueGenericReset>
1a000a90:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a000a94:	bd38      	pop	{r3, r4, r5, pc}
1a000a96:	6024      	str	r4, [r4, #0]
1a000a98:	e7f4      	b.n	1a000a84 <prvInitialiseNewQueue+0xc>

1a000a9a <xQueueGenericCreateStatic>:
1a000a9a:	b940      	cbnz	r0, 1a000aae <xQueueGenericCreateStatic+0x14>
1a000a9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aa0:	f383 8811 	msr	BASEPRI, r3
1a000aa4:	f3bf 8f6f 	isb	sy
1a000aa8:	f3bf 8f4f 	dsb	sy
1a000aac:	e7fe      	b.n	1a000aac <xQueueGenericCreateStatic+0x12>
1a000aae:	b510      	push	{r4, lr}
1a000ab0:	b084      	sub	sp, #16
1a000ab2:	4604      	mov	r4, r0
1a000ab4:	b153      	cbz	r3, 1a000acc <xQueueGenericCreateStatic+0x32>
1a000ab6:	b192      	cbz	r2, 1a000ade <xQueueGenericCreateStatic+0x44>
1a000ab8:	b989      	cbnz	r1, 1a000ade <xQueueGenericCreateStatic+0x44>
1a000aba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000abe:	f383 8811 	msr	BASEPRI, r3
1a000ac2:	f3bf 8f6f 	isb	sy
1a000ac6:	f3bf 8f4f 	dsb	sy
1a000aca:	e7fe      	b.n	1a000aca <xQueueGenericCreateStatic+0x30>
1a000acc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ad0:	f383 8811 	msr	BASEPRI, r3
1a000ad4:	f3bf 8f6f 	isb	sy
1a000ad8:	f3bf 8f4f 	dsb	sy
1a000adc:	e7fe      	b.n	1a000adc <xQueueGenericCreateStatic+0x42>
1a000ade:	b94a      	cbnz	r2, 1a000af4 <xQueueGenericCreateStatic+0x5a>
1a000ae0:	b141      	cbz	r1, 1a000af4 <xQueueGenericCreateStatic+0x5a>
1a000ae2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ae6:	f383 8811 	msr	BASEPRI, r3
1a000aea:	f3bf 8f6f 	isb	sy
1a000aee:	f3bf 8f4f 	dsb	sy
1a000af2:	e7fe      	b.n	1a000af2 <xQueueGenericCreateStatic+0x58>
1a000af4:	2050      	movs	r0, #80	; 0x50
1a000af6:	9003      	str	r0, [sp, #12]
1a000af8:	9803      	ldr	r0, [sp, #12]
1a000afa:	2850      	cmp	r0, #80	; 0x50
1a000afc:	d008      	beq.n	1a000b10 <xQueueGenericCreateStatic+0x76>
1a000afe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b02:	f383 8811 	msr	BASEPRI, r3
1a000b06:	f3bf 8f6f 	isb	sy
1a000b0a:	f3bf 8f4f 	dsb	sy
1a000b0e:	e7fe      	b.n	1a000b0e <xQueueGenericCreateStatic+0x74>
1a000b10:	4620      	mov	r0, r4
1a000b12:	461c      	mov	r4, r3
1a000b14:	2301      	movs	r3, #1
1a000b16:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
1a000b1a:	9400      	str	r4, [sp, #0]
1a000b1c:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000b20:	f7ff ffaa 	bl	1a000a78 <prvInitialiseNewQueue>
1a000b24:	4620      	mov	r0, r4
1a000b26:	b004      	add	sp, #16
1a000b28:	bd10      	pop	{r4, pc}

1a000b2a <xQueueGenericCreate>:
1a000b2a:	b940      	cbnz	r0, 1a000b3e <xQueueGenericCreate+0x14>
1a000b2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b30:	f383 8811 	msr	BASEPRI, r3
1a000b34:	f3bf 8f6f 	isb	sy
1a000b38:	f3bf 8f4f 	dsb	sy
1a000b3c:	e7fe      	b.n	1a000b3c <xQueueGenericCreate+0x12>
1a000b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b40:	b083      	sub	sp, #12
1a000b42:	4606      	mov	r6, r0
1a000b44:	b111      	cbz	r1, 1a000b4c <xQueueGenericCreate+0x22>
1a000b46:	fb01 f000 	mul.w	r0, r1, r0
1a000b4a:	e000      	b.n	1a000b4e <xQueueGenericCreate+0x24>
1a000b4c:	2000      	movs	r0, #0
1a000b4e:	4617      	mov	r7, r2
1a000b50:	460c      	mov	r4, r1
1a000b52:	3050      	adds	r0, #80	; 0x50
1a000b54:	f7ff fdde 	bl	1a000714 <pvPortMalloc>
1a000b58:	4605      	mov	r5, r0
1a000b5a:	b150      	cbz	r0, 1a000b72 <xQueueGenericCreate+0x48>
1a000b5c:	2300      	movs	r3, #0
1a000b5e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
1a000b62:	9000      	str	r0, [sp, #0]
1a000b64:	463b      	mov	r3, r7
1a000b66:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000b6a:	4621      	mov	r1, r4
1a000b6c:	4630      	mov	r0, r6
1a000b6e:	f7ff ff83 	bl	1a000a78 <prvInitialiseNewQueue>
1a000b72:	4628      	mov	r0, r5
1a000b74:	b003      	add	sp, #12
1a000b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000b78 <xQueueGenericSend>:
1a000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b7a:	b085      	sub	sp, #20
1a000b7c:	9201      	str	r2, [sp, #4]
1a000b7e:	b160      	cbz	r0, 1a000b9a <xQueueGenericSend+0x22>
1a000b80:	4604      	mov	r4, r0
1a000b82:	b999      	cbnz	r1, 1a000bac <xQueueGenericSend+0x34>
1a000b84:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000b86:	b18a      	cbz	r2, 1a000bac <xQueueGenericSend+0x34>
1a000b88:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b8c:	f383 8811 	msr	BASEPRI, r3
1a000b90:	f3bf 8f6f 	isb	sy
1a000b94:	f3bf 8f4f 	dsb	sy
1a000b98:	e7fe      	b.n	1a000b98 <xQueueGenericSend+0x20>
1a000b9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b9e:	f383 8811 	msr	BASEPRI, r3
1a000ba2:	f3bf 8f6f 	isb	sy
1a000ba6:	f3bf 8f4f 	dsb	sy
1a000baa:	e7fe      	b.n	1a000baa <xQueueGenericSend+0x32>
1a000bac:	2b02      	cmp	r3, #2
1a000bae:	d10b      	bne.n	1a000bc8 <xQueueGenericSend+0x50>
1a000bb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000bb2:	2a01      	cmp	r2, #1
1a000bb4:	d008      	beq.n	1a000bc8 <xQueueGenericSend+0x50>
1a000bb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bba:	f383 8811 	msr	BASEPRI, r3
1a000bbe:	f3bf 8f6f 	isb	sy
1a000bc2:	f3bf 8f4f 	dsb	sy
1a000bc6:	e7fe      	b.n	1a000bc6 <xQueueGenericSend+0x4e>
1a000bc8:	461e      	mov	r6, r3
1a000bca:	460f      	mov	r7, r1
1a000bcc:	f001 f828 	bl	1a001c20 <xTaskGetSchedulerState>
1a000bd0:	b950      	cbnz	r0, 1a000be8 <xQueueGenericSend+0x70>
1a000bd2:	9b01      	ldr	r3, [sp, #4]
1a000bd4:	b153      	cbz	r3, 1a000bec <xQueueGenericSend+0x74>
1a000bd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bda:	f383 8811 	msr	BASEPRI, r3
1a000bde:	f3bf 8f6f 	isb	sy
1a000be2:	f3bf 8f4f 	dsb	sy
1a000be6:	e7fe      	b.n	1a000be6 <xQueueGenericSend+0x6e>
1a000be8:	2500      	movs	r5, #0
1a000bea:	e03a      	b.n	1a000c62 <xQueueGenericSend+0xea>
1a000bec:	2500      	movs	r5, #0
1a000bee:	e038      	b.n	1a000c62 <xQueueGenericSend+0xea>
1a000bf0:	4632      	mov	r2, r6
1a000bf2:	4639      	mov	r1, r7
1a000bf4:	4620      	mov	r0, r4
1a000bf6:	f7ff fe78 	bl	1a0008ea <prvCopyDataToQueue>
1a000bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000bfc:	b94b      	cbnz	r3, 1a000c12 <xQueueGenericSend+0x9a>
1a000bfe:	b1a8      	cbz	r0, 1a000c2c <xQueueGenericSend+0xb4>
1a000c00:	4b3b      	ldr	r3, [pc, #236]	; (1a000cf0 <xQueueGenericSend+0x178>)
1a000c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c06:	601a      	str	r2, [r3, #0]
1a000c08:	f3bf 8f4f 	dsb	sy
1a000c0c:	f3bf 8f6f 	isb	sy
1a000c10:	e00c      	b.n	1a000c2c <xQueueGenericSend+0xb4>
1a000c12:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000c16:	f000 ff6b 	bl	1a001af0 <xTaskRemoveFromEventList>
1a000c1a:	b138      	cbz	r0, 1a000c2c <xQueueGenericSend+0xb4>
1a000c1c:	4b34      	ldr	r3, [pc, #208]	; (1a000cf0 <xQueueGenericSend+0x178>)
1a000c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c22:	601a      	str	r2, [r3, #0]
1a000c24:	f3bf 8f4f 	dsb	sy
1a000c28:	f3bf 8f6f 	isb	sy
1a000c2c:	f001 fcf4 	bl	1a002618 <vPortExitCritical>
1a000c30:	2001      	movs	r0, #1
1a000c32:	b005      	add	sp, #20
1a000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000c36:	f001 fcef 	bl	1a002618 <vPortExitCritical>
1a000c3a:	2000      	movs	r0, #0
1a000c3c:	e7f9      	b.n	1a000c32 <xQueueGenericSend+0xba>
1a000c3e:	a802      	add	r0, sp, #8
1a000c40:	f000 ff9c 	bl	1a001b7c <vTaskInternalSetTimeOutState>
1a000c44:	2501      	movs	r5, #1
1a000c46:	e019      	b.n	1a000c7c <xQueueGenericSend+0x104>
1a000c48:	2300      	movs	r3, #0
1a000c4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000c4e:	e021      	b.n	1a000c94 <xQueueGenericSend+0x11c>
1a000c50:	2300      	movs	r3, #0
1a000c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000c56:	e023      	b.n	1a000ca0 <xQueueGenericSend+0x128>
1a000c58:	4620      	mov	r0, r4
1a000c5a:	f7ff fe93 	bl	1a000984 <prvUnlockQueue>
1a000c5e:	f000 fdbd 	bl	1a0017dc <xTaskResumeAll>
1a000c62:	f001 fcb7 	bl	1a0025d4 <vPortEnterCritical>
1a000c66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c6a:	429a      	cmp	r2, r3
1a000c6c:	d3c0      	bcc.n	1a000bf0 <xQueueGenericSend+0x78>
1a000c6e:	2e02      	cmp	r6, #2
1a000c70:	d0be      	beq.n	1a000bf0 <xQueueGenericSend+0x78>
1a000c72:	9b01      	ldr	r3, [sp, #4]
1a000c74:	2b00      	cmp	r3, #0
1a000c76:	d0de      	beq.n	1a000c36 <xQueueGenericSend+0xbe>
1a000c78:	2d00      	cmp	r5, #0
1a000c7a:	d0e0      	beq.n	1a000c3e <xQueueGenericSend+0xc6>
1a000c7c:	f001 fccc 	bl	1a002618 <vPortExitCritical>
1a000c80:	f000 fd12 	bl	1a0016a8 <vTaskSuspendAll>
1a000c84:	f001 fca6 	bl	1a0025d4 <vPortEnterCritical>
1a000c88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000c8c:	b25b      	sxtb	r3, r3
1a000c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000c92:	d0d9      	beq.n	1a000c48 <xQueueGenericSend+0xd0>
1a000c94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000c98:	b25b      	sxtb	r3, r3
1a000c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000c9e:	d0d7      	beq.n	1a000c50 <xQueueGenericSend+0xd8>
1a000ca0:	f001 fcba 	bl	1a002618 <vPortExitCritical>
1a000ca4:	a901      	add	r1, sp, #4
1a000ca6:	a802      	add	r0, sp, #8
1a000ca8:	f000 ff74 	bl	1a001b94 <xTaskCheckForTimeOut>
1a000cac:	b9c8      	cbnz	r0, 1a000ce2 <xQueueGenericSend+0x16a>
1a000cae:	4620      	mov	r0, r4
1a000cb0:	f7ff fdff 	bl	1a0008b2 <prvIsQueueFull>
1a000cb4:	2800      	cmp	r0, #0
1a000cb6:	d0cf      	beq.n	1a000c58 <xQueueGenericSend+0xe0>
1a000cb8:	9901      	ldr	r1, [sp, #4]
1a000cba:	f104 0010 	add.w	r0, r4, #16
1a000cbe:	f000 fee3 	bl	1a001a88 <vTaskPlaceOnEventList>
1a000cc2:	4620      	mov	r0, r4
1a000cc4:	f7ff fe5e 	bl	1a000984 <prvUnlockQueue>
1a000cc8:	f000 fd88 	bl	1a0017dc <xTaskResumeAll>
1a000ccc:	2800      	cmp	r0, #0
1a000cce:	d1c8      	bne.n	1a000c62 <xQueueGenericSend+0xea>
1a000cd0:	4b07      	ldr	r3, [pc, #28]	; (1a000cf0 <xQueueGenericSend+0x178>)
1a000cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000cd6:	601a      	str	r2, [r3, #0]
1a000cd8:	f3bf 8f4f 	dsb	sy
1a000cdc:	f3bf 8f6f 	isb	sy
1a000ce0:	e7bf      	b.n	1a000c62 <xQueueGenericSend+0xea>
1a000ce2:	4620      	mov	r0, r4
1a000ce4:	f7ff fe4e 	bl	1a000984 <prvUnlockQueue>
1a000ce8:	f000 fd78 	bl	1a0017dc <xTaskResumeAll>
1a000cec:	2000      	movs	r0, #0
1a000cee:	e7a0      	b.n	1a000c32 <xQueueGenericSend+0xba>
1a000cf0:	e000ed04 	.word	0xe000ed04

1a000cf4 <prvInitialiseMutex>:
1a000cf4:	b148      	cbz	r0, 1a000d0a <prvInitialiseMutex+0x16>
1a000cf6:	b508      	push	{r3, lr}
1a000cf8:	2100      	movs	r1, #0
1a000cfa:	6041      	str	r1, [r0, #4]
1a000cfc:	6001      	str	r1, [r0, #0]
1a000cfe:	60c1      	str	r1, [r0, #12]
1a000d00:	460b      	mov	r3, r1
1a000d02:	460a      	mov	r2, r1
1a000d04:	f7ff ff38 	bl	1a000b78 <xQueueGenericSend>
1a000d08:	bd08      	pop	{r3, pc}
1a000d0a:	4770      	bx	lr

1a000d0c <xQueueCreateMutex>:
1a000d0c:	b510      	push	{r4, lr}
1a000d0e:	4602      	mov	r2, r0
1a000d10:	2100      	movs	r1, #0
1a000d12:	2001      	movs	r0, #1
1a000d14:	f7ff ff09 	bl	1a000b2a <xQueueGenericCreate>
1a000d18:	4604      	mov	r4, r0
1a000d1a:	f7ff ffeb 	bl	1a000cf4 <prvInitialiseMutex>
1a000d1e:	4620      	mov	r0, r4
1a000d20:	bd10      	pop	{r4, pc}

1a000d22 <xQueueGenericSendFromISR>:
1a000d22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000d26:	b160      	cbz	r0, 1a000d42 <xQueueGenericSendFromISR+0x20>
1a000d28:	4604      	mov	r4, r0
1a000d2a:	b999      	cbnz	r1, 1a000d54 <xQueueGenericSendFromISR+0x32>
1a000d2c:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000d2e:	b188      	cbz	r0, 1a000d54 <xQueueGenericSendFromISR+0x32>
1a000d30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d34:	f383 8811 	msr	BASEPRI, r3
1a000d38:	f3bf 8f6f 	isb	sy
1a000d3c:	f3bf 8f4f 	dsb	sy
1a000d40:	e7fe      	b.n	1a000d40 <xQueueGenericSendFromISR+0x1e>
1a000d42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d46:	f383 8811 	msr	BASEPRI, r3
1a000d4a:	f3bf 8f6f 	isb	sy
1a000d4e:	f3bf 8f4f 	dsb	sy
1a000d52:	e7fe      	b.n	1a000d52 <xQueueGenericSendFromISR+0x30>
1a000d54:	2b02      	cmp	r3, #2
1a000d56:	d10b      	bne.n	1a000d70 <xQueueGenericSendFromISR+0x4e>
1a000d58:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000d5a:	2801      	cmp	r0, #1
1a000d5c:	d008      	beq.n	1a000d70 <xQueueGenericSendFromISR+0x4e>
1a000d5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d62:	f383 8811 	msr	BASEPRI, r3
1a000d66:	f3bf 8f6f 	isb	sy
1a000d6a:	f3bf 8f4f 	dsb	sy
1a000d6e:	e7fe      	b.n	1a000d6e <xQueueGenericSendFromISR+0x4c>
1a000d70:	461f      	mov	r7, r3
1a000d72:	4690      	mov	r8, r2
1a000d74:	4689      	mov	r9, r1
1a000d76:	f001 fd57 	bl	1a002828 <vPortValidateInterruptPriority>
1a000d7a:	f3ef 8611 	mrs	r6, BASEPRI
1a000d7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d82:	f383 8811 	msr	BASEPRI, r3
1a000d86:	f3bf 8f6f 	isb	sy
1a000d8a:	f3bf 8f4f 	dsb	sy
1a000d8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000d92:	429a      	cmp	r2, r3
1a000d94:	d303      	bcc.n	1a000d9e <xQueueGenericSendFromISR+0x7c>
1a000d96:	2f02      	cmp	r7, #2
1a000d98:	d001      	beq.n	1a000d9e <xQueueGenericSendFromISR+0x7c>
1a000d9a:	2000      	movs	r0, #0
1a000d9c:	e00f      	b.n	1a000dbe <xQueueGenericSendFromISR+0x9c>
1a000d9e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000da2:	b26d      	sxtb	r5, r5
1a000da4:	463a      	mov	r2, r7
1a000da6:	4649      	mov	r1, r9
1a000da8:	4620      	mov	r0, r4
1a000daa:	f7ff fd9e 	bl	1a0008ea <prvCopyDataToQueue>
1a000dae:	f1b5 3fff 	cmp.w	r5, #4294967295
1a000db2:	d008      	beq.n	1a000dc6 <xQueueGenericSendFromISR+0xa4>
1a000db4:	1c6b      	adds	r3, r5, #1
1a000db6:	b25b      	sxtb	r3, r3
1a000db8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000dbc:	2001      	movs	r0, #1
1a000dbe:	f386 8811 	msr	BASEPRI, r6
1a000dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000dc8:	b15b      	cbz	r3, 1a000de2 <xQueueGenericSendFromISR+0xc0>
1a000dca:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000dce:	f000 fe8f 	bl	1a001af0 <xTaskRemoveFromEventList>
1a000dd2:	b140      	cbz	r0, 1a000de6 <xQueueGenericSendFromISR+0xc4>
1a000dd4:	f1b8 0f00 	cmp.w	r8, #0
1a000dd8:	d007      	beq.n	1a000dea <xQueueGenericSendFromISR+0xc8>
1a000dda:	2001      	movs	r0, #1
1a000ddc:	f8c8 0000 	str.w	r0, [r8]
1a000de0:	e7ed      	b.n	1a000dbe <xQueueGenericSendFromISR+0x9c>
1a000de2:	2001      	movs	r0, #1
1a000de4:	e7eb      	b.n	1a000dbe <xQueueGenericSendFromISR+0x9c>
1a000de6:	2001      	movs	r0, #1
1a000de8:	e7e9      	b.n	1a000dbe <xQueueGenericSendFromISR+0x9c>
1a000dea:	2001      	movs	r0, #1
1a000dec:	e7e7      	b.n	1a000dbe <xQueueGenericSendFromISR+0x9c>
	...

1a000df0 <xQueueReceive>:
1a000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000df2:	b085      	sub	sp, #20
1a000df4:	9201      	str	r2, [sp, #4]
1a000df6:	b160      	cbz	r0, 1a000e12 <xQueueReceive+0x22>
1a000df8:	4604      	mov	r4, r0
1a000dfa:	b999      	cbnz	r1, 1a000e24 <xQueueReceive+0x34>
1a000dfc:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000dfe:	b18b      	cbz	r3, 1a000e24 <xQueueReceive+0x34>
1a000e00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e04:	f383 8811 	msr	BASEPRI, r3
1a000e08:	f3bf 8f6f 	isb	sy
1a000e0c:	f3bf 8f4f 	dsb	sy
1a000e10:	e7fe      	b.n	1a000e10 <xQueueReceive+0x20>
1a000e12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e16:	f383 8811 	msr	BASEPRI, r3
1a000e1a:	f3bf 8f6f 	isb	sy
1a000e1e:	f3bf 8f4f 	dsb	sy
1a000e22:	e7fe      	b.n	1a000e22 <xQueueReceive+0x32>
1a000e24:	460f      	mov	r7, r1
1a000e26:	f000 fefb 	bl	1a001c20 <xTaskGetSchedulerState>
1a000e2a:	b950      	cbnz	r0, 1a000e42 <xQueueReceive+0x52>
1a000e2c:	9b01      	ldr	r3, [sp, #4]
1a000e2e:	b153      	cbz	r3, 1a000e46 <xQueueReceive+0x56>
1a000e30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e34:	f383 8811 	msr	BASEPRI, r3
1a000e38:	f3bf 8f6f 	isb	sy
1a000e3c:	f3bf 8f4f 	dsb	sy
1a000e40:	e7fe      	b.n	1a000e40 <xQueueReceive+0x50>
1a000e42:	2600      	movs	r6, #0
1a000e44:	e03e      	b.n	1a000ec4 <xQueueReceive+0xd4>
1a000e46:	2600      	movs	r6, #0
1a000e48:	e03c      	b.n	1a000ec4 <xQueueReceive+0xd4>
1a000e4a:	4639      	mov	r1, r7
1a000e4c:	4620      	mov	r0, r4
1a000e4e:	f7ff fd87 	bl	1a000960 <prvCopyDataFromQueue>
1a000e52:	3d01      	subs	r5, #1
1a000e54:	63a5      	str	r5, [r4, #56]	; 0x38
1a000e56:	6923      	ldr	r3, [r4, #16]
1a000e58:	b923      	cbnz	r3, 1a000e64 <xQueueReceive+0x74>
1a000e5a:	f001 fbdd 	bl	1a002618 <vPortExitCritical>
1a000e5e:	2001      	movs	r0, #1
1a000e60:	b005      	add	sp, #20
1a000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000e64:	f104 0010 	add.w	r0, r4, #16
1a000e68:	f000 fe42 	bl	1a001af0 <xTaskRemoveFromEventList>
1a000e6c:	2800      	cmp	r0, #0
1a000e6e:	d0f4      	beq.n	1a000e5a <xQueueReceive+0x6a>
1a000e70:	4b34      	ldr	r3, [pc, #208]	; (1a000f44 <xQueueReceive+0x154>)
1a000e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e76:	601a      	str	r2, [r3, #0]
1a000e78:	f3bf 8f4f 	dsb	sy
1a000e7c:	f3bf 8f6f 	isb	sy
1a000e80:	e7eb      	b.n	1a000e5a <xQueueReceive+0x6a>
1a000e82:	f001 fbc9 	bl	1a002618 <vPortExitCritical>
1a000e86:	2000      	movs	r0, #0
1a000e88:	e7ea      	b.n	1a000e60 <xQueueReceive+0x70>
1a000e8a:	a802      	add	r0, sp, #8
1a000e8c:	f000 fe76 	bl	1a001b7c <vTaskInternalSetTimeOutState>
1a000e90:	2601      	movs	r6, #1
1a000e92:	e021      	b.n	1a000ed8 <xQueueReceive+0xe8>
1a000e94:	2300      	movs	r3, #0
1a000e96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000e9a:	e029      	b.n	1a000ef0 <xQueueReceive+0x100>
1a000e9c:	2300      	movs	r3, #0
1a000e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ea2:	e02b      	b.n	1a000efc <xQueueReceive+0x10c>
1a000ea4:	4620      	mov	r0, r4
1a000ea6:	f7ff fd6d 	bl	1a000984 <prvUnlockQueue>
1a000eaa:	f000 fc97 	bl	1a0017dc <xTaskResumeAll>
1a000eae:	e009      	b.n	1a000ec4 <xQueueReceive+0xd4>
1a000eb0:	4620      	mov	r0, r4
1a000eb2:	f7ff fd67 	bl	1a000984 <prvUnlockQueue>
1a000eb6:	f000 fc91 	bl	1a0017dc <xTaskResumeAll>
1a000eba:	4620      	mov	r0, r4
1a000ebc:	f7ff fd08 	bl	1a0008d0 <prvIsQueueEmpty>
1a000ec0:	2800      	cmp	r0, #0
1a000ec2:	d13d      	bne.n	1a000f40 <xQueueReceive+0x150>
1a000ec4:	f001 fb86 	bl	1a0025d4 <vPortEnterCritical>
1a000ec8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
1a000eca:	2d00      	cmp	r5, #0
1a000ecc:	d1bd      	bne.n	1a000e4a <xQueueReceive+0x5a>
1a000ece:	9b01      	ldr	r3, [sp, #4]
1a000ed0:	2b00      	cmp	r3, #0
1a000ed2:	d0d6      	beq.n	1a000e82 <xQueueReceive+0x92>
1a000ed4:	2e00      	cmp	r6, #0
1a000ed6:	d0d8      	beq.n	1a000e8a <xQueueReceive+0x9a>
1a000ed8:	f001 fb9e 	bl	1a002618 <vPortExitCritical>
1a000edc:	f000 fbe4 	bl	1a0016a8 <vTaskSuspendAll>
1a000ee0:	f001 fb78 	bl	1a0025d4 <vPortEnterCritical>
1a000ee4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ee8:	b25b      	sxtb	r3, r3
1a000eea:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000eee:	d0d1      	beq.n	1a000e94 <xQueueReceive+0xa4>
1a000ef0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000ef4:	b25b      	sxtb	r3, r3
1a000ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000efa:	d0cf      	beq.n	1a000e9c <xQueueReceive+0xac>
1a000efc:	f001 fb8c 	bl	1a002618 <vPortExitCritical>
1a000f00:	a901      	add	r1, sp, #4
1a000f02:	a802      	add	r0, sp, #8
1a000f04:	f000 fe46 	bl	1a001b94 <xTaskCheckForTimeOut>
1a000f08:	2800      	cmp	r0, #0
1a000f0a:	d1d1      	bne.n	1a000eb0 <xQueueReceive+0xc0>
1a000f0c:	4620      	mov	r0, r4
1a000f0e:	f7ff fcdf 	bl	1a0008d0 <prvIsQueueEmpty>
1a000f12:	2800      	cmp	r0, #0
1a000f14:	d0c6      	beq.n	1a000ea4 <xQueueReceive+0xb4>
1a000f16:	9901      	ldr	r1, [sp, #4]
1a000f18:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f1c:	f000 fdb4 	bl	1a001a88 <vTaskPlaceOnEventList>
1a000f20:	4620      	mov	r0, r4
1a000f22:	f7ff fd2f 	bl	1a000984 <prvUnlockQueue>
1a000f26:	f000 fc59 	bl	1a0017dc <xTaskResumeAll>
1a000f2a:	2800      	cmp	r0, #0
1a000f2c:	d1ca      	bne.n	1a000ec4 <xQueueReceive+0xd4>
1a000f2e:	4b05      	ldr	r3, [pc, #20]	; (1a000f44 <xQueueReceive+0x154>)
1a000f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f34:	601a      	str	r2, [r3, #0]
1a000f36:	f3bf 8f4f 	dsb	sy
1a000f3a:	f3bf 8f6f 	isb	sy
1a000f3e:	e7c1      	b.n	1a000ec4 <xQueueReceive+0xd4>
1a000f40:	2000      	movs	r0, #0
1a000f42:	e78d      	b.n	1a000e60 <xQueueReceive+0x70>
1a000f44:	e000ed04 	.word	0xe000ed04

1a000f48 <xQueueSemaphoreTake>:
1a000f48:	b570      	push	{r4, r5, r6, lr}
1a000f4a:	b084      	sub	sp, #16
1a000f4c:	9101      	str	r1, [sp, #4]
1a000f4e:	b940      	cbnz	r0, 1a000f62 <xQueueSemaphoreTake+0x1a>
1a000f50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f54:	f383 8811 	msr	BASEPRI, r3
1a000f58:	f3bf 8f6f 	isb	sy
1a000f5c:	f3bf 8f4f 	dsb	sy
1a000f60:	e7fe      	b.n	1a000f60 <xQueueSemaphoreTake+0x18>
1a000f62:	4604      	mov	r4, r0
1a000f64:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000f66:	b143      	cbz	r3, 1a000f7a <xQueueSemaphoreTake+0x32>
1a000f68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f6c:	f383 8811 	msr	BASEPRI, r3
1a000f70:	f3bf 8f6f 	isb	sy
1a000f74:	f3bf 8f4f 	dsb	sy
1a000f78:	e7fe      	b.n	1a000f78 <xQueueSemaphoreTake+0x30>
1a000f7a:	f000 fe51 	bl	1a001c20 <xTaskGetSchedulerState>
1a000f7e:	b950      	cbnz	r0, 1a000f96 <xQueueSemaphoreTake+0x4e>
1a000f80:	9b01      	ldr	r3, [sp, #4]
1a000f82:	b15b      	cbz	r3, 1a000f9c <xQueueSemaphoreTake+0x54>
1a000f84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f88:	f383 8811 	msr	BASEPRI, r3
1a000f8c:	f3bf 8f6f 	isb	sy
1a000f90:	f3bf 8f4f 	dsb	sy
1a000f94:	e7fe      	b.n	1a000f94 <xQueueSemaphoreTake+0x4c>
1a000f96:	2500      	movs	r5, #0
1a000f98:	462e      	mov	r6, r5
1a000f9a:	e051      	b.n	1a001040 <xQueueSemaphoreTake+0xf8>
1a000f9c:	2500      	movs	r5, #0
1a000f9e:	462e      	mov	r6, r5
1a000fa0:	e04e      	b.n	1a001040 <xQueueSemaphoreTake+0xf8>
1a000fa2:	3b01      	subs	r3, #1
1a000fa4:	63a3      	str	r3, [r4, #56]	; 0x38
1a000fa6:	6823      	ldr	r3, [r4, #0]
1a000fa8:	b913      	cbnz	r3, 1a000fb0 <xQueueSemaphoreTake+0x68>
1a000faa:	f000 ff5d 	bl	1a001e68 <pvTaskIncrementMutexHeldCount>
1a000fae:	6060      	str	r0, [r4, #4]
1a000fb0:	6923      	ldr	r3, [r4, #16]
1a000fb2:	b163      	cbz	r3, 1a000fce <xQueueSemaphoreTake+0x86>
1a000fb4:	f104 0010 	add.w	r0, r4, #16
1a000fb8:	f000 fd9a 	bl	1a001af0 <xTaskRemoveFromEventList>
1a000fbc:	b138      	cbz	r0, 1a000fce <xQueueSemaphoreTake+0x86>
1a000fbe:	4b48      	ldr	r3, [pc, #288]	; (1a0010e0 <xQueueSemaphoreTake+0x198>)
1a000fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000fc4:	601a      	str	r2, [r3, #0]
1a000fc6:	f3bf 8f4f 	dsb	sy
1a000fca:	f3bf 8f6f 	isb	sy
1a000fce:	f001 fb23 	bl	1a002618 <vPortExitCritical>
1a000fd2:	2501      	movs	r5, #1
1a000fd4:	4628      	mov	r0, r5
1a000fd6:	b004      	add	sp, #16
1a000fd8:	bd70      	pop	{r4, r5, r6, pc}
1a000fda:	b145      	cbz	r5, 1a000fee <xQueueSemaphoreTake+0xa6>
1a000fdc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fe0:	f383 8811 	msr	BASEPRI, r3
1a000fe4:	f3bf 8f6f 	isb	sy
1a000fe8:	f3bf 8f4f 	dsb	sy
1a000fec:	e7fe      	b.n	1a000fec <xQueueSemaphoreTake+0xa4>
1a000fee:	f001 fb13 	bl	1a002618 <vPortExitCritical>
1a000ff2:	e7ef      	b.n	1a000fd4 <xQueueSemaphoreTake+0x8c>
1a000ff4:	a802      	add	r0, sp, #8
1a000ff6:	f000 fdc1 	bl	1a001b7c <vTaskInternalSetTimeOutState>
1a000ffa:	2601      	movs	r6, #1
1a000ffc:	e02a      	b.n	1a001054 <xQueueSemaphoreTake+0x10c>
1a000ffe:	2300      	movs	r3, #0
1a001000:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001004:	e032      	b.n	1a00106c <xQueueSemaphoreTake+0x124>
1a001006:	2300      	movs	r3, #0
1a001008:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00100c:	e034      	b.n	1a001078 <xQueueSemaphoreTake+0x130>
1a00100e:	f001 fae1 	bl	1a0025d4 <vPortEnterCritical>
1a001012:	6860      	ldr	r0, [r4, #4]
1a001014:	f000 fe14 	bl	1a001c40 <xTaskPriorityInherit>
1a001018:	4605      	mov	r5, r0
1a00101a:	f001 fafd 	bl	1a002618 <vPortExitCritical>
1a00101e:	e03b      	b.n	1a001098 <xQueueSemaphoreTake+0x150>
1a001020:	4620      	mov	r0, r4
1a001022:	f7ff fcaf 	bl	1a000984 <prvUnlockQueue>
1a001026:	f000 fbd9 	bl	1a0017dc <xTaskResumeAll>
1a00102a:	e009      	b.n	1a001040 <xQueueSemaphoreTake+0xf8>
1a00102c:	4620      	mov	r0, r4
1a00102e:	f7ff fca9 	bl	1a000984 <prvUnlockQueue>
1a001032:	f000 fbd3 	bl	1a0017dc <xTaskResumeAll>
1a001036:	4620      	mov	r0, r4
1a001038:	f7ff fc4a 	bl	1a0008d0 <prvIsQueueEmpty>
1a00103c:	2800      	cmp	r0, #0
1a00103e:	d140      	bne.n	1a0010c2 <xQueueSemaphoreTake+0x17a>
1a001040:	f001 fac8 	bl	1a0025d4 <vPortEnterCritical>
1a001044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001046:	2b00      	cmp	r3, #0
1a001048:	d1ab      	bne.n	1a000fa2 <xQueueSemaphoreTake+0x5a>
1a00104a:	9b01      	ldr	r3, [sp, #4]
1a00104c:	2b00      	cmp	r3, #0
1a00104e:	d0c4      	beq.n	1a000fda <xQueueSemaphoreTake+0x92>
1a001050:	2e00      	cmp	r6, #0
1a001052:	d0cf      	beq.n	1a000ff4 <xQueueSemaphoreTake+0xac>
1a001054:	f001 fae0 	bl	1a002618 <vPortExitCritical>
1a001058:	f000 fb26 	bl	1a0016a8 <vTaskSuspendAll>
1a00105c:	f001 faba 	bl	1a0025d4 <vPortEnterCritical>
1a001060:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001064:	b25b      	sxtb	r3, r3
1a001066:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00106a:	d0c8      	beq.n	1a000ffe <xQueueSemaphoreTake+0xb6>
1a00106c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001070:	b25b      	sxtb	r3, r3
1a001072:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001076:	d0c6      	beq.n	1a001006 <xQueueSemaphoreTake+0xbe>
1a001078:	f001 face 	bl	1a002618 <vPortExitCritical>
1a00107c:	a901      	add	r1, sp, #4
1a00107e:	a802      	add	r0, sp, #8
1a001080:	f000 fd88 	bl	1a001b94 <xTaskCheckForTimeOut>
1a001084:	2800      	cmp	r0, #0
1a001086:	d1d1      	bne.n	1a00102c <xQueueSemaphoreTake+0xe4>
1a001088:	4620      	mov	r0, r4
1a00108a:	f7ff fc21 	bl	1a0008d0 <prvIsQueueEmpty>
1a00108e:	2800      	cmp	r0, #0
1a001090:	d0c6      	beq.n	1a001020 <xQueueSemaphoreTake+0xd8>
1a001092:	6823      	ldr	r3, [r4, #0]
1a001094:	2b00      	cmp	r3, #0
1a001096:	d0ba      	beq.n	1a00100e <xQueueSemaphoreTake+0xc6>
1a001098:	9901      	ldr	r1, [sp, #4]
1a00109a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00109e:	f000 fcf3 	bl	1a001a88 <vTaskPlaceOnEventList>
1a0010a2:	4620      	mov	r0, r4
1a0010a4:	f7ff fc6e 	bl	1a000984 <prvUnlockQueue>
1a0010a8:	f000 fb98 	bl	1a0017dc <xTaskResumeAll>
1a0010ac:	2800      	cmp	r0, #0
1a0010ae:	d1c7      	bne.n	1a001040 <xQueueSemaphoreTake+0xf8>
1a0010b0:	4b0b      	ldr	r3, [pc, #44]	; (1a0010e0 <xQueueSemaphoreTake+0x198>)
1a0010b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010b6:	601a      	str	r2, [r3, #0]
1a0010b8:	f3bf 8f4f 	dsb	sy
1a0010bc:	f3bf 8f6f 	isb	sy
1a0010c0:	e7be      	b.n	1a001040 <xQueueSemaphoreTake+0xf8>
1a0010c2:	2d00      	cmp	r5, #0
1a0010c4:	d086      	beq.n	1a000fd4 <xQueueSemaphoreTake+0x8c>
1a0010c6:	f001 fa85 	bl	1a0025d4 <vPortEnterCritical>
1a0010ca:	4620      	mov	r0, r4
1a0010cc:	f7ff fbe8 	bl	1a0008a0 <prvGetDisinheritPriorityAfterTimeout>
1a0010d0:	4601      	mov	r1, r0
1a0010d2:	6860      	ldr	r0, [r4, #4]
1a0010d4:	f000 fe68 	bl	1a001da8 <vTaskPriorityDisinheritAfterTimeout>
1a0010d8:	f001 fa9e 	bl	1a002618 <vPortExitCritical>
1a0010dc:	2500      	movs	r5, #0
1a0010de:	e779      	b.n	1a000fd4 <xQueueSemaphoreTake+0x8c>
1a0010e0:	e000ed04 	.word	0xe000ed04

1a0010e4 <vQueueAddToRegistry>:
1a0010e4:	2300      	movs	r3, #0
1a0010e6:	2b07      	cmp	r3, #7
1a0010e8:	d80c      	bhi.n	1a001104 <vQueueAddToRegistry+0x20>
1a0010ea:	4a07      	ldr	r2, [pc, #28]	; (1a001108 <vQueueAddToRegistry+0x24>)
1a0010ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0010f0:	b10a      	cbz	r2, 1a0010f6 <vQueueAddToRegistry+0x12>
1a0010f2:	3301      	adds	r3, #1
1a0010f4:	e7f7      	b.n	1a0010e6 <vQueueAddToRegistry+0x2>
1a0010f6:	4a04      	ldr	r2, [pc, #16]	; (1a001108 <vQueueAddToRegistry+0x24>)
1a0010f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
1a0010fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001100:	6058      	str	r0, [r3, #4]
1a001102:	4770      	bx	lr
1a001104:	4770      	bx	lr
1a001106:	bf00      	nop
1a001108:	10002c88 	.word	0x10002c88

1a00110c <vQueueWaitForMessageRestricted>:
1a00110c:	b570      	push	{r4, r5, r6, lr}
1a00110e:	4604      	mov	r4, r0
1a001110:	460d      	mov	r5, r1
1a001112:	4616      	mov	r6, r2
1a001114:	f001 fa5e 	bl	1a0025d4 <vPortEnterCritical>
1a001118:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00111c:	b25b      	sxtb	r3, r3
1a00111e:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001122:	d00d      	beq.n	1a001140 <vQueueWaitForMessageRestricted+0x34>
1a001124:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001128:	b25b      	sxtb	r3, r3
1a00112a:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00112e:	d00b      	beq.n	1a001148 <vQueueWaitForMessageRestricted+0x3c>
1a001130:	f001 fa72 	bl	1a002618 <vPortExitCritical>
1a001134:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001136:	b15b      	cbz	r3, 1a001150 <vQueueWaitForMessageRestricted+0x44>
1a001138:	4620      	mov	r0, r4
1a00113a:	f7ff fc23 	bl	1a000984 <prvUnlockQueue>
1a00113e:	bd70      	pop	{r4, r5, r6, pc}
1a001140:	2300      	movs	r3, #0
1a001142:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001146:	e7ed      	b.n	1a001124 <vQueueWaitForMessageRestricted+0x18>
1a001148:	2300      	movs	r3, #0
1a00114a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00114e:	e7ef      	b.n	1a001130 <vQueueWaitForMessageRestricted+0x24>
1a001150:	4632      	mov	r2, r6
1a001152:	4629      	mov	r1, r5
1a001154:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001158:	f000 fcae 	bl	1a001ab8 <vTaskPlaceOnEventListRestricted>
1a00115c:	e7ec      	b.n	1a001138 <vQueueWaitForMessageRestricted+0x2c>

1a00115e <vListInitialise>:
1a00115e:	f100 0308 	add.w	r3, r0, #8
1a001162:	6043      	str	r3, [r0, #4]
1a001164:	f04f 32ff 	mov.w	r2, #4294967295
1a001168:	6082      	str	r2, [r0, #8]
1a00116a:	60c3      	str	r3, [r0, #12]
1a00116c:	6103      	str	r3, [r0, #16]
1a00116e:	2300      	movs	r3, #0
1a001170:	6003      	str	r3, [r0, #0]
1a001172:	4770      	bx	lr

1a001174 <vListInitialiseItem>:
1a001174:	2300      	movs	r3, #0
1a001176:	6103      	str	r3, [r0, #16]
1a001178:	4770      	bx	lr

1a00117a <vListInsertEnd>:
1a00117a:	6843      	ldr	r3, [r0, #4]
1a00117c:	604b      	str	r3, [r1, #4]
1a00117e:	689a      	ldr	r2, [r3, #8]
1a001180:	608a      	str	r2, [r1, #8]
1a001182:	689a      	ldr	r2, [r3, #8]
1a001184:	6051      	str	r1, [r2, #4]
1a001186:	6099      	str	r1, [r3, #8]
1a001188:	6108      	str	r0, [r1, #16]
1a00118a:	6803      	ldr	r3, [r0, #0]
1a00118c:	3301      	adds	r3, #1
1a00118e:	6003      	str	r3, [r0, #0]
1a001190:	4770      	bx	lr

1a001192 <vListInsert>:
1a001192:	b430      	push	{r4, r5}
1a001194:	680d      	ldr	r5, [r1, #0]
1a001196:	f1b5 3fff 	cmp.w	r5, #4294967295
1a00119a:	d002      	beq.n	1a0011a2 <vListInsert+0x10>
1a00119c:	f100 0208 	add.w	r2, r0, #8
1a0011a0:	e002      	b.n	1a0011a8 <vListInsert+0x16>
1a0011a2:	6902      	ldr	r2, [r0, #16]
1a0011a4:	e004      	b.n	1a0011b0 <vListInsert+0x1e>
1a0011a6:	461a      	mov	r2, r3
1a0011a8:	6853      	ldr	r3, [r2, #4]
1a0011aa:	681c      	ldr	r4, [r3, #0]
1a0011ac:	42ac      	cmp	r4, r5
1a0011ae:	d9fa      	bls.n	1a0011a6 <vListInsert+0x14>
1a0011b0:	6853      	ldr	r3, [r2, #4]
1a0011b2:	604b      	str	r3, [r1, #4]
1a0011b4:	6099      	str	r1, [r3, #8]
1a0011b6:	608a      	str	r2, [r1, #8]
1a0011b8:	6051      	str	r1, [r2, #4]
1a0011ba:	6108      	str	r0, [r1, #16]
1a0011bc:	6803      	ldr	r3, [r0, #0]
1a0011be:	3301      	adds	r3, #1
1a0011c0:	6003      	str	r3, [r0, #0]
1a0011c2:	bc30      	pop	{r4, r5}
1a0011c4:	4770      	bx	lr

1a0011c6 <uxListRemove>:
1a0011c6:	6903      	ldr	r3, [r0, #16]
1a0011c8:	6842      	ldr	r2, [r0, #4]
1a0011ca:	6881      	ldr	r1, [r0, #8]
1a0011cc:	6091      	str	r1, [r2, #8]
1a0011ce:	6882      	ldr	r2, [r0, #8]
1a0011d0:	6841      	ldr	r1, [r0, #4]
1a0011d2:	6051      	str	r1, [r2, #4]
1a0011d4:	685a      	ldr	r2, [r3, #4]
1a0011d6:	4282      	cmp	r2, r0
1a0011d8:	d006      	beq.n	1a0011e8 <uxListRemove+0x22>
1a0011da:	2200      	movs	r2, #0
1a0011dc:	6102      	str	r2, [r0, #16]
1a0011de:	681a      	ldr	r2, [r3, #0]
1a0011e0:	3a01      	subs	r2, #1
1a0011e2:	601a      	str	r2, [r3, #0]
1a0011e4:	6818      	ldr	r0, [r3, #0]
1a0011e6:	4770      	bx	lr
1a0011e8:	6882      	ldr	r2, [r0, #8]
1a0011ea:	605a      	str	r2, [r3, #4]
1a0011ec:	e7f5      	b.n	1a0011da <uxListRemove+0x14>
	...

1a0011f0 <vApplicationGetIdleTaskMemory>:
1a0011f0:	4b03      	ldr	r3, [pc, #12]	; (1a001200 <vApplicationGetIdleTaskMemory+0x10>)
1a0011f2:	6003      	str	r3, [r0, #0]
1a0011f4:	4b03      	ldr	r3, [pc, #12]	; (1a001204 <vApplicationGetIdleTaskMemory+0x14>)
1a0011f6:	600b      	str	r3, [r1, #0]
1a0011f8:	235a      	movs	r3, #90	; 0x5a
1a0011fa:	6013      	str	r3, [r2, #0]
1a0011fc:	4770      	bx	lr
1a0011fe:	bf00      	nop
1a001200:	10002868 	.word	0x10002868
1a001204:	10002160 	.word	0x10002160

1a001208 <vApplicationGetTimerTaskMemory>:
1a001208:	4b03      	ldr	r3, [pc, #12]	; (1a001218 <vApplicationGetTimerTaskMemory+0x10>)
1a00120a:	6003      	str	r3, [r0, #0]
1a00120c:	4b03      	ldr	r3, [pc, #12]	; (1a00121c <vApplicationGetTimerTaskMemory+0x14>)
1a00120e:	600b      	str	r3, [r1, #0]
1a001210:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001214:	6013      	str	r3, [r2, #0]
1a001216:	4770      	bx	lr
1a001218:	100028c8 	.word	0x100028c8
1a00121c:	100022c8 	.word	0x100022c8

1a001220 <vApplicationStackOverflowHook>:
1a001220:	e7fe      	b.n	1a001220 <vApplicationStackOverflowHook>

1a001222 <vApplicationMallocFailedHook>:
1a001222:	e7fe      	b.n	1a001222 <vApplicationMallocFailedHook>

1a001224 <prvResetNextTaskUnblockTime>:
1a001224:	4b08      	ldr	r3, [pc, #32]	; (1a001248 <prvResetNextTaskUnblockTime+0x24>)
1a001226:	681b      	ldr	r3, [r3, #0]
1a001228:	681b      	ldr	r3, [r3, #0]
1a00122a:	b13b      	cbz	r3, 1a00123c <prvResetNextTaskUnblockTime+0x18>
1a00122c:	4b06      	ldr	r3, [pc, #24]	; (1a001248 <prvResetNextTaskUnblockTime+0x24>)
1a00122e:	681b      	ldr	r3, [r3, #0]
1a001230:	68db      	ldr	r3, [r3, #12]
1a001232:	68db      	ldr	r3, [r3, #12]
1a001234:	685a      	ldr	r2, [r3, #4]
1a001236:	4b05      	ldr	r3, [pc, #20]	; (1a00124c <prvResetNextTaskUnblockTime+0x28>)
1a001238:	601a      	str	r2, [r3, #0]
1a00123a:	4770      	bx	lr
1a00123c:	4b03      	ldr	r3, [pc, #12]	; (1a00124c <prvResetNextTaskUnblockTime+0x28>)
1a00123e:	f04f 32ff 	mov.w	r2, #4294967295
1a001242:	601a      	str	r2, [r3, #0]
1a001244:	4770      	bx	lr
1a001246:	bf00      	nop
1a001248:	1000292c 	.word	0x1000292c
1a00124c:	10002a00 	.word	0x10002a00

1a001250 <prvInitialiseNewTask>:
1a001250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001254:	4681      	mov	r9, r0
1a001256:	460d      	mov	r5, r1
1a001258:	4617      	mov	r7, r2
1a00125a:	469a      	mov	sl, r3
1a00125c:	9e08      	ldr	r6, [sp, #32]
1a00125e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001262:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1a001264:	0092      	lsls	r2, r2, #2
1a001266:	21a5      	movs	r1, #165	; 0xa5
1a001268:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00126a:	f003 f982 	bl	1a004572 <memset>
1a00126e:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001270:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001274:	3a01      	subs	r2, #1
1a001276:	eb03 0782 	add.w	r7, r3, r2, lsl #2
1a00127a:	f027 0707 	bic.w	r7, r7, #7
1a00127e:	6467      	str	r7, [r4, #68]	; 0x44
1a001280:	2300      	movs	r3, #0
1a001282:	2b0f      	cmp	r3, #15
1a001284:	d807      	bhi.n	1a001296 <prvInitialiseNewTask+0x46>
1a001286:	5ce9      	ldrb	r1, [r5, r3]
1a001288:	18e2      	adds	r2, r4, r3
1a00128a:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
1a00128e:	5cea      	ldrb	r2, [r5, r3]
1a001290:	b10a      	cbz	r2, 1a001296 <prvInitialiseNewTask+0x46>
1a001292:	3301      	adds	r3, #1
1a001294:	e7f5      	b.n	1a001282 <prvInitialiseNewTask+0x32>
1a001296:	2300      	movs	r3, #0
1a001298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00129c:	2e06      	cmp	r6, #6
1a00129e:	d900      	bls.n	1a0012a2 <prvInitialiseNewTask+0x52>
1a0012a0:	2606      	movs	r6, #6
1a0012a2:	62e6      	str	r6, [r4, #44]	; 0x2c
1a0012a4:	6526      	str	r6, [r4, #80]	; 0x50
1a0012a6:	2500      	movs	r5, #0
1a0012a8:	6565      	str	r5, [r4, #84]	; 0x54
1a0012aa:	1d20      	adds	r0, r4, #4
1a0012ac:	f7ff ff62 	bl	1a001174 <vListInitialiseItem>
1a0012b0:	f104 0018 	add.w	r0, r4, #24
1a0012b4:	f7ff ff5e 	bl	1a001174 <vListInitialiseItem>
1a0012b8:	6124      	str	r4, [r4, #16]
1a0012ba:	f1c6 0607 	rsb	r6, r6, #7
1a0012be:	61a6      	str	r6, [r4, #24]
1a0012c0:	6264      	str	r4, [r4, #36]	; 0x24
1a0012c2:	65a5      	str	r5, [r4, #88]	; 0x58
1a0012c4:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
1a0012c8:	4652      	mov	r2, sl
1a0012ca:	4649      	mov	r1, r9
1a0012cc:	4638      	mov	r0, r7
1a0012ce:	f001 f953 	bl	1a002578 <pxPortInitialiseStack>
1a0012d2:	6020      	str	r0, [r4, #0]
1a0012d4:	f1b8 0f00 	cmp.w	r8, #0
1a0012d8:	d001      	beq.n	1a0012de <prvInitialiseNewTask+0x8e>
1a0012da:	f8c8 4000 	str.w	r4, [r8]
1a0012de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

1a0012e4 <prvInitialiseTaskLists>:
1a0012e4:	b538      	push	{r3, r4, r5, lr}
1a0012e6:	2400      	movs	r4, #0
1a0012e8:	e007      	b.n	1a0012fa <prvInitialiseTaskLists+0x16>
1a0012ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0012ee:	0093      	lsls	r3, r2, #2
1a0012f0:	480e      	ldr	r0, [pc, #56]	; (1a00132c <prvInitialiseTaskLists+0x48>)
1a0012f2:	4418      	add	r0, r3
1a0012f4:	f7ff ff33 	bl	1a00115e <vListInitialise>
1a0012f8:	3401      	adds	r4, #1
1a0012fa:	2c06      	cmp	r4, #6
1a0012fc:	d9f5      	bls.n	1a0012ea <prvInitialiseTaskLists+0x6>
1a0012fe:	4d0c      	ldr	r5, [pc, #48]	; (1a001330 <prvInitialiseTaskLists+0x4c>)
1a001300:	4628      	mov	r0, r5
1a001302:	f7ff ff2c 	bl	1a00115e <vListInitialise>
1a001306:	4c0b      	ldr	r4, [pc, #44]	; (1a001334 <prvInitialiseTaskLists+0x50>)
1a001308:	4620      	mov	r0, r4
1a00130a:	f7ff ff28 	bl	1a00115e <vListInitialise>
1a00130e:	480a      	ldr	r0, [pc, #40]	; (1a001338 <prvInitialiseTaskLists+0x54>)
1a001310:	f7ff ff25 	bl	1a00115e <vListInitialise>
1a001314:	4809      	ldr	r0, [pc, #36]	; (1a00133c <prvInitialiseTaskLists+0x58>)
1a001316:	f7ff ff22 	bl	1a00115e <vListInitialise>
1a00131a:	4809      	ldr	r0, [pc, #36]	; (1a001340 <prvInitialiseTaskLists+0x5c>)
1a00131c:	f7ff ff1f 	bl	1a00115e <vListInitialise>
1a001320:	4b08      	ldr	r3, [pc, #32]	; (1a001344 <prvInitialiseTaskLists+0x60>)
1a001322:	601d      	str	r5, [r3, #0]
1a001324:	4b08      	ldr	r3, [pc, #32]	; (1a001348 <prvInitialiseTaskLists+0x64>)
1a001326:	601c      	str	r4, [r3, #0]
1a001328:	bd38      	pop	{r3, r4, r5, pc}
1a00132a:	bf00      	nop
1a00132c:	10002934 	.word	0x10002934
1a001330:	100029d8 	.word	0x100029d8
1a001334:	100029ec 	.word	0x100029ec
1a001338:	10002a08 	.word	0x10002a08
1a00133c:	10002a34 	.word	0x10002a34
1a001340:	10002a20 	.word	0x10002a20
1a001344:	1000292c 	.word	0x1000292c
1a001348:	10002930 	.word	0x10002930

1a00134c <prvAddNewTaskToReadyList>:
1a00134c:	b510      	push	{r4, lr}
1a00134e:	4604      	mov	r4, r0
1a001350:	f001 f940 	bl	1a0025d4 <vPortEnterCritical>
1a001354:	4a21      	ldr	r2, [pc, #132]	; (1a0013dc <prvAddNewTaskToReadyList+0x90>)
1a001356:	6813      	ldr	r3, [r2, #0]
1a001358:	3301      	adds	r3, #1
1a00135a:	6013      	str	r3, [r2, #0]
1a00135c:	4b20      	ldr	r3, [pc, #128]	; (1a0013e0 <prvAddNewTaskToReadyList+0x94>)
1a00135e:	681b      	ldr	r3, [r3, #0]
1a001360:	b15b      	cbz	r3, 1a00137a <prvAddNewTaskToReadyList+0x2e>
1a001362:	4b20      	ldr	r3, [pc, #128]	; (1a0013e4 <prvAddNewTaskToReadyList+0x98>)
1a001364:	681b      	ldr	r3, [r3, #0]
1a001366:	b96b      	cbnz	r3, 1a001384 <prvAddNewTaskToReadyList+0x38>
1a001368:	4b1d      	ldr	r3, [pc, #116]	; (1a0013e0 <prvAddNewTaskToReadyList+0x94>)
1a00136a:	681b      	ldr	r3, [r3, #0]
1a00136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00136e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001370:	429a      	cmp	r2, r3
1a001372:	d807      	bhi.n	1a001384 <prvAddNewTaskToReadyList+0x38>
1a001374:	4b1a      	ldr	r3, [pc, #104]	; (1a0013e0 <prvAddNewTaskToReadyList+0x94>)
1a001376:	601c      	str	r4, [r3, #0]
1a001378:	e004      	b.n	1a001384 <prvAddNewTaskToReadyList+0x38>
1a00137a:	4b19      	ldr	r3, [pc, #100]	; (1a0013e0 <prvAddNewTaskToReadyList+0x94>)
1a00137c:	601c      	str	r4, [r3, #0]
1a00137e:	6813      	ldr	r3, [r2, #0]
1a001380:	2b01      	cmp	r3, #1
1a001382:	d027      	beq.n	1a0013d4 <prvAddNewTaskToReadyList+0x88>
1a001384:	4a18      	ldr	r2, [pc, #96]	; (1a0013e8 <prvAddNewTaskToReadyList+0x9c>)
1a001386:	6813      	ldr	r3, [r2, #0]
1a001388:	3301      	adds	r3, #1
1a00138a:	6013      	str	r3, [r2, #0]
1a00138c:	64a3      	str	r3, [r4, #72]	; 0x48
1a00138e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001390:	2201      	movs	r2, #1
1a001392:	409a      	lsls	r2, r3
1a001394:	4915      	ldr	r1, [pc, #84]	; (1a0013ec <prvAddNewTaskToReadyList+0xa0>)
1a001396:	6808      	ldr	r0, [r1, #0]
1a001398:	4302      	orrs	r2, r0
1a00139a:	600a      	str	r2, [r1, #0]
1a00139c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0013a0:	009a      	lsls	r2, r3, #2
1a0013a2:	1d21      	adds	r1, r4, #4
1a0013a4:	4812      	ldr	r0, [pc, #72]	; (1a0013f0 <prvAddNewTaskToReadyList+0xa4>)
1a0013a6:	4410      	add	r0, r2
1a0013a8:	f7ff fee7 	bl	1a00117a <vListInsertEnd>
1a0013ac:	f001 f934 	bl	1a002618 <vPortExitCritical>
1a0013b0:	4b0c      	ldr	r3, [pc, #48]	; (1a0013e4 <prvAddNewTaskToReadyList+0x98>)
1a0013b2:	681b      	ldr	r3, [r3, #0]
1a0013b4:	b16b      	cbz	r3, 1a0013d2 <prvAddNewTaskToReadyList+0x86>
1a0013b6:	4b0a      	ldr	r3, [pc, #40]	; (1a0013e0 <prvAddNewTaskToReadyList+0x94>)
1a0013b8:	681b      	ldr	r3, [r3, #0]
1a0013ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0013bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0013be:	429a      	cmp	r2, r3
1a0013c0:	d207      	bcs.n	1a0013d2 <prvAddNewTaskToReadyList+0x86>
1a0013c2:	4b0c      	ldr	r3, [pc, #48]	; (1a0013f4 <prvAddNewTaskToReadyList+0xa8>)
1a0013c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013c8:	601a      	str	r2, [r3, #0]
1a0013ca:	f3bf 8f4f 	dsb	sy
1a0013ce:	f3bf 8f6f 	isb	sy
1a0013d2:	bd10      	pop	{r4, pc}
1a0013d4:	f7ff ff86 	bl	1a0012e4 <prvInitialiseTaskLists>
1a0013d8:	e7d4      	b.n	1a001384 <prvAddNewTaskToReadyList+0x38>
1a0013da:	bf00      	nop
1a0013dc:	100029c0 	.word	0x100029c0
1a0013e0:	10002928 	.word	0x10002928
1a0013e4:	10002a1c 	.word	0x10002a1c
1a0013e8:	100029d0 	.word	0x100029d0
1a0013ec:	100029d4 	.word	0x100029d4
1a0013f0:	10002934 	.word	0x10002934
1a0013f4:	e000ed04 	.word	0xe000ed04

1a0013f8 <prvDeleteTCB>:
1a0013f8:	b510      	push	{r4, lr}
1a0013fa:	4604      	mov	r4, r0
1a0013fc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001400:	b933      	cbnz	r3, 1a001410 <prvDeleteTCB+0x18>
1a001402:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001404:	f7ff fa14 	bl	1a000830 <vPortFree>
1a001408:	4620      	mov	r0, r4
1a00140a:	f7ff fa11 	bl	1a000830 <vPortFree>
1a00140e:	bd10      	pop	{r4, pc}
1a001410:	2b01      	cmp	r3, #1
1a001412:	d00a      	beq.n	1a00142a <prvDeleteTCB+0x32>
1a001414:	2b02      	cmp	r3, #2
1a001416:	d0fa      	beq.n	1a00140e <prvDeleteTCB+0x16>
1a001418:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00141c:	f383 8811 	msr	BASEPRI, r3
1a001420:	f3bf 8f6f 	isb	sy
1a001424:	f3bf 8f4f 	dsb	sy
1a001428:	e7fe      	b.n	1a001428 <prvDeleteTCB+0x30>
1a00142a:	f7ff fa01 	bl	1a000830 <vPortFree>
1a00142e:	e7ee      	b.n	1a00140e <prvDeleteTCB+0x16>

1a001430 <prvCheckTasksWaitingTermination>:
1a001430:	4b0f      	ldr	r3, [pc, #60]	; (1a001470 <prvCheckTasksWaitingTermination+0x40>)
1a001432:	681b      	ldr	r3, [r3, #0]
1a001434:	b1d3      	cbz	r3, 1a00146c <prvCheckTasksWaitingTermination+0x3c>
1a001436:	b510      	push	{r4, lr}
1a001438:	f001 f8cc 	bl	1a0025d4 <vPortEnterCritical>
1a00143c:	4b0d      	ldr	r3, [pc, #52]	; (1a001474 <prvCheckTasksWaitingTermination+0x44>)
1a00143e:	68db      	ldr	r3, [r3, #12]
1a001440:	68dc      	ldr	r4, [r3, #12]
1a001442:	1d20      	adds	r0, r4, #4
1a001444:	f7ff febf 	bl	1a0011c6 <uxListRemove>
1a001448:	4a0b      	ldr	r2, [pc, #44]	; (1a001478 <prvCheckTasksWaitingTermination+0x48>)
1a00144a:	6813      	ldr	r3, [r2, #0]
1a00144c:	3b01      	subs	r3, #1
1a00144e:	6013      	str	r3, [r2, #0]
1a001450:	4a07      	ldr	r2, [pc, #28]	; (1a001470 <prvCheckTasksWaitingTermination+0x40>)
1a001452:	6813      	ldr	r3, [r2, #0]
1a001454:	3b01      	subs	r3, #1
1a001456:	6013      	str	r3, [r2, #0]
1a001458:	f001 f8de 	bl	1a002618 <vPortExitCritical>
1a00145c:	4620      	mov	r0, r4
1a00145e:	f7ff ffcb 	bl	1a0013f8 <prvDeleteTCB>
1a001462:	4b03      	ldr	r3, [pc, #12]	; (1a001470 <prvCheckTasksWaitingTermination+0x40>)
1a001464:	681b      	ldr	r3, [r3, #0]
1a001466:	2b00      	cmp	r3, #0
1a001468:	d1e6      	bne.n	1a001438 <prvCheckTasksWaitingTermination+0x8>
1a00146a:	bd10      	pop	{r4, pc}
1a00146c:	4770      	bx	lr
1a00146e:	bf00      	nop
1a001470:	100029c4 	.word	0x100029c4
1a001474:	10002a34 	.word	0x10002a34
1a001478:	100029c0 	.word	0x100029c0

1a00147c <prvIdleTask>:
1a00147c:	b508      	push	{r3, lr}
1a00147e:	f7ff ffd7 	bl	1a001430 <prvCheckTasksWaitingTermination>
1a001482:	4b06      	ldr	r3, [pc, #24]	; (1a00149c <prvIdleTask+0x20>)
1a001484:	681b      	ldr	r3, [r3, #0]
1a001486:	2b01      	cmp	r3, #1
1a001488:	d9f9      	bls.n	1a00147e <prvIdleTask+0x2>
1a00148a:	4b05      	ldr	r3, [pc, #20]	; (1a0014a0 <prvIdleTask+0x24>)
1a00148c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001490:	601a      	str	r2, [r3, #0]
1a001492:	f3bf 8f4f 	dsb	sy
1a001496:	f3bf 8f6f 	isb	sy
1a00149a:	e7f0      	b.n	1a00147e <prvIdleTask+0x2>
1a00149c:	10002934 	.word	0x10002934
1a0014a0:	e000ed04 	.word	0xe000ed04

1a0014a4 <prvAddCurrentTaskToDelayedList>:
1a0014a4:	b570      	push	{r4, r5, r6, lr}
1a0014a6:	4604      	mov	r4, r0
1a0014a8:	460e      	mov	r6, r1
1a0014aa:	4b1d      	ldr	r3, [pc, #116]	; (1a001520 <prvAddCurrentTaskToDelayedList+0x7c>)
1a0014ac:	681d      	ldr	r5, [r3, #0]
1a0014ae:	4b1d      	ldr	r3, [pc, #116]	; (1a001524 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014b0:	6818      	ldr	r0, [r3, #0]
1a0014b2:	3004      	adds	r0, #4
1a0014b4:	f7ff fe87 	bl	1a0011c6 <uxListRemove>
1a0014b8:	b950      	cbnz	r0, 1a0014d0 <prvAddCurrentTaskToDelayedList+0x2c>
1a0014ba:	4b1a      	ldr	r3, [pc, #104]	; (1a001524 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014bc:	681b      	ldr	r3, [r3, #0]
1a0014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0014c0:	2301      	movs	r3, #1
1a0014c2:	fa03 f202 	lsl.w	r2, r3, r2
1a0014c6:	4918      	ldr	r1, [pc, #96]	; (1a001528 <prvAddCurrentTaskToDelayedList+0x84>)
1a0014c8:	680b      	ldr	r3, [r1, #0]
1a0014ca:	ea23 0302 	bic.w	r3, r3, r2
1a0014ce:	600b      	str	r3, [r1, #0]
1a0014d0:	f1b4 3fff 	cmp.w	r4, #4294967295
1a0014d4:	d013      	beq.n	1a0014fe <prvAddCurrentTaskToDelayedList+0x5a>
1a0014d6:	442c      	add	r4, r5
1a0014d8:	4b12      	ldr	r3, [pc, #72]	; (1a001524 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014da:	681b      	ldr	r3, [r3, #0]
1a0014dc:	605c      	str	r4, [r3, #4]
1a0014de:	42a5      	cmp	r5, r4
1a0014e0:	d816      	bhi.n	1a001510 <prvAddCurrentTaskToDelayedList+0x6c>
1a0014e2:	4b12      	ldr	r3, [pc, #72]	; (1a00152c <prvAddCurrentTaskToDelayedList+0x88>)
1a0014e4:	6818      	ldr	r0, [r3, #0]
1a0014e6:	4b0f      	ldr	r3, [pc, #60]	; (1a001524 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014e8:	6819      	ldr	r1, [r3, #0]
1a0014ea:	3104      	adds	r1, #4
1a0014ec:	f7ff fe51 	bl	1a001192 <vListInsert>
1a0014f0:	4b0f      	ldr	r3, [pc, #60]	; (1a001530 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0014f2:	681b      	ldr	r3, [r3, #0]
1a0014f4:	42a3      	cmp	r3, r4
1a0014f6:	d912      	bls.n	1a00151e <prvAddCurrentTaskToDelayedList+0x7a>
1a0014f8:	4b0d      	ldr	r3, [pc, #52]	; (1a001530 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0014fa:	601c      	str	r4, [r3, #0]
1a0014fc:	e00f      	b.n	1a00151e <prvAddCurrentTaskToDelayedList+0x7a>
1a0014fe:	2e00      	cmp	r6, #0
1a001500:	d0e9      	beq.n	1a0014d6 <prvAddCurrentTaskToDelayedList+0x32>
1a001502:	4b08      	ldr	r3, [pc, #32]	; (1a001524 <prvAddCurrentTaskToDelayedList+0x80>)
1a001504:	6819      	ldr	r1, [r3, #0]
1a001506:	3104      	adds	r1, #4
1a001508:	480a      	ldr	r0, [pc, #40]	; (1a001534 <prvAddCurrentTaskToDelayedList+0x90>)
1a00150a:	f7ff fe36 	bl	1a00117a <vListInsertEnd>
1a00150e:	e006      	b.n	1a00151e <prvAddCurrentTaskToDelayedList+0x7a>
1a001510:	4b09      	ldr	r3, [pc, #36]	; (1a001538 <prvAddCurrentTaskToDelayedList+0x94>)
1a001512:	6818      	ldr	r0, [r3, #0]
1a001514:	4b03      	ldr	r3, [pc, #12]	; (1a001524 <prvAddCurrentTaskToDelayedList+0x80>)
1a001516:	6819      	ldr	r1, [r3, #0]
1a001518:	3104      	adds	r1, #4
1a00151a:	f7ff fe3a 	bl	1a001192 <vListInsert>
1a00151e:	bd70      	pop	{r4, r5, r6, pc}
1a001520:	10002a48 	.word	0x10002a48
1a001524:	10002928 	.word	0x10002928
1a001528:	100029d4 	.word	0x100029d4
1a00152c:	1000292c 	.word	0x1000292c
1a001530:	10002a00 	.word	0x10002a00
1a001534:	10002a20 	.word	0x10002a20
1a001538:	10002930 	.word	0x10002930

1a00153c <xTaskCreateStatic>:
1a00153c:	b570      	push	{r4, r5, r6, lr}
1a00153e:	b086      	sub	sp, #24
1a001540:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001542:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1a001544:	b945      	cbnz	r5, 1a001558 <xTaskCreateStatic+0x1c>
1a001546:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00154a:	f383 8811 	msr	BASEPRI, r3
1a00154e:	f3bf 8f6f 	isb	sy
1a001552:	f3bf 8f4f 	dsb	sy
1a001556:	e7fe      	b.n	1a001556 <xTaskCreateStatic+0x1a>
1a001558:	b944      	cbnz	r4, 1a00156c <xTaskCreateStatic+0x30>
1a00155a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00155e:	f383 8811 	msr	BASEPRI, r3
1a001562:	f3bf 8f6f 	isb	sy
1a001566:	f3bf 8f4f 	dsb	sy
1a00156a:	e7fe      	b.n	1a00156a <xTaskCreateStatic+0x2e>
1a00156c:	2660      	movs	r6, #96	; 0x60
1a00156e:	9604      	str	r6, [sp, #16]
1a001570:	9e04      	ldr	r6, [sp, #16]
1a001572:	2e60      	cmp	r6, #96	; 0x60
1a001574:	d008      	beq.n	1a001588 <xTaskCreateStatic+0x4c>
1a001576:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00157a:	f383 8811 	msr	BASEPRI, r3
1a00157e:	f3bf 8f6f 	isb	sy
1a001582:	f3bf 8f4f 	dsb	sy
1a001586:	e7fe      	b.n	1a001586 <xTaskCreateStatic+0x4a>
1a001588:	6325      	str	r5, [r4, #48]	; 0x30
1a00158a:	2502      	movs	r5, #2
1a00158c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
1a001590:	2500      	movs	r5, #0
1a001592:	9503      	str	r5, [sp, #12]
1a001594:	9402      	str	r4, [sp, #8]
1a001596:	ad05      	add	r5, sp, #20
1a001598:	9501      	str	r5, [sp, #4]
1a00159a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00159c:	9500      	str	r5, [sp, #0]
1a00159e:	f7ff fe57 	bl	1a001250 <prvInitialiseNewTask>
1a0015a2:	4620      	mov	r0, r4
1a0015a4:	f7ff fed2 	bl	1a00134c <prvAddNewTaskToReadyList>
1a0015a8:	9805      	ldr	r0, [sp, #20]
1a0015aa:	b006      	add	sp, #24
1a0015ac:	bd70      	pop	{r4, r5, r6, pc}

1a0015ae <xTaskCreate>:
1a0015ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0015b2:	b085      	sub	sp, #20
1a0015b4:	4607      	mov	r7, r0
1a0015b6:	4688      	mov	r8, r1
1a0015b8:	4615      	mov	r5, r2
1a0015ba:	4699      	mov	r9, r3
1a0015bc:	0090      	lsls	r0, r2, #2
1a0015be:	f7ff f8a9 	bl	1a000714 <pvPortMalloc>
1a0015c2:	b308      	cbz	r0, 1a001608 <xTaskCreate+0x5a>
1a0015c4:	4606      	mov	r6, r0
1a0015c6:	2060      	movs	r0, #96	; 0x60
1a0015c8:	f7ff f8a4 	bl	1a000714 <pvPortMalloc>
1a0015cc:	4604      	mov	r4, r0
1a0015ce:	b1b8      	cbz	r0, 1a001600 <xTaskCreate+0x52>
1a0015d0:	6306      	str	r6, [r0, #48]	; 0x30
1a0015d2:	b1e4      	cbz	r4, 1a00160e <xTaskCreate+0x60>
1a0015d4:	2300      	movs	r3, #0
1a0015d6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
1a0015da:	9303      	str	r3, [sp, #12]
1a0015dc:	9402      	str	r4, [sp, #8]
1a0015de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0015e0:	9301      	str	r3, [sp, #4]
1a0015e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0015e4:	9300      	str	r3, [sp, #0]
1a0015e6:	464b      	mov	r3, r9
1a0015e8:	462a      	mov	r2, r5
1a0015ea:	4641      	mov	r1, r8
1a0015ec:	4638      	mov	r0, r7
1a0015ee:	f7ff fe2f 	bl	1a001250 <prvInitialiseNewTask>
1a0015f2:	4620      	mov	r0, r4
1a0015f4:	f7ff feaa 	bl	1a00134c <prvAddNewTaskToReadyList>
1a0015f8:	2001      	movs	r0, #1
1a0015fa:	b005      	add	sp, #20
1a0015fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001600:	4630      	mov	r0, r6
1a001602:	f7ff f915 	bl	1a000830 <vPortFree>
1a001606:	e7e4      	b.n	1a0015d2 <xTaskCreate+0x24>
1a001608:	f04f 30ff 	mov.w	r0, #4294967295
1a00160c:	e7f5      	b.n	1a0015fa <xTaskCreate+0x4c>
1a00160e:	f04f 30ff 	mov.w	r0, #4294967295
1a001612:	e7f2      	b.n	1a0015fa <xTaskCreate+0x4c>

1a001614 <vTaskStartScheduler>:
1a001614:	b510      	push	{r4, lr}
1a001616:	b088      	sub	sp, #32
1a001618:	2400      	movs	r4, #0
1a00161a:	9405      	str	r4, [sp, #20]
1a00161c:	9406      	str	r4, [sp, #24]
1a00161e:	aa07      	add	r2, sp, #28
1a001620:	a906      	add	r1, sp, #24
1a001622:	a805      	add	r0, sp, #20
1a001624:	f7ff fde4 	bl	1a0011f0 <vApplicationGetIdleTaskMemory>
1a001628:	9b05      	ldr	r3, [sp, #20]
1a00162a:	9302      	str	r3, [sp, #8]
1a00162c:	9b06      	ldr	r3, [sp, #24]
1a00162e:	9301      	str	r3, [sp, #4]
1a001630:	9400      	str	r4, [sp, #0]
1a001632:	4623      	mov	r3, r4
1a001634:	9a07      	ldr	r2, [sp, #28]
1a001636:	4917      	ldr	r1, [pc, #92]	; (1a001694 <vTaskStartScheduler+0x80>)
1a001638:	4817      	ldr	r0, [pc, #92]	; (1a001698 <vTaskStartScheduler+0x84>)
1a00163a:	f7ff ff7f 	bl	1a00153c <xTaskCreateStatic>
1a00163e:	b140      	cbz	r0, 1a001652 <vTaskStartScheduler+0x3e>
1a001640:	f000 fd88 	bl	1a002154 <xTimerCreateTimerTask>
1a001644:	2801      	cmp	r0, #1
1a001646:	d006      	beq.n	1a001656 <vTaskStartScheduler+0x42>
1a001648:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00164c:	d018      	beq.n	1a001680 <vTaskStartScheduler+0x6c>
1a00164e:	b008      	add	sp, #32
1a001650:	bd10      	pop	{r4, pc}
1a001652:	2000      	movs	r0, #0
1a001654:	e7f6      	b.n	1a001644 <vTaskStartScheduler+0x30>
1a001656:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00165a:	f383 8811 	msr	BASEPRI, r3
1a00165e:	f3bf 8f6f 	isb	sy
1a001662:	f3bf 8f4f 	dsb	sy
1a001666:	4b0d      	ldr	r3, [pc, #52]	; (1a00169c <vTaskStartScheduler+0x88>)
1a001668:	f04f 32ff 	mov.w	r2, #4294967295
1a00166c:	601a      	str	r2, [r3, #0]
1a00166e:	4b0c      	ldr	r3, [pc, #48]	; (1a0016a0 <vTaskStartScheduler+0x8c>)
1a001670:	2201      	movs	r2, #1
1a001672:	601a      	str	r2, [r3, #0]
1a001674:	4b0b      	ldr	r3, [pc, #44]	; (1a0016a4 <vTaskStartScheduler+0x90>)
1a001676:	2200      	movs	r2, #0
1a001678:	601a      	str	r2, [r3, #0]
1a00167a:	f001 f84d 	bl	1a002718 <xPortStartScheduler>
1a00167e:	e7e6      	b.n	1a00164e <vTaskStartScheduler+0x3a>
1a001680:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001684:	f383 8811 	msr	BASEPRI, r3
1a001688:	f3bf 8f6f 	isb	sy
1a00168c:	f3bf 8f4f 	dsb	sy
1a001690:	e7fe      	b.n	1a001690 <vTaskStartScheduler+0x7c>
1a001692:	bf00      	nop
1a001694:	1a005290 	.word	0x1a005290
1a001698:	1a00147d 	.word	0x1a00147d
1a00169c:	10002a00 	.word	0x10002a00
1a0016a0:	10002a1c 	.word	0x10002a1c
1a0016a4:	10002a48 	.word	0x10002a48

1a0016a8 <vTaskSuspendAll>:
1a0016a8:	4a02      	ldr	r2, [pc, #8]	; (1a0016b4 <vTaskSuspendAll+0xc>)
1a0016aa:	6813      	ldr	r3, [r2, #0]
1a0016ac:	3301      	adds	r3, #1
1a0016ae:	6013      	str	r3, [r2, #0]
1a0016b0:	4770      	bx	lr
1a0016b2:	bf00      	nop
1a0016b4:	100029cc 	.word	0x100029cc

1a0016b8 <xTaskGetTickCount>:
1a0016b8:	4b01      	ldr	r3, [pc, #4]	; (1a0016c0 <xTaskGetTickCount+0x8>)
1a0016ba:	6818      	ldr	r0, [r3, #0]
1a0016bc:	4770      	bx	lr
1a0016be:	bf00      	nop
1a0016c0:	10002a48 	.word	0x10002a48

1a0016c4 <xTaskIncrementTick>:
1a0016c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0016c6:	4b3a      	ldr	r3, [pc, #232]	; (1a0017b0 <xTaskIncrementTick+0xec>)
1a0016c8:	681b      	ldr	r3, [r3, #0]
1a0016ca:	2b00      	cmp	r3, #0
1a0016cc:	d164      	bne.n	1a001798 <xTaskIncrementTick+0xd4>
1a0016ce:	4b39      	ldr	r3, [pc, #228]	; (1a0017b4 <xTaskIncrementTick+0xf0>)
1a0016d0:	681d      	ldr	r5, [r3, #0]
1a0016d2:	3501      	adds	r5, #1
1a0016d4:	601d      	str	r5, [r3, #0]
1a0016d6:	b9c5      	cbnz	r5, 1a00170a <xTaskIncrementTick+0x46>
1a0016d8:	4b37      	ldr	r3, [pc, #220]	; (1a0017b8 <xTaskIncrementTick+0xf4>)
1a0016da:	681b      	ldr	r3, [r3, #0]
1a0016dc:	681b      	ldr	r3, [r3, #0]
1a0016de:	b143      	cbz	r3, 1a0016f2 <xTaskIncrementTick+0x2e>
1a0016e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016e4:	f383 8811 	msr	BASEPRI, r3
1a0016e8:	f3bf 8f6f 	isb	sy
1a0016ec:	f3bf 8f4f 	dsb	sy
1a0016f0:	e7fe      	b.n	1a0016f0 <xTaskIncrementTick+0x2c>
1a0016f2:	4a31      	ldr	r2, [pc, #196]	; (1a0017b8 <xTaskIncrementTick+0xf4>)
1a0016f4:	6811      	ldr	r1, [r2, #0]
1a0016f6:	4b31      	ldr	r3, [pc, #196]	; (1a0017bc <xTaskIncrementTick+0xf8>)
1a0016f8:	6818      	ldr	r0, [r3, #0]
1a0016fa:	6010      	str	r0, [r2, #0]
1a0016fc:	6019      	str	r1, [r3, #0]
1a0016fe:	4a30      	ldr	r2, [pc, #192]	; (1a0017c0 <xTaskIncrementTick+0xfc>)
1a001700:	6813      	ldr	r3, [r2, #0]
1a001702:	3301      	adds	r3, #1
1a001704:	6013      	str	r3, [r2, #0]
1a001706:	f7ff fd8d 	bl	1a001224 <prvResetNextTaskUnblockTime>
1a00170a:	4b2e      	ldr	r3, [pc, #184]	; (1a0017c4 <xTaskIncrementTick+0x100>)
1a00170c:	681b      	ldr	r3, [r3, #0]
1a00170e:	42ab      	cmp	r3, r5
1a001710:	d938      	bls.n	1a001784 <xTaskIncrementTick+0xc0>
1a001712:	2400      	movs	r4, #0
1a001714:	4b2c      	ldr	r3, [pc, #176]	; (1a0017c8 <xTaskIncrementTick+0x104>)
1a001716:	681b      	ldr	r3, [r3, #0]
1a001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00171a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00171e:	009a      	lsls	r2, r3, #2
1a001720:	4b2a      	ldr	r3, [pc, #168]	; (1a0017cc <xTaskIncrementTick+0x108>)
1a001722:	589b      	ldr	r3, [r3, r2]
1a001724:	2b01      	cmp	r3, #1
1a001726:	d93c      	bls.n	1a0017a2 <xTaskIncrementTick+0xde>
1a001728:	2401      	movs	r4, #1
1a00172a:	e03a      	b.n	1a0017a2 <xTaskIncrementTick+0xde>
1a00172c:	2401      	movs	r4, #1
1a00172e:	4b22      	ldr	r3, [pc, #136]	; (1a0017b8 <xTaskIncrementTick+0xf4>)
1a001730:	681b      	ldr	r3, [r3, #0]
1a001732:	681b      	ldr	r3, [r3, #0]
1a001734:	b343      	cbz	r3, 1a001788 <xTaskIncrementTick+0xc4>
1a001736:	4b20      	ldr	r3, [pc, #128]	; (1a0017b8 <xTaskIncrementTick+0xf4>)
1a001738:	681b      	ldr	r3, [r3, #0]
1a00173a:	68db      	ldr	r3, [r3, #12]
1a00173c:	68de      	ldr	r6, [r3, #12]
1a00173e:	6873      	ldr	r3, [r6, #4]
1a001740:	429d      	cmp	r5, r3
1a001742:	d326      	bcc.n	1a001792 <xTaskIncrementTick+0xce>
1a001744:	1d37      	adds	r7, r6, #4
1a001746:	4638      	mov	r0, r7
1a001748:	f7ff fd3d 	bl	1a0011c6 <uxListRemove>
1a00174c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00174e:	b11b      	cbz	r3, 1a001758 <xTaskIncrementTick+0x94>
1a001750:	f106 0018 	add.w	r0, r6, #24
1a001754:	f7ff fd37 	bl	1a0011c6 <uxListRemove>
1a001758:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00175a:	2201      	movs	r2, #1
1a00175c:	409a      	lsls	r2, r3
1a00175e:	491c      	ldr	r1, [pc, #112]	; (1a0017d0 <xTaskIncrementTick+0x10c>)
1a001760:	6808      	ldr	r0, [r1, #0]
1a001762:	4302      	orrs	r2, r0
1a001764:	600a      	str	r2, [r1, #0]
1a001766:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00176a:	009a      	lsls	r2, r3, #2
1a00176c:	4639      	mov	r1, r7
1a00176e:	4817      	ldr	r0, [pc, #92]	; (1a0017cc <xTaskIncrementTick+0x108>)
1a001770:	4410      	add	r0, r2
1a001772:	f7ff fd02 	bl	1a00117a <vListInsertEnd>
1a001776:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001778:	4b13      	ldr	r3, [pc, #76]	; (1a0017c8 <xTaskIncrementTick+0x104>)
1a00177a:	681b      	ldr	r3, [r3, #0]
1a00177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00177e:	429a      	cmp	r2, r3
1a001780:	d2d4      	bcs.n	1a00172c <xTaskIncrementTick+0x68>
1a001782:	e7d4      	b.n	1a00172e <xTaskIncrementTick+0x6a>
1a001784:	2400      	movs	r4, #0
1a001786:	e7d2      	b.n	1a00172e <xTaskIncrementTick+0x6a>
1a001788:	4b0e      	ldr	r3, [pc, #56]	; (1a0017c4 <xTaskIncrementTick+0x100>)
1a00178a:	f04f 32ff 	mov.w	r2, #4294967295
1a00178e:	601a      	str	r2, [r3, #0]
1a001790:	e7c0      	b.n	1a001714 <xTaskIncrementTick+0x50>
1a001792:	4a0c      	ldr	r2, [pc, #48]	; (1a0017c4 <xTaskIncrementTick+0x100>)
1a001794:	6013      	str	r3, [r2, #0]
1a001796:	e7bd      	b.n	1a001714 <xTaskIncrementTick+0x50>
1a001798:	4a0e      	ldr	r2, [pc, #56]	; (1a0017d4 <xTaskIncrementTick+0x110>)
1a00179a:	6813      	ldr	r3, [r2, #0]
1a00179c:	3301      	adds	r3, #1
1a00179e:	6013      	str	r3, [r2, #0]
1a0017a0:	2400      	movs	r4, #0
1a0017a2:	4b0d      	ldr	r3, [pc, #52]	; (1a0017d8 <xTaskIncrementTick+0x114>)
1a0017a4:	681b      	ldr	r3, [r3, #0]
1a0017a6:	b103      	cbz	r3, 1a0017aa <xTaskIncrementTick+0xe6>
1a0017a8:	2401      	movs	r4, #1
1a0017aa:	4620      	mov	r0, r4
1a0017ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0017ae:	bf00      	nop
1a0017b0:	100029cc 	.word	0x100029cc
1a0017b4:	10002a48 	.word	0x10002a48
1a0017b8:	1000292c 	.word	0x1000292c
1a0017bc:	10002930 	.word	0x10002930
1a0017c0:	10002a04 	.word	0x10002a04
1a0017c4:	10002a00 	.word	0x10002a00
1a0017c8:	10002928 	.word	0x10002928
1a0017cc:	10002934 	.word	0x10002934
1a0017d0:	100029d4 	.word	0x100029d4
1a0017d4:	100029c8 	.word	0x100029c8
1a0017d8:	10002a4c 	.word	0x10002a4c

1a0017dc <xTaskResumeAll>:
1a0017dc:	b538      	push	{r3, r4, r5, lr}
1a0017de:	4b33      	ldr	r3, [pc, #204]	; (1a0018ac <xTaskResumeAll+0xd0>)
1a0017e0:	681b      	ldr	r3, [r3, #0]
1a0017e2:	b943      	cbnz	r3, 1a0017f6 <xTaskResumeAll+0x1a>
1a0017e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017e8:	f383 8811 	msr	BASEPRI, r3
1a0017ec:	f3bf 8f6f 	isb	sy
1a0017f0:	f3bf 8f4f 	dsb	sy
1a0017f4:	e7fe      	b.n	1a0017f4 <xTaskResumeAll+0x18>
1a0017f6:	f000 feed 	bl	1a0025d4 <vPortEnterCritical>
1a0017fa:	4b2c      	ldr	r3, [pc, #176]	; (1a0018ac <xTaskResumeAll+0xd0>)
1a0017fc:	681a      	ldr	r2, [r3, #0]
1a0017fe:	3a01      	subs	r2, #1
1a001800:	601a      	str	r2, [r3, #0]
1a001802:	681b      	ldr	r3, [r3, #0]
1a001804:	2b00      	cmp	r3, #0
1a001806:	d14d      	bne.n	1a0018a4 <xTaskResumeAll+0xc8>
1a001808:	4b29      	ldr	r3, [pc, #164]	; (1a0018b0 <xTaskResumeAll+0xd4>)
1a00180a:	681b      	ldr	r3, [r3, #0]
1a00180c:	b923      	cbnz	r3, 1a001818 <xTaskResumeAll+0x3c>
1a00180e:	2400      	movs	r4, #0
1a001810:	f000 ff02 	bl	1a002618 <vPortExitCritical>
1a001814:	4620      	mov	r0, r4
1a001816:	bd38      	pop	{r3, r4, r5, pc}
1a001818:	2400      	movs	r4, #0
1a00181a:	4b26      	ldr	r3, [pc, #152]	; (1a0018b4 <xTaskResumeAll+0xd8>)
1a00181c:	681b      	ldr	r3, [r3, #0]
1a00181e:	b31b      	cbz	r3, 1a001868 <xTaskResumeAll+0x8c>
1a001820:	4b24      	ldr	r3, [pc, #144]	; (1a0018b4 <xTaskResumeAll+0xd8>)
1a001822:	68db      	ldr	r3, [r3, #12]
1a001824:	68dc      	ldr	r4, [r3, #12]
1a001826:	f104 0018 	add.w	r0, r4, #24
1a00182a:	f7ff fccc 	bl	1a0011c6 <uxListRemove>
1a00182e:	1d25      	adds	r5, r4, #4
1a001830:	4628      	mov	r0, r5
1a001832:	f7ff fcc8 	bl	1a0011c6 <uxListRemove>
1a001836:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001838:	2201      	movs	r2, #1
1a00183a:	409a      	lsls	r2, r3
1a00183c:	491e      	ldr	r1, [pc, #120]	; (1a0018b8 <xTaskResumeAll+0xdc>)
1a00183e:	6808      	ldr	r0, [r1, #0]
1a001840:	4302      	orrs	r2, r0
1a001842:	600a      	str	r2, [r1, #0]
1a001844:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001848:	009a      	lsls	r2, r3, #2
1a00184a:	4629      	mov	r1, r5
1a00184c:	481b      	ldr	r0, [pc, #108]	; (1a0018bc <xTaskResumeAll+0xe0>)
1a00184e:	4410      	add	r0, r2
1a001850:	f7ff fc93 	bl	1a00117a <vListInsertEnd>
1a001854:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001856:	4b1a      	ldr	r3, [pc, #104]	; (1a0018c0 <xTaskResumeAll+0xe4>)
1a001858:	681b      	ldr	r3, [r3, #0]
1a00185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00185c:	429a      	cmp	r2, r3
1a00185e:	d3dc      	bcc.n	1a00181a <xTaskResumeAll+0x3e>
1a001860:	4b18      	ldr	r3, [pc, #96]	; (1a0018c4 <xTaskResumeAll+0xe8>)
1a001862:	2201      	movs	r2, #1
1a001864:	601a      	str	r2, [r3, #0]
1a001866:	e7d8      	b.n	1a00181a <xTaskResumeAll+0x3e>
1a001868:	b10c      	cbz	r4, 1a00186e <xTaskResumeAll+0x92>
1a00186a:	f7ff fcdb 	bl	1a001224 <prvResetNextTaskUnblockTime>
1a00186e:	4b16      	ldr	r3, [pc, #88]	; (1a0018c8 <xTaskResumeAll+0xec>)
1a001870:	681c      	ldr	r4, [r3, #0]
1a001872:	b154      	cbz	r4, 1a00188a <xTaskResumeAll+0xae>
1a001874:	f7ff ff26 	bl	1a0016c4 <xTaskIncrementTick>
1a001878:	b110      	cbz	r0, 1a001880 <xTaskResumeAll+0xa4>
1a00187a:	4b12      	ldr	r3, [pc, #72]	; (1a0018c4 <xTaskResumeAll+0xe8>)
1a00187c:	2201      	movs	r2, #1
1a00187e:	601a      	str	r2, [r3, #0]
1a001880:	3c01      	subs	r4, #1
1a001882:	d1f7      	bne.n	1a001874 <xTaskResumeAll+0x98>
1a001884:	4b10      	ldr	r3, [pc, #64]	; (1a0018c8 <xTaskResumeAll+0xec>)
1a001886:	2200      	movs	r2, #0
1a001888:	601a      	str	r2, [r3, #0]
1a00188a:	4b0e      	ldr	r3, [pc, #56]	; (1a0018c4 <xTaskResumeAll+0xe8>)
1a00188c:	681b      	ldr	r3, [r3, #0]
1a00188e:	b15b      	cbz	r3, 1a0018a8 <xTaskResumeAll+0xcc>
1a001890:	4b0e      	ldr	r3, [pc, #56]	; (1a0018cc <xTaskResumeAll+0xf0>)
1a001892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001896:	601a      	str	r2, [r3, #0]
1a001898:	f3bf 8f4f 	dsb	sy
1a00189c:	f3bf 8f6f 	isb	sy
1a0018a0:	2401      	movs	r4, #1
1a0018a2:	e7b5      	b.n	1a001810 <xTaskResumeAll+0x34>
1a0018a4:	2400      	movs	r4, #0
1a0018a6:	e7b3      	b.n	1a001810 <xTaskResumeAll+0x34>
1a0018a8:	2400      	movs	r4, #0
1a0018aa:	e7b1      	b.n	1a001810 <xTaskResumeAll+0x34>
1a0018ac:	100029cc 	.word	0x100029cc
1a0018b0:	100029c0 	.word	0x100029c0
1a0018b4:	10002a08 	.word	0x10002a08
1a0018b8:	100029d4 	.word	0x100029d4
1a0018bc:	10002934 	.word	0x10002934
1a0018c0:	10002928 	.word	0x10002928
1a0018c4:	10002a4c 	.word	0x10002a4c
1a0018c8:	100029c8 	.word	0x100029c8
1a0018cc:	e000ed04 	.word	0xe000ed04

1a0018d0 <vTaskDelayUntil>:
1a0018d0:	b538      	push	{r3, r4, r5, lr}
1a0018d2:	b150      	cbz	r0, 1a0018ea <vTaskDelayUntil+0x1a>
1a0018d4:	4605      	mov	r5, r0
1a0018d6:	b989      	cbnz	r1, 1a0018fc <vTaskDelayUntil+0x2c>
1a0018d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018dc:	f383 8811 	msr	BASEPRI, r3
1a0018e0:	f3bf 8f6f 	isb	sy
1a0018e4:	f3bf 8f4f 	dsb	sy
1a0018e8:	e7fe      	b.n	1a0018e8 <vTaskDelayUntil+0x18>
1a0018ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ee:	f383 8811 	msr	BASEPRI, r3
1a0018f2:	f3bf 8f6f 	isb	sy
1a0018f6:	f3bf 8f4f 	dsb	sy
1a0018fa:	e7fe      	b.n	1a0018fa <vTaskDelayUntil+0x2a>
1a0018fc:	4b1a      	ldr	r3, [pc, #104]	; (1a001968 <vTaskDelayUntil+0x98>)
1a0018fe:	681b      	ldr	r3, [r3, #0]
1a001900:	b143      	cbz	r3, 1a001914 <vTaskDelayUntil+0x44>
1a001902:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001906:	f383 8811 	msr	BASEPRI, r3
1a00190a:	f3bf 8f6f 	isb	sy
1a00190e:	f3bf 8f4f 	dsb	sy
1a001912:	e7fe      	b.n	1a001912 <vTaskDelayUntil+0x42>
1a001914:	460c      	mov	r4, r1
1a001916:	f7ff fec7 	bl	1a0016a8 <vTaskSuspendAll>
1a00191a:	4b14      	ldr	r3, [pc, #80]	; (1a00196c <vTaskDelayUntil+0x9c>)
1a00191c:	6818      	ldr	r0, [r3, #0]
1a00191e:	682a      	ldr	r2, [r5, #0]
1a001920:	4414      	add	r4, r2
1a001922:	4282      	cmp	r2, r0
1a001924:	d918      	bls.n	1a001958 <vTaskDelayUntil+0x88>
1a001926:	42a2      	cmp	r2, r4
1a001928:	d80c      	bhi.n	1a001944 <vTaskDelayUntil+0x74>
1a00192a:	602c      	str	r4, [r5, #0]
1a00192c:	f7ff ff56 	bl	1a0017dc <xTaskResumeAll>
1a001930:	b938      	cbnz	r0, 1a001942 <vTaskDelayUntil+0x72>
1a001932:	4b0f      	ldr	r3, [pc, #60]	; (1a001970 <vTaskDelayUntil+0xa0>)
1a001934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001938:	601a      	str	r2, [r3, #0]
1a00193a:	f3bf 8f4f 	dsb	sy
1a00193e:	f3bf 8f6f 	isb	sy
1a001942:	bd38      	pop	{r3, r4, r5, pc}
1a001944:	42a0      	cmp	r0, r4
1a001946:	d301      	bcc.n	1a00194c <vTaskDelayUntil+0x7c>
1a001948:	602c      	str	r4, [r5, #0]
1a00194a:	e7ef      	b.n	1a00192c <vTaskDelayUntil+0x5c>
1a00194c:	602c      	str	r4, [r5, #0]
1a00194e:	2100      	movs	r1, #0
1a001950:	1a20      	subs	r0, r4, r0
1a001952:	f7ff fda7 	bl	1a0014a4 <prvAddCurrentTaskToDelayedList>
1a001956:	e7e9      	b.n	1a00192c <vTaskDelayUntil+0x5c>
1a001958:	42a2      	cmp	r2, r4
1a00195a:	d801      	bhi.n	1a001960 <vTaskDelayUntil+0x90>
1a00195c:	42a0      	cmp	r0, r4
1a00195e:	d201      	bcs.n	1a001964 <vTaskDelayUntil+0x94>
1a001960:	602c      	str	r4, [r5, #0]
1a001962:	e7f4      	b.n	1a00194e <vTaskDelayUntil+0x7e>
1a001964:	602c      	str	r4, [r5, #0]
1a001966:	e7e1      	b.n	1a00192c <vTaskDelayUntil+0x5c>
1a001968:	100029cc 	.word	0x100029cc
1a00196c:	10002a48 	.word	0x10002a48
1a001970:	e000ed04 	.word	0xe000ed04

1a001974 <vTaskDelay>:
1a001974:	b510      	push	{r4, lr}
1a001976:	b1a8      	cbz	r0, 1a0019a4 <vTaskDelay+0x30>
1a001978:	4604      	mov	r4, r0
1a00197a:	4b0f      	ldr	r3, [pc, #60]	; (1a0019b8 <vTaskDelay+0x44>)
1a00197c:	681b      	ldr	r3, [r3, #0]
1a00197e:	b143      	cbz	r3, 1a001992 <vTaskDelay+0x1e>
1a001980:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001984:	f383 8811 	msr	BASEPRI, r3
1a001988:	f3bf 8f6f 	isb	sy
1a00198c:	f3bf 8f4f 	dsb	sy
1a001990:	e7fe      	b.n	1a001990 <vTaskDelay+0x1c>
1a001992:	f7ff fe89 	bl	1a0016a8 <vTaskSuspendAll>
1a001996:	2100      	movs	r1, #0
1a001998:	4620      	mov	r0, r4
1a00199a:	f7ff fd83 	bl	1a0014a4 <prvAddCurrentTaskToDelayedList>
1a00199e:	f7ff ff1d 	bl	1a0017dc <xTaskResumeAll>
1a0019a2:	b938      	cbnz	r0, 1a0019b4 <vTaskDelay+0x40>
1a0019a4:	4b05      	ldr	r3, [pc, #20]	; (1a0019bc <vTaskDelay+0x48>)
1a0019a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019aa:	601a      	str	r2, [r3, #0]
1a0019ac:	f3bf 8f4f 	dsb	sy
1a0019b0:	f3bf 8f6f 	isb	sy
1a0019b4:	bd10      	pop	{r4, pc}
1a0019b6:	bf00      	nop
1a0019b8:	100029cc 	.word	0x100029cc
1a0019bc:	e000ed04 	.word	0xe000ed04

1a0019c0 <vTaskSwitchContext>:
1a0019c0:	4b2c      	ldr	r3, [pc, #176]	; (1a001a74 <vTaskSwitchContext+0xb4>)
1a0019c2:	681b      	ldr	r3, [r3, #0]
1a0019c4:	b11b      	cbz	r3, 1a0019ce <vTaskSwitchContext+0xe>
1a0019c6:	4b2c      	ldr	r3, [pc, #176]	; (1a001a78 <vTaskSwitchContext+0xb8>)
1a0019c8:	2201      	movs	r2, #1
1a0019ca:	601a      	str	r2, [r3, #0]
1a0019cc:	4770      	bx	lr
1a0019ce:	b510      	push	{r4, lr}
1a0019d0:	4b29      	ldr	r3, [pc, #164]	; (1a001a78 <vTaskSwitchContext+0xb8>)
1a0019d2:	2200      	movs	r2, #0
1a0019d4:	601a      	str	r2, [r3, #0]
1a0019d6:	4b29      	ldr	r3, [pc, #164]	; (1a001a7c <vTaskSwitchContext+0xbc>)
1a0019d8:	681b      	ldr	r3, [r3, #0]
1a0019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0019dc:	681a      	ldr	r2, [r3, #0]
1a0019de:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0019e2:	d103      	bne.n	1a0019ec <vTaskSwitchContext+0x2c>
1a0019e4:	685a      	ldr	r2, [r3, #4]
1a0019e6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0019ea:	d01b      	beq.n	1a001a24 <vTaskSwitchContext+0x64>
1a0019ec:	4b23      	ldr	r3, [pc, #140]	; (1a001a7c <vTaskSwitchContext+0xbc>)
1a0019ee:	6818      	ldr	r0, [r3, #0]
1a0019f0:	6819      	ldr	r1, [r3, #0]
1a0019f2:	3134      	adds	r1, #52	; 0x34
1a0019f4:	f7ff fc14 	bl	1a001220 <vApplicationStackOverflowHook>
1a0019f8:	4b21      	ldr	r3, [pc, #132]	; (1a001a80 <vTaskSwitchContext+0xc0>)
1a0019fa:	681b      	ldr	r3, [r3, #0]
1a0019fc:	fab3 f383 	clz	r3, r3
1a001a00:	b2db      	uxtb	r3, r3
1a001a02:	f1c3 031f 	rsb	r3, r3, #31
1a001a06:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001a0a:	008a      	lsls	r2, r1, #2
1a001a0c:	491d      	ldr	r1, [pc, #116]	; (1a001a84 <vTaskSwitchContext+0xc4>)
1a001a0e:	588a      	ldr	r2, [r1, r2]
1a001a10:	b98a      	cbnz	r2, 1a001a36 <vTaskSwitchContext+0x76>
1a001a12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a16:	f383 8811 	msr	BASEPRI, r3
1a001a1a:	f3bf 8f6f 	isb	sy
1a001a1e:	f3bf 8f4f 	dsb	sy
1a001a22:	e7fe      	b.n	1a001a22 <vTaskSwitchContext+0x62>
1a001a24:	689a      	ldr	r2, [r3, #8]
1a001a26:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a2a:	d1df      	bne.n	1a0019ec <vTaskSwitchContext+0x2c>
1a001a2c:	68db      	ldr	r3, [r3, #12]
1a001a2e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001a32:	d1db      	bne.n	1a0019ec <vTaskSwitchContext+0x2c>
1a001a34:	e7e0      	b.n	1a0019f8 <vTaskSwitchContext+0x38>
1a001a36:	4813      	ldr	r0, [pc, #76]	; (1a001a84 <vTaskSwitchContext+0xc4>)
1a001a38:	009a      	lsls	r2, r3, #2
1a001a3a:	18d4      	adds	r4, r2, r3
1a001a3c:	00a1      	lsls	r1, r4, #2
1a001a3e:	4401      	add	r1, r0
1a001a40:	684c      	ldr	r4, [r1, #4]
1a001a42:	6864      	ldr	r4, [r4, #4]
1a001a44:	604c      	str	r4, [r1, #4]
1a001a46:	441a      	add	r2, r3
1a001a48:	0091      	lsls	r1, r2, #2
1a001a4a:	3108      	adds	r1, #8
1a001a4c:	4408      	add	r0, r1
1a001a4e:	4284      	cmp	r4, r0
1a001a50:	d009      	beq.n	1a001a66 <vTaskSwitchContext+0xa6>
1a001a52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a56:	009a      	lsls	r2, r3, #2
1a001a58:	4b0a      	ldr	r3, [pc, #40]	; (1a001a84 <vTaskSwitchContext+0xc4>)
1a001a5a:	4413      	add	r3, r2
1a001a5c:	685b      	ldr	r3, [r3, #4]
1a001a5e:	68da      	ldr	r2, [r3, #12]
1a001a60:	4b06      	ldr	r3, [pc, #24]	; (1a001a7c <vTaskSwitchContext+0xbc>)
1a001a62:	601a      	str	r2, [r3, #0]
1a001a64:	bd10      	pop	{r4, pc}
1a001a66:	6861      	ldr	r1, [r4, #4]
1a001a68:	4806      	ldr	r0, [pc, #24]	; (1a001a84 <vTaskSwitchContext+0xc4>)
1a001a6a:	2214      	movs	r2, #20
1a001a6c:	fb02 0203 	mla	r2, r2, r3, r0
1a001a70:	6051      	str	r1, [r2, #4]
1a001a72:	e7ee      	b.n	1a001a52 <vTaskSwitchContext+0x92>
1a001a74:	100029cc 	.word	0x100029cc
1a001a78:	10002a4c 	.word	0x10002a4c
1a001a7c:	10002928 	.word	0x10002928
1a001a80:	100029d4 	.word	0x100029d4
1a001a84:	10002934 	.word	0x10002934

1a001a88 <vTaskPlaceOnEventList>:
1a001a88:	b940      	cbnz	r0, 1a001a9c <vTaskPlaceOnEventList+0x14>
1a001a8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a8e:	f383 8811 	msr	BASEPRI, r3
1a001a92:	f3bf 8f6f 	isb	sy
1a001a96:	f3bf 8f4f 	dsb	sy
1a001a9a:	e7fe      	b.n	1a001a9a <vTaskPlaceOnEventList+0x12>
1a001a9c:	b510      	push	{r4, lr}
1a001a9e:	460c      	mov	r4, r1
1a001aa0:	4b04      	ldr	r3, [pc, #16]	; (1a001ab4 <vTaskPlaceOnEventList+0x2c>)
1a001aa2:	6819      	ldr	r1, [r3, #0]
1a001aa4:	3118      	adds	r1, #24
1a001aa6:	f7ff fb74 	bl	1a001192 <vListInsert>
1a001aaa:	2101      	movs	r1, #1
1a001aac:	4620      	mov	r0, r4
1a001aae:	f7ff fcf9 	bl	1a0014a4 <prvAddCurrentTaskToDelayedList>
1a001ab2:	bd10      	pop	{r4, pc}
1a001ab4:	10002928 	.word	0x10002928

1a001ab8 <vTaskPlaceOnEventListRestricted>:
1a001ab8:	b538      	push	{r3, r4, r5, lr}
1a001aba:	b940      	cbnz	r0, 1a001ace <vTaskPlaceOnEventListRestricted+0x16>
1a001abc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ac0:	f383 8811 	msr	BASEPRI, r3
1a001ac4:	f3bf 8f6f 	isb	sy
1a001ac8:	f3bf 8f4f 	dsb	sy
1a001acc:	e7fe      	b.n	1a001acc <vTaskPlaceOnEventListRestricted+0x14>
1a001ace:	460c      	mov	r4, r1
1a001ad0:	4615      	mov	r5, r2
1a001ad2:	4a06      	ldr	r2, [pc, #24]	; (1a001aec <vTaskPlaceOnEventListRestricted+0x34>)
1a001ad4:	6811      	ldr	r1, [r2, #0]
1a001ad6:	3118      	adds	r1, #24
1a001ad8:	f7ff fb4f 	bl	1a00117a <vListInsertEnd>
1a001adc:	b10d      	cbz	r5, 1a001ae2 <vTaskPlaceOnEventListRestricted+0x2a>
1a001ade:	f04f 34ff 	mov.w	r4, #4294967295
1a001ae2:	4629      	mov	r1, r5
1a001ae4:	4620      	mov	r0, r4
1a001ae6:	f7ff fcdd 	bl	1a0014a4 <prvAddCurrentTaskToDelayedList>
1a001aea:	bd38      	pop	{r3, r4, r5, pc}
1a001aec:	10002928 	.word	0x10002928

1a001af0 <xTaskRemoveFromEventList>:
1a001af0:	b538      	push	{r3, r4, r5, lr}
1a001af2:	68c3      	ldr	r3, [r0, #12]
1a001af4:	68dc      	ldr	r4, [r3, #12]
1a001af6:	b944      	cbnz	r4, 1a001b0a <xTaskRemoveFromEventList+0x1a>
1a001af8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001afc:	f383 8811 	msr	BASEPRI, r3
1a001b00:	f3bf 8f6f 	isb	sy
1a001b04:	f3bf 8f4f 	dsb	sy
1a001b08:	e7fe      	b.n	1a001b08 <xTaskRemoveFromEventList+0x18>
1a001b0a:	f104 0518 	add.w	r5, r4, #24
1a001b0e:	4628      	mov	r0, r5
1a001b10:	f7ff fb59 	bl	1a0011c6 <uxListRemove>
1a001b14:	4b13      	ldr	r3, [pc, #76]	; (1a001b64 <xTaskRemoveFromEventList+0x74>)
1a001b16:	681b      	ldr	r3, [r3, #0]
1a001b18:	b9e3      	cbnz	r3, 1a001b54 <xTaskRemoveFromEventList+0x64>
1a001b1a:	1d25      	adds	r5, r4, #4
1a001b1c:	4628      	mov	r0, r5
1a001b1e:	f7ff fb52 	bl	1a0011c6 <uxListRemove>
1a001b22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b24:	2201      	movs	r2, #1
1a001b26:	409a      	lsls	r2, r3
1a001b28:	490f      	ldr	r1, [pc, #60]	; (1a001b68 <xTaskRemoveFromEventList+0x78>)
1a001b2a:	6808      	ldr	r0, [r1, #0]
1a001b2c:	4302      	orrs	r2, r0
1a001b2e:	600a      	str	r2, [r1, #0]
1a001b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b34:	009a      	lsls	r2, r3, #2
1a001b36:	4629      	mov	r1, r5
1a001b38:	480c      	ldr	r0, [pc, #48]	; (1a001b6c <xTaskRemoveFromEventList+0x7c>)
1a001b3a:	4410      	add	r0, r2
1a001b3c:	f7ff fb1d 	bl	1a00117a <vListInsertEnd>
1a001b40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b42:	4b0b      	ldr	r3, [pc, #44]	; (1a001b70 <xTaskRemoveFromEventList+0x80>)
1a001b44:	681b      	ldr	r3, [r3, #0]
1a001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b48:	429a      	cmp	r2, r3
1a001b4a:	d908      	bls.n	1a001b5e <xTaskRemoveFromEventList+0x6e>
1a001b4c:	2001      	movs	r0, #1
1a001b4e:	4b09      	ldr	r3, [pc, #36]	; (1a001b74 <xTaskRemoveFromEventList+0x84>)
1a001b50:	6018      	str	r0, [r3, #0]
1a001b52:	bd38      	pop	{r3, r4, r5, pc}
1a001b54:	4629      	mov	r1, r5
1a001b56:	4808      	ldr	r0, [pc, #32]	; (1a001b78 <xTaskRemoveFromEventList+0x88>)
1a001b58:	f7ff fb0f 	bl	1a00117a <vListInsertEnd>
1a001b5c:	e7f0      	b.n	1a001b40 <xTaskRemoveFromEventList+0x50>
1a001b5e:	2000      	movs	r0, #0
1a001b60:	e7f7      	b.n	1a001b52 <xTaskRemoveFromEventList+0x62>
1a001b62:	bf00      	nop
1a001b64:	100029cc 	.word	0x100029cc
1a001b68:	100029d4 	.word	0x100029d4
1a001b6c:	10002934 	.word	0x10002934
1a001b70:	10002928 	.word	0x10002928
1a001b74:	10002a4c 	.word	0x10002a4c
1a001b78:	10002a08 	.word	0x10002a08

1a001b7c <vTaskInternalSetTimeOutState>:
1a001b7c:	4b03      	ldr	r3, [pc, #12]	; (1a001b8c <vTaskInternalSetTimeOutState+0x10>)
1a001b7e:	681b      	ldr	r3, [r3, #0]
1a001b80:	6003      	str	r3, [r0, #0]
1a001b82:	4b03      	ldr	r3, [pc, #12]	; (1a001b90 <vTaskInternalSetTimeOutState+0x14>)
1a001b84:	681b      	ldr	r3, [r3, #0]
1a001b86:	6043      	str	r3, [r0, #4]
1a001b88:	4770      	bx	lr
1a001b8a:	bf00      	nop
1a001b8c:	10002a04 	.word	0x10002a04
1a001b90:	10002a48 	.word	0x10002a48

1a001b94 <xTaskCheckForTimeOut>:
1a001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001b96:	b150      	cbz	r0, 1a001bae <xTaskCheckForTimeOut+0x1a>
1a001b98:	4605      	mov	r5, r0
1a001b9a:	b989      	cbnz	r1, 1a001bc0 <xTaskCheckForTimeOut+0x2c>
1a001b9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ba0:	f383 8811 	msr	BASEPRI, r3
1a001ba4:	f3bf 8f6f 	isb	sy
1a001ba8:	f3bf 8f4f 	dsb	sy
1a001bac:	e7fe      	b.n	1a001bac <xTaskCheckForTimeOut+0x18>
1a001bae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bb2:	f383 8811 	msr	BASEPRI, r3
1a001bb6:	f3bf 8f6f 	isb	sy
1a001bba:	f3bf 8f4f 	dsb	sy
1a001bbe:	e7fe      	b.n	1a001bbe <xTaskCheckForTimeOut+0x2a>
1a001bc0:	460c      	mov	r4, r1
1a001bc2:	f000 fd07 	bl	1a0025d4 <vPortEnterCritical>
1a001bc6:	4b11      	ldr	r3, [pc, #68]	; (1a001c0c <xTaskCheckForTimeOut+0x78>)
1a001bc8:	6819      	ldr	r1, [r3, #0]
1a001bca:	6868      	ldr	r0, [r5, #4]
1a001bcc:	1a0a      	subs	r2, r1, r0
1a001bce:	6823      	ldr	r3, [r4, #0]
1a001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001bd4:	d016      	beq.n	1a001c04 <xTaskCheckForTimeOut+0x70>
1a001bd6:	682f      	ldr	r7, [r5, #0]
1a001bd8:	4e0d      	ldr	r6, [pc, #52]	; (1a001c10 <xTaskCheckForTimeOut+0x7c>)
1a001bda:	6836      	ldr	r6, [r6, #0]
1a001bdc:	42b7      	cmp	r7, r6
1a001bde:	d001      	beq.n	1a001be4 <xTaskCheckForTimeOut+0x50>
1a001be0:	4288      	cmp	r0, r1
1a001be2:	d911      	bls.n	1a001c08 <xTaskCheckForTimeOut+0x74>
1a001be4:	4293      	cmp	r3, r2
1a001be6:	d803      	bhi.n	1a001bf0 <xTaskCheckForTimeOut+0x5c>
1a001be8:	2300      	movs	r3, #0
1a001bea:	6023      	str	r3, [r4, #0]
1a001bec:	2401      	movs	r4, #1
1a001bee:	e005      	b.n	1a001bfc <xTaskCheckForTimeOut+0x68>
1a001bf0:	1a9b      	subs	r3, r3, r2
1a001bf2:	6023      	str	r3, [r4, #0]
1a001bf4:	4628      	mov	r0, r5
1a001bf6:	f7ff ffc1 	bl	1a001b7c <vTaskInternalSetTimeOutState>
1a001bfa:	2400      	movs	r4, #0
1a001bfc:	f000 fd0c 	bl	1a002618 <vPortExitCritical>
1a001c00:	4620      	mov	r0, r4
1a001c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001c04:	2400      	movs	r4, #0
1a001c06:	e7f9      	b.n	1a001bfc <xTaskCheckForTimeOut+0x68>
1a001c08:	2401      	movs	r4, #1
1a001c0a:	e7f7      	b.n	1a001bfc <xTaskCheckForTimeOut+0x68>
1a001c0c:	10002a48 	.word	0x10002a48
1a001c10:	10002a04 	.word	0x10002a04

1a001c14 <vTaskMissedYield>:
1a001c14:	4b01      	ldr	r3, [pc, #4]	; (1a001c1c <vTaskMissedYield+0x8>)
1a001c16:	2201      	movs	r2, #1
1a001c18:	601a      	str	r2, [r3, #0]
1a001c1a:	4770      	bx	lr
1a001c1c:	10002a4c 	.word	0x10002a4c

1a001c20 <xTaskGetSchedulerState>:
1a001c20:	4b05      	ldr	r3, [pc, #20]	; (1a001c38 <xTaskGetSchedulerState+0x18>)
1a001c22:	681b      	ldr	r3, [r3, #0]
1a001c24:	b133      	cbz	r3, 1a001c34 <xTaskGetSchedulerState+0x14>
1a001c26:	4b05      	ldr	r3, [pc, #20]	; (1a001c3c <xTaskGetSchedulerState+0x1c>)
1a001c28:	681b      	ldr	r3, [r3, #0]
1a001c2a:	b10b      	cbz	r3, 1a001c30 <xTaskGetSchedulerState+0x10>
1a001c2c:	2000      	movs	r0, #0
1a001c2e:	4770      	bx	lr
1a001c30:	2002      	movs	r0, #2
1a001c32:	4770      	bx	lr
1a001c34:	2001      	movs	r0, #1
1a001c36:	4770      	bx	lr
1a001c38:	10002a1c 	.word	0x10002a1c
1a001c3c:	100029cc 	.word	0x100029cc

1a001c40 <xTaskPriorityInherit>:
1a001c40:	2800      	cmp	r0, #0
1a001c42:	d050      	beq.n	1a001ce6 <xTaskPriorityInherit+0xa6>
1a001c44:	b538      	push	{r3, r4, r5, lr}
1a001c46:	4604      	mov	r4, r0
1a001c48:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a001c4a:	4928      	ldr	r1, [pc, #160]	; (1a001cec <xTaskPriorityInherit+0xac>)
1a001c4c:	6809      	ldr	r1, [r1, #0]
1a001c4e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001c50:	428a      	cmp	r2, r1
1a001c52:	d23e      	bcs.n	1a001cd2 <xTaskPriorityInherit+0x92>
1a001c54:	6981      	ldr	r1, [r0, #24]
1a001c56:	2900      	cmp	r1, #0
1a001c58:	db05      	blt.n	1a001c66 <xTaskPriorityInherit+0x26>
1a001c5a:	4924      	ldr	r1, [pc, #144]	; (1a001cec <xTaskPriorityInherit+0xac>)
1a001c5c:	6809      	ldr	r1, [r1, #0]
1a001c5e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001c60:	f1c1 0107 	rsb	r1, r1, #7
1a001c64:	6181      	str	r1, [r0, #24]
1a001c66:	6960      	ldr	r0, [r4, #20]
1a001c68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001c6c:	0091      	lsls	r1, r2, #2
1a001c6e:	4a20      	ldr	r2, [pc, #128]	; (1a001cf0 <xTaskPriorityInherit+0xb0>)
1a001c70:	440a      	add	r2, r1
1a001c72:	4290      	cmp	r0, r2
1a001c74:	d005      	beq.n	1a001c82 <xTaskPriorityInherit+0x42>
1a001c76:	4a1d      	ldr	r2, [pc, #116]	; (1a001cec <xTaskPriorityInherit+0xac>)
1a001c78:	6812      	ldr	r2, [r2, #0]
1a001c7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001c7c:	62e2      	str	r2, [r4, #44]	; 0x2c
1a001c7e:	2001      	movs	r0, #1
1a001c80:	bd38      	pop	{r3, r4, r5, pc}
1a001c82:	1d25      	adds	r5, r4, #4
1a001c84:	4628      	mov	r0, r5
1a001c86:	f7ff fa9e 	bl	1a0011c6 <uxListRemove>
1a001c8a:	b968      	cbnz	r0, 1a001ca8 <xTaskPriorityInherit+0x68>
1a001c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001c8e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001c92:	008a      	lsls	r2, r1, #2
1a001c94:	4916      	ldr	r1, [pc, #88]	; (1a001cf0 <xTaskPriorityInherit+0xb0>)
1a001c96:	588a      	ldr	r2, [r1, r2]
1a001c98:	b932      	cbnz	r2, 1a001ca8 <xTaskPriorityInherit+0x68>
1a001c9a:	2201      	movs	r2, #1
1a001c9c:	409a      	lsls	r2, r3
1a001c9e:	4915      	ldr	r1, [pc, #84]	; (1a001cf4 <xTaskPriorityInherit+0xb4>)
1a001ca0:	680b      	ldr	r3, [r1, #0]
1a001ca2:	ea23 0302 	bic.w	r3, r3, r2
1a001ca6:	600b      	str	r3, [r1, #0]
1a001ca8:	4b10      	ldr	r3, [pc, #64]	; (1a001cec <xTaskPriorityInherit+0xac>)
1a001caa:	681b      	ldr	r3, [r3, #0]
1a001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001cae:	62e3      	str	r3, [r4, #44]	; 0x2c
1a001cb0:	2401      	movs	r4, #1
1a001cb2:	fa04 f203 	lsl.w	r2, r4, r3
1a001cb6:	490f      	ldr	r1, [pc, #60]	; (1a001cf4 <xTaskPriorityInherit+0xb4>)
1a001cb8:	6808      	ldr	r0, [r1, #0]
1a001cba:	4302      	orrs	r2, r0
1a001cbc:	600a      	str	r2, [r1, #0]
1a001cbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001cc2:	009a      	lsls	r2, r3, #2
1a001cc4:	4629      	mov	r1, r5
1a001cc6:	480a      	ldr	r0, [pc, #40]	; (1a001cf0 <xTaskPriorityInherit+0xb0>)
1a001cc8:	4410      	add	r0, r2
1a001cca:	f7ff fa56 	bl	1a00117a <vListInsertEnd>
1a001cce:	4620      	mov	r0, r4
1a001cd0:	e7d6      	b.n	1a001c80 <xTaskPriorityInherit+0x40>
1a001cd2:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001cd4:	4b05      	ldr	r3, [pc, #20]	; (1a001cec <xTaskPriorityInherit+0xac>)
1a001cd6:	681b      	ldr	r3, [r3, #0]
1a001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001cda:	429a      	cmp	r2, r3
1a001cdc:	d201      	bcs.n	1a001ce2 <xTaskPriorityInherit+0xa2>
1a001cde:	2001      	movs	r0, #1
1a001ce0:	e7ce      	b.n	1a001c80 <xTaskPriorityInherit+0x40>
1a001ce2:	2000      	movs	r0, #0
1a001ce4:	e7cc      	b.n	1a001c80 <xTaskPriorityInherit+0x40>
1a001ce6:	2000      	movs	r0, #0
1a001ce8:	4770      	bx	lr
1a001cea:	bf00      	nop
1a001cec:	10002928 	.word	0x10002928
1a001cf0:	10002934 	.word	0x10002934
1a001cf4:	100029d4 	.word	0x100029d4

1a001cf8 <xTaskPriorityDisinherit>:
1a001cf8:	2800      	cmp	r0, #0
1a001cfa:	d049      	beq.n	1a001d90 <xTaskPriorityDisinherit+0x98>
1a001cfc:	b538      	push	{r3, r4, r5, lr}
1a001cfe:	4604      	mov	r4, r0
1a001d00:	4a26      	ldr	r2, [pc, #152]	; (1a001d9c <xTaskPriorityDisinherit+0xa4>)
1a001d02:	6812      	ldr	r2, [r2, #0]
1a001d04:	4282      	cmp	r2, r0
1a001d06:	d008      	beq.n	1a001d1a <xTaskPriorityDisinherit+0x22>
1a001d08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d0c:	f383 8811 	msr	BASEPRI, r3
1a001d10:	f3bf 8f6f 	isb	sy
1a001d14:	f3bf 8f4f 	dsb	sy
1a001d18:	e7fe      	b.n	1a001d18 <xTaskPriorityDisinherit+0x20>
1a001d1a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001d1c:	b942      	cbnz	r2, 1a001d30 <xTaskPriorityDisinherit+0x38>
1a001d1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d22:	f383 8811 	msr	BASEPRI, r3
1a001d26:	f3bf 8f6f 	isb	sy
1a001d2a:	f3bf 8f4f 	dsb	sy
1a001d2e:	e7fe      	b.n	1a001d2e <xTaskPriorityDisinherit+0x36>
1a001d30:	3a01      	subs	r2, #1
1a001d32:	6542      	str	r2, [r0, #84]	; 0x54
1a001d34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001d36:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001d38:	4288      	cmp	r0, r1
1a001d3a:	d02b      	beq.n	1a001d94 <xTaskPriorityDisinherit+0x9c>
1a001d3c:	bb62      	cbnz	r2, 1a001d98 <xTaskPriorityDisinherit+0xa0>
1a001d3e:	1d25      	adds	r5, r4, #4
1a001d40:	4628      	mov	r0, r5
1a001d42:	f7ff fa40 	bl	1a0011c6 <uxListRemove>
1a001d46:	b970      	cbnz	r0, 1a001d66 <xTaskPriorityDisinherit+0x6e>
1a001d48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d4a:	2314      	movs	r3, #20
1a001d4c:	fb03 f302 	mul.w	r3, r3, r2
1a001d50:	4913      	ldr	r1, [pc, #76]	; (1a001da0 <xTaskPriorityDisinherit+0xa8>)
1a001d52:	58cb      	ldr	r3, [r1, r3]
1a001d54:	b93b      	cbnz	r3, 1a001d66 <xTaskPriorityDisinherit+0x6e>
1a001d56:	2301      	movs	r3, #1
1a001d58:	fa03 f202 	lsl.w	r2, r3, r2
1a001d5c:	4911      	ldr	r1, [pc, #68]	; (1a001da4 <xTaskPriorityDisinherit+0xac>)
1a001d5e:	680b      	ldr	r3, [r1, #0]
1a001d60:	ea23 0302 	bic.w	r3, r3, r2
1a001d64:	600b      	str	r3, [r1, #0]
1a001d66:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001d68:	62e3      	str	r3, [r4, #44]	; 0x2c
1a001d6a:	f1c3 0207 	rsb	r2, r3, #7
1a001d6e:	61a2      	str	r2, [r4, #24]
1a001d70:	2401      	movs	r4, #1
1a001d72:	fa04 f203 	lsl.w	r2, r4, r3
1a001d76:	490b      	ldr	r1, [pc, #44]	; (1a001da4 <xTaskPriorityDisinherit+0xac>)
1a001d78:	6808      	ldr	r0, [r1, #0]
1a001d7a:	4302      	orrs	r2, r0
1a001d7c:	600a      	str	r2, [r1, #0]
1a001d7e:	4629      	mov	r1, r5
1a001d80:	4a07      	ldr	r2, [pc, #28]	; (1a001da0 <xTaskPriorityDisinherit+0xa8>)
1a001d82:	2014      	movs	r0, #20
1a001d84:	fb00 2003 	mla	r0, r0, r3, r2
1a001d88:	f7ff f9f7 	bl	1a00117a <vListInsertEnd>
1a001d8c:	4620      	mov	r0, r4
1a001d8e:	bd38      	pop	{r3, r4, r5, pc}
1a001d90:	2000      	movs	r0, #0
1a001d92:	4770      	bx	lr
1a001d94:	2000      	movs	r0, #0
1a001d96:	e7fa      	b.n	1a001d8e <xTaskPriorityDisinherit+0x96>
1a001d98:	2000      	movs	r0, #0
1a001d9a:	e7f8      	b.n	1a001d8e <xTaskPriorityDisinherit+0x96>
1a001d9c:	10002928 	.word	0x10002928
1a001da0:	10002934 	.word	0x10002934
1a001da4:	100029d4 	.word	0x100029d4

1a001da8 <vTaskPriorityDisinheritAfterTimeout>:
1a001da8:	2800      	cmp	r0, #0
1a001daa:	d055      	beq.n	1a001e58 <vTaskPriorityDisinheritAfterTimeout+0xb0>
1a001dac:	b538      	push	{r3, r4, r5, lr}
1a001dae:	4603      	mov	r3, r0
1a001db0:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001db2:	b940      	cbnz	r0, 1a001dc6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001db4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001db8:	f383 8811 	msr	BASEPRI, r3
1a001dbc:	f3bf 8f6f 	isb	sy
1a001dc0:	f3bf 8f4f 	dsb	sy
1a001dc4:	e7fe      	b.n	1a001dc4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
1a001dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a001dc8:	428a      	cmp	r2, r1
1a001dca:	d200      	bcs.n	1a001dce <vTaskPriorityDisinheritAfterTimeout+0x26>
1a001dcc:	460a      	mov	r2, r1
1a001dce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a001dd0:	4291      	cmp	r1, r2
1a001dd2:	d001      	beq.n	1a001dd8 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001dd4:	2801      	cmp	r0, #1
1a001dd6:	d000      	beq.n	1a001dda <vTaskPriorityDisinheritAfterTimeout+0x32>
1a001dd8:	bd38      	pop	{r3, r4, r5, pc}
1a001dda:	4820      	ldr	r0, [pc, #128]	; (1a001e5c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a001ddc:	6800      	ldr	r0, [r0, #0]
1a001dde:	4298      	cmp	r0, r3
1a001de0:	d108      	bne.n	1a001df4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a001de2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001de6:	f383 8811 	msr	BASEPRI, r3
1a001dea:	f3bf 8f6f 	isb	sy
1a001dee:	f3bf 8f4f 	dsb	sy
1a001df2:	e7fe      	b.n	1a001df2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
1a001df4:	62da      	str	r2, [r3, #44]	; 0x2c
1a001df6:	6998      	ldr	r0, [r3, #24]
1a001df8:	2800      	cmp	r0, #0
1a001dfa:	db02      	blt.n	1a001e02 <vTaskPriorityDisinheritAfterTimeout+0x5a>
1a001dfc:	f1c2 0207 	rsb	r2, r2, #7
1a001e00:	619a      	str	r2, [r3, #24]
1a001e02:	695a      	ldr	r2, [r3, #20]
1a001e04:	4816      	ldr	r0, [pc, #88]	; (1a001e60 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001e06:	2414      	movs	r4, #20
1a001e08:	fb04 0101 	mla	r1, r4, r1, r0
1a001e0c:	428a      	cmp	r2, r1
1a001e0e:	d1e3      	bne.n	1a001dd8 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001e10:	461c      	mov	r4, r3
1a001e12:	1d1d      	adds	r5, r3, #4
1a001e14:	4628      	mov	r0, r5
1a001e16:	f7ff f9d6 	bl	1a0011c6 <uxListRemove>
1a001e1a:	b970      	cbnz	r0, 1a001e3a <vTaskPriorityDisinheritAfterTimeout+0x92>
1a001e1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001e1e:	2314      	movs	r3, #20
1a001e20:	fb03 f302 	mul.w	r3, r3, r2
1a001e24:	490e      	ldr	r1, [pc, #56]	; (1a001e60 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001e26:	58cb      	ldr	r3, [r1, r3]
1a001e28:	b93b      	cbnz	r3, 1a001e3a <vTaskPriorityDisinheritAfterTimeout+0x92>
1a001e2a:	2301      	movs	r3, #1
1a001e2c:	fa03 f202 	lsl.w	r2, r3, r2
1a001e30:	490c      	ldr	r1, [pc, #48]	; (1a001e64 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001e32:	680b      	ldr	r3, [r1, #0]
1a001e34:	ea23 0302 	bic.w	r3, r3, r2
1a001e38:	600b      	str	r3, [r1, #0]
1a001e3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001e3c:	2301      	movs	r3, #1
1a001e3e:	4093      	lsls	r3, r2
1a001e40:	4908      	ldr	r1, [pc, #32]	; (1a001e64 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001e42:	6808      	ldr	r0, [r1, #0]
1a001e44:	4303      	orrs	r3, r0
1a001e46:	600b      	str	r3, [r1, #0]
1a001e48:	4629      	mov	r1, r5
1a001e4a:	4b05      	ldr	r3, [pc, #20]	; (1a001e60 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001e4c:	2014      	movs	r0, #20
1a001e4e:	fb00 3002 	mla	r0, r0, r2, r3
1a001e52:	f7ff f992 	bl	1a00117a <vListInsertEnd>
1a001e56:	e7bf      	b.n	1a001dd8 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001e58:	4770      	bx	lr
1a001e5a:	bf00      	nop
1a001e5c:	10002928 	.word	0x10002928
1a001e60:	10002934 	.word	0x10002934
1a001e64:	100029d4 	.word	0x100029d4

1a001e68 <pvTaskIncrementMutexHeldCount>:
1a001e68:	4b05      	ldr	r3, [pc, #20]	; (1a001e80 <pvTaskIncrementMutexHeldCount+0x18>)
1a001e6a:	681b      	ldr	r3, [r3, #0]
1a001e6c:	b123      	cbz	r3, 1a001e78 <pvTaskIncrementMutexHeldCount+0x10>
1a001e6e:	4b04      	ldr	r3, [pc, #16]	; (1a001e80 <pvTaskIncrementMutexHeldCount+0x18>)
1a001e70:	681a      	ldr	r2, [r3, #0]
1a001e72:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001e74:	3301      	adds	r3, #1
1a001e76:	6553      	str	r3, [r2, #84]	; 0x54
1a001e78:	4b01      	ldr	r3, [pc, #4]	; (1a001e80 <pvTaskIncrementMutexHeldCount+0x18>)
1a001e7a:	6818      	ldr	r0, [r3, #0]
1a001e7c:	4770      	bx	lr
1a001e7e:	bf00      	nop
1a001e80:	10002928 	.word	0x10002928

1a001e84 <xTaskNotifyWait>:
1a001e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001e86:	4607      	mov	r7, r0
1a001e88:	460d      	mov	r5, r1
1a001e8a:	4614      	mov	r4, r2
1a001e8c:	461e      	mov	r6, r3
1a001e8e:	f000 fba1 	bl	1a0025d4 <vPortEnterCritical>
1a001e92:	4b20      	ldr	r3, [pc, #128]	; (1a001f14 <xTaskNotifyWait+0x90>)
1a001e94:	681b      	ldr	r3, [r3, #0]
1a001e96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
1a001e9a:	b2db      	uxtb	r3, r3
1a001e9c:	2b02      	cmp	r3, #2
1a001e9e:	d00a      	beq.n	1a001eb6 <xTaskNotifyWait+0x32>
1a001ea0:	4b1c      	ldr	r3, [pc, #112]	; (1a001f14 <xTaskNotifyWait+0x90>)
1a001ea2:	681a      	ldr	r2, [r3, #0]
1a001ea4:	6d90      	ldr	r0, [r2, #88]	; 0x58
1a001ea6:	ea20 0007 	bic.w	r0, r0, r7
1a001eaa:	6590      	str	r0, [r2, #88]	; 0x58
1a001eac:	681b      	ldr	r3, [r3, #0]
1a001eae:	2201      	movs	r2, #1
1a001eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
1a001eb4:	b9ce      	cbnz	r6, 1a001eea <xTaskNotifyWait+0x66>
1a001eb6:	f000 fbaf 	bl	1a002618 <vPortExitCritical>
1a001eba:	f000 fb8b 	bl	1a0025d4 <vPortEnterCritical>
1a001ebe:	b11c      	cbz	r4, 1a001ec8 <xTaskNotifyWait+0x44>
1a001ec0:	4b14      	ldr	r3, [pc, #80]	; (1a001f14 <xTaskNotifyWait+0x90>)
1a001ec2:	681b      	ldr	r3, [r3, #0]
1a001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1a001ec6:	6023      	str	r3, [r4, #0]
1a001ec8:	4b12      	ldr	r3, [pc, #72]	; (1a001f14 <xTaskNotifyWait+0x90>)
1a001eca:	681b      	ldr	r3, [r3, #0]
1a001ecc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
1a001ed0:	b2db      	uxtb	r3, r3
1a001ed2:	2b02      	cmp	r3, #2
1a001ed4:	d016      	beq.n	1a001f04 <xTaskNotifyWait+0x80>
1a001ed6:	2400      	movs	r4, #0
1a001ed8:	4b0e      	ldr	r3, [pc, #56]	; (1a001f14 <xTaskNotifyWait+0x90>)
1a001eda:	681b      	ldr	r3, [r3, #0]
1a001edc:	2200      	movs	r2, #0
1a001ede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
1a001ee2:	f000 fb99 	bl	1a002618 <vPortExitCritical>
1a001ee6:	4620      	mov	r0, r4
1a001ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001eea:	4611      	mov	r1, r2
1a001eec:	4630      	mov	r0, r6
1a001eee:	f7ff fad9 	bl	1a0014a4 <prvAddCurrentTaskToDelayedList>
1a001ef2:	4b09      	ldr	r3, [pc, #36]	; (1a001f18 <xTaskNotifyWait+0x94>)
1a001ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ef8:	601a      	str	r2, [r3, #0]
1a001efa:	f3bf 8f4f 	dsb	sy
1a001efe:	f3bf 8f6f 	isb	sy
1a001f02:	e7d8      	b.n	1a001eb6 <xTaskNotifyWait+0x32>
1a001f04:	4b03      	ldr	r3, [pc, #12]	; (1a001f14 <xTaskNotifyWait+0x90>)
1a001f06:	681a      	ldr	r2, [r3, #0]
1a001f08:	6d93      	ldr	r3, [r2, #88]	; 0x58
1a001f0a:	ea23 0505 	bic.w	r5, r3, r5
1a001f0e:	6595      	str	r5, [r2, #88]	; 0x58
1a001f10:	2401      	movs	r4, #1
1a001f12:	e7e1      	b.n	1a001ed8 <xTaskNotifyWait+0x54>
1a001f14:	10002928 	.word	0x10002928
1a001f18:	e000ed04 	.word	0xe000ed04

1a001f1c <xTaskGenericNotifyFromISR>:
1a001f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001f20:	9e08      	ldr	r6, [sp, #32]
1a001f22:	b940      	cbnz	r0, 1a001f36 <xTaskGenericNotifyFromISR+0x1a>
1a001f24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f28:	f383 8811 	msr	BASEPRI, r3
1a001f2c:	f3bf 8f6f 	isb	sy
1a001f30:	f3bf 8f4f 	dsb	sy
1a001f34:	e7fe      	b.n	1a001f34 <xTaskGenericNotifyFromISR+0x18>
1a001f36:	4604      	mov	r4, r0
1a001f38:	4699      	mov	r9, r3
1a001f3a:	4615      	mov	r5, r2
1a001f3c:	4688      	mov	r8, r1
1a001f3e:	f000 fc73 	bl	1a002828 <vPortValidateInterruptPriority>
1a001f42:	f3ef 8711 	mrs	r7, BASEPRI
1a001f46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f4a:	f383 8811 	msr	BASEPRI, r3
1a001f4e:	f3bf 8f6f 	isb	sy
1a001f52:	f3bf 8f4f 	dsb	sy
1a001f56:	f1b9 0f00 	cmp.w	r9, #0
1a001f5a:	d002      	beq.n	1a001f62 <xTaskGenericNotifyFromISR+0x46>
1a001f5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
1a001f5e:	f8c9 3000 	str.w	r3, [r9]
1a001f62:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
1a001f66:	b2db      	uxtb	r3, r3
1a001f68:	2202      	movs	r2, #2
1a001f6a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
1a001f6e:	1e6a      	subs	r2, r5, #1
1a001f70:	2a03      	cmp	r2, #3
1a001f72:	d81e      	bhi.n	1a001fb2 <xTaskGenericNotifyFromISR+0x96>
1a001f74:	e8df f002 	tbb	[pc, r2]
1a001f78:	17130e02 	.word	0x17130e02
1a001f7c:	6da2      	ldr	r2, [r4, #88]	; 0x58
1a001f7e:	ea42 0208 	orr.w	r2, r2, r8
1a001f82:	65a2      	str	r2, [r4, #88]	; 0x58
1a001f84:	2501      	movs	r5, #1
1a001f86:	2b01      	cmp	r3, #1
1a001f88:	d017      	beq.n	1a001fba <xTaskGenericNotifyFromISR+0x9e>
1a001f8a:	f387 8811 	msr	BASEPRI, r7
1a001f8e:	4628      	mov	r0, r5
1a001f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001f94:	6da2      	ldr	r2, [r4, #88]	; 0x58
1a001f96:	3201      	adds	r2, #1
1a001f98:	65a2      	str	r2, [r4, #88]	; 0x58
1a001f9a:	2501      	movs	r5, #1
1a001f9c:	e7f3      	b.n	1a001f86 <xTaskGenericNotifyFromISR+0x6a>
1a001f9e:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
1a001fa2:	2501      	movs	r5, #1
1a001fa4:	e7ef      	b.n	1a001f86 <xTaskGenericNotifyFromISR+0x6a>
1a001fa6:	2b02      	cmp	r3, #2
1a001fa8:	d005      	beq.n	1a001fb6 <xTaskGenericNotifyFromISR+0x9a>
1a001faa:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
1a001fae:	2501      	movs	r5, #1
1a001fb0:	e7e9      	b.n	1a001f86 <xTaskGenericNotifyFromISR+0x6a>
1a001fb2:	2501      	movs	r5, #1
1a001fb4:	e7e7      	b.n	1a001f86 <xTaskGenericNotifyFromISR+0x6a>
1a001fb6:	2500      	movs	r5, #0
1a001fb8:	e7e5      	b.n	1a001f86 <xTaskGenericNotifyFromISR+0x6a>
1a001fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a001fbc:	b143      	cbz	r3, 1a001fd0 <xTaskGenericNotifyFromISR+0xb4>
1a001fbe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fc2:	f383 8811 	msr	BASEPRI, r3
1a001fc6:	f3bf 8f6f 	isb	sy
1a001fca:	f3bf 8f4f 	dsb	sy
1a001fce:	e7fe      	b.n	1a001fce <xTaskGenericNotifyFromISR+0xb2>
1a001fd0:	4b14      	ldr	r3, [pc, #80]	; (1a002024 <xTaskGenericNotifyFromISR+0x108>)
1a001fd2:	681b      	ldr	r3, [r3, #0]
1a001fd4:	b9e3      	cbnz	r3, 1a002010 <xTaskGenericNotifyFromISR+0xf4>
1a001fd6:	f104 0804 	add.w	r8, r4, #4
1a001fda:	4640      	mov	r0, r8
1a001fdc:	f7ff f8f3 	bl	1a0011c6 <uxListRemove>
1a001fe0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001fe2:	2301      	movs	r3, #1
1a001fe4:	4093      	lsls	r3, r2
1a001fe6:	4910      	ldr	r1, [pc, #64]	; (1a002028 <xTaskGenericNotifyFromISR+0x10c>)
1a001fe8:	6808      	ldr	r0, [r1, #0]
1a001fea:	4303      	orrs	r3, r0
1a001fec:	600b      	str	r3, [r1, #0]
1a001fee:	4641      	mov	r1, r8
1a001ff0:	4b0e      	ldr	r3, [pc, #56]	; (1a00202c <xTaskGenericNotifyFromISR+0x110>)
1a001ff2:	2014      	movs	r0, #20
1a001ff4:	fb00 3002 	mla	r0, r0, r2, r3
1a001ff8:	f7ff f8bf 	bl	1a00117a <vListInsertEnd>
1a001ffc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001ffe:	4b0c      	ldr	r3, [pc, #48]	; (1a002030 <xTaskGenericNotifyFromISR+0x114>)
1a002000:	681b      	ldr	r3, [r3, #0]
1a002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002004:	429a      	cmp	r2, r3
1a002006:	d9c0      	bls.n	1a001f8a <xTaskGenericNotifyFromISR+0x6e>
1a002008:	b146      	cbz	r6, 1a00201c <xTaskGenericNotifyFromISR+0x100>
1a00200a:	2301      	movs	r3, #1
1a00200c:	6033      	str	r3, [r6, #0]
1a00200e:	e7bc      	b.n	1a001f8a <xTaskGenericNotifyFromISR+0x6e>
1a002010:	f104 0118 	add.w	r1, r4, #24
1a002014:	4807      	ldr	r0, [pc, #28]	; (1a002034 <xTaskGenericNotifyFromISR+0x118>)
1a002016:	f7ff f8b0 	bl	1a00117a <vListInsertEnd>
1a00201a:	e7ef      	b.n	1a001ffc <xTaskGenericNotifyFromISR+0xe0>
1a00201c:	4b06      	ldr	r3, [pc, #24]	; (1a002038 <xTaskGenericNotifyFromISR+0x11c>)
1a00201e:	2201      	movs	r2, #1
1a002020:	601a      	str	r2, [r3, #0]
1a002022:	e7b2      	b.n	1a001f8a <xTaskGenericNotifyFromISR+0x6e>
1a002024:	100029cc 	.word	0x100029cc
1a002028:	100029d4 	.word	0x100029d4
1a00202c:	10002934 	.word	0x10002934
1a002030:	10002928 	.word	0x10002928
1a002034:	10002a08 	.word	0x10002a08
1a002038:	10002a4c 	.word	0x10002a4c

1a00203c <prvGetNextExpireTime>:
1a00203c:	4b06      	ldr	r3, [pc, #24]	; (1a002058 <prvGetNextExpireTime+0x1c>)
1a00203e:	681a      	ldr	r2, [r3, #0]
1a002040:	6813      	ldr	r3, [r2, #0]
1a002042:	fab3 f383 	clz	r3, r3
1a002046:	095b      	lsrs	r3, r3, #5
1a002048:	6003      	str	r3, [r0, #0]
1a00204a:	b913      	cbnz	r3, 1a002052 <prvGetNextExpireTime+0x16>
1a00204c:	68d3      	ldr	r3, [r2, #12]
1a00204e:	6818      	ldr	r0, [r3, #0]
1a002050:	4770      	bx	lr
1a002052:	2000      	movs	r0, #0
1a002054:	4770      	bx	lr
1a002056:	bf00      	nop
1a002058:	10002a50 	.word	0x10002a50

1a00205c <prvInsertTimerInActiveList>:
1a00205c:	b508      	push	{r3, lr}
1a00205e:	6041      	str	r1, [r0, #4]
1a002060:	6100      	str	r0, [r0, #16]
1a002062:	4291      	cmp	r1, r2
1a002064:	d80c      	bhi.n	1a002080 <prvInsertTimerInActiveList+0x24>
1a002066:	1ad2      	subs	r2, r2, r3
1a002068:	6983      	ldr	r3, [r0, #24]
1a00206a:	429a      	cmp	r2, r3
1a00206c:	d301      	bcc.n	1a002072 <prvInsertTimerInActiveList+0x16>
1a00206e:	2001      	movs	r0, #1
1a002070:	e010      	b.n	1a002094 <prvInsertTimerInActiveList+0x38>
1a002072:	1d01      	adds	r1, r0, #4
1a002074:	4b09      	ldr	r3, [pc, #36]	; (1a00209c <prvInsertTimerInActiveList+0x40>)
1a002076:	6818      	ldr	r0, [r3, #0]
1a002078:	f7ff f88b 	bl	1a001192 <vListInsert>
1a00207c:	2000      	movs	r0, #0
1a00207e:	e009      	b.n	1a002094 <prvInsertTimerInActiveList+0x38>
1a002080:	429a      	cmp	r2, r3
1a002082:	d201      	bcs.n	1a002088 <prvInsertTimerInActiveList+0x2c>
1a002084:	4299      	cmp	r1, r3
1a002086:	d206      	bcs.n	1a002096 <prvInsertTimerInActiveList+0x3a>
1a002088:	1d01      	adds	r1, r0, #4
1a00208a:	4b05      	ldr	r3, [pc, #20]	; (1a0020a0 <prvInsertTimerInActiveList+0x44>)
1a00208c:	6818      	ldr	r0, [r3, #0]
1a00208e:	f7ff f880 	bl	1a001192 <vListInsert>
1a002092:	2000      	movs	r0, #0
1a002094:	bd08      	pop	{r3, pc}
1a002096:	2001      	movs	r0, #1
1a002098:	e7fc      	b.n	1a002094 <prvInsertTimerInActiveList+0x38>
1a00209a:	bf00      	nop
1a00209c:	10002a54 	.word	0x10002a54
1a0020a0:	10002a50 	.word	0x10002a50

1a0020a4 <prvCheckForValidListAndQueue>:
1a0020a4:	b530      	push	{r4, r5, lr}
1a0020a6:	b083      	sub	sp, #12
1a0020a8:	f000 fa94 	bl	1a0025d4 <vPortEnterCritical>
1a0020ac:	4b11      	ldr	r3, [pc, #68]	; (1a0020f4 <prvCheckForValidListAndQueue+0x50>)
1a0020ae:	681b      	ldr	r3, [r3, #0]
1a0020b0:	b11b      	cbz	r3, 1a0020ba <prvCheckForValidListAndQueue+0x16>
1a0020b2:	f000 fab1 	bl	1a002618 <vPortExitCritical>
1a0020b6:	b003      	add	sp, #12
1a0020b8:	bd30      	pop	{r4, r5, pc}
1a0020ba:	4d0f      	ldr	r5, [pc, #60]	; (1a0020f8 <prvCheckForValidListAndQueue+0x54>)
1a0020bc:	4628      	mov	r0, r5
1a0020be:	f7ff f84e 	bl	1a00115e <vListInitialise>
1a0020c2:	4c0e      	ldr	r4, [pc, #56]	; (1a0020fc <prvCheckForValidListAndQueue+0x58>)
1a0020c4:	4620      	mov	r0, r4
1a0020c6:	f7ff f84a 	bl	1a00115e <vListInitialise>
1a0020ca:	4b0d      	ldr	r3, [pc, #52]	; (1a002100 <prvCheckForValidListAndQueue+0x5c>)
1a0020cc:	601d      	str	r5, [r3, #0]
1a0020ce:	4b0d      	ldr	r3, [pc, #52]	; (1a002104 <prvCheckForValidListAndQueue+0x60>)
1a0020d0:	601c      	str	r4, [r3, #0]
1a0020d2:	2300      	movs	r3, #0
1a0020d4:	9300      	str	r3, [sp, #0]
1a0020d6:	4b0c      	ldr	r3, [pc, #48]	; (1a002108 <prvCheckForValidListAndQueue+0x64>)
1a0020d8:	4a0c      	ldr	r2, [pc, #48]	; (1a00210c <prvCheckForValidListAndQueue+0x68>)
1a0020da:	2110      	movs	r1, #16
1a0020dc:	200a      	movs	r0, #10
1a0020de:	f7fe fcdc 	bl	1a000a9a <xQueueGenericCreateStatic>
1a0020e2:	4b04      	ldr	r3, [pc, #16]	; (1a0020f4 <prvCheckForValidListAndQueue+0x50>)
1a0020e4:	6018      	str	r0, [r3, #0]
1a0020e6:	2800      	cmp	r0, #0
1a0020e8:	d0e3      	beq.n	1a0020b2 <prvCheckForValidListAndQueue+0xe>
1a0020ea:	4909      	ldr	r1, [pc, #36]	; (1a002110 <prvCheckForValidListAndQueue+0x6c>)
1a0020ec:	f7fe fffa 	bl	1a0010e4 <vQueueAddToRegistry>
1a0020f0:	e7df      	b.n	1a0020b2 <prvCheckForValidListAndQueue+0xe>
1a0020f2:	bf00      	nop
1a0020f4:	10002b74 	.word	0x10002b74
1a0020f8:	10002af8 	.word	0x10002af8
1a0020fc:	10002b0c 	.word	0x10002b0c
1a002100:	10002a50 	.word	0x10002a50
1a002104:	10002a54 	.word	0x10002a54
1a002108:	10002b24 	.word	0x10002b24
1a00210c:	10002a58 	.word	0x10002a58
1a002110:	1a005298 	.word	0x1a005298

1a002114 <prvInitialiseNewTimer>:
1a002114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002118:	9c07      	ldr	r4, [sp, #28]
1a00211a:	b941      	cbnz	r1, 1a00212e <prvInitialiseNewTimer+0x1a>
1a00211c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002120:	f383 8811 	msr	BASEPRI, r3
1a002124:	f3bf 8f6f 	isb	sy
1a002128:	f3bf 8f4f 	dsb	sy
1a00212c:	e7fe      	b.n	1a00212c <prvInitialiseNewTimer+0x18>
1a00212e:	460f      	mov	r7, r1
1a002130:	b174      	cbz	r4, 1a002150 <prvInitialiseNewTimer+0x3c>
1a002132:	461d      	mov	r5, r3
1a002134:	4616      	mov	r6, r2
1a002136:	4680      	mov	r8, r0
1a002138:	f7ff ffb4 	bl	1a0020a4 <prvCheckForValidListAndQueue>
1a00213c:	f8c4 8000 	str.w	r8, [r4]
1a002140:	61a7      	str	r7, [r4, #24]
1a002142:	61e6      	str	r6, [r4, #28]
1a002144:	6225      	str	r5, [r4, #32]
1a002146:	9b06      	ldr	r3, [sp, #24]
1a002148:	6263      	str	r3, [r4, #36]	; 0x24
1a00214a:	1d20      	adds	r0, r4, #4
1a00214c:	f7ff f812 	bl	1a001174 <vListInitialiseItem>
1a002150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002154 <xTimerCreateTimerTask>:
1a002154:	b510      	push	{r4, lr}
1a002156:	b088      	sub	sp, #32
1a002158:	f7ff ffa4 	bl	1a0020a4 <prvCheckForValidListAndQueue>
1a00215c:	4b12      	ldr	r3, [pc, #72]	; (1a0021a8 <xTimerCreateTimerTask+0x54>)
1a00215e:	681b      	ldr	r3, [r3, #0]
1a002160:	b1cb      	cbz	r3, 1a002196 <xTimerCreateTimerTask+0x42>
1a002162:	2400      	movs	r4, #0
1a002164:	9405      	str	r4, [sp, #20]
1a002166:	9406      	str	r4, [sp, #24]
1a002168:	aa07      	add	r2, sp, #28
1a00216a:	a906      	add	r1, sp, #24
1a00216c:	a805      	add	r0, sp, #20
1a00216e:	f7ff f84b 	bl	1a001208 <vApplicationGetTimerTaskMemory>
1a002172:	9b05      	ldr	r3, [sp, #20]
1a002174:	9302      	str	r3, [sp, #8]
1a002176:	9b06      	ldr	r3, [sp, #24]
1a002178:	9301      	str	r3, [sp, #4]
1a00217a:	2304      	movs	r3, #4
1a00217c:	9300      	str	r3, [sp, #0]
1a00217e:	4623      	mov	r3, r4
1a002180:	9a07      	ldr	r2, [sp, #28]
1a002182:	490a      	ldr	r1, [pc, #40]	; (1a0021ac <xTimerCreateTimerTask+0x58>)
1a002184:	480a      	ldr	r0, [pc, #40]	; (1a0021b0 <xTimerCreateTimerTask+0x5c>)
1a002186:	f7ff f9d9 	bl	1a00153c <xTaskCreateStatic>
1a00218a:	4b0a      	ldr	r3, [pc, #40]	; (1a0021b4 <xTimerCreateTimerTask+0x60>)
1a00218c:	6018      	str	r0, [r3, #0]
1a00218e:	b110      	cbz	r0, 1a002196 <xTimerCreateTimerTask+0x42>
1a002190:	2001      	movs	r0, #1
1a002192:	b008      	add	sp, #32
1a002194:	bd10      	pop	{r4, pc}
1a002196:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00219a:	f383 8811 	msr	BASEPRI, r3
1a00219e:	f3bf 8f6f 	isb	sy
1a0021a2:	f3bf 8f4f 	dsb	sy
1a0021a6:	e7fe      	b.n	1a0021a6 <xTimerCreateTimerTask+0x52>
1a0021a8:	10002b74 	.word	0x10002b74
1a0021ac:	1a0052a0 	.word	0x1a0052a0
1a0021b0:	1a0024e5 	.word	0x1a0024e5
1a0021b4:	10002b78 	.word	0x10002b78

1a0021b8 <xTimerCreateStatic>:
1a0021b8:	b530      	push	{r4, r5, lr}
1a0021ba:	b085      	sub	sp, #20
1a0021bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0021be:	2530      	movs	r5, #48	; 0x30
1a0021c0:	9503      	str	r5, [sp, #12]
1a0021c2:	9d03      	ldr	r5, [sp, #12]
1a0021c4:	2d30      	cmp	r5, #48	; 0x30
1a0021c6:	d008      	beq.n	1a0021da <xTimerCreateStatic+0x22>
1a0021c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021cc:	f383 8811 	msr	BASEPRI, r3
1a0021d0:	f3bf 8f6f 	isb	sy
1a0021d4:	f3bf 8f4f 	dsb	sy
1a0021d8:	e7fe      	b.n	1a0021d8 <xTimerCreateStatic+0x20>
1a0021da:	b944      	cbnz	r4, 1a0021ee <xTimerCreateStatic+0x36>
1a0021dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021e0:	f383 8811 	msr	BASEPRI, r3
1a0021e4:	f3bf 8f6f 	isb	sy
1a0021e8:	f3bf 8f4f 	dsb	sy
1a0021ec:	e7fe      	b.n	1a0021ec <xTimerCreateStatic+0x34>
1a0021ee:	9401      	str	r4, [sp, #4]
1a0021f0:	9d08      	ldr	r5, [sp, #32]
1a0021f2:	9500      	str	r5, [sp, #0]
1a0021f4:	f7ff ff8e 	bl	1a002114 <prvInitialiseNewTimer>
1a0021f8:	2301      	movs	r3, #1
1a0021fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
1a0021fe:	4620      	mov	r0, r4
1a002200:	b005      	add	sp, #20
1a002202:	bd30      	pop	{r4, r5, pc}

1a002204 <xTimerGenericCommand>:
1a002204:	b1c8      	cbz	r0, 1a00223a <xTimerGenericCommand+0x36>
1a002206:	b530      	push	{r4, r5, lr}
1a002208:	b085      	sub	sp, #20
1a00220a:	4615      	mov	r5, r2
1a00220c:	4604      	mov	r4, r0
1a00220e:	4a17      	ldr	r2, [pc, #92]	; (1a00226c <xTimerGenericCommand+0x68>)
1a002210:	6810      	ldr	r0, [r2, #0]
1a002212:	b340      	cbz	r0, 1a002266 <xTimerGenericCommand+0x62>
1a002214:	461a      	mov	r2, r3
1a002216:	9100      	str	r1, [sp, #0]
1a002218:	9501      	str	r5, [sp, #4]
1a00221a:	9402      	str	r4, [sp, #8]
1a00221c:	2905      	cmp	r1, #5
1a00221e:	dc1d      	bgt.n	1a00225c <xTimerGenericCommand+0x58>
1a002220:	f7ff fcfe 	bl	1a001c20 <xTaskGetSchedulerState>
1a002224:	2802      	cmp	r0, #2
1a002226:	d011      	beq.n	1a00224c <xTimerGenericCommand+0x48>
1a002228:	2300      	movs	r3, #0
1a00222a:	461a      	mov	r2, r3
1a00222c:	4669      	mov	r1, sp
1a00222e:	480f      	ldr	r0, [pc, #60]	; (1a00226c <xTimerGenericCommand+0x68>)
1a002230:	6800      	ldr	r0, [r0, #0]
1a002232:	f7fe fca1 	bl	1a000b78 <xQueueGenericSend>
1a002236:	b005      	add	sp, #20
1a002238:	bd30      	pop	{r4, r5, pc}
1a00223a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00223e:	f383 8811 	msr	BASEPRI, r3
1a002242:	f3bf 8f6f 	isb	sy
1a002246:	f3bf 8f4f 	dsb	sy
1a00224a:	e7fe      	b.n	1a00224a <xTimerGenericCommand+0x46>
1a00224c:	2300      	movs	r3, #0
1a00224e:	9a08      	ldr	r2, [sp, #32]
1a002250:	4669      	mov	r1, sp
1a002252:	4806      	ldr	r0, [pc, #24]	; (1a00226c <xTimerGenericCommand+0x68>)
1a002254:	6800      	ldr	r0, [r0, #0]
1a002256:	f7fe fc8f 	bl	1a000b78 <xQueueGenericSend>
1a00225a:	e7ec      	b.n	1a002236 <xTimerGenericCommand+0x32>
1a00225c:	2300      	movs	r3, #0
1a00225e:	4669      	mov	r1, sp
1a002260:	f7fe fd5f 	bl	1a000d22 <xQueueGenericSendFromISR>
1a002264:	e7e7      	b.n	1a002236 <xTimerGenericCommand+0x32>
1a002266:	2000      	movs	r0, #0
1a002268:	e7e5      	b.n	1a002236 <xTimerGenericCommand+0x32>
1a00226a:	bf00      	nop
1a00226c:	10002b74 	.word	0x10002b74

1a002270 <prvSwitchTimerLists>:
1a002270:	b570      	push	{r4, r5, r6, lr}
1a002272:	b082      	sub	sp, #8
1a002274:	4b1a      	ldr	r3, [pc, #104]	; (1a0022e0 <prvSwitchTimerLists+0x70>)
1a002276:	681b      	ldr	r3, [r3, #0]
1a002278:	681a      	ldr	r2, [r3, #0]
1a00227a:	b352      	cbz	r2, 1a0022d2 <prvSwitchTimerLists+0x62>
1a00227c:	68db      	ldr	r3, [r3, #12]
1a00227e:	681e      	ldr	r6, [r3, #0]
1a002280:	68dc      	ldr	r4, [r3, #12]
1a002282:	1d25      	adds	r5, r4, #4
1a002284:	4628      	mov	r0, r5
1a002286:	f7fe ff9e 	bl	1a0011c6 <uxListRemove>
1a00228a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00228c:	4620      	mov	r0, r4
1a00228e:	4798      	blx	r3
1a002290:	69e3      	ldr	r3, [r4, #28]
1a002292:	2b01      	cmp	r3, #1
1a002294:	d1ee      	bne.n	1a002274 <prvSwitchTimerLists+0x4>
1a002296:	69a3      	ldr	r3, [r4, #24]
1a002298:	4433      	add	r3, r6
1a00229a:	429e      	cmp	r6, r3
1a00229c:	d207      	bcs.n	1a0022ae <prvSwitchTimerLists+0x3e>
1a00229e:	6063      	str	r3, [r4, #4]
1a0022a0:	6124      	str	r4, [r4, #16]
1a0022a2:	4629      	mov	r1, r5
1a0022a4:	4b0e      	ldr	r3, [pc, #56]	; (1a0022e0 <prvSwitchTimerLists+0x70>)
1a0022a6:	6818      	ldr	r0, [r3, #0]
1a0022a8:	f7fe ff73 	bl	1a001192 <vListInsert>
1a0022ac:	e7e2      	b.n	1a002274 <prvSwitchTimerLists+0x4>
1a0022ae:	2100      	movs	r1, #0
1a0022b0:	9100      	str	r1, [sp, #0]
1a0022b2:	460b      	mov	r3, r1
1a0022b4:	4632      	mov	r2, r6
1a0022b6:	4620      	mov	r0, r4
1a0022b8:	f7ff ffa4 	bl	1a002204 <xTimerGenericCommand>
1a0022bc:	2800      	cmp	r0, #0
1a0022be:	d1d9      	bne.n	1a002274 <prvSwitchTimerLists+0x4>
1a0022c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022c4:	f383 8811 	msr	BASEPRI, r3
1a0022c8:	f3bf 8f6f 	isb	sy
1a0022cc:	f3bf 8f4f 	dsb	sy
1a0022d0:	e7fe      	b.n	1a0022d0 <prvSwitchTimerLists+0x60>
1a0022d2:	4a04      	ldr	r2, [pc, #16]	; (1a0022e4 <prvSwitchTimerLists+0x74>)
1a0022d4:	6810      	ldr	r0, [r2, #0]
1a0022d6:	4902      	ldr	r1, [pc, #8]	; (1a0022e0 <prvSwitchTimerLists+0x70>)
1a0022d8:	6008      	str	r0, [r1, #0]
1a0022da:	6013      	str	r3, [r2, #0]
1a0022dc:	b002      	add	sp, #8
1a0022de:	bd70      	pop	{r4, r5, r6, pc}
1a0022e0:	10002a50 	.word	0x10002a50
1a0022e4:	10002a54 	.word	0x10002a54

1a0022e8 <prvSampleTimeNow>:
1a0022e8:	b538      	push	{r3, r4, r5, lr}
1a0022ea:	4605      	mov	r5, r0
1a0022ec:	f7ff f9e4 	bl	1a0016b8 <xTaskGetTickCount>
1a0022f0:	4604      	mov	r4, r0
1a0022f2:	4b07      	ldr	r3, [pc, #28]	; (1a002310 <prvSampleTimeNow+0x28>)
1a0022f4:	681b      	ldr	r3, [r3, #0]
1a0022f6:	4283      	cmp	r3, r0
1a0022f8:	d805      	bhi.n	1a002306 <prvSampleTimeNow+0x1e>
1a0022fa:	2300      	movs	r3, #0
1a0022fc:	602b      	str	r3, [r5, #0]
1a0022fe:	4b04      	ldr	r3, [pc, #16]	; (1a002310 <prvSampleTimeNow+0x28>)
1a002300:	601c      	str	r4, [r3, #0]
1a002302:	4620      	mov	r0, r4
1a002304:	bd38      	pop	{r3, r4, r5, pc}
1a002306:	f7ff ffb3 	bl	1a002270 <prvSwitchTimerLists>
1a00230a:	2301      	movs	r3, #1
1a00230c:	602b      	str	r3, [r5, #0]
1a00230e:	e7f6      	b.n	1a0022fe <prvSampleTimeNow+0x16>
1a002310:	10002b20 	.word	0x10002b20

1a002314 <prvProcessExpiredTimer>:
1a002314:	b570      	push	{r4, r5, r6, lr}
1a002316:	b082      	sub	sp, #8
1a002318:	4605      	mov	r5, r0
1a00231a:	460e      	mov	r6, r1
1a00231c:	4b14      	ldr	r3, [pc, #80]	; (1a002370 <prvProcessExpiredTimer+0x5c>)
1a00231e:	681b      	ldr	r3, [r3, #0]
1a002320:	68db      	ldr	r3, [r3, #12]
1a002322:	68dc      	ldr	r4, [r3, #12]
1a002324:	1d20      	adds	r0, r4, #4
1a002326:	f7fe ff4e 	bl	1a0011c6 <uxListRemove>
1a00232a:	69e3      	ldr	r3, [r4, #28]
1a00232c:	2b01      	cmp	r3, #1
1a00232e:	d004      	beq.n	1a00233a <prvProcessExpiredTimer+0x26>
1a002330:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002332:	4620      	mov	r0, r4
1a002334:	4798      	blx	r3
1a002336:	b002      	add	sp, #8
1a002338:	bd70      	pop	{r4, r5, r6, pc}
1a00233a:	69a1      	ldr	r1, [r4, #24]
1a00233c:	462b      	mov	r3, r5
1a00233e:	4632      	mov	r2, r6
1a002340:	4429      	add	r1, r5
1a002342:	4620      	mov	r0, r4
1a002344:	f7ff fe8a 	bl	1a00205c <prvInsertTimerInActiveList>
1a002348:	2800      	cmp	r0, #0
1a00234a:	d0f1      	beq.n	1a002330 <prvProcessExpiredTimer+0x1c>
1a00234c:	2100      	movs	r1, #0
1a00234e:	9100      	str	r1, [sp, #0]
1a002350:	460b      	mov	r3, r1
1a002352:	462a      	mov	r2, r5
1a002354:	4620      	mov	r0, r4
1a002356:	f7ff ff55 	bl	1a002204 <xTimerGenericCommand>
1a00235a:	2800      	cmp	r0, #0
1a00235c:	d1e8      	bne.n	1a002330 <prvProcessExpiredTimer+0x1c>
1a00235e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002362:	f383 8811 	msr	BASEPRI, r3
1a002366:	f3bf 8f6f 	isb	sy
1a00236a:	f3bf 8f4f 	dsb	sy
1a00236e:	e7fe      	b.n	1a00236e <prvProcessExpiredTimer+0x5a>
1a002370:	10002a50 	.word	0x10002a50

1a002374 <prvProcessTimerOrBlockTask>:
1a002374:	b570      	push	{r4, r5, r6, lr}
1a002376:	b082      	sub	sp, #8
1a002378:	4606      	mov	r6, r0
1a00237a:	460c      	mov	r4, r1
1a00237c:	f7ff f994 	bl	1a0016a8 <vTaskSuspendAll>
1a002380:	a801      	add	r0, sp, #4
1a002382:	f7ff ffb1 	bl	1a0022e8 <prvSampleTimeNow>
1a002386:	9b01      	ldr	r3, [sp, #4]
1a002388:	bb1b      	cbnz	r3, 1a0023d2 <prvProcessTimerOrBlockTask+0x5e>
1a00238a:	4605      	mov	r5, r0
1a00238c:	b90c      	cbnz	r4, 1a002392 <prvProcessTimerOrBlockTask+0x1e>
1a00238e:	42b0      	cmp	r0, r6
1a002390:	d218      	bcs.n	1a0023c4 <prvProcessTimerOrBlockTask+0x50>
1a002392:	b12c      	cbz	r4, 1a0023a0 <prvProcessTimerOrBlockTask+0x2c>
1a002394:	4b11      	ldr	r3, [pc, #68]	; (1a0023dc <prvProcessTimerOrBlockTask+0x68>)
1a002396:	681b      	ldr	r3, [r3, #0]
1a002398:	681c      	ldr	r4, [r3, #0]
1a00239a:	fab4 f484 	clz	r4, r4
1a00239e:	0964      	lsrs	r4, r4, #5
1a0023a0:	4622      	mov	r2, r4
1a0023a2:	1b71      	subs	r1, r6, r5
1a0023a4:	4b0e      	ldr	r3, [pc, #56]	; (1a0023e0 <prvProcessTimerOrBlockTask+0x6c>)
1a0023a6:	6818      	ldr	r0, [r3, #0]
1a0023a8:	f7fe feb0 	bl	1a00110c <vQueueWaitForMessageRestricted>
1a0023ac:	f7ff fa16 	bl	1a0017dc <xTaskResumeAll>
1a0023b0:	b988      	cbnz	r0, 1a0023d6 <prvProcessTimerOrBlockTask+0x62>
1a0023b2:	4b0c      	ldr	r3, [pc, #48]	; (1a0023e4 <prvProcessTimerOrBlockTask+0x70>)
1a0023b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0023b8:	601a      	str	r2, [r3, #0]
1a0023ba:	f3bf 8f4f 	dsb	sy
1a0023be:	f3bf 8f6f 	isb	sy
1a0023c2:	e008      	b.n	1a0023d6 <prvProcessTimerOrBlockTask+0x62>
1a0023c4:	f7ff fa0a 	bl	1a0017dc <xTaskResumeAll>
1a0023c8:	4629      	mov	r1, r5
1a0023ca:	4630      	mov	r0, r6
1a0023cc:	f7ff ffa2 	bl	1a002314 <prvProcessExpiredTimer>
1a0023d0:	e001      	b.n	1a0023d6 <prvProcessTimerOrBlockTask+0x62>
1a0023d2:	f7ff fa03 	bl	1a0017dc <xTaskResumeAll>
1a0023d6:	b002      	add	sp, #8
1a0023d8:	bd70      	pop	{r4, r5, r6, pc}
1a0023da:	bf00      	nop
1a0023dc:	10002a54 	.word	0x10002a54
1a0023e0:	10002b74 	.word	0x10002b74
1a0023e4:	e000ed04 	.word	0xe000ed04

1a0023e8 <prvProcessReceivedCommands>:
1a0023e8:	b530      	push	{r4, r5, lr}
1a0023ea:	b089      	sub	sp, #36	; 0x24
1a0023ec:	e002      	b.n	1a0023f4 <prvProcessReceivedCommands+0xc>
1a0023ee:	9b04      	ldr	r3, [sp, #16]
1a0023f0:	2b00      	cmp	r3, #0
1a0023f2:	da0f      	bge.n	1a002414 <prvProcessReceivedCommands+0x2c>
1a0023f4:	2200      	movs	r2, #0
1a0023f6:	a904      	add	r1, sp, #16
1a0023f8:	4b39      	ldr	r3, [pc, #228]	; (1a0024e0 <prvProcessReceivedCommands+0xf8>)
1a0023fa:	6818      	ldr	r0, [r3, #0]
1a0023fc:	f7fe fcf8 	bl	1a000df0 <xQueueReceive>
1a002400:	2800      	cmp	r0, #0
1a002402:	d06a      	beq.n	1a0024da <prvProcessReceivedCommands+0xf2>
1a002404:	9b04      	ldr	r3, [sp, #16]
1a002406:	2b00      	cmp	r3, #0
1a002408:	daf1      	bge.n	1a0023ee <prvProcessReceivedCommands+0x6>
1a00240a:	9907      	ldr	r1, [sp, #28]
1a00240c:	9806      	ldr	r0, [sp, #24]
1a00240e:	9b05      	ldr	r3, [sp, #20]
1a002410:	4798      	blx	r3
1a002412:	e7ec      	b.n	1a0023ee <prvProcessReceivedCommands+0x6>
1a002414:	9c06      	ldr	r4, [sp, #24]
1a002416:	6963      	ldr	r3, [r4, #20]
1a002418:	b113      	cbz	r3, 1a002420 <prvProcessReceivedCommands+0x38>
1a00241a:	1d20      	adds	r0, r4, #4
1a00241c:	f7fe fed3 	bl	1a0011c6 <uxListRemove>
1a002420:	a803      	add	r0, sp, #12
1a002422:	f7ff ff61 	bl	1a0022e8 <prvSampleTimeNow>
1a002426:	9b04      	ldr	r3, [sp, #16]
1a002428:	2b09      	cmp	r3, #9
1a00242a:	d8e3      	bhi.n	1a0023f4 <prvProcessReceivedCommands+0xc>
1a00242c:	a201      	add	r2, pc, #4	; (adr r2, 1a002434 <prvProcessReceivedCommands+0x4c>)
1a00242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002432:	bf00      	nop
1a002434:	1a00245d 	.word	0x1a00245d
1a002438:	1a00245d 	.word	0x1a00245d
1a00243c:	1a00245d 	.word	0x1a00245d
1a002440:	1a0023f5 	.word	0x1a0023f5
1a002444:	1a0024a5 	.word	0x1a0024a5
1a002448:	1a0024cb 	.word	0x1a0024cb
1a00244c:	1a00245d 	.word	0x1a00245d
1a002450:	1a00245d 	.word	0x1a00245d
1a002454:	1a0023f5 	.word	0x1a0023f5
1a002458:	1a0024a5 	.word	0x1a0024a5
1a00245c:	9905      	ldr	r1, [sp, #20]
1a00245e:	69a5      	ldr	r5, [r4, #24]
1a002460:	460b      	mov	r3, r1
1a002462:	4602      	mov	r2, r0
1a002464:	4429      	add	r1, r5
1a002466:	4620      	mov	r0, r4
1a002468:	f7ff fdf8 	bl	1a00205c <prvInsertTimerInActiveList>
1a00246c:	2800      	cmp	r0, #0
1a00246e:	d0c1      	beq.n	1a0023f4 <prvProcessReceivedCommands+0xc>
1a002470:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002472:	4620      	mov	r0, r4
1a002474:	4798      	blx	r3
1a002476:	69e3      	ldr	r3, [r4, #28]
1a002478:	2b01      	cmp	r3, #1
1a00247a:	d1bb      	bne.n	1a0023f4 <prvProcessReceivedCommands+0xc>
1a00247c:	69a2      	ldr	r2, [r4, #24]
1a00247e:	2100      	movs	r1, #0
1a002480:	9100      	str	r1, [sp, #0]
1a002482:	460b      	mov	r3, r1
1a002484:	9805      	ldr	r0, [sp, #20]
1a002486:	4402      	add	r2, r0
1a002488:	4620      	mov	r0, r4
1a00248a:	f7ff febb 	bl	1a002204 <xTimerGenericCommand>
1a00248e:	2800      	cmp	r0, #0
1a002490:	d1b0      	bne.n	1a0023f4 <prvProcessReceivedCommands+0xc>
1a002492:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002496:	f383 8811 	msr	BASEPRI, r3
1a00249a:	f3bf 8f6f 	isb	sy
1a00249e:	f3bf 8f4f 	dsb	sy
1a0024a2:	e7fe      	b.n	1a0024a2 <prvProcessReceivedCommands+0xba>
1a0024a4:	9905      	ldr	r1, [sp, #20]
1a0024a6:	61a1      	str	r1, [r4, #24]
1a0024a8:	b131      	cbz	r1, 1a0024b8 <prvProcessReceivedCommands+0xd0>
1a0024aa:	4603      	mov	r3, r0
1a0024ac:	4602      	mov	r2, r0
1a0024ae:	4401      	add	r1, r0
1a0024b0:	4620      	mov	r0, r4
1a0024b2:	f7ff fdd3 	bl	1a00205c <prvInsertTimerInActiveList>
1a0024b6:	e79d      	b.n	1a0023f4 <prvProcessReceivedCommands+0xc>
1a0024b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024bc:	f383 8811 	msr	BASEPRI, r3
1a0024c0:	f3bf 8f6f 	isb	sy
1a0024c4:	f3bf 8f4f 	dsb	sy
1a0024c8:	e7fe      	b.n	1a0024c8 <prvProcessReceivedCommands+0xe0>
1a0024ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0024ce:	2b00      	cmp	r3, #0
1a0024d0:	d190      	bne.n	1a0023f4 <prvProcessReceivedCommands+0xc>
1a0024d2:	4620      	mov	r0, r4
1a0024d4:	f7fe f9ac 	bl	1a000830 <vPortFree>
1a0024d8:	e78c      	b.n	1a0023f4 <prvProcessReceivedCommands+0xc>
1a0024da:	b009      	add	sp, #36	; 0x24
1a0024dc:	bd30      	pop	{r4, r5, pc}
1a0024de:	bf00      	nop
1a0024e0:	10002b74 	.word	0x10002b74

1a0024e4 <prvTimerTask>:
1a0024e4:	b500      	push	{lr}
1a0024e6:	b083      	sub	sp, #12
1a0024e8:	a801      	add	r0, sp, #4
1a0024ea:	f7ff fda7 	bl	1a00203c <prvGetNextExpireTime>
1a0024ee:	9901      	ldr	r1, [sp, #4]
1a0024f0:	f7ff ff40 	bl	1a002374 <prvProcessTimerOrBlockTask>
1a0024f4:	f7ff ff78 	bl	1a0023e8 <prvProcessReceivedCommands>
1a0024f8:	e7f6      	b.n	1a0024e8 <prvTimerTask+0x4>
	...

1a0024fc <prvTaskExitError>:
1a0024fc:	b082      	sub	sp, #8
1a0024fe:	2300      	movs	r3, #0
1a002500:	9301      	str	r3, [sp, #4]
1a002502:	4b0d      	ldr	r3, [pc, #52]	; (1a002538 <prvTaskExitError+0x3c>)
1a002504:	681b      	ldr	r3, [r3, #0]
1a002506:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00250a:	d008      	beq.n	1a00251e <prvTaskExitError+0x22>
1a00250c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002510:	f383 8811 	msr	BASEPRI, r3
1a002514:	f3bf 8f6f 	isb	sy
1a002518:	f3bf 8f4f 	dsb	sy
1a00251c:	e7fe      	b.n	1a00251c <prvTaskExitError+0x20>
1a00251e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002522:	f383 8811 	msr	BASEPRI, r3
1a002526:	f3bf 8f6f 	isb	sy
1a00252a:	f3bf 8f4f 	dsb	sy
1a00252e:	9b01      	ldr	r3, [sp, #4]
1a002530:	2b00      	cmp	r3, #0
1a002532:	d0fc      	beq.n	1a00252e <prvTaskExitError+0x32>
1a002534:	b002      	add	sp, #8
1a002536:	4770      	bx	lr
1a002538:	10000010 	.word	0x10000010

1a00253c <prvPortStartFirstTask>:
1a00253c:	4808      	ldr	r0, [pc, #32]	; (1a002560 <prvPortStartFirstTask+0x24>)
1a00253e:	6800      	ldr	r0, [r0, #0]
1a002540:	6800      	ldr	r0, [r0, #0]
1a002542:	f380 8808 	msr	MSP, r0
1a002546:	f04f 0000 	mov.w	r0, #0
1a00254a:	f380 8814 	msr	CONTROL, r0
1a00254e:	b662      	cpsie	i
1a002550:	b661      	cpsie	f
1a002552:	f3bf 8f4f 	dsb	sy
1a002556:	f3bf 8f6f 	isb	sy
1a00255a:	df00      	svc	0
1a00255c:	bf00      	nop
1a00255e:	0000      	.short	0x0000
1a002560:	e000ed08 	.word	0xe000ed08

1a002564 <vPortEnableVFP>:
1a002564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002574 <vPortEnableVFP+0x10>
1a002568:	6801      	ldr	r1, [r0, #0]
1a00256a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00256e:	6001      	str	r1, [r0, #0]
1a002570:	4770      	bx	lr
1a002572:	0000      	.short	0x0000
1a002574:	e000ed88 	.word	0xe000ed88

1a002578 <pxPortInitialiseStack>:
1a002578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a00257c:	f840 3c04 	str.w	r3, [r0, #-4]
1a002580:	f021 0101 	bic.w	r1, r1, #1
1a002584:	f840 1c08 	str.w	r1, [r0, #-8]
1a002588:	4b05      	ldr	r3, [pc, #20]	; (1a0025a0 <pxPortInitialiseStack+0x28>)
1a00258a:	f840 3c0c 	str.w	r3, [r0, #-12]
1a00258e:	f840 2c20 	str.w	r2, [r0, #-32]
1a002592:	f06f 0302 	mvn.w	r3, #2
1a002596:	f840 3c24 	str.w	r3, [r0, #-36]
1a00259a:	3844      	subs	r0, #68	; 0x44
1a00259c:	4770      	bx	lr
1a00259e:	bf00      	nop
1a0025a0:	1a0024fd 	.word	0x1a0024fd
	...

1a0025b0 <SVC_Handler>:
1a0025b0:	4b07      	ldr	r3, [pc, #28]	; (1a0025d0 <pxCurrentTCBConst2>)
1a0025b2:	6819      	ldr	r1, [r3, #0]
1a0025b4:	6808      	ldr	r0, [r1, #0]
1a0025b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0025ba:	f380 8809 	msr	PSP, r0
1a0025be:	f3bf 8f6f 	isb	sy
1a0025c2:	f04f 0000 	mov.w	r0, #0
1a0025c6:	f380 8811 	msr	BASEPRI, r0
1a0025ca:	4770      	bx	lr
1a0025cc:	f3af 8000 	nop.w

1a0025d0 <pxCurrentTCBConst2>:
1a0025d0:	10002928 	.word	0x10002928

1a0025d4 <vPortEnterCritical>:
1a0025d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025d8:	f383 8811 	msr	BASEPRI, r3
1a0025dc:	f3bf 8f6f 	isb	sy
1a0025e0:	f3bf 8f4f 	dsb	sy
1a0025e4:	4a0a      	ldr	r2, [pc, #40]	; (1a002610 <vPortEnterCritical+0x3c>)
1a0025e6:	6813      	ldr	r3, [r2, #0]
1a0025e8:	3301      	adds	r3, #1
1a0025ea:	6013      	str	r3, [r2, #0]
1a0025ec:	2b01      	cmp	r3, #1
1a0025ee:	d000      	beq.n	1a0025f2 <vPortEnterCritical+0x1e>
1a0025f0:	4770      	bx	lr
1a0025f2:	4b08      	ldr	r3, [pc, #32]	; (1a002614 <vPortEnterCritical+0x40>)
1a0025f4:	681b      	ldr	r3, [r3, #0]
1a0025f6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0025fa:	d0f9      	beq.n	1a0025f0 <vPortEnterCritical+0x1c>
1a0025fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002600:	f383 8811 	msr	BASEPRI, r3
1a002604:	f3bf 8f6f 	isb	sy
1a002608:	f3bf 8f4f 	dsb	sy
1a00260c:	e7fe      	b.n	1a00260c <vPortEnterCritical+0x38>
1a00260e:	bf00      	nop
1a002610:	10000010 	.word	0x10000010
1a002614:	e000ed04 	.word	0xe000ed04

1a002618 <vPortExitCritical>:
1a002618:	4b09      	ldr	r3, [pc, #36]	; (1a002640 <vPortExitCritical+0x28>)
1a00261a:	681b      	ldr	r3, [r3, #0]
1a00261c:	b943      	cbnz	r3, 1a002630 <vPortExitCritical+0x18>
1a00261e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002622:	f383 8811 	msr	BASEPRI, r3
1a002626:	f3bf 8f6f 	isb	sy
1a00262a:	f3bf 8f4f 	dsb	sy
1a00262e:	e7fe      	b.n	1a00262e <vPortExitCritical+0x16>
1a002630:	3b01      	subs	r3, #1
1a002632:	4a03      	ldr	r2, [pc, #12]	; (1a002640 <vPortExitCritical+0x28>)
1a002634:	6013      	str	r3, [r2, #0]
1a002636:	b90b      	cbnz	r3, 1a00263c <vPortExitCritical+0x24>
1a002638:	f383 8811 	msr	BASEPRI, r3
1a00263c:	4770      	bx	lr
1a00263e:	bf00      	nop
1a002640:	10000010 	.word	0x10000010
	...

1a002650 <PendSV_Handler>:
1a002650:	f3ef 8009 	mrs	r0, PSP
1a002654:	f3bf 8f6f 	isb	sy
1a002658:	4b15      	ldr	r3, [pc, #84]	; (1a0026b0 <pxCurrentTCBConst>)
1a00265a:	681a      	ldr	r2, [r3, #0]
1a00265c:	f01e 0f10 	tst.w	lr, #16
1a002660:	bf08      	it	eq
1a002662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00266a:	6010      	str	r0, [r2, #0]
1a00266c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002670:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002674:	f380 8811 	msr	BASEPRI, r0
1a002678:	f3bf 8f4f 	dsb	sy
1a00267c:	f3bf 8f6f 	isb	sy
1a002680:	f7ff f99e 	bl	1a0019c0 <vTaskSwitchContext>
1a002684:	f04f 0000 	mov.w	r0, #0
1a002688:	f380 8811 	msr	BASEPRI, r0
1a00268c:	bc09      	pop	{r0, r3}
1a00268e:	6819      	ldr	r1, [r3, #0]
1a002690:	6808      	ldr	r0, [r1, #0]
1a002692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002696:	f01e 0f10 	tst.w	lr, #16
1a00269a:	bf08      	it	eq
1a00269c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0026a0:	f380 8809 	msr	PSP, r0
1a0026a4:	f3bf 8f6f 	isb	sy
1a0026a8:	4770      	bx	lr
1a0026aa:	bf00      	nop
1a0026ac:	f3af 8000 	nop.w

1a0026b0 <pxCurrentTCBConst>:
1a0026b0:	10002928 	.word	0x10002928

1a0026b4 <SysTick_Handler>:
1a0026b4:	b508      	push	{r3, lr}
1a0026b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026ba:	f383 8811 	msr	BASEPRI, r3
1a0026be:	f3bf 8f6f 	isb	sy
1a0026c2:	f3bf 8f4f 	dsb	sy
1a0026c6:	f7fe fffd 	bl	1a0016c4 <xTaskIncrementTick>
1a0026ca:	b118      	cbz	r0, 1a0026d4 <SysTick_Handler+0x20>
1a0026cc:	4b03      	ldr	r3, [pc, #12]	; (1a0026dc <SysTick_Handler+0x28>)
1a0026ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0026d2:	601a      	str	r2, [r3, #0]
1a0026d4:	2300      	movs	r3, #0
1a0026d6:	f383 8811 	msr	BASEPRI, r3
1a0026da:	bd08      	pop	{r3, pc}
1a0026dc:	e000ed04 	.word	0xe000ed04

1a0026e0 <vPortSetupTimerInterrupt>:
1a0026e0:	4a08      	ldr	r2, [pc, #32]	; (1a002704 <vPortSetupTimerInterrupt+0x24>)
1a0026e2:	2300      	movs	r3, #0
1a0026e4:	6013      	str	r3, [r2, #0]
1a0026e6:	4908      	ldr	r1, [pc, #32]	; (1a002708 <vPortSetupTimerInterrupt+0x28>)
1a0026e8:	600b      	str	r3, [r1, #0]
1a0026ea:	4b08      	ldr	r3, [pc, #32]	; (1a00270c <vPortSetupTimerInterrupt+0x2c>)
1a0026ec:	681b      	ldr	r3, [r3, #0]
1a0026ee:	4908      	ldr	r1, [pc, #32]	; (1a002710 <vPortSetupTimerInterrupt+0x30>)
1a0026f0:	fba1 1303 	umull	r1, r3, r1, r3
1a0026f4:	099b      	lsrs	r3, r3, #6
1a0026f6:	3b01      	subs	r3, #1
1a0026f8:	4906      	ldr	r1, [pc, #24]	; (1a002714 <vPortSetupTimerInterrupt+0x34>)
1a0026fa:	600b      	str	r3, [r1, #0]
1a0026fc:	2307      	movs	r3, #7
1a0026fe:	6013      	str	r3, [r2, #0]
1a002700:	4770      	bx	lr
1a002702:	bf00      	nop
1a002704:	e000e010 	.word	0xe000e010
1a002708:	e000e018 	.word	0xe000e018
1a00270c:	10002cd8 	.word	0x10002cd8
1a002710:	10624dd3 	.word	0x10624dd3
1a002714:	e000e014 	.word	0xe000e014

1a002718 <xPortStartScheduler>:
1a002718:	4b3a      	ldr	r3, [pc, #232]	; (1a002804 <xPortStartScheduler+0xec>)
1a00271a:	681a      	ldr	r2, [r3, #0]
1a00271c:	4b3a      	ldr	r3, [pc, #232]	; (1a002808 <xPortStartScheduler+0xf0>)
1a00271e:	429a      	cmp	r2, r3
1a002720:	d00d      	beq.n	1a00273e <xPortStartScheduler+0x26>
1a002722:	4b38      	ldr	r3, [pc, #224]	; (1a002804 <xPortStartScheduler+0xec>)
1a002724:	681a      	ldr	r2, [r3, #0]
1a002726:	4b39      	ldr	r3, [pc, #228]	; (1a00280c <xPortStartScheduler+0xf4>)
1a002728:	429a      	cmp	r2, r3
1a00272a:	d111      	bne.n	1a002750 <xPortStartScheduler+0x38>
1a00272c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002730:	f383 8811 	msr	BASEPRI, r3
1a002734:	f3bf 8f6f 	isb	sy
1a002738:	f3bf 8f4f 	dsb	sy
1a00273c:	e7fe      	b.n	1a00273c <xPortStartScheduler+0x24>
1a00273e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002742:	f383 8811 	msr	BASEPRI, r3
1a002746:	f3bf 8f6f 	isb	sy
1a00274a:	f3bf 8f4f 	dsb	sy
1a00274e:	e7fe      	b.n	1a00274e <xPortStartScheduler+0x36>
1a002750:	b510      	push	{r4, lr}
1a002752:	b082      	sub	sp, #8
1a002754:	4b2e      	ldr	r3, [pc, #184]	; (1a002810 <xPortStartScheduler+0xf8>)
1a002756:	781a      	ldrb	r2, [r3, #0]
1a002758:	b2d2      	uxtb	r2, r2
1a00275a:	9201      	str	r2, [sp, #4]
1a00275c:	22ff      	movs	r2, #255	; 0xff
1a00275e:	701a      	strb	r2, [r3, #0]
1a002760:	781b      	ldrb	r3, [r3, #0]
1a002762:	b2db      	uxtb	r3, r3
1a002764:	f88d 3003 	strb.w	r3, [sp, #3]
1a002768:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00276c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002770:	4a28      	ldr	r2, [pc, #160]	; (1a002814 <xPortStartScheduler+0xfc>)
1a002772:	7013      	strb	r3, [r2, #0]
1a002774:	4b28      	ldr	r3, [pc, #160]	; (1a002818 <xPortStartScheduler+0x100>)
1a002776:	2207      	movs	r2, #7
1a002778:	601a      	str	r2, [r3, #0]
1a00277a:	e009      	b.n	1a002790 <xPortStartScheduler+0x78>
1a00277c:	4a26      	ldr	r2, [pc, #152]	; (1a002818 <xPortStartScheduler+0x100>)
1a00277e:	6813      	ldr	r3, [r2, #0]
1a002780:	3b01      	subs	r3, #1
1a002782:	6013      	str	r3, [r2, #0]
1a002784:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002788:	005b      	lsls	r3, r3, #1
1a00278a:	b2db      	uxtb	r3, r3
1a00278c:	f88d 3003 	strb.w	r3, [sp, #3]
1a002790:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002794:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002798:	d1f0      	bne.n	1a00277c <xPortStartScheduler+0x64>
1a00279a:	4b1f      	ldr	r3, [pc, #124]	; (1a002818 <xPortStartScheduler+0x100>)
1a00279c:	681b      	ldr	r3, [r3, #0]
1a00279e:	2b04      	cmp	r3, #4
1a0027a0:	d008      	beq.n	1a0027b4 <xPortStartScheduler+0x9c>
1a0027a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027a6:	f383 8811 	msr	BASEPRI, r3
1a0027aa:	f3bf 8f6f 	isb	sy
1a0027ae:	f3bf 8f4f 	dsb	sy
1a0027b2:	e7fe      	b.n	1a0027b2 <xPortStartScheduler+0x9a>
1a0027b4:	021b      	lsls	r3, r3, #8
1a0027b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0027ba:	4a17      	ldr	r2, [pc, #92]	; (1a002818 <xPortStartScheduler+0x100>)
1a0027bc:	6013      	str	r3, [r2, #0]
1a0027be:	9b01      	ldr	r3, [sp, #4]
1a0027c0:	b2db      	uxtb	r3, r3
1a0027c2:	4a13      	ldr	r2, [pc, #76]	; (1a002810 <xPortStartScheduler+0xf8>)
1a0027c4:	7013      	strb	r3, [r2, #0]
1a0027c6:	4b15      	ldr	r3, [pc, #84]	; (1a00281c <xPortStartScheduler+0x104>)
1a0027c8:	681a      	ldr	r2, [r3, #0]
1a0027ca:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0027ce:	601a      	str	r2, [r3, #0]
1a0027d0:	681a      	ldr	r2, [r3, #0]
1a0027d2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0027d6:	601a      	str	r2, [r3, #0]
1a0027d8:	f7ff ff82 	bl	1a0026e0 <vPortSetupTimerInterrupt>
1a0027dc:	2400      	movs	r4, #0
1a0027de:	4b10      	ldr	r3, [pc, #64]	; (1a002820 <xPortStartScheduler+0x108>)
1a0027e0:	601c      	str	r4, [r3, #0]
1a0027e2:	f7ff febf 	bl	1a002564 <vPortEnableVFP>
1a0027e6:	4a0f      	ldr	r2, [pc, #60]	; (1a002824 <xPortStartScheduler+0x10c>)
1a0027e8:	6813      	ldr	r3, [r2, #0]
1a0027ea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0027ee:	6013      	str	r3, [r2, #0]
1a0027f0:	f7ff fea4 	bl	1a00253c <prvPortStartFirstTask>
1a0027f4:	f7ff f8e4 	bl	1a0019c0 <vTaskSwitchContext>
1a0027f8:	f7ff fe80 	bl	1a0024fc <prvTaskExitError>
1a0027fc:	4620      	mov	r0, r4
1a0027fe:	b002      	add	sp, #8
1a002800:	bd10      	pop	{r4, pc}
1a002802:	bf00      	nop
1a002804:	e000ed00 	.word	0xe000ed00
1a002808:	410fc271 	.word	0x410fc271
1a00280c:	410fc270 	.word	0x410fc270
1a002810:	e000e400 	.word	0xe000e400
1a002814:	10002b7c 	.word	0x10002b7c
1a002818:	10002b80 	.word	0x10002b80
1a00281c:	e000ed20 	.word	0xe000ed20
1a002820:	10000010 	.word	0x10000010
1a002824:	e000ef34 	.word	0xe000ef34

1a002828 <vPortValidateInterruptPriority>:
1a002828:	f3ef 8305 	mrs	r3, IPSR
1a00282c:	2b0f      	cmp	r3, #15
1a00282e:	d90f      	bls.n	1a002850 <vPortValidateInterruptPriority+0x28>
1a002830:	4a10      	ldr	r2, [pc, #64]	; (1a002874 <vPortValidateInterruptPriority+0x4c>)
1a002832:	5c9b      	ldrb	r3, [r3, r2]
1a002834:	b2db      	uxtb	r3, r3
1a002836:	4a10      	ldr	r2, [pc, #64]	; (1a002878 <vPortValidateInterruptPriority+0x50>)
1a002838:	7812      	ldrb	r2, [r2, #0]
1a00283a:	429a      	cmp	r2, r3
1a00283c:	d908      	bls.n	1a002850 <vPortValidateInterruptPriority+0x28>
1a00283e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002842:	f383 8811 	msr	BASEPRI, r3
1a002846:	f3bf 8f6f 	isb	sy
1a00284a:	f3bf 8f4f 	dsb	sy
1a00284e:	e7fe      	b.n	1a00284e <vPortValidateInterruptPriority+0x26>
1a002850:	4b0a      	ldr	r3, [pc, #40]	; (1a00287c <vPortValidateInterruptPriority+0x54>)
1a002852:	681b      	ldr	r3, [r3, #0]
1a002854:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002858:	4a09      	ldr	r2, [pc, #36]	; (1a002880 <vPortValidateInterruptPriority+0x58>)
1a00285a:	6812      	ldr	r2, [r2, #0]
1a00285c:	4293      	cmp	r3, r2
1a00285e:	d908      	bls.n	1a002872 <vPortValidateInterruptPriority+0x4a>
1a002860:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002864:	f383 8811 	msr	BASEPRI, r3
1a002868:	f3bf 8f6f 	isb	sy
1a00286c:	f3bf 8f4f 	dsb	sy
1a002870:	e7fe      	b.n	1a002870 <vPortValidateInterruptPriority+0x48>
1a002872:	4770      	bx	lr
1a002874:	e000e3f0 	.word	0xe000e3f0
1a002878:	10002b7c 	.word	0x10002b7c
1a00287c:	e000ed0c 	.word	0xe000ed0c
1a002880:	10002b80 	.word	0x10002b80

1a002884 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002884:	4b04      	ldr	r3, [pc, #16]	; (1a002898 <cyclesCounterInit+0x14>)
1a002886:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a002888:	4b04      	ldr	r3, [pc, #16]	; (1a00289c <cyclesCounterInit+0x18>)
1a00288a:	681a      	ldr	r2, [r3, #0]
1a00288c:	6813      	ldr	r3, [r2, #0]
1a00288e:	f043 0301 	orr.w	r3, r3, #1
1a002892:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002894:	2001      	movs	r0, #1
1a002896:	4770      	bx	lr
1a002898:	10000018 	.word	0x10000018
1a00289c:	10000014 	.word	0x10000014

1a0028a0 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a0028a0:	2301      	movs	r3, #1
1a0028a2:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0028a4:	4a01      	ldr	r2, [pc, #4]	; (1a0028ac <clearInterrupt+0xc>)
1a0028a6:	6253      	str	r3, [r2, #36]	; 0x24
1a0028a8:	4770      	bx	lr
1a0028aa:	bf00      	nop
1a0028ac:	40087000 	.word	0x40087000

1a0028b0 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a0028b0:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0028b2:	4b13      	ldr	r3, [pc, #76]	; (1a002900 <serveInterrupt+0x50>)
1a0028b4:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a0028b6:	4a13      	ldr	r2, [pc, #76]	; (1a002904 <serveInterrupt+0x54>)
1a0028b8:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0028ba:	2401      	movs	r4, #1
1a0028bc:	4084      	lsls	r4, r0
1a0028be:	4214      	tst	r4, r2
1a0028c0:	d00a      	beq.n	1a0028d8 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0028c2:	4a11      	ldr	r2, [pc, #68]	; (1a002908 <serveInterrupt+0x58>)
1a0028c4:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0028c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a0028ca:	00db      	lsls	r3, r3, #3
1a0028cc:	490f      	ldr	r1, [pc, #60]	; (1a00290c <serveInterrupt+0x5c>)
1a0028ce:	440b      	add	r3, r1
1a0028d0:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a0028d2:	4b0c      	ldr	r3, [pc, #48]	; (1a002904 <serveInterrupt+0x54>)
1a0028d4:	61dc      	str	r4, [r3, #28]
1a0028d6:	e00f      	b.n	1a0028f8 <serveInterrupt+0x48>
1a0028d8:	4a0b      	ldr	r2, [pc, #44]	; (1a002908 <serveInterrupt+0x58>)
1a0028da:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0028dc:	4d0b      	ldr	r5, [pc, #44]	; (1a00290c <serveInterrupt+0x5c>)
1a0028de:	005e      	lsls	r6, r3, #1
1a0028e0:	18f2      	adds	r2, r6, r3
1a0028e2:	00d2      	lsls	r2, r2, #3
1a0028e4:	442a      	add	r2, r5
1a0028e6:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0028e8:	6852      	ldr	r2, [r2, #4]
1a0028ea:	1a89      	subs	r1, r1, r2
1a0028ec:	4433      	add	r3, r6
1a0028ee:	00db      	lsls	r3, r3, #3
1a0028f0:	442b      	add	r3, r5
1a0028f2:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0028f4:	4b03      	ldr	r3, [pc, #12]	; (1a002904 <serveInterrupt+0x54>)
1a0028f6:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0028f8:	f7ff ffd2 	bl	1a0028a0 <clearInterrupt>
1a0028fc:	bd70      	pop	{r4, r5, r6, pc}
1a0028fe:	bf00      	nop
1a002900:	1a0052a8 	.word	0x1a0052a8
1a002904:	40087000 	.word	0x40087000
1a002908:	40084000 	.word	0x40084000
1a00290c:	1000001c 	.word	0x1000001c

1a002910 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a002910:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a002912:	2000      	movs	r0, #0
1a002914:	f7ff ffcc 	bl	1a0028b0 <serveInterrupt>
1a002918:	bd08      	pop	{r3, pc}
1a00291a:	bf00      	nop

1a00291c <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a00291c:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00291e:	2001      	movs	r0, #1
1a002920:	f7ff ffc6 	bl	1a0028b0 <serveInterrupt>
1a002924:	bd08      	pop	{r3, pc}
1a002926:	bf00      	nop

1a002928 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a002928:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00292a:	2002      	movs	r0, #2
1a00292c:	f7ff ffc0 	bl	1a0028b0 <serveInterrupt>
1a002930:	bd08      	pop	{r3, pc}
1a002932:	bf00      	nop

1a002934 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002934:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002936:	4d09      	ldr	r5, [pc, #36]	; (1a00295c <gpioObtainPinInit+0x28>)
1a002938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00293c:	182c      	adds	r4, r5, r0
1a00293e:	5c28      	ldrb	r0, [r5, r0]
1a002940:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002942:	7861      	ldrb	r1, [r4, #1]
1a002944:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002946:	78a2      	ldrb	r2, [r4, #2]
1a002948:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00294a:	78e2      	ldrb	r2, [r4, #3]
1a00294c:	9b02      	ldr	r3, [sp, #8]
1a00294e:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002950:	7922      	ldrb	r2, [r4, #4]
1a002952:	9b03      	ldr	r3, [sp, #12]
1a002954:	701a      	strb	r2, [r3, #0]
}
1a002956:	bc30      	pop	{r4, r5}
1a002958:	4770      	bx	lr
1a00295a:	bf00      	nop
1a00295c:	1a0052ac 	.word	0x1a0052ac

1a002960 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002960:	b570      	push	{r4, r5, r6, lr}
1a002962:	b084      	sub	sp, #16
1a002964:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002966:	2300      	movs	r3, #0
1a002968:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00296c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002970:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002974:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002978:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00297c:	ab03      	add	r3, sp, #12
1a00297e:	9300      	str	r3, [sp, #0]
1a002980:	f10d 030b 	add.w	r3, sp, #11
1a002984:	9301      	str	r3, [sp, #4]
1a002986:	f10d 010f 	add.w	r1, sp, #15
1a00298a:	f10d 020e 	add.w	r2, sp, #14
1a00298e:	f10d 030d 	add.w	r3, sp, #13
1a002992:	f7ff ffcf 	bl	1a002934 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002996:	2c05      	cmp	r4, #5
1a002998:	f200 80a8 	bhi.w	1a002aec <gpioInit+0x18c>
1a00299c:	e8df f004 	tbb	[pc, r4]
1a0029a0:	46278408 	.word	0x46278408
1a0029a4:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0029a6:	4853      	ldr	r0, [pc, #332]	; (1a002af4 <gpioInit+0x194>)
1a0029a8:	f001 fa08 	bl	1a003dbc <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a0029ac:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a0029ae:	e09e      	b.n	1a002aee <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a0029b0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0029b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0029b8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0029bc:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0029c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0029c4:	494c      	ldr	r1, [pc, #304]	; (1a002af8 <gpioInit+0x198>)
1a0029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0029ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0029ce:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0029d2:	2001      	movs	r0, #1
1a0029d4:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0029d8:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0029dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0029e0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0029e4:	ea22 0204 	bic.w	r2, r2, r4
1a0029e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0029ec:	e07f      	b.n	1a002aee <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0029ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0029f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0029f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0029fa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0029fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002a02:	493d      	ldr	r1, [pc, #244]	; (1a002af8 <gpioInit+0x198>)
1a002a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002a08:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002a0c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002a10:	2001      	movs	r0, #1
1a002a12:	fa00 f402 	lsl.w	r4, r0, r2
1a002a16:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002a1e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002a22:	ea22 0204 	bic.w	r2, r2, r4
1a002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002a2a:	e060      	b.n	1a002aee <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a002a2c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002a30:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002a34:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002a38:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002a3c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002a40:	492d      	ldr	r1, [pc, #180]	; (1a002af8 <gpioInit+0x198>)
1a002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002a46:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002a4a:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002a4e:	2001      	movs	r0, #1
1a002a50:	fa00 f402 	lsl.w	r4, r0, r2
1a002a54:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002a5c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002a60:	ea22 0204 	bic.w	r2, r2, r4
1a002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002a68:	e041      	b.n	1a002aee <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a002a6a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002a6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002a72:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002a76:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002a7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002a7e:	491e      	ldr	r1, [pc, #120]	; (1a002af8 <gpioInit+0x198>)
1a002a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002a84:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002a88:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002a8c:	2001      	movs	r0, #1
1a002a8e:	fa00 f402 	lsl.w	r4, r0, r2
1a002a92:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002a9a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002a9e:	ea22 0204 	bic.w	r2, r2, r4
1a002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002aa6:	e022      	b.n	1a002aee <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a002aa8:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002aac:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002ab0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002ab4:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002ab8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002abc:	490e      	ldr	r1, [pc, #56]	; (1a002af8 <gpioInit+0x198>)
1a002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002ac2:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002ac6:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a002aca:	b25a      	sxtb	r2, r3
1a002acc:	2001      	movs	r0, #1
1a002ace:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a002ad2:	4a08      	ldr	r2, [pc, #32]	; (1a002af4 <gpioInit+0x194>)
1a002ad4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002ad8:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a002adc:	4331      	orrs	r1, r6
1a002ade:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a002ae2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002ae6:	2100      	movs	r1, #0
1a002ae8:	54d1      	strb	r1, [r2, r3]
1a002aea:	e000      	b.n	1a002aee <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a002aec:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a002aee:	b004      	add	sp, #16
1a002af0:	bd70      	pop	{r4, r5, r6, pc}
1a002af2:	bf00      	nop
1a002af4:	400f4000 	.word	0x400f4000
1a002af8:	40086000 	.word	0x40086000

1a002afc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002afc:	b510      	push	{r4, lr}
1a002afe:	b084      	sub	sp, #16
1a002b00:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002b02:	2300      	movs	r3, #0
1a002b04:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002b08:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002b0c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002b10:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002b14:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002b18:	ab03      	add	r3, sp, #12
1a002b1a:	9300      	str	r3, [sp, #0]
1a002b1c:	f10d 030b 	add.w	r3, sp, #11
1a002b20:	9301      	str	r3, [sp, #4]
1a002b22:	f10d 010f 	add.w	r1, sp, #15
1a002b26:	f10d 020e 	add.w	r2, sp, #14
1a002b2a:	f10d 030d 	add.w	r3, sp, #13
1a002b2e:	f7ff ff01 	bl	1a002934 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002b32:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a002b36:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a002b3a:	3400      	adds	r4, #0
1a002b3c:	bf18      	it	ne
1a002b3e:	2401      	movne	r4, #1
1a002b40:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002b44:	4a02      	ldr	r2, [pc, #8]	; (1a002b50 <gpioWrite+0x54>)
1a002b46:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a002b48:	2001      	movs	r0, #1
1a002b4a:	b004      	add	sp, #16
1a002b4c:	bd10      	pop	{r4, pc}
1a002b4e:	bf00      	nop
1a002b50:	400f4000 	.word	0x400f4000

1a002b54 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002b54:	b500      	push	{lr}
1a002b56:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002b58:	2300      	movs	r3, #0
1a002b5a:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002b5e:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002b62:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002b66:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002b6a:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002b6e:	ab03      	add	r3, sp, #12
1a002b70:	9300      	str	r3, [sp, #0]
1a002b72:	f10d 030b 	add.w	r3, sp, #11
1a002b76:	9301      	str	r3, [sp, #4]
1a002b78:	f10d 010f 	add.w	r1, sp, #15
1a002b7c:	f10d 020e 	add.w	r2, sp, #14
1a002b80:	f10d 030d 	add.w	r3, sp, #13
1a002b84:	f7ff fed6 	bl	1a002934 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002b88:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a002b8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a002b90:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002b94:	4a04      	ldr	r2, [pc, #16]	; (1a002ba8 <gpioRead+0x54>)
1a002b96:	5cd3      	ldrb	r3, [r2, r3]
1a002b98:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a002b9c:	bf14      	ite	ne
1a002b9e:	2001      	movne	r0, #1
1a002ba0:	2000      	moveq	r0, #0
1a002ba2:	b005      	add	sp, #20
1a002ba4:	f85d fb04 	ldr.w	pc, [sp], #4
1a002ba8:	400f4000 	.word	0x400f4000

1a002bac <gpioToggle>:
   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin )
{
1a002bac:	b510      	push	{r4, lr}
1a002bae:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a002bb0:	f7ff ffd0 	bl	1a002b54 <gpioRead>
1a002bb4:	fab0 f180 	clz	r1, r0
1a002bb8:	0949      	lsrs	r1, r1, #5
1a002bba:	4620      	mov	r0, r4
1a002bbc:	f7ff ff9e 	bl	1a002afc <gpioWrite>
}
1a002bc0:	bd10      	pop	{r4, pc}
1a002bc2:	bf00      	nop

1a002bc4 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002bc4:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a002bc6:	4908      	ldr	r1, [pc, #32]	; (1a002be8 <tickerCallback+0x24>)
1a002bc8:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002bcc:	3201      	adds	r2, #1
1a002bce:	f143 0300 	adc.w	r3, r3, #0
1a002bd2:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002bd6:	4b05      	ldr	r3, [pc, #20]	; (1a002bec <tickerCallback+0x28>)
1a002bd8:	681b      	ldr	r3, [r3, #0]
1a002bda:	b123      	cbz	r3, 1a002be6 <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a002bdc:	4b03      	ldr	r3, [pc, #12]	; (1a002bec <tickerCallback+0x28>)
1a002bde:	681b      	ldr	r3, [r3, #0]
1a002be0:	4a03      	ldr	r2, [pc, #12]	; (1a002bf0 <tickerCallback+0x2c>)
1a002be2:	6810      	ldr	r0, [r2, #0]
1a002be4:	4798      	blx	r3
1a002be6:	bd08      	pop	{r3, pc}
1a002be8:	10002cc8 	.word	0x10002cc8
1a002bec:	10002b84 	.word	0x10002b84
1a002bf0:	10002bb8 	.word	0x10002bb8

1a002bf4 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a002bf4:	b510      	push	{r4, lr}
1a002bf6:	b082      	sub	sp, #8
1a002bf8:	4601      	mov	r1, r0
      }
      return ret_val;
   #else
      #ifdef USE_FREERTOS
         static StaticTimer_t tickerObject;
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a002bfa:	4b0e      	ldr	r3, [pc, #56]	; (1a002c34 <tickInit+0x40>)
1a002bfc:	9300      	str	r3, [sp, #0]
1a002bfe:	4b0e      	ldr	r3, [pc, #56]	; (1a002c38 <tickInit+0x44>)
1a002c00:	9301      	str	r3, [sp, #4]
1a002c02:	480e      	ldr	r0, [pc, #56]	; (1a002c3c <tickInit+0x48>)
1a002c04:	2201      	movs	r2, #1
1a002c06:	2300      	movs	r3, #0
1a002c08:	f7ff fad6 	bl	1a0021b8 <xTimerCreateStatic>
                                               pdTRUE,
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
1a002c0c:	b170      	cbz	r0, 1a002c2c <tickInit+0x38>
1a002c0e:	4604      	mov	r4, r0
            return 0;
         return xTimerStart(h, 0) == pdPASS;
1a002c10:	f7fe fd52 	bl	1a0016b8 <xTaskGetTickCount>
1a002c14:	4602      	mov	r2, r0
1a002c16:	2300      	movs	r3, #0
1a002c18:	9300      	str	r3, [sp, #0]
1a002c1a:	4620      	mov	r0, r4
1a002c1c:	2101      	movs	r1, #1
1a002c1e:	f7ff faf1 	bl	1a002204 <xTimerGenericCommand>
1a002c22:	2801      	cmp	r0, #1
1a002c24:	bf14      	ite	ne
1a002c26:	2000      	movne	r0, #0
1a002c28:	2001      	moveq	r0, #1
1a002c2a:	e000      	b.n	1a002c2e <tickInit+0x3a>
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
            return 0;
1a002c2c:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a002c2e:	b002      	add	sp, #8
1a002c30:	bd10      	pop	{r4, pc}
1a002c32:	bf00      	nop
1a002c34:	1a002bc5 	.word	0x1a002bc5
1a002c38:	10002b88 	.word	0x10002b88
1a002c3c:	1a0053e4 	.word	0x1a0053e4

1a002c40 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a002c40:	b570      	push	{r4, r5, r6, lr}
1a002c42:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002c44:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a002c48:	009b      	lsls	r3, r3, #2
1a002c4a:	4a21      	ldr	r2, [pc, #132]	; (1a002cd0 <uartProcessIRQ+0x90>)
1a002c4c:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002c4e:	6975      	ldr	r5, [r6, #20]
1a002c50:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a002c52:	f015 0f01 	tst.w	r5, #1
1a002c56:	d019      	beq.n	1a002c8c <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a002c58:	b930      	cbnz	r0, 1a002c68 <uartProcessIRQ+0x28>
1a002c5a:	4b1e      	ldr	r3, [pc, #120]	; (1a002cd4 <uartProcessIRQ+0x94>)
1a002c5c:	681b      	ldr	r3, [r3, #0]
1a002c5e:	b11b      	cbz	r3, 1a002c68 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a002c60:	4b1c      	ldr	r3, [pc, #112]	; (1a002cd4 <uartProcessIRQ+0x94>)
1a002c62:	681b      	ldr	r3, [r3, #0]
1a002c64:	2000      	movs	r0, #0
1a002c66:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002c68:	2c03      	cmp	r4, #3
1a002c6a:	d106      	bne.n	1a002c7a <uartProcessIRQ+0x3a>
1a002c6c:	4b1a      	ldr	r3, [pc, #104]	; (1a002cd8 <uartProcessIRQ+0x98>)
1a002c6e:	681b      	ldr	r3, [r3, #0]
1a002c70:	b11b      	cbz	r3, 1a002c7a <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a002c72:	4b19      	ldr	r3, [pc, #100]	; (1a002cd8 <uartProcessIRQ+0x98>)
1a002c74:	681b      	ldr	r3, [r3, #0]
1a002c76:	2000      	movs	r0, #0
1a002c78:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002c7a:	2c05      	cmp	r4, #5
1a002c7c:	d106      	bne.n	1a002c8c <uartProcessIRQ+0x4c>
1a002c7e:	4b17      	ldr	r3, [pc, #92]	; (1a002cdc <uartProcessIRQ+0x9c>)
1a002c80:	681b      	ldr	r3, [r3, #0]
1a002c82:	b11b      	cbz	r3, 1a002c8c <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a002c84:	4b15      	ldr	r3, [pc, #84]	; (1a002cdc <uartProcessIRQ+0x9c>)
1a002c86:	681b      	ldr	r3, [r3, #0]
1a002c88:	2000      	movs	r0, #0
1a002c8a:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a002c8c:	f015 0f20 	tst.w	r5, #32
1a002c90:	d01d      	beq.n	1a002cce <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a002c92:	6873      	ldr	r3, [r6, #4]
1a002c94:	f013 0f02 	tst.w	r3, #2
1a002c98:	d019      	beq.n	1a002cce <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a002c9a:	b934      	cbnz	r4, 1a002caa <uartProcessIRQ+0x6a>
1a002c9c:	4b10      	ldr	r3, [pc, #64]	; (1a002ce0 <uartProcessIRQ+0xa0>)
1a002c9e:	681b      	ldr	r3, [r3, #0]
1a002ca0:	b11b      	cbz	r3, 1a002caa <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a002ca2:	4b0f      	ldr	r3, [pc, #60]	; (1a002ce0 <uartProcessIRQ+0xa0>)
1a002ca4:	681b      	ldr	r3, [r3, #0]
1a002ca6:	2000      	movs	r0, #0
1a002ca8:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002caa:	2c03      	cmp	r4, #3
1a002cac:	d106      	bne.n	1a002cbc <uartProcessIRQ+0x7c>
1a002cae:	4b0d      	ldr	r3, [pc, #52]	; (1a002ce4 <uartProcessIRQ+0xa4>)
1a002cb0:	681b      	ldr	r3, [r3, #0]
1a002cb2:	b11b      	cbz	r3, 1a002cbc <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a002cb4:	4b0b      	ldr	r3, [pc, #44]	; (1a002ce4 <uartProcessIRQ+0xa4>)
1a002cb6:	681b      	ldr	r3, [r3, #0]
1a002cb8:	2000      	movs	r0, #0
1a002cba:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002cbc:	2c05      	cmp	r4, #5
1a002cbe:	d106      	bne.n	1a002cce <uartProcessIRQ+0x8e>
1a002cc0:	4b09      	ldr	r3, [pc, #36]	; (1a002ce8 <uartProcessIRQ+0xa8>)
1a002cc2:	681b      	ldr	r3, [r3, #0]
1a002cc4:	b11b      	cbz	r3, 1a002cce <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a002cc6:	4b08      	ldr	r3, [pc, #32]	; (1a002ce8 <uartProcessIRQ+0xa8>)
1a002cc8:	681b      	ldr	r3, [r3, #0]
1a002cca:	2000      	movs	r0, #0
1a002ccc:	4798      	blx	r3
1a002cce:	bd70      	pop	{r4, r5, r6, pc}
1a002cd0:	1a0053f0 	.word	0x1a0053f0
1a002cd4:	10002bbc 	.word	0x10002bbc
1a002cd8:	10002bcc 	.word	0x10002bcc
1a002cdc:	10002bd0 	.word	0x10002bd0
1a002ce0:	10002bc0 	.word	0x10002bc0
1a002ce4:	10002bc4 	.word	0x10002bc4
1a002ce8:	10002bc8 	.word	0x10002bc8

1a002cec <uartRxInterruptSet>:

//-------------------------------------------------------------

// UART RX Interrupt Enable/Disable
void uartRxInterruptSet( uartMap_t uart, bool_t enable )
{
1a002cec:	b410      	push	{r4}
   if( enable ) {
1a002cee:	b1b9      	cbz	r1, 1a002d20 <uartRxInterruptSet+0x34>
      // Enable UART Receiver Buffer Register Interrupt
      Chip_UART_IntEnable( lpcUarts[uart].uartAddr, UART_IER_RBRINT );
1a002cf0:	4a19      	ldr	r2, [pc, #100]	; (1a002d58 <uartRxInterruptSet+0x6c>)
1a002cf2:	0041      	lsls	r1, r0, #1
1a002cf4:	180b      	adds	r3, r1, r0
1a002cf6:	009b      	lsls	r3, r3, #2
1a002cf8:	58d4      	ldr	r4, [r2, r3]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a002cfa:	6863      	ldr	r3, [r4, #4]
1a002cfc:	f043 0301 	orr.w	r3, r3, #1
1a002d00:	6063      	str	r3, [r4, #4]
      // Enable UART line status interrupt. LPC43xx User manual page 1118
      //NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 6 );
      // Enable Interrupt for UART channel
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a002d02:	4408      	add	r0, r1
1a002d04:	0080      	lsls	r0, r0, #2
1a002d06:	4410      	add	r0, r2
1a002d08:	7a83      	ldrb	r3, [r0, #10]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a002d0a:	b25a      	sxtb	r2, r3
1a002d0c:	0952      	lsrs	r2, r2, #5
1a002d0e:	f003 031f 	and.w	r3, r3, #31
1a002d12:	2101      	movs	r1, #1
1a002d14:	fa01 f303 	lsl.w	r3, r1, r3
1a002d18:	4910      	ldr	r1, [pc, #64]	; (1a002d5c <uartRxInterruptSet+0x70>)
1a002d1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a002d1e:	e017      	b.n	1a002d50 <uartRxInterruptSet+0x64>
   } else {
      // Disable UART Receiver Buffer Register Interrupt
      Chip_UART_IntDisable( lpcUarts[uart].uartAddr, UART_IER_RBRINT );
1a002d20:	4a0d      	ldr	r2, [pc, #52]	; (1a002d58 <uartRxInterruptSet+0x6c>)
1a002d22:	0041      	lsls	r1, r0, #1
1a002d24:	180b      	adds	r3, r1, r0
1a002d26:	009b      	lsls	r3, r3, #2
1a002d28:	58d4      	ldr	r4, [r2, r3]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a002d2a:	6863      	ldr	r3, [r4, #4]
1a002d2c:	f023 0301 	bic.w	r3, r3, #1
1a002d30:	6063      	str	r3, [r4, #4]
      // Disable Interrupt for UART channel
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a002d32:	4408      	add	r0, r1
1a002d34:	0080      	lsls	r0, r0, #2
1a002d36:	4410      	add	r0, r2
1a002d38:	7a82      	ldrb	r2, [r0, #10]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1a002d3a:	b253      	sxtb	r3, r2
1a002d3c:	095b      	lsrs	r3, r3, #5
1a002d3e:	f002 021f 	and.w	r2, r2, #31
1a002d42:	2101      	movs	r1, #1
1a002d44:	fa01 f202 	lsl.w	r2, r1, r2
1a002d48:	3320      	adds	r3, #32
1a002d4a:	4904      	ldr	r1, [pc, #16]	; (1a002d5c <uartRxInterruptSet+0x70>)
1a002d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   }
}
1a002d50:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002d54:	4770      	bx	lr
1a002d56:	bf00      	nop
1a002d58:	1a0053f0 	.word	0x1a0053f0
1a002d5c:	e000e100 	.word	0xe000e100

1a002d60 <uartRxInterruptCallbackSet>:
void uartRxInterruptCallbackSet(
   uartMap_t uart,                  // UART
   callBackFuncPtr_t rxIsrCallback  // pointer to function
)
{
   if( rxIsrCallback != 0 ) {
1a002d60:	460b      	mov	r3, r1
1a002d62:	b191      	cbz	r1, 1a002d8a <uartRxInterruptCallbackSet+0x2a>
      // Set callback
      if( uart == UART_GPIO ) rxIsrCallbackUART0 = rxIsrCallback;
1a002d64:	b908      	cbnz	r0, 1a002d6a <uartRxInterruptCallbackSet+0xa>
1a002d66:	4a09      	ldr	r2, [pc, #36]	; (1a002d8c <uartRxInterruptCallbackSet+0x2c>)
1a002d68:	6011      	str	r1, [r2, #0]
      if( uart == UART_485  ) rxIsrCallbackUART0 = rxIsrCallback;
1a002d6a:	2801      	cmp	r0, #1
1a002d6c:	d101      	bne.n	1a002d72 <uartRxInterruptCallbackSet+0x12>
1a002d6e:	4a07      	ldr	r2, [pc, #28]	; (1a002d8c <uartRxInterruptCallbackSet+0x2c>)
1a002d70:	6013      	str	r3, [r2, #0]
      if( uart == UART_USB  ) rxIsrCallbackUART2 = rxIsrCallback;
1a002d72:	2803      	cmp	r0, #3
1a002d74:	d101      	bne.n	1a002d7a <uartRxInterruptCallbackSet+0x1a>
1a002d76:	4a06      	ldr	r2, [pc, #24]	; (1a002d90 <uartRxInterruptCallbackSet+0x30>)
1a002d78:	6013      	str	r3, [r2, #0]
      if( uart == UART_ENET ) rxIsrCallbackUART2 = rxIsrCallback;
1a002d7a:	2804      	cmp	r0, #4
1a002d7c:	d101      	bne.n	1a002d82 <uartRxInterruptCallbackSet+0x22>
1a002d7e:	4a04      	ldr	r2, [pc, #16]	; (1a002d90 <uartRxInterruptCallbackSet+0x30>)
1a002d80:	6013      	str	r3, [r2, #0]
      if( uart == UART_232  ) rxIsrCallbackUART3 = rxIsrCallback;
1a002d82:	2805      	cmp	r0, #5
1a002d84:	d101      	bne.n	1a002d8a <uartRxInterruptCallbackSet+0x2a>
1a002d86:	4a03      	ldr	r2, [pc, #12]	; (1a002d94 <uartRxInterruptCallbackSet+0x34>)
1a002d88:	6013      	str	r3, [r2, #0]
1a002d8a:	4770      	bx	lr
1a002d8c:	10002bbc 	.word	0x10002bbc
1a002d90:	10002bcc 	.word	0x10002bcc
1a002d94:	10002bd0 	.word	0x10002bd0

1a002d98 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a002d98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002d9c:	0080      	lsls	r0, r0, #2
1a002d9e:	4b03      	ldr	r3, [pc, #12]	; (1a002dac <uartTxReady+0x14>)
1a002da0:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002da2:	6958      	ldr	r0, [r3, #20]
}
1a002da4:	f000 0020 	and.w	r0, r0, #32
1a002da8:	4770      	bx	lr
1a002daa:	bf00      	nop
1a002dac:	1a0053f0 	.word	0x1a0053f0

1a002db0 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a002db0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002db4:	0080      	lsls	r0, r0, #2
1a002db6:	4b02      	ldr	r3, [pc, #8]	; (1a002dc0 <uartRxRead+0x10>)
1a002db8:	581b      	ldr	r3, [r3, r0]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002dba:	6818      	ldr	r0, [r3, #0]
}
1a002dbc:	b2c0      	uxtb	r0, r0
1a002dbe:	4770      	bx	lr
1a002dc0:	1a0053f0 	.word	0x1a0053f0

1a002dc4 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a002dc4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002dc8:	0080      	lsls	r0, r0, #2
1a002dca:	4b02      	ldr	r3, [pc, #8]	; (1a002dd4 <uartTxWrite+0x10>)
1a002dcc:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a002dce:	6019      	str	r1, [r3, #0]
1a002dd0:	4770      	bx	lr
1a002dd2:	bf00      	nop
1a002dd4:	1a0053f0 	.word	0x1a0053f0

1a002dd8 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a002dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002ddc:	4607      	mov	r7, r0
1a002dde:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002de0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a002e50 <uartInit+0x78>
1a002de4:	0044      	lsls	r4, r0, #1
1a002de6:	1823      	adds	r3, r4, r0
1a002de8:	009b      	lsls	r3, r3, #2
1a002dea:	eb08 0503 	add.w	r5, r8, r3
1a002dee:	f858 6003 	ldr.w	r6, [r8, r3]
1a002df2:	4630      	mov	r0, r6
1a002df4:	f000 fb30 	bl	1a003458 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a002df8:	4630      	mov	r0, r6
1a002dfa:	4649      	mov	r1, r9
1a002dfc:	f000 fb56 	bl	1a0034ac <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002e00:	2307      	movs	r3, #7
1a002e02:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002e04:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a002e06:	2301      	movs	r3, #1
1a002e08:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002e0a:	7929      	ldrb	r1, [r5, #4]
1a002e0c:	796b      	ldrb	r3, [r5, #5]
1a002e0e:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002e10:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002e14:	480c      	ldr	r0, [pc, #48]	; (1a002e48 <uartInit+0x70>)
1a002e16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002e1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002e1e:	79ee      	ldrb	r6, [r5, #7]
1a002e20:	7a2a      	ldrb	r2, [r5, #8]
1a002e22:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002e24:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002e28:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a002e2c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002e30:	2f01      	cmp	r7, #1
1a002e32:	d107      	bne.n	1a002e44 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002e34:	4a05      	ldr	r2, [pc, #20]	; (1a002e4c <uartInit+0x74>)
1a002e36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002e38:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002e3e:	221a      	movs	r2, #26
1a002e40:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a002e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002e48:	40086000 	.word	0x40086000
1a002e4c:	40081000 	.word	0x40081000
1a002e50:	1a0053f0 	.word	0x1a0053f0

1a002e54 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a002e54:	b538      	push	{r3, r4, r5, lr}
1a002e56:	4604      	mov	r4, r0
1a002e58:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a002e5a:	4620      	mov	r0, r4
1a002e5c:	f7ff ff9c 	bl	1a002d98 <uartTxReady>
1a002e60:	2800      	cmp	r0, #0
1a002e62:	d0fa      	beq.n	1a002e5a <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a002e64:	4620      	mov	r0, r4
1a002e66:	4629      	mov	r1, r5
1a002e68:	f7ff ffac 	bl	1a002dc4 <uartTxWrite>
1a002e6c:	bd38      	pop	{r3, r4, r5, pc}
1a002e6e:	bf00      	nop

1a002e70 <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a002e70:	b538      	push	{r3, r4, r5, lr}
1a002e72:	4605      	mov	r5, r0
1a002e74:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a002e76:	e003      	b.n	1a002e80 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a002e78:	4628      	mov	r0, r5
1a002e7a:	f7ff ffeb 	bl	1a002e54 <uartWriteByte>
      str++;
1a002e7e:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a002e80:	7821      	ldrb	r1, [r4, #0]
1a002e82:	2900      	cmp	r1, #0
1a002e84:	d1f8      	bne.n	1a002e78 <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a002e86:	bd38      	pop	{r3, r4, r5, pc}

1a002e88 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a002e88:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a002e8a:	2003      	movs	r0, #3
1a002e8c:	f7ff fed8 	bl	1a002c40 <uartProcessIRQ>
1a002e90:	bd08      	pop	{r3, pc}
1a002e92:	bf00      	nop

1a002e94 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a002e94:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a002e96:	2005      	movs	r0, #5
1a002e98:	f7ff fed2 	bl	1a002c40 <uartProcessIRQ>
1a002e9c:	bd08      	pop	{r3, pc}
1a002e9e:	bf00      	nop

1a002ea0 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a002ea0:	e7fe      	b.n	1a002ea0 <errorOcurred>
1a002ea2:	bf00      	nop

1a002ea4 <doNothing>:
}

static void doNothing( void* ptr )
{
1a002ea4:	4770      	bx	lr
1a002ea6:	bf00      	nop

1a002ea8 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a002ea8:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002eaa:	2400      	movs	r4, #0
1a002eac:	e013      	b.n	1a002ed6 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002eae:	4b0b      	ldr	r3, [pc, #44]	; (1a002edc <TIMER0_IRQHandler+0x34>)
1a002eb0:	681a      	ldr	r2, [r3, #0]
1a002eb2:	f004 010f 	and.w	r1, r4, #15
1a002eb6:	2301      	movs	r3, #1
1a002eb8:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a002eba:	421a      	tst	r2, r3
1a002ebc:	d009      	beq.n	1a002ed2 <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002ebe:	4b08      	ldr	r3, [pc, #32]	; (1a002ee0 <TIMER0_IRQHandler+0x38>)
1a002ec0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002ec4:	2000      	movs	r0, #0
1a002ec6:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002ec8:	b262      	sxtb	r2, r4
1a002eca:	2301      	movs	r3, #1
1a002ecc:	4093      	lsls	r3, r2
1a002ece:	4a03      	ldr	r2, [pc, #12]	; (1a002edc <TIMER0_IRQHandler+0x34>)
1a002ed0:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002ed2:	3401      	adds	r4, #1
1a002ed4:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002ed6:	2c03      	cmp	r4, #3
1a002ed8:	d9e9      	bls.n	1a002eae <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002eda:	bd10      	pop	{r4, pc}
1a002edc:	40084000 	.word	0x40084000
1a002ee0:	10000064 	.word	0x10000064

1a002ee4 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002ee4:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002ee6:	2400      	movs	r4, #0
1a002ee8:	e014      	b.n	1a002f14 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002eea:	4b0c      	ldr	r3, [pc, #48]	; (1a002f1c <TIMER1_IRQHandler+0x38>)
1a002eec:	681a      	ldr	r2, [r3, #0]
1a002eee:	f004 010f 	and.w	r1, r4, #15
1a002ef2:	2301      	movs	r3, #1
1a002ef4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a002ef6:	421a      	tst	r2, r3
1a002ef8:	d00a      	beq.n	1a002f10 <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002efa:	1d23      	adds	r3, r4, #4
1a002efc:	4a08      	ldr	r2, [pc, #32]	; (1a002f20 <TIMER1_IRQHandler+0x3c>)
1a002efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002f02:	2000      	movs	r0, #0
1a002f04:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002f06:	b262      	sxtb	r2, r4
1a002f08:	2301      	movs	r3, #1
1a002f0a:	4093      	lsls	r3, r2
1a002f0c:	4a03      	ldr	r2, [pc, #12]	; (1a002f1c <TIMER1_IRQHandler+0x38>)
1a002f0e:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002f10:	3401      	adds	r4, #1
1a002f12:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002f14:	2c03      	cmp	r4, #3
1a002f16:	d9e8      	bls.n	1a002eea <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002f18:	bd10      	pop	{r4, pc}
1a002f1a:	bf00      	nop
1a002f1c:	40085000 	.word	0x40085000
1a002f20:	10000064 	.word	0x10000064

1a002f24 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002f24:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002f26:	2400      	movs	r4, #0
1a002f28:	e015      	b.n	1a002f56 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002f2a:	4b0c      	ldr	r3, [pc, #48]	; (1a002f5c <TIMER2_IRQHandler+0x38>)
1a002f2c:	681a      	ldr	r2, [r3, #0]
1a002f2e:	f004 010f 	and.w	r1, r4, #15
1a002f32:	2301      	movs	r3, #1
1a002f34:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a002f36:	421a      	tst	r2, r3
1a002f38:	d00b      	beq.n	1a002f52 <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002f3a:	f104 0308 	add.w	r3, r4, #8
1a002f3e:	4a08      	ldr	r2, [pc, #32]	; (1a002f60 <TIMER2_IRQHandler+0x3c>)
1a002f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002f44:	2000      	movs	r0, #0
1a002f46:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002f48:	b262      	sxtb	r2, r4
1a002f4a:	2301      	movs	r3, #1
1a002f4c:	4093      	lsls	r3, r2
1a002f4e:	4a03      	ldr	r2, [pc, #12]	; (1a002f5c <TIMER2_IRQHandler+0x38>)
1a002f50:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002f52:	3401      	adds	r4, #1
1a002f54:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002f56:	2c03      	cmp	r4, #3
1a002f58:	d9e7      	bls.n	1a002f2a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a002f5a:	bd10      	pop	{r4, pc}
1a002f5c:	400c3000 	.word	0x400c3000
1a002f60:	10000064 	.word	0x10000064

1a002f64 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a002f64:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002f66:	2400      	movs	r4, #0
1a002f68:	e015      	b.n	1a002f96 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002f6a:	4b0c      	ldr	r3, [pc, #48]	; (1a002f9c <TIMER3_IRQHandler+0x38>)
1a002f6c:	681a      	ldr	r2, [r3, #0]
1a002f6e:	f004 010f 	and.w	r1, r4, #15
1a002f72:	2301      	movs	r3, #1
1a002f74:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a002f76:	421a      	tst	r2, r3
1a002f78:	d00b      	beq.n	1a002f92 <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002f7a:	f104 030c 	add.w	r3, r4, #12
1a002f7e:	4a08      	ldr	r2, [pc, #32]	; (1a002fa0 <TIMER3_IRQHandler+0x3c>)
1a002f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002f84:	2000      	movs	r0, #0
1a002f86:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002f88:	b262      	sxtb	r2, r4
1a002f8a:	2301      	movs	r3, #1
1a002f8c:	4093      	lsls	r3, r2
1a002f8e:	4a03      	ldr	r2, [pc, #12]	; (1a002f9c <TIMER3_IRQHandler+0x38>)
1a002f90:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002f92:	3401      	adds	r4, #1
1a002f94:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002f96:	2c03      	cmp	r4, #3
1a002f98:	d9e7      	bls.n	1a002f6a <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a002f9a:	bd10      	pop	{r4, pc}
1a002f9c:	400c4000 	.word	0x400c4000
1a002fa0:	10000064 	.word	0x10000064

1a002fa4 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a002fa4:	b508      	push	{r3, lr}
   *printer = uart;
1a002fa6:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a002fa8:	4608      	mov	r0, r1
1a002faa:	4611      	mov	r1, r2
1a002fac:	f7ff ff14 	bl	1a002dd8 <uartInit>
1a002fb0:	bd08      	pop	{r3, pc}
1a002fb2:	bf00      	nop

1a002fb4 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a002fb4:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a002fb6:	f7ff ff5b 	bl	1a002e70 <uartWriteString>
1a002fba:	bd08      	pop	{r3, pc}

1a002fbc <printEnter>:
}

void printEnter( print_t printer )
{
1a002fbc:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a002fbe:	4902      	ldr	r1, [pc, #8]	; (1a002fc8 <printEnter+0xc>)
1a002fc0:	f7ff ff56 	bl	1a002e70 <uartWriteString>
1a002fc4:	bd08      	pop	{r3, pc}
1a002fc6:	bf00      	nop
1a002fc8:	1a005284 	.word	0x1a005284

1a002fcc <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002fcc:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002fce:	f000 fb61 	bl	1a003694 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002fd2:	4b3a      	ldr	r3, [pc, #232]	; (1a0030bc <boardInit+0xf0>)
1a002fd4:	6818      	ldr	r0, [r3, #0]
1a002fd6:	f7ff fc55 	bl	1a002884 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a002fda:	2001      	movs	r0, #1
1a002fdc:	2100      	movs	r1, #0
1a002fde:	f7ff fe09 	bl	1a002bf4 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a002fe2:	2000      	movs	r0, #0
1a002fe4:	2105      	movs	r1, #5
1a002fe6:	f7ff fcbb 	bl	1a002960 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a002fea:	2024      	movs	r0, #36	; 0x24
1a002fec:	2100      	movs	r1, #0
1a002fee:	f7ff fcb7 	bl	1a002960 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a002ff2:	2025      	movs	r0, #37	; 0x25
1a002ff4:	2100      	movs	r1, #0
1a002ff6:	f7ff fcb3 	bl	1a002960 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a002ffa:	2026      	movs	r0, #38	; 0x26
1a002ffc:	2100      	movs	r1, #0
1a002ffe:	f7ff fcaf 	bl	1a002960 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a003002:	2027      	movs	r0, #39	; 0x27
1a003004:	2100      	movs	r1, #0
1a003006:	f7ff fcab 	bl	1a002960 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00300a:	2028      	movs	r0, #40	; 0x28
1a00300c:	2101      	movs	r1, #1
1a00300e:	f7ff fca7 	bl	1a002960 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a003012:	2029      	movs	r0, #41	; 0x29
1a003014:	2101      	movs	r1, #1
1a003016:	f7ff fca3 	bl	1a002960 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00301a:	202a      	movs	r0, #42	; 0x2a
1a00301c:	2101      	movs	r1, #1
1a00301e:	f7ff fc9f 	bl	1a002960 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a003022:	202b      	movs	r0, #43	; 0x2b
1a003024:	2101      	movs	r1, #1
1a003026:	f7ff fc9b 	bl	1a002960 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00302a:	202c      	movs	r0, #44	; 0x2c
1a00302c:	2101      	movs	r1, #1
1a00302e:	f7ff fc97 	bl	1a002960 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a003032:	202d      	movs	r0, #45	; 0x2d
1a003034:	2101      	movs	r1, #1
1a003036:	f7ff fc93 	bl	1a002960 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00303a:	202e      	movs	r0, #46	; 0x2e
1a00303c:	2100      	movs	r1, #0
1a00303e:	f7ff fc8f 	bl	1a002960 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a003042:	202f      	movs	r0, #47	; 0x2f
1a003044:	2100      	movs	r1, #0
1a003046:	f7ff fc8b 	bl	1a002960 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00304a:	2030      	movs	r0, #48	; 0x30
1a00304c:	2100      	movs	r1, #0
1a00304e:	f7ff fc87 	bl	1a002960 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a003052:	2031      	movs	r0, #49	; 0x31
1a003054:	2100      	movs	r1, #0
1a003056:	f7ff fc83 	bl	1a002960 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00305a:	2032      	movs	r0, #50	; 0x32
1a00305c:	2100      	movs	r1, #0
1a00305e:	f7ff fc7f 	bl	1a002960 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a003062:	2033      	movs	r0, #51	; 0x33
1a003064:	2100      	movs	r1, #0
1a003066:	f7ff fc7b 	bl	1a002960 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00306a:	2034      	movs	r0, #52	; 0x34
1a00306c:	2100      	movs	r1, #0
1a00306e:	f7ff fc77 	bl	1a002960 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a003072:	2035      	movs	r0, #53	; 0x35
1a003074:	2100      	movs	r1, #0
1a003076:	f7ff fc73 	bl	1a002960 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00307a:	2036      	movs	r0, #54	; 0x36
1a00307c:	2101      	movs	r1, #1
1a00307e:	f7ff fc6f 	bl	1a002960 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a003082:	2037      	movs	r0, #55	; 0x37
1a003084:	2101      	movs	r1, #1
1a003086:	f7ff fc6b 	bl	1a002960 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00308a:	2038      	movs	r0, #56	; 0x38
1a00308c:	2101      	movs	r1, #1
1a00308e:	f7ff fc67 	bl	1a002960 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a003092:	2039      	movs	r0, #57	; 0x39
1a003094:	2101      	movs	r1, #1
1a003096:	f7ff fc63 	bl	1a002960 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00309a:	203a      	movs	r0, #58	; 0x3a
1a00309c:	2101      	movs	r1, #1
1a00309e:	f7ff fc5f 	bl	1a002960 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0030a2:	203b      	movs	r0, #59	; 0x3b
1a0030a4:	2101      	movs	r1, #1
1a0030a6:	f7ff fc5b 	bl	1a002960 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0030aa:	203c      	movs	r0, #60	; 0x3c
1a0030ac:	2101      	movs	r1, #1
1a0030ae:	f7ff fc57 	bl	1a002960 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0030b2:	203d      	movs	r0, #61	; 0x3d
1a0030b4:	2101      	movs	r1, #1
1a0030b6:	f7ff fc53 	bl	1a002960 <gpioInit>
1a0030ba:	bd08      	pop	{r3, pc}
1a0030bc:	10002cd8 	.word	0x10002cd8

1a0030c0 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a0030c0:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0030c2:	2200      	movs	r2, #0
1a0030c4:	e014      	b.n	1a0030f0 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0030c6:	4b0c      	ldr	r3, [pc, #48]	; (1a0030f8 <Board_LED_Init+0x38>)
1a0030c8:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a0030cc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0030d0:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0030d2:	480a      	ldr	r0, [pc, #40]	; (1a0030fc <Board_LED_Init+0x3c>)
1a0030d4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0030d8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a0030dc:	2301      	movs	r3, #1
1a0030de:	408b      	lsls	r3, r1
1a0030e0:	4333      	orrs	r3, r6
1a0030e2:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0030e6:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a0030ea:	2300      	movs	r3, #0
1a0030ec:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0030ee:	3201      	adds	r2, #1
1a0030f0:	2a05      	cmp	r2, #5
1a0030f2:	d9e8      	bls.n	1a0030c6 <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0030f4:	bc70      	pop	{r4, r5, r6}
1a0030f6:	4770      	bx	lr
1a0030f8:	1a00545c 	.word	0x1a00545c
1a0030fc:	400f4000 	.word	0x400f4000

1a003100 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a003100:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003102:	2300      	movs	r3, #0
1a003104:	e011      	b.n	1a00312a <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003106:	490b      	ldr	r1, [pc, #44]	; (1a003134 <Board_TEC_Init+0x34>)
1a003108:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00310c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003110:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a003112:	4c09      	ldr	r4, [pc, #36]	; (1a003138 <Board_TEC_Init+0x38>)
1a003114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003118:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a00311c:	2101      	movs	r1, #1
1a00311e:	40a9      	lsls	r1, r5
1a003120:	ea20 0101 	bic.w	r1, r0, r1
1a003124:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003128:	3301      	adds	r3, #1
1a00312a:	2b03      	cmp	r3, #3
1a00312c:	d9eb      	bls.n	1a003106 <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a00312e:	bc30      	pop	{r4, r5}
1a003130:	4770      	bx	lr
1a003132:	bf00      	nop
1a003134:	1a005454 	.word	0x1a005454
1a003138:	400f4000 	.word	0x400f4000

1a00313c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a00313c:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00313e:	2300      	movs	r3, #0
1a003140:	e011      	b.n	1a003166 <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003142:	490b      	ldr	r1, [pc, #44]	; (1a003170 <Board_GPIO_Init+0x34>)
1a003144:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003148:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00314c:	784d      	ldrb	r5, [r1, #1]
1a00314e:	4c09      	ldr	r4, [pc, #36]	; (1a003174 <Board_GPIO_Init+0x38>)
1a003150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003154:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a003158:	2101      	movs	r1, #1
1a00315a:	40a9      	lsls	r1, r5
1a00315c:	ea20 0101 	bic.w	r1, r0, r1
1a003160:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003164:	3301      	adds	r3, #1
1a003166:	2b08      	cmp	r3, #8
1a003168:	d9eb      	bls.n	1a003142 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a00316a:	bc30      	pop	{r4, r5}
1a00316c:	4770      	bx	lr
1a00316e:	bf00      	nop
1a003170:	1a005438 	.word	0x1a005438
1a003174:	400f4000 	.word	0x400f4000

1a003178 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a003178:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00317a:	4c0b      	ldr	r4, [pc, #44]	; (1a0031a8 <Board_SPI_Init+0x30>)
1a00317c:	4620      	mov	r0, r4
1a00317e:	f000 fe99 	bl	1a003eb4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003182:	6863      	ldr	r3, [r4, #4]
1a003184:	f023 0304 	bic.w	r3, r3, #4
1a003188:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00318a:	6823      	ldr	r3, [r4, #0]
1a00318c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003190:	f043 0307 	orr.w	r3, r3, #7
1a003194:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003196:	4620      	mov	r0, r4
1a003198:	4904      	ldr	r1, [pc, #16]	; (1a0031ac <Board_SPI_Init+0x34>)
1a00319a:	f000 fe6b 	bl	1a003e74 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00319e:	6863      	ldr	r3, [r4, #4]
1a0031a0:	f043 0302 	orr.w	r3, r3, #2
1a0031a4:	6063      	str	r3, [r4, #4]
1a0031a6:	bd10      	pop	{r4, pc}
1a0031a8:	400c5000 	.word	0x400c5000
1a0031ac:	000186a0 	.word	0x000186a0

1a0031b0 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a0031b0:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0031b2:	2000      	movs	r0, #0
1a0031b4:	f000 fe14 	bl	1a003de0 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0031b8:	f640 0208 	movw	r2, #2056	; 0x808
1a0031bc:	4b03      	ldr	r3, [pc, #12]	; (1a0031cc <Board_I2C_Init+0x1c>)
1a0031be:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0031c2:	2000      	movs	r0, #0
1a0031c4:	4902      	ldr	r1, [pc, #8]	; (1a0031d0 <Board_I2C_Init+0x20>)
1a0031c6:	f000 fe1d 	bl	1a003e04 <Chip_I2C_SetClockRate>
1a0031ca:	bd08      	pop	{r3, pc}
1a0031cc:	40086000 	.word	0x40086000
1a0031d0:	000f4240 	.word	0x000f4240

1a0031d4 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0031d4:	b510      	push	{r4, lr}
1a0031d6:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a0031d8:	4c08      	ldr	r4, [pc, #32]	; (1a0031fc <Board_ADC_Init+0x28>)
1a0031da:	4620      	mov	r0, r4
1a0031dc:	4669      	mov	r1, sp
1a0031de:	f000 fa19 	bl	1a003614 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0031e2:	4620      	mov	r0, r4
1a0031e4:	4669      	mov	r1, sp
1a0031e6:	4a06      	ldr	r2, [pc, #24]	; (1a003200 <Board_ADC_Init+0x2c>)
1a0031e8:	f000 fa34 	bl	1a003654 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0031ec:	4620      	mov	r0, r4
1a0031ee:	4669      	mov	r1, sp
1a0031f0:	2200      	movs	r2, #0
1a0031f2:	f000 fa49 	bl	1a003688 <Chip_ADC_SetResolution>
}
1a0031f6:	b002      	add	sp, #8
1a0031f8:	bd10      	pop	{r4, pc}
1a0031fa:	bf00      	nop
1a0031fc:	400e3000 	.word	0x400e3000
1a003200:	00061a80 	.word	0x00061a80

1a003204 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003204:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a003206:	4c07      	ldr	r4, [pc, #28]	; (1a003224 <Board_Debug_Init+0x20>)
1a003208:	4620      	mov	r0, r4
1a00320a:	f000 f925 	bl	1a003458 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00320e:	4620      	mov	r0, r4
1a003210:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003214:	f000 f96a 	bl	1a0034ec <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a003218:	2303      	movs	r3, #3
1a00321a:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a00321c:	2301      	movs	r3, #1
1a00321e:	65e3      	str	r3, [r4, #92]	; 0x5c
1a003220:	bd10      	pop	{r4, pc}
1a003222:	bf00      	nop
1a003224:	400c1000 	.word	0x400c1000

1a003228 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a003228:	4b03      	ldr	r3, [pc, #12]	; (1a003238 <Board_UARTPutChar+0x10>)
1a00322a:	695b      	ldr	r3, [r3, #20]
}


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00322c:	f013 0f20 	tst.w	r3, #32
1a003230:	d0fa      	beq.n	1a003228 <Board_UARTPutChar>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a003232:	4b01      	ldr	r3, [pc, #4]	; (1a003238 <Board_UARTPutChar+0x10>)
1a003234:	6018      	str	r0, [r3, #0]
1a003236:	4770      	bx	lr
1a003238:	400c1000 	.word	0x400c1000

1a00323c <Board_UARTGetChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00323c:	4b05      	ldr	r3, [pc, #20]	; (1a003254 <Board_UARTGetChar+0x18>)
1a00323e:	695b      	ldr	r3, [r3, #20]
}


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a003240:	f013 0f01 	tst.w	r3, #1
1a003244:	d003      	beq.n	1a00324e <Board_UARTGetChar+0x12>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003246:	4b03      	ldr	r3, [pc, #12]	; (1a003254 <Board_UARTGetChar+0x18>)
1a003248:	6818      	ldr	r0, [r3, #0]
1a00324a:	b2c0      	uxtb	r0, r0
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00324c:	4770      	bx	lr
    }
    return EOF;
1a00324e:	f04f 30ff 	mov.w	r0, #4294967295
}
1a003252:	4770      	bx	lr
1a003254:	400c1000 	.word	0x400c1000

1a003258 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a003258:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00325a:	f7ff ffd3 	bl	1a003204 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00325e:	480b      	ldr	r0, [pc, #44]	; (1a00328c <Board_Init+0x34>)
1a003260:	f000 fdac 	bl	1a003dbc <Chip_GPIO_Init>

   Board_LED_Init();
1a003264:	f7ff ff2c 	bl	1a0030c0 <Board_LED_Init>
   Board_TEC_Init();
1a003268:	f7ff ff4a 	bl	1a003100 <Board_TEC_Init>
   Board_SPI_Init();
1a00326c:	f7ff ff84 	bl	1a003178 <Board_SPI_Init>
   Board_GPIO_Init();
1a003270:	f7ff ff64 	bl	1a00313c <Board_GPIO_Init>
   Board_I2C_Init();
1a003274:	f7ff ff9c 	bl	1a0031b0 <Board_I2C_Init>
   Board_ADC_Init();
1a003278:	f7ff ffac 	bl	1a0031d4 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a00327c:	4a04      	ldr	r2, [pc, #16]	; (1a003290 <Board_Init+0x38>)
1a00327e:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a003282:	f043 0304 	orr.w	r3, r3, #4
1a003286:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a00328a:	bd08      	pop	{r3, pc}
1a00328c:	400f4000 	.word	0x400f4000
1a003290:	40043000 	.word	0x40043000

1a003294 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a003294:	2309      	movs	r3, #9
1a003296:	6003      	str	r3, [r0, #0]
   return -1;
}
1a003298:	f04f 30ff 	mov.w	r0, #4294967295
1a00329c:	4770      	bx	lr
1a00329e:	bf00      	nop

1a0032a0 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0032a0:	2358      	movs	r3, #88	; 0x58
1a0032a2:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0032a4:	f04f 30ff 	mov.w	r0, #4294967295
1a0032a8:	4770      	bx	lr
1a0032aa:	bf00      	nop

1a0032ac <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0032ac:	2902      	cmp	r1, #2
1a0032ae:	d904      	bls.n	1a0032ba <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a0032b0:	2309      	movs	r3, #9
1a0032b2:	6003      	str	r3, [r0, #0]
       return -1;
1a0032b4:	f04f 30ff 	mov.w	r0, #4294967295
1a0032b8:	4770      	bx	lr
int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
   case 0:
   case 1:
   case 2:
       return 1;
1a0032ba:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0032bc:	4770      	bx	lr
1a0032be:	bf00      	nop

1a0032c0 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0032c0:	2358      	movs	r3, #88	; 0x58
1a0032c2:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0032c4:	f04f 30ff 	mov.w	r0, #4294967295
1a0032c8:	4770      	bx	lr
1a0032ca:	bf00      	nop

1a0032cc <_read_r>:
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t i = 0;
  char c = 0;
  switch (fd) {
1a0032ce:	2902      	cmp	r1, #2
1a0032d0:	d912      	bls.n	1a0032f8 <_read_r+0x2c>
1a0032d2:	e01c      	b.n	1a00330e <_read_r+0x42>
  case 0:
  case 1:
  case 2:
      while( i < n ){
         c = (char)Board_UARTGetChar();
1a0032d4:	f7ff ffb2 	bl	1a00323c <Board_UARTGetChar>
1a0032d8:	b2c0      	uxtb	r0, r0
         if( c != 255 ){
1a0032da:	28ff      	cmp	r0, #255	; 0xff
1a0032dc:	d010      	beq.n	1a003300 <_read_r+0x34>
            if( c != '\r' && c != '\n' ){
1a0032de:	280d      	cmp	r0, #13
1a0032e0:	d004      	beq.n	1a0032ec <_read_r+0x20>
1a0032e2:	280a      	cmp	r0, #10
1a0032e4:	d002      	beq.n	1a0032ec <_read_r+0x20>
               ((char*) b)[i] = c;
1a0032e6:	5538      	strb	r0, [r7, r4]
               i++;
1a0032e8:	3401      	adds	r4, #1
1a0032ea:	e009      	b.n	1a003300 <_read_r+0x34>
            }else{
               ((char*) b)[i] = c;
1a0032ec:	5538      	strb	r0, [r7, r4]
               i++;
1a0032ee:	3401      	adds	r4, #1
               c = (char)Board_UARTGetChar(); // read anotherone to prevent \r\n
1a0032f0:	f7ff ffa4 	bl	1a00323c <Board_UARTGetChar>
               return i;
1a0032f4:	4620      	mov	r0, r4
1a0032f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0032f8:	461d      	mov	r5, r3
1a0032fa:	4617      	mov	r7, r2
1a0032fc:	4606      	mov	r6, r0
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  char c = 0;
  switch (fd) {
1a0032fe:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a003300:	42ac      	cmp	r4, r5
1a003302:	d3e7      	bcc.n	1a0032d4 <_read_r+0x8>
               c = (char)Board_UARTGetChar(); // read anotherone to prevent \r\n
               return i;
            }
         }
      }
      SET_ERR(ENODEV);
1a003304:	2313      	movs	r3, #19
1a003306:	6033      	str	r3, [r6, #0]
      return -1;
1a003308:	f04f 30ff 	mov.w	r0, #4294967295
1a00330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  default:
      SET_ERR(ENODEV);
1a00330e:	2313      	movs	r3, #19
1a003310:	6003      	str	r3, [r0, #0]
      return -1;
1a003312:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
1a003316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a003318 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a003318:	4b05      	ldr	r3, [pc, #20]	; (1a003330 <_sbrk_r+0x18>)
1a00331a:	681b      	ldr	r3, [r3, #0]
1a00331c:	b913      	cbnz	r3, 1a003324 <_sbrk_r+0xc>
       heap_end = &_pvHeapStart;
1a00331e:	4a05      	ldr	r2, [pc, #20]	; (1a003334 <_sbrk_r+0x1c>)
1a003320:	4b03      	ldr	r3, [pc, #12]	; (1a003330 <_sbrk_r+0x18>)
1a003322:	601a      	str	r2, [r3, #0]
   }
   prev_heap_end = heap_end;
1a003324:	4b02      	ldr	r3, [pc, #8]	; (1a003330 <_sbrk_r+0x18>)
1a003326:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a003328:	4401      	add	r1, r0
1a00332a:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00332c:	4770      	bx	lr
1a00332e:	bf00      	nop
1a003330:	10002bd4 	.word	0x10002bd4
1a003334:	10002cdc 	.word	0x10002cdc

1a003338 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a003338:	2902      	cmp	r1, #2
1a00333a:	d905      	bls.n	1a003348 <_write_r+0x10>
1a00333c:	e00c      	b.n	1a003358 <_write_r+0x20>
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
           Board_UARTPutChar(((char*) b)[i]);
1a00333e:	5d30      	ldrb	r0, [r6, r4]
1a003340:	f7ff ff72 	bl	1a003228 <Board_UARTPutChar>
   size_t i;
   switch (fd) {
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a003344:	3401      	adds	r4, #1
1a003346:	e003      	b.n	1a003350 <_write_r+0x18>
   UNUSED(st);
   SET_ERR(ENOSYS);
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a003348:	b570      	push	{r4, r5, r6, lr}
1a00334a:	461d      	mov	r5, r3
1a00334c:	4616      	mov	r6, r2
   size_t i;
   switch (fd) {
1a00334e:	2400      	movs	r4, #0
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a003350:	42ac      	cmp	r4, r5
1a003352:	d3f4      	bcc.n	1a00333e <_write_r+0x6>
           Board_UARTPutChar(((char*) b)[i]);
       return n;
1a003354:	4628      	mov	r0, r5
1a003356:	bd70      	pop	{r4, r5, r6, pc}
   default:
       SET_ERR(ENODEV);
1a003358:	2313      	movs	r3, #19
1a00335a:	6003      	str	r3, [r0, #0]
       return -1;
1a00335c:	f04f 30ff 	mov.w	r0, #4294967295
1a003360:	4770      	bx	lr
1a003362:	bf00      	nop

1a003364 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a003364:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a003366:	4b04      	ldr	r3, [pc, #16]	; (1a003378 <SystemInit+0x14>)
1a003368:	4a04      	ldr	r2, [pc, #16]	; (1a00337c <SystemInit+0x18>)
1a00336a:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a00336c:	f000 fcfa 	bl	1a003d64 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a003370:	f000 f856 	bl	1a003420 <Board_SystemInit>
1a003374:	bd08      	pop	{r3, pc}
1a003376:	bf00      	nop
1a003378:	e000ed08 	.word	0xe000ed08
1a00337c:	1a000000 	.word	0x1a000000

1a003380 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a003380:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003382:	2300      	movs	r3, #0
1a003384:	e00c      	b.n	1a0033a0 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a003386:	4a09      	ldr	r2, [pc, #36]	; (1a0033ac <Board_SetupMuxing+0x2c>)
1a003388:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00338c:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003390:	784a      	ldrb	r2, [r1, #1]
1a003392:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003394:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a003398:	4905      	ldr	r1, [pc, #20]	; (1a0033b0 <Board_SetupMuxing+0x30>)
1a00339a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00339e:	3301      	adds	r3, #1
1a0033a0:	2b25      	cmp	r3, #37	; 0x25
1a0033a2:	d9f0      	bls.n	1a003386 <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0033a4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0033a8:	4770      	bx	lr
1a0033aa:	bf00      	nop
1a0033ac:	1a005474 	.word	0x1a005474
1a0033b0:	40086000 	.word	0x40086000

1a0033b4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0033b4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0033b6:	4a17      	ldr	r2, [pc, #92]	; (1a003414 <Board_SetupClocking+0x60>)
1a0033b8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0033bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0033c0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0033c4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0033c8:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0033cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0033d0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0033d4:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0033d8:	2006      	movs	r0, #6
1a0033da:	490f      	ldr	r1, [pc, #60]	; (1a003418 <Board_SetupClocking+0x64>)
1a0033dc:	2201      	movs	r2, #1
1a0033de:	f000 fc19 	bl	1a003c14 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0033e2:	2400      	movs	r4, #0
1a0033e4:	e00a      	b.n	1a0033fc <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0033e6:	4a0d      	ldr	r2, [pc, #52]	; (1a00341c <Board_SetupClocking+0x68>)
1a0033e8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a0033ec:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a0033f0:	7859      	ldrb	r1, [r3, #1]
1a0033f2:	789a      	ldrb	r2, [r3, #2]
1a0033f4:	78db      	ldrb	r3, [r3, #3]
1a0033f6:	f000 fb75 	bl	1a003ae4 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0033fa:	3401      	adds	r4, #1
1a0033fc:	2c02      	cmp	r4, #2
1a0033fe:	d9f2      	bls.n	1a0033e6 <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a003400:	4b04      	ldr	r3, [pc, #16]	; (1a003414 <Board_SetupClocking+0x60>)
1a003402:	685a      	ldr	r2, [r3, #4]
1a003404:	f022 020c 	bic.w	r2, r2, #12
1a003408:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00340a:	685a      	ldr	r2, [r3, #4]
1a00340c:	f042 0203 	orr.w	r2, r2, #3
1a003410:	605a      	str	r2, [r3, #4]
1a003412:	bd10      	pop	{r4, pc}
1a003414:	40043000 	.word	0x40043000
1a003418:	0c28cb00 	.word	0x0c28cb00
1a00341c:	1a005468 	.word	0x1a005468

1a003420 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003420:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a003422:	f7ff ffad 	bl	1a003380 <Board_SetupMuxing>
    Board_SetupClocking();
1a003426:	f7ff ffc5 	bl	1a0033b4 <Board_SetupClocking>
1a00342a:	bd08      	pop	{r3, pc}

1a00342c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a00342c:	4b09      	ldr	r3, [pc, #36]	; (1a003454 <Chip_UART_GetIndex+0x28>)
1a00342e:	4298      	cmp	r0, r3
1a003430:	d009      	beq.n	1a003446 <Chip_UART_GetIndex+0x1a>
1a003432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003436:	4298      	cmp	r0, r3
1a003438:	d007      	beq.n	1a00344a <Chip_UART_GetIndex+0x1e>
1a00343a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00343e:	4298      	cmp	r0, r3
1a003440:	d005      	beq.n	1a00344e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003442:	2000      	movs	r0, #0
1a003444:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a003446:	2002      	movs	r0, #2
1a003448:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00344a:	2003      	movs	r0, #3
1a00344c:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a00344e:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a003450:	4770      	bx	lr
1a003452:	bf00      	nop
1a003454:	400c1000 	.word	0x400c1000

1a003458 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003458:	b510      	push	{r4, lr}
1a00345a:	b082      	sub	sp, #8
1a00345c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00345e:	f7ff ffe5 	bl	1a00342c <Chip_UART_GetIndex>
1a003462:	4b10      	ldr	r3, [pc, #64]	; (1a0034a4 <Chip_UART_Init+0x4c>)
1a003464:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003468:	2101      	movs	r1, #1
1a00346a:	460a      	mov	r2, r1
1a00346c:	460b      	mov	r3, r1
1a00346e:	f000 fb73 	bl	1a003b58 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a003472:	2307      	movs	r3, #7
1a003474:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a003476:	2300      	movs	r3, #0
1a003478:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00347a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00347c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00347e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003480:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003482:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003484:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a003486:	4b08      	ldr	r3, [pc, #32]	; (1a0034a8 <Chip_UART_Init+0x50>)
1a003488:	429c      	cmp	r4, r3
1a00348a:	d103      	bne.n	1a003494 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a00348c:	2300      	movs	r3, #0
1a00348e:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a003490:	69a3      	ldr	r3, [r4, #24]
1a003492:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a003494:	2303      	movs	r3, #3
1a003496:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003498:	2310      	movs	r3, #16
1a00349a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00349c:	9b01      	ldr	r3, [sp, #4]
}
1a00349e:	b002      	add	sp, #8
1a0034a0:	bd10      	pop	{r4, pc}
1a0034a2:	bf00      	nop
1a0034a4:	1a005514 	.word	0x1a005514
1a0034a8:	40082000 	.word	0x40082000

1a0034ac <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0034ac:	b538      	push	{r3, r4, r5, lr}
1a0034ae:	4605      	mov	r5, r0
1a0034b0:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0034b2:	f7ff ffbb 	bl	1a00342c <Chip_UART_GetIndex>
1a0034b6:	4b0c      	ldr	r3, [pc, #48]	; (1a0034e8 <Chip_UART_SetBaud+0x3c>)
1a0034b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0034bc:	f000 fb84 	bl	1a003bc8 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0034c0:	0124      	lsls	r4, r4, #4
1a0034c2:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0034c6:	68ea      	ldr	r2, [r5, #12]
1a0034c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0034cc:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0034ce:	b2da      	uxtb	r2, r3
1a0034d0:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0034d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0034d6:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0034d8:	68ea      	ldr	r2, [r5, #12]
1a0034da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0034de:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0034e0:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0034e4:	0900      	lsrs	r0, r0, #4
1a0034e6:	bd38      	pop	{r3, r4, r5, pc}
1a0034e8:	1a00550c 	.word	0x1a00550c

1a0034ec <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0034ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0034f0:	b083      	sub	sp, #12
1a0034f2:	4683      	mov	fp, r0
1a0034f4:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0034f6:	f7ff ff99 	bl	1a00342c <Chip_UART_GetIndex>
1a0034fa:	4b34      	ldr	r3, [pc, #208]	; (1a0035cc <Chip_UART_SetBaudFDR+0xe0>)
1a0034fc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003500:	f000 fb62 	bl	1a003bc8 <Chip_Clock_GetRate>
1a003504:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a003506:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00350a:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00350c:	2300      	movs	r3, #0
1a00350e:	9301      	str	r3, [sp, #4]
1a003510:	46a2      	mov	sl, r4
1a003512:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003514:	e029      	b.n	1a00356a <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003516:	2300      	movs	r3, #0
1a003518:	0932      	lsrs	r2, r6, #4
1a00351a:	0730      	lsls	r0, r6, #28
1a00351c:	fba0 0104 	umull	r0, r1, r0, r4
1a003520:	fb04 1102 	mla	r1, r4, r2, r1
1a003524:	1962      	adds	r2, r4, r5
1a003526:	fb08 f202 	mul.w	r2, r8, r2
1a00352a:	f000 fd23 	bl	1a003f74 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a00352e:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a003530:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a003532:	2800      	cmp	r0, #0
1a003534:	da01      	bge.n	1a00353a <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a003536:	4243      	negs	r3, r0
				div ++;
1a003538:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00353a:	429f      	cmp	r7, r3
1a00353c:	d30a      	bcc.n	1a003554 <Chip_UART_SetBaudFDR+0x68>
1a00353e:	b14a      	cbz	r2, 1a003554 <Chip_UART_SetBaudFDR+0x68>
1a003540:	0c11      	lsrs	r1, r2, #16
1a003542:	d107      	bne.n	1a003554 <Chip_UART_SetBaudFDR+0x68>
1a003544:	2a02      	cmp	r2, #2
1a003546:	d800      	bhi.n	1a00354a <Chip_UART_SetBaudFDR+0x5e>
1a003548:	b925      	cbnz	r5, 1a003554 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00354a:	b14b      	cbz	r3, 1a003560 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a00354c:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a00354e:	9501      	str	r5, [sp, #4]
			sm = m;
1a003550:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a003552:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a003554:	3501      	adds	r5, #1
1a003556:	e000      	b.n	1a00355a <Chip_UART_SetBaudFDR+0x6e>
1a003558:	2500      	movs	r5, #0
1a00355a:	42a5      	cmp	r5, r4
1a00355c:	d3db      	bcc.n	1a003516 <Chip_UART_SetBaudFDR+0x2a>
1a00355e:	e003      	b.n	1a003568 <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a003560:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a003562:	9501      	str	r5, [sp, #4]
			sm = m;
1a003564:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a003566:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003568:	3401      	adds	r4, #1
1a00356a:	b10f      	cbz	r7, 1a003570 <Chip_UART_SetBaudFDR+0x84>
1a00356c:	2c0f      	cmp	r4, #15
1a00356e:	d9f3      	bls.n	1a003558 <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a003570:	f1b9 0f00 	cmp.w	r9, #0
1a003574:	d026      	beq.n	1a0035c4 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003576:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00357a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00357e:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a003582:	fa5f f389 	uxtb.w	r3, r9
1a003586:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a00358a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00358e:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003592:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00359a:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00359e:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0035a2:	b2da      	uxtb	r2, r3
1a0035a4:	9901      	ldr	r1, [sp, #4]
1a0035a6:	f001 030f 	and.w	r3, r1, #15
1a0035aa:	4313      	orrs	r3, r2
1a0035ac:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0035b0:	0933      	lsrs	r3, r6, #4
1a0035b2:	fb0a f303 	mul.w	r3, sl, r3
1a0035b6:	eb0a 0001 	add.w	r0, sl, r1
1a0035ba:	fb09 f000 	mul.w	r0, r9, r0
1a0035be:	fbb3 f0f0 	udiv	r0, r3, r0
1a0035c2:	e000      	b.n	1a0035c6 <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a0035c4:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a0035c6:	b003      	add	sp, #12
1a0035c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0035cc:	1a00550c 	.word	0x1a00550c

1a0035d0 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0035d0:	4b03      	ldr	r3, [pc, #12]	; (1a0035e0 <Chip_ADC_GetClockIndex+0x10>)
1a0035d2:	4298      	cmp	r0, r3
1a0035d4:	d101      	bne.n	1a0035da <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a0035d6:	2004      	movs	r0, #4
1a0035d8:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0035da:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0035dc:	4770      	bx	lr
1a0035de:	bf00      	nop
1a0035e0:	400e4000 	.word	0x400e4000

1a0035e4 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0035e4:	b570      	push	{r4, r5, r6, lr}
1a0035e6:	460d      	mov	r5, r1
1a0035e8:	4614      	mov	r4, r2
1a0035ea:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0035ec:	f7ff fff0 	bl	1a0035d0 <Chip_ADC_GetClockIndex>
1a0035f0:	f000 faea 	bl	1a003bc8 <Chip_Clock_GetRate>
	if (burstMode) {
1a0035f4:	b115      	cbz	r5, 1a0035fc <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a0035f6:	fb04 f406 	mul.w	r4, r4, r6
1a0035fa:	e003      	b.n	1a003604 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0035fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003600:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003604:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a003608:	0064      	lsls	r4, r4, #1
1a00360a:	fbb0 f4f4 	udiv	r4, r0, r4
1a00360e:	1e60      	subs	r0, r4, #1
	return div;
}
1a003610:	b2c0      	uxtb	r0, r0
1a003612:	bd70      	pop	{r4, r5, r6, pc}

1a003614 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003614:	b538      	push	{r3, r4, r5, lr}
1a003616:	4605      	mov	r5, r0
1a003618:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00361a:	f7ff ffd9 	bl	1a0035d0 <Chip_ADC_GetClockIndex>
1a00361e:	2101      	movs	r1, #1
1a003620:	460a      	mov	r2, r1
1a003622:	460b      	mov	r3, r1
1a003624:	f000 fa98 	bl	1a003b58 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003628:	2100      	movs	r1, #0
1a00362a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00362c:	4a08      	ldr	r2, [pc, #32]	; (1a003650 <Chip_ADC_Init+0x3c>)
1a00362e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003630:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003632:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003634:	4628      	mov	r0, r5
1a003636:	230b      	movs	r3, #11
1a003638:	f7ff ffd4 	bl	1a0035e4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00363c:	0200      	lsls	r0, r0, #8
1a00363e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003642:	7920      	ldrb	r0, [r4, #4]
1a003644:	f000 0007 	and.w	r0, r0, #7
1a003648:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a00364c:	6028      	str	r0, [r5, #0]
1a00364e:	bd38      	pop	{r3, r4, r5, pc}
1a003650:	00061a80 	.word	0x00061a80

1a003654 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003654:	b570      	push	{r4, r5, r6, lr}
1a003656:	4606      	mov	r6, r0
1a003658:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00365a:	6804      	ldr	r4, [r0, #0]
1a00365c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003660:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003664:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003666:	790b      	ldrb	r3, [r1, #4]
1a003668:	f1c3 030b 	rsb	r3, r3, #11
1a00366c:	7949      	ldrb	r1, [r1, #5]
1a00366e:	b2db      	uxtb	r3, r3
1a003670:	f7ff ffb8 	bl	1a0035e4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003674:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003678:	792c      	ldrb	r4, [r5, #4]
1a00367a:	f004 0407 	and.w	r4, r4, #7
1a00367e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a003682:	6030      	str	r0, [r6, #0]
1a003684:	bd70      	pop	{r4, r5, r6, pc}
1a003686:	bf00      	nop

1a003688 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003688:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00368a:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00368c:	680a      	ldr	r2, [r1, #0]
1a00368e:	f7ff ffe1 	bl	1a003654 <Chip_ADC_SetSampleRate>
1a003692:	bd08      	pop	{r3, pc}

1a003694 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003694:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003696:	2069      	movs	r0, #105	; 0x69
1a003698:	f000 fa96 	bl	1a003bc8 <Chip_Clock_GetRate>
1a00369c:	4b01      	ldr	r3, [pc, #4]	; (1a0036a4 <SystemCoreClockUpdate+0x10>)
1a00369e:	6018      	str	r0, [r3, #0]
1a0036a0:	bd08      	pop	{r3, pc}
1a0036a2:	bf00      	nop
1a0036a4:	10002cd8 	.word	0x10002cd8

1a0036a8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0036a8:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0036aa:	680b      	ldr	r3, [r1, #0]
1a0036ac:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0036b0:	d002      	beq.n	1a0036b8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0036b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0036b6:	600b      	str	r3, [r1, #0]
1a0036b8:	4686      	mov	lr, r0
1a0036ba:	2601      	movs	r6, #1
1a0036bc:	e041      	b.n	1a003742 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a0036be:	680d      	ldr	r5, [r1, #0]
1a0036c0:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0036c4:	d008      	beq.n	1a0036d8 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0036c6:	1c7b      	adds	r3, r7, #1
1a0036c8:	fa04 f203 	lsl.w	r2, r4, r3
1a0036cc:	694b      	ldr	r3, [r1, #20]
1a0036ce:	fb03 f302 	mul.w	r3, r3, r2
1a0036d2:	fbb3 f3f6 	udiv	r3, r3, r6
1a0036d6:	e004      	b.n	1a0036e2 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a0036d8:	694b      	ldr	r3, [r1, #20]
1a0036da:	fb04 f303 	mul.w	r3, r4, r3
1a0036de:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0036e2:	4a19      	ldr	r2, [pc, #100]	; (1a003748 <pll_calc_divs+0xa0>)
1a0036e4:	4293      	cmp	r3, r2
1a0036e6:	d920      	bls.n	1a00372a <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0036e8:	4a18      	ldr	r2, [pc, #96]	; (1a00374c <pll_calc_divs+0xa4>)
1a0036ea:	4293      	cmp	r3, r2
1a0036ec:	d823      	bhi.n	1a003736 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a0036ee:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0036f2:	d103      	bne.n	1a0036fc <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a0036f4:	1c7a      	adds	r2, r7, #1
1a0036f6:	fa23 f202 	lsr.w	r2, r3, r2
1a0036fa:	e000      	b.n	1a0036fe <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0036fc:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0036fe:	1a85      	subs	r5, r0, r2
1a003700:	d502      	bpl.n	1a003708 <pll_calc_divs+0x60>
		return -val;
1a003702:	f1c5 0c00 	rsb	ip, r5, #0
1a003706:	e000      	b.n	1a00370a <pll_calc_divs+0x62>
	return val;
1a003708:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00370a:	45e6      	cmp	lr, ip
1a00370c:	d90d      	bls.n	1a00372a <pll_calc_divs+0x82>
					ppll->nsel = n;
1a00370e:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a003710:	f107 0e01 	add.w	lr, r7, #1
1a003714:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a003718:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a00371a:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a00371c:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00371e:	2d00      	cmp	r5, #0
1a003720:	da02      	bge.n	1a003728 <pll_calc_divs+0x80>
		return -val;
1a003722:	f1c5 0e00 	rsb	lr, r5, #0
1a003726:	e000      	b.n	1a00372a <pll_calc_divs+0x82>
	return val;
1a003728:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a00372a:	3401      	adds	r4, #1
1a00372c:	e000      	b.n	1a003730 <pll_calc_divs+0x88>
1a00372e:	2401      	movs	r4, #1
1a003730:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a003734:	ddc3      	ble.n	1a0036be <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003736:	3701      	adds	r7, #1
1a003738:	e000      	b.n	1a00373c <pll_calc_divs+0x94>
1a00373a:	2700      	movs	r7, #0
1a00373c:	2f03      	cmp	r7, #3
1a00373e:	ddf6      	ble.n	1a00372e <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a003740:	3601      	adds	r6, #1
1a003742:	2e04      	cmp	r6, #4
1a003744:	ddf9      	ble.n	1a00373a <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a003746:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003748:	094c5eff 	.word	0x094c5eff
1a00374c:	1312d000 	.word	0x1312d000

1a003750 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003750:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003752:	b099      	sub	sp, #100	; 0x64
1a003754:	4605      	mov	r5, r0
1a003756:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a003758:	4668      	mov	r0, sp
1a00375a:	2100      	movs	r1, #0
1a00375c:	2260      	movs	r2, #96	; 0x60
1a00375e:	f000 ff08 	bl	1a004572 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003762:	2380      	movs	r3, #128	; 0x80
1a003764:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a003766:	6963      	ldr	r3, [r4, #20]
1a003768:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00376a:	7923      	ldrb	r3, [r4, #4]
1a00376c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003770:	4628      	mov	r0, r5
1a003772:	4669      	mov	r1, sp
1a003774:	f7ff ff98 	bl	1a0036a8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003778:	9b06      	ldr	r3, [sp, #24]
1a00377a:	42ab      	cmp	r3, r5
1a00377c:	d107      	bne.n	1a00378e <pll_get_frac+0x3e>
		*ppll = pll[0];
1a00377e:	466d      	mov	r5, sp
1a003780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00378c:	e05e      	b.n	1a00384c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00378e:	1aeb      	subs	r3, r5, r3
1a003790:	d500      	bpl.n	1a003794 <pll_get_frac+0x44>
		return -val;
1a003792:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003794:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003796:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a003798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00379c:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a00379e:	6963      	ldr	r3, [r4, #20]
1a0037a0:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0037a2:	7923      	ldrb	r3, [r4, #4]
1a0037a4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0037a8:	4628      	mov	r0, r5
1a0037aa:	a910      	add	r1, sp, #64	; 0x40
1a0037ac:	f7ff ff7c 	bl	1a0036a8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0037b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0037b2:	42ab      	cmp	r3, r5
1a0037b4:	d107      	bne.n	1a0037c6 <pll_get_frac+0x76>
		*ppll = pll[2];
1a0037b6:	ad10      	add	r5, sp, #64	; 0x40
1a0037b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0037c4:	e042      	b.n	1a00384c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0037c6:	1aeb      	subs	r3, r5, r3
1a0037c8:	d500      	bpl.n	1a0037cc <pll_get_frac+0x7c>
		return -val;
1a0037ca:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0037cc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0037ce:	4b20      	ldr	r3, [pc, #128]	; (1a003850 <pll_get_frac+0x100>)
1a0037d0:	429d      	cmp	r5, r3
1a0037d2:	d812      	bhi.n	1a0037fa <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a0037d4:	2340      	movs	r3, #64	; 0x40
1a0037d6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0037d8:	6963      	ldr	r3, [r4, #20]
1a0037da:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0037dc:	4628      	mov	r0, r5
1a0037de:	a908      	add	r1, sp, #32
1a0037e0:	f7ff ff62 	bl	1a0036a8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0037e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0037e6:	42ab      	cmp	r3, r5
1a0037e8:	d107      	bne.n	1a0037fa <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0037ea:	ad08      	add	r5, sp, #32
1a0037ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0037f8:	e028      	b.n	1a00384c <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0037fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0037fc:	1aed      	subs	r5, r5, r3
1a0037fe:	d500      	bpl.n	1a003802 <pll_get_frac+0xb2>
		return -val;
1a003800:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a003802:	42ae      	cmp	r6, r5
1a003804:	dc11      	bgt.n	1a00382a <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a003806:	42be      	cmp	r6, r7
1a003808:	dc07      	bgt.n	1a00381a <pll_get_frac+0xca>
			*ppll = pll[0];
1a00380a:	466d      	mov	r5, sp
1a00380c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00380e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003810:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003818:	e018      	b.n	1a00384c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00381a:	ad10      	add	r5, sp, #64	; 0x40
1a00381c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00381e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003820:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003828:	e010      	b.n	1a00384c <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a00382a:	42af      	cmp	r7, r5
1a00382c:	db07      	blt.n	1a00383e <pll_get_frac+0xee>
			*ppll = pll[1];
1a00382e:	ad08      	add	r5, sp, #32
1a003830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003834:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00383c:	e006      	b.n	1a00384c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00383e:	ad10      	add	r5, sp, #64	; 0x40
1a003840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003844:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a00384c:	b019      	add	sp, #100	; 0x64
1a00384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003850:	068e7780 	.word	0x068e7780

1a003854 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003854:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003856:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003858:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00385a:	e010      	b.n	1a00387e <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00385c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003860:	0052      	lsls	r2, r2, #1
1a003862:	4d0d      	ldr	r5, [pc, #52]	; (1a003898 <Chip_Clock_FindBaseClock+0x44>)
1a003864:	5aaa      	ldrh	r2, [r5, r2]
1a003866:	4282      	cmp	r2, r0
1a003868:	d806      	bhi.n	1a003878 <Chip_Clock_FindBaseClock+0x24>
1a00386a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00386e:	0052      	lsls	r2, r2, #1
1a003870:	442a      	add	r2, r5
1a003872:	8852      	ldrh	r2, [r2, #2]
1a003874:	4282      	cmp	r2, r0
1a003876:	d201      	bcs.n	1a00387c <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003878:	3301      	adds	r3, #1
1a00387a:	e000      	b.n	1a00387e <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a00387c:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00387e:	291c      	cmp	r1, #28
1a003880:	d107      	bne.n	1a003892 <Chip_Clock_FindBaseClock+0x3e>
1a003882:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003886:	0052      	lsls	r2, r2, #1
1a003888:	4c03      	ldr	r4, [pc, #12]	; (1a003898 <Chip_Clock_FindBaseClock+0x44>)
1a00388a:	4422      	add	r2, r4
1a00388c:	7914      	ldrb	r4, [r2, #4]
1a00388e:	428c      	cmp	r4, r1
1a003890:	d1e4      	bne.n	1a00385c <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a003892:	4608      	mov	r0, r1
1a003894:	bc30      	pop	{r4, r5}
1a003896:	4770      	bx	lr
1a003898:	1a005528 	.word	0x1a005528

1a00389c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00389c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00389e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0038a2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0038a4:	4a0d      	ldr	r2, [pc, #52]	; (1a0038dc <Chip_Clock_EnableCrystal+0x40>)
1a0038a6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0038a8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0038ac:	6992      	ldr	r2, [r2, #24]
1a0038ae:	428a      	cmp	r2, r1
1a0038b0:	d001      	beq.n	1a0038b6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0038b2:	4a0a      	ldr	r2, [pc, #40]	; (1a0038dc <Chip_Clock_EnableCrystal+0x40>)
1a0038b4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0038b6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0038ba:	4a09      	ldr	r2, [pc, #36]	; (1a0038e0 <Chip_Clock_EnableCrystal+0x44>)
1a0038bc:	6811      	ldr	r1, [r2, #0]
1a0038be:	4a09      	ldr	r2, [pc, #36]	; (1a0038e4 <Chip_Clock_EnableCrystal+0x48>)
1a0038c0:	4291      	cmp	r1, r2
1a0038c2:	d901      	bls.n	1a0038c8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0038c4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0038c8:	4a04      	ldr	r2, [pc, #16]	; (1a0038dc <Chip_Clock_EnableCrystal+0x40>)
1a0038ca:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0038cc:	9b01      	ldr	r3, [sp, #4]
1a0038ce:	1e5a      	subs	r2, r3, #1
1a0038d0:	9201      	str	r2, [sp, #4]
1a0038d2:	2b00      	cmp	r3, #0
1a0038d4:	d1fa      	bne.n	1a0038cc <Chip_Clock_EnableCrystal+0x30>
}
1a0038d6:	b002      	add	sp, #8
1a0038d8:	4770      	bx	lr
1a0038da:	bf00      	nop
1a0038dc:	40050000 	.word	0x40050000
1a0038e0:	1a00544c 	.word	0x1a00544c
1a0038e4:	01312cff 	.word	0x01312cff

1a0038e8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0038e8:	3012      	adds	r0, #18
1a0038ea:	4b05      	ldr	r3, [pc, #20]	; (1a003900 <Chip_Clock_GetDividerSource+0x18>)
1a0038ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0038f0:	f010 0f01 	tst.w	r0, #1
1a0038f4:	d102      	bne.n	1a0038fc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0038f6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0038fa:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a0038fc:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0038fe:	4770      	bx	lr
1a003900:	40050000 	.word	0x40050000

1a003904 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003904:	f100 0212 	add.w	r2, r0, #18
1a003908:	4b03      	ldr	r3, [pc, #12]	; (1a003918 <Chip_Clock_GetDividerDivisor+0x14>)
1a00390a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00390e:	4b03      	ldr	r3, [pc, #12]	; (1a00391c <Chip_Clock_GetDividerDivisor+0x18>)
1a003910:	5c18      	ldrb	r0, [r3, r0]
}
1a003912:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003916:	4770      	bx	lr
1a003918:	40050000 	.word	0x40050000
1a00391c:	1a005520 	.word	0x1a005520

1a003920 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003920:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003922:	2810      	cmp	r0, #16
1a003924:	d80a      	bhi.n	1a00393c <Chip_Clock_GetClockInputHz+0x1c>
1a003926:	e8df f000 	tbb	[pc, r0]
1a00392a:	0b42      	.short	0x0b42
1a00392c:	091f160d 	.word	0x091f160d
1a003930:	2b282522 	.word	0x2b282522
1a003934:	322e0909 	.word	0x322e0909
1a003938:	3a36      	.short	0x3a36
1a00393a:	3e          	.byte	0x3e
1a00393b:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a00393c:	2000      	movs	r0, #0
1a00393e:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003940:	481e      	ldr	r0, [pc, #120]	; (1a0039bc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003942:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003944:	4b1e      	ldr	r3, [pc, #120]	; (1a0039c0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003946:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00394a:	f003 0307 	and.w	r3, r3, #7
1a00394e:	2b04      	cmp	r3, #4
1a003950:	d130      	bne.n	1a0039b4 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003952:	2000      	movs	r0, #0
1a003954:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003956:	4b1a      	ldr	r3, [pc, #104]	; (1a0039c0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003958:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00395c:	f003 0307 	and.w	r3, r3, #7
1a003960:	2b04      	cmp	r3, #4
1a003962:	d029      	beq.n	1a0039b8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003964:	4817      	ldr	r0, [pc, #92]	; (1a0039c4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003966:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003968:	4b17      	ldr	r3, [pc, #92]	; (1a0039c8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00396a:	6818      	ldr	r0, [r3, #0]
		break;
1a00396c:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00396e:	4b17      	ldr	r3, [pc, #92]	; (1a0039cc <Chip_Clock_GetClockInputHz+0xac>)
1a003970:	6818      	ldr	r0, [r3, #0]
		break;
1a003972:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003974:	4b16      	ldr	r3, [pc, #88]	; (1a0039d0 <Chip_Clock_GetClockInputHz+0xb0>)
1a003976:	6818      	ldr	r0, [r3, #0]
		break;
1a003978:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00397a:	4b15      	ldr	r3, [pc, #84]	; (1a0039d0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00397c:	6858      	ldr	r0, [r3, #4]
		break;
1a00397e:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003980:	f000 f86a 	bl	1a003a58 <Chip_Clock_GetMainPLLHz>
		break;
1a003984:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003986:	2100      	movs	r1, #0
1a003988:	f000 f89a 	bl	1a003ac0 <Chip_Clock_GetDivRate>
		break;
1a00398c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00398e:	2101      	movs	r1, #1
1a003990:	f000 f896 	bl	1a003ac0 <Chip_Clock_GetDivRate>
		break;
1a003994:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003996:	2102      	movs	r1, #2
1a003998:	f000 f892 	bl	1a003ac0 <Chip_Clock_GetDivRate>
		break;
1a00399c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00399e:	2103      	movs	r1, #3
1a0039a0:	f000 f88e 	bl	1a003ac0 <Chip_Clock_GetDivRate>
		break;
1a0039a4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0039a6:	2104      	movs	r1, #4
1a0039a8:	f000 f88a 	bl	1a003ac0 <Chip_Clock_GetDivRate>
		break;
1a0039ac:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a0039ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0039b2:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0039b4:	4803      	ldr	r0, [pc, #12]	; (1a0039c4 <Chip_Clock_GetClockInputHz+0xa4>)
1a0039b6:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a0039b8:	4806      	ldr	r0, [pc, #24]	; (1a0039d4 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a0039ba:	bd08      	pop	{r3, pc}
1a0039bc:	00b71b00 	.word	0x00b71b00
1a0039c0:	40043000 	.word	0x40043000
1a0039c4:	017d7840 	.word	0x017d7840
1a0039c8:	1a005450 	.word	0x1a005450
1a0039cc:	1a00544c 	.word	0x1a00544c
1a0039d0:	10002bd8 	.word	0x10002bd8
1a0039d4:	02faf080 	.word	0x02faf080

1a0039d8 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0039d8:	b538      	push	{r3, r4, r5, lr}
1a0039da:	4605      	mov	r5, r0
1a0039dc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0039de:	7908      	ldrb	r0, [r1, #4]
1a0039e0:	f7ff ff9e 	bl	1a003920 <Chip_Clock_GetClockInputHz>
1a0039e4:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0039e6:	4b19      	ldr	r3, [pc, #100]	; (1a003a4c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0039e8:	442b      	add	r3, r5
1a0039ea:	4a19      	ldr	r2, [pc, #100]	; (1a003a50 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0039ec:	4293      	cmp	r3, r2
1a0039ee:	d821      	bhi.n	1a003a34 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0039f0:	b318      	cbz	r0, 1a003a3a <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0039f2:	2380      	movs	r3, #128	; 0x80
1a0039f4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0039f6:	2300      	movs	r3, #0
1a0039f8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0039fa:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0039fc:	fbb5 f3f0 	udiv	r3, r5, r0
1a003a00:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003a02:	4a14      	ldr	r2, [pc, #80]	; (1a003a54 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003a04:	4295      	cmp	r5, r2
1a003a06:	d903      	bls.n	1a003a10 <Chip_Clock_CalcMainPLLValue+0x38>
1a003a08:	fb03 f000 	mul.w	r0, r3, r0
1a003a0c:	42a8      	cmp	r0, r5
1a003a0e:	d007      	beq.n	1a003a20 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003a10:	4628      	mov	r0, r5
1a003a12:	4621      	mov	r1, r4
1a003a14:	f7ff fe9c 	bl	1a003750 <pll_get_frac>
		if (!ppll->nsel) {
1a003a18:	68a3      	ldr	r3, [r4, #8]
1a003a1a:	b18b      	cbz	r3, 1a003a40 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a003a1c:	3b01      	subs	r3, #1
1a003a1e:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a003a20:	6923      	ldr	r3, [r4, #16]
1a003a22:	b183      	cbz	r3, 1a003a46 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a003a24:	68e2      	ldr	r2, [r4, #12]
1a003a26:	b10a      	cbz	r2, 1a003a2c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003a28:	3a01      	subs	r2, #1
1a003a2a:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a003a2c:	3b01      	subs	r3, #1
1a003a2e:	6123      	str	r3, [r4, #16]

	return 0;
1a003a30:	2000      	movs	r0, #0
1a003a32:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a003a34:	f04f 30ff 	mov.w	r0, #4294967295
1a003a38:	bd38      	pop	{r3, r4, r5, pc}
1a003a3a:	f04f 30ff 	mov.w	r0, #4294967295
1a003a3e:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a003a40:	f04f 30ff 	mov.w	r0, #4294967295
1a003a44:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a003a46:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a003a4a:	bd38      	pop	{r3, r4, r5, pc}
1a003a4c:	ff6b3a10 	.word	0xff6b3a10
1a003a50:	0b940510 	.word	0x0b940510
1a003a54:	094c5eff 	.word	0x094c5eff

1a003a58 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a003a58:	b570      	push	{r4, r5, r6, lr}
1a003a5a:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003a5c:	4d16      	ldr	r5, [pc, #88]	; (1a003ab8 <Chip_Clock_GetMainPLLHz+0x60>)
1a003a5e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003a60:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003a64:	f7ff ff5c 	bl	1a003920 <Chip_Clock_GetClockInputHz>
1a003a68:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003a6a:	4b14      	ldr	r3, [pc, #80]	; (1a003abc <Chip_Clock_GetMainPLLHz+0x64>)
1a003a6c:	6818      	ldr	r0, [r3, #0]
1a003a6e:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003a70:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a003a72:	f010 0001 	ands.w	r0, r0, #1
1a003a76:	d01d      	beq.n	1a003ab4 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a003a78:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003a7c:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003a80:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a003a84:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a003a88:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a003a8a:	3201      	adds	r2, #1
	p = ptab[psel];
1a003a8c:	a802      	add	r0, sp, #8
1a003a8e:	4401      	add	r1, r0
1a003a90:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a003a94:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003a98:	d100      	bne.n	1a003a9c <Chip_Clock_GetMainPLLHz+0x44>
1a003a9a:	b125      	cbz	r5, 1a003aa6 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a003a9c:	fbb6 f0f2 	udiv	r0, r6, r2
1a003aa0:	fb03 f000 	mul.w	r0, r3, r0
1a003aa4:	e006      	b.n	1a003ab4 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a003aa6:	0040      	lsls	r0, r0, #1
1a003aa8:	fbb3 f3f0 	udiv	r3, r3, r0
1a003aac:	fbb6 f0f2 	udiv	r0, r6, r2
1a003ab0:	fb00 f003 	mul.w	r0, r0, r3
}
1a003ab4:	b002      	add	sp, #8
1a003ab6:	bd70      	pop	{r4, r5, r6, pc}
1a003ab8:	40050000 	.word	0x40050000
1a003abc:	1a00551c 	.word	0x1a00551c

1a003ac0 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a003ac0:	b538      	push	{r3, r4, r5, lr}
1a003ac2:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a003ac4:	4608      	mov	r0, r1
1a003ac6:	f7ff ff0f 	bl	1a0038e8 <Chip_Clock_GetDividerSource>
1a003aca:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003acc:	4620      	mov	r0, r4
1a003ace:	f7ff ff19 	bl	1a003904 <Chip_Clock_GetDividerDivisor>
1a003ad2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003ad4:	4628      	mov	r0, r5
1a003ad6:	f7ff ff23 	bl	1a003920 <Chip_Clock_GetClockInputHz>
1a003ada:	3401      	adds	r4, #1
}
1a003adc:	fbb0 f0f4 	udiv	r0, r0, r4
1a003ae0:	bd38      	pop	{r3, r4, r5, pc}
1a003ae2:	bf00      	nop

1a003ae4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003ae4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003ae6:	0085      	lsls	r5, r0, #2
1a003ae8:	4c0d      	ldr	r4, [pc, #52]	; (1a003b20 <Chip_Clock_SetBaseClock+0x3c>)
1a003aea:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a003aec:	281b      	cmp	r0, #27
1a003aee:	d80f      	bhi.n	1a003b10 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a003af0:	2911      	cmp	r1, #17
1a003af2:	d012      	beq.n	1a003b1a <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003af4:	4c0b      	ldr	r4, [pc, #44]	; (1a003b24 <Chip_Clock_SetBaseClock+0x40>)
1a003af6:	402c      	ands	r4, r5

			if (autoblocken) {
1a003af8:	b10a      	cbz	r2, 1a003afe <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a003afa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a003afe:	b10b      	cbz	r3, 1a003b04 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a003b00:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003b04:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003b08:	0080      	lsls	r0, r0, #2
1a003b0a:	4b05      	ldr	r3, [pc, #20]	; (1a003b20 <Chip_Clock_SetBaseClock+0x3c>)
1a003b0c:	501c      	str	r4, [r3, r0]
1a003b0e:	e004      	b.n	1a003b1a <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003b10:	f045 0501 	orr.w	r5, r5, #1
1a003b14:	0080      	lsls	r0, r0, #2
1a003b16:	4b02      	ldr	r3, [pc, #8]	; (1a003b20 <Chip_Clock_SetBaseClock+0x3c>)
1a003b18:	501d      	str	r5, [r3, r0]
	}
}
1a003b1a:	bc30      	pop	{r4, r5}
1a003b1c:	4770      	bx	lr
1a003b1e:	bf00      	nop
1a003b20:	4005005c 	.word	0x4005005c
1a003b24:	e0fff7fe 	.word	0xe0fff7fe

1a003b28 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003b28:	281b      	cmp	r0, #27
1a003b2a:	d808      	bhi.n	1a003b3e <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003b2c:	0080      	lsls	r0, r0, #2
1a003b2e:	4b06      	ldr	r3, [pc, #24]	; (1a003b48 <Chip_Clock_GetBaseClock+0x20>)
1a003b30:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a003b32:	f010 0f01 	tst.w	r0, #1
1a003b36:	d104      	bne.n	1a003b42 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003b38:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003b3c:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a003b3e:	2011      	movs	r0, #17
1a003b40:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a003b42:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003b44:	4770      	bx	lr
1a003b46:	bf00      	nop
1a003b48:	4005005c 	.word	0x4005005c

1a003b4c <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a003b4c:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003b4e:	f7ff ffeb 	bl	1a003b28 <Chip_Clock_GetBaseClock>
1a003b52:	f7ff fee5 	bl	1a003920 <Chip_Clock_GetClockInputHz>
}
1a003b56:	bd08      	pop	{r3, pc}

1a003b58 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003b58:	b909      	cbnz	r1, 1a003b5e <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a003b5a:	2101      	movs	r1, #1
1a003b5c:	e000      	b.n	1a003b60 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a003b5e:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a003b60:	b10a      	cbz	r2, 1a003b66 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a003b62:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003b66:	2b02      	cmp	r3, #2
1a003b68:	d101      	bne.n	1a003b6e <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a003b6a:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003b6e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003b72:	d305      	bcc.n	1a003b80 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003b74:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003b78:	4b04      	ldr	r3, [pc, #16]	; (1a003b8c <Chip_Clock_EnableOpts+0x34>)
1a003b7a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003b7e:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003b80:	3020      	adds	r0, #32
1a003b82:	4b03      	ldr	r3, [pc, #12]	; (1a003b90 <Chip_Clock_EnableOpts+0x38>)
1a003b84:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003b88:	4770      	bx	lr
1a003b8a:	bf00      	nop
1a003b8c:	40052000 	.word	0x40052000
1a003b90:	40051000 	.word	0x40051000

1a003b94 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003b94:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003b98:	d309      	bcc.n	1a003bae <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003b9a:	4a09      	ldr	r2, [pc, #36]	; (1a003bc0 <Chip_Clock_Enable+0x2c>)
1a003b9c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003ba0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003ba4:	f043 0301 	orr.w	r3, r3, #1
1a003ba8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003bac:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003bae:	4a05      	ldr	r2, [pc, #20]	; (1a003bc4 <Chip_Clock_Enable+0x30>)
1a003bb0:	3020      	adds	r0, #32
1a003bb2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003bb6:	f043 0301 	orr.w	r3, r3, #1
1a003bba:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003bbe:	4770      	bx	lr
1a003bc0:	40052000 	.word	0x40052000
1a003bc4:	40051000 	.word	0x40051000

1a003bc8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003bc8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003bca:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003bce:	d305      	bcc.n	1a003bdc <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003bd0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003bd4:	4a0d      	ldr	r2, [pc, #52]	; (1a003c0c <Chip_Clock_GetRate+0x44>)
1a003bd6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003bda:	e004      	b.n	1a003be6 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003bdc:	f100 0320 	add.w	r3, r0, #32
1a003be0:	4a0b      	ldr	r2, [pc, #44]	; (1a003c10 <Chip_Clock_GetRate+0x48>)
1a003be2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003be6:	f014 0f01 	tst.w	r4, #1
1a003bea:	d00c      	beq.n	1a003c06 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003bec:	f7ff fe32 	bl	1a003854 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003bf0:	f7ff ffac 	bl	1a003b4c <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a003bf4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003bf8:	d101      	bne.n	1a003bfe <Chip_Clock_GetRate+0x36>
			div = 1;
1a003bfa:	2301      	movs	r3, #1
1a003bfc:	e000      	b.n	1a003c00 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a003bfe:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a003c00:	fbb0 f0f3 	udiv	r0, r0, r3
1a003c04:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a003c06:	2000      	movs	r0, #0
	}

	return rate;
}
1a003c08:	bd10      	pop	{r4, pc}
1a003c0a:	bf00      	nop
1a003c0c:	40052000 	.word	0x40052000
1a003c10:	40051000 	.word	0x40051000

1a003c14 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003c14:	b570      	push	{r4, r5, r6, lr}
1a003c16:	b08a      	sub	sp, #40	; 0x28
1a003c18:	4605      	mov	r5, r0
1a003c1a:	460e      	mov	r6, r1
1a003c1c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003c1e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003c22:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003c24:	2806      	cmp	r0, #6
1a003c26:	d101      	bne.n	1a003c2c <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a003c28:	f7ff fe38 	bl	1a00389c <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003c2c:	2004      	movs	r0, #4
1a003c2e:	4629      	mov	r1, r5
1a003c30:	2201      	movs	r2, #1
1a003c32:	2300      	movs	r3, #0
1a003c34:	f7ff ff56 	bl	1a003ae4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003c38:	4a47      	ldr	r2, [pc, #284]	; (1a003d58 <Chip_SetupCoreClock+0x144>)
1a003c3a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003c3c:	f043 0301 	orr.w	r3, r3, #1
1a003c40:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003c42:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003c46:	4630      	mov	r0, r6
1a003c48:	a901      	add	r1, sp, #4
1a003c4a:	f7ff fec5 	bl	1a0039d8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003c4e:	4b43      	ldr	r3, [pc, #268]	; (1a003d5c <Chip_SetupCoreClock+0x148>)
1a003c50:	429e      	cmp	r6, r3
1a003c52:	d913      	bls.n	1a003c7c <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a003c54:	9b01      	ldr	r3, [sp, #4]
1a003c56:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003c5a:	d000      	beq.n	1a003c5e <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003c5c:	e7fe      	b.n	1a003c5c <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a003c5e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003c62:	d005      	beq.n	1a003c70 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003c68:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a003c6a:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a003c6c:	2601      	movs	r6, #1
1a003c6e:	e007      	b.n	1a003c80 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a003c70:	9b04      	ldr	r3, [sp, #16]
1a003c72:	3301      	adds	r3, #1
1a003c74:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a003c76:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a003c78:	2600      	movs	r6, #0
1a003c7a:	e001      	b.n	1a003c80 <Chip_SetupCoreClock+0x6c>
1a003c7c:	2500      	movs	r5, #0
1a003c7e:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003c80:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003c84:	9b01      	ldr	r3, [sp, #4]
1a003c86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003c8a:	9a05      	ldr	r2, [sp, #20]
1a003c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003c90:	9a03      	ldr	r2, [sp, #12]
1a003c92:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003c96:	9a04      	ldr	r2, [sp, #16]
1a003c98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003ca0:	4a2d      	ldr	r2, [pc, #180]	; (1a003d58 <Chip_SetupCoreClock+0x144>)
1a003ca2:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003ca4:	4b2c      	ldr	r3, [pc, #176]	; (1a003d58 <Chip_SetupCoreClock+0x144>)
1a003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003ca8:	f013 0f01 	tst.w	r3, #1
1a003cac:	d0fa      	beq.n	1a003ca4 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003cae:	2004      	movs	r0, #4
1a003cb0:	2109      	movs	r1, #9
1a003cb2:	2201      	movs	r2, #1
1a003cb4:	2300      	movs	r3, #0
1a003cb6:	f7ff ff15 	bl	1a003ae4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003cba:	b1ee      	cbz	r6, 1a003cf8 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003cbc:	f242 7310 	movw	r3, #10000	; 0x2710
1a003cc0:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003cc4:	1e5a      	subs	r2, r3, #1
1a003cc6:	9209      	str	r2, [sp, #36]	; 0x24
1a003cc8:	2b00      	cmp	r3, #0
1a003cca:	d1fa      	bne.n	1a003cc2 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a003ccc:	9b01      	ldr	r3, [sp, #4]
1a003cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003cd2:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003cd4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003cd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003cdc:	9a05      	ldr	r2, [sp, #20]
1a003cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003ce2:	9a03      	ldr	r2, [sp, #12]
1a003ce4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003ce8:	9a04      	ldr	r2, [sp, #16]
1a003cea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003cee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003cf2:	4a19      	ldr	r2, [pc, #100]	; (1a003d58 <Chip_SetupCoreClock+0x144>)
1a003cf4:	6453      	str	r3, [r2, #68]	; 0x44
1a003cf6:	e01c      	b.n	1a003d32 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a003cf8:	b1dd      	cbz	r5, 1a003d32 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003cfa:	f242 7310 	movw	r3, #10000	; 0x2710
1a003cfe:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003d02:	1e5a      	subs	r2, r3, #1
1a003d04:	9209      	str	r2, [sp, #36]	; 0x24
1a003d06:	2b00      	cmp	r3, #0
1a003d08:	d1fa      	bne.n	1a003d00 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a003d0a:	9b04      	ldr	r3, [sp, #16]
1a003d0c:	1e59      	subs	r1, r3, #1
1a003d0e:	9104      	str	r1, [sp, #16]
1a003d10:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003d14:	9b01      	ldr	r3, [sp, #4]
1a003d16:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a003d1a:	9b05      	ldr	r3, [sp, #20]
1a003d1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a003d20:	9b03      	ldr	r3, [sp, #12]
1a003d22:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a003d26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a003d2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003d2e:	4a0a      	ldr	r2, [pc, #40]	; (1a003d58 <Chip_SetupCoreClock+0x144>)
1a003d30:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003d32:	b964      	cbnz	r4, 1a003d4e <Chip_SetupCoreClock+0x13a>
1a003d34:	e00e      	b.n	1a003d54 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003d36:	4a0a      	ldr	r2, [pc, #40]	; (1a003d60 <Chip_SetupCoreClock+0x14c>)
1a003d38:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a003d3c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a003d40:	7859      	ldrb	r1, [r3, #1]
1a003d42:	789a      	ldrb	r2, [r3, #2]
1a003d44:	78db      	ldrb	r3, [r3, #3]
1a003d46:	f7ff fecd 	bl	1a003ae4 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003d4a:	3401      	adds	r4, #1
1a003d4c:	e000      	b.n	1a003d50 <Chip_SetupCoreClock+0x13c>
1a003d4e:	2400      	movs	r4, #0
1a003d50:	2c11      	cmp	r4, #17
1a003d52:	d9f0      	bls.n	1a003d36 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003d54:	b00a      	add	sp, #40	; 0x28
1a003d56:	bd70      	pop	{r4, r5, r6, pc}
1a003d58:	40050000 	.word	0x40050000
1a003d5c:	068e7780 	.word	0x068e7780
1a003d60:	1a005594 	.word	0x1a005594

1a003d64 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a003d64:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a003d66:	4b10      	ldr	r3, [pc, #64]	; (1a003da8 <fpuInit+0x44>)
1a003d68:	681b      	ldr	r3, [r3, #0]
1a003d6a:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a003d6c:	4b0f      	ldr	r3, [pc, #60]	; (1a003dac <fpuInit+0x48>)
1a003d6e:	681b      	ldr	r3, [r3, #0]
1a003d70:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a003d72:	9a02      	ldr	r2, [sp, #8]
1a003d74:	4b0e      	ldr	r3, [pc, #56]	; (1a003db0 <fpuInit+0x4c>)
1a003d76:	429a      	cmp	r2, r3
1a003d78:	d105      	bne.n	1a003d86 <fpuInit+0x22>
1a003d7a:	9a01      	ldr	r2, [sp, #4]
1a003d7c:	4b0d      	ldr	r3, [pc, #52]	; (1a003db4 <fpuInit+0x50>)
1a003d7e:	429a      	cmp	r2, r3
1a003d80:	d003      	beq.n	1a003d8a <fpuInit+0x26>
1a003d82:	2300      	movs	r3, #0
1a003d84:	e002      	b.n	1a003d8c <fpuInit+0x28>
1a003d86:	2300      	movs	r3, #0
1a003d88:	e000      	b.n	1a003d8c <fpuInit+0x28>
1a003d8a:	2301      	movs	r3, #1

	if (vfpPresent) {
1a003d8c:	f013 0fff 	tst.w	r3, #255	; 0xff
1a003d90:	d008      	beq.n	1a003da4 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a003d92:	4a09      	ldr	r2, [pc, #36]	; (1a003db8 <fpuInit+0x54>)
1a003d94:	6813      	ldr	r3, [r2, #0]
1a003d96:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a003d98:	9b03      	ldr	r3, [sp, #12]
1a003d9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003d9e:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a003da0:	9b03      	ldr	r3, [sp, #12]
1a003da2:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a003da4:	b004      	add	sp, #16
1a003da6:	4770      	bx	lr
1a003da8:	e000ef40 	.word	0xe000ef40
1a003dac:	e000ef44 	.word	0xe000ef44
1a003db0:	10110021 	.word	0x10110021
1a003db4:	11000011 	.word	0x11000011
1a003db8:	e000ed88 	.word	0xe000ed88

1a003dbc <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a003dbc:	4770      	bx	lr
1a003dbe:	bf00      	nop

1a003dc0 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003dc0:	2901      	cmp	r1, #1
1a003dc2:	d109      	bne.n	1a003dd8 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a003dc4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003dc8:	0080      	lsls	r0, r0, #2
1a003dca:	4b04      	ldr	r3, [pc, #16]	; (1a003ddc <Chip_I2C_EventHandler+0x1c>)
1a003dcc:	4418      	add	r0, r3
1a003dce:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a003dd0:	7d13      	ldrb	r3, [r2, #20]
1a003dd2:	b2db      	uxtb	r3, r3
1a003dd4:	2b04      	cmp	r3, #4
1a003dd6:	d0fb      	beq.n	1a003dd0 <Chip_I2C_EventHandler+0x10>
1a003dd8:	4770      	bx	lr
1a003dda:	bf00      	nop
1a003ddc:	100000a4 	.word	0x100000a4

1a003de0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003de0:	b570      	push	{r4, r5, r6, lr}
1a003de2:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a003de4:	4e06      	ldr	r6, [pc, #24]	; (1a003e00 <Chip_I2C_Init+0x20>)
1a003de6:	00c4      	lsls	r4, r0, #3
1a003de8:	1a23      	subs	r3, r4, r0
1a003dea:	009b      	lsls	r3, r3, #2
1a003dec:	4433      	add	r3, r6
1a003dee:	8898      	ldrh	r0, [r3, #4]
1a003df0:	f7ff fed0 	bl	1a003b94 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003df4:	1b60      	subs	r0, r4, r5
1a003df6:	0080      	lsls	r0, r0, #2
1a003df8:	5833      	ldr	r3, [r6, r0]
1a003dfa:	226c      	movs	r2, #108	; 0x6c
1a003dfc:	619a      	str	r2, [r3, #24]
1a003dfe:	bd70      	pop	{r4, r5, r6, pc}
1a003e00:	100000a4 	.word	0x100000a4

1a003e04 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003e08:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a003e0a:	4f09      	ldr	r7, [pc, #36]	; (1a003e30 <Chip_I2C_SetClockRate+0x2c>)
1a003e0c:	00c5      	lsls	r5, r0, #3
1a003e0e:	1a2e      	subs	r6, r5, r0
1a003e10:	00b6      	lsls	r6, r6, #2
1a003e12:	19bb      	adds	r3, r7, r6
1a003e14:	8898      	ldrh	r0, [r3, #4]
1a003e16:	f7ff fed7 	bl	1a003bc8 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003e1a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003e1e:	59bb      	ldr	r3, [r7, r6]
1a003e20:	0842      	lsrs	r2, r0, #1
1a003e22:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003e24:	59bb      	ldr	r3, [r7, r6]
1a003e26:	691a      	ldr	r2, [r3, #16]
1a003e28:	1a80      	subs	r0, r0, r2
1a003e2a:	6158      	str	r0, [r3, #20]
1a003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e30:	100000a4 	.word	0x100000a4

1a003e34 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003e34:	4b03      	ldr	r3, [pc, #12]	; (1a003e44 <Chip_SSP_GetClockIndex+0x10>)
1a003e36:	4298      	cmp	r0, r3
1a003e38:	d101      	bne.n	1a003e3e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a003e3a:	20a5      	movs	r0, #165	; 0xa5
1a003e3c:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003e3e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003e40:	4770      	bx	lr
1a003e42:	bf00      	nop
1a003e44:	400c5000 	.word	0x400c5000

1a003e48 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003e48:	4b04      	ldr	r3, [pc, #16]	; (1a003e5c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003e4a:	4298      	cmp	r0, r3
1a003e4c:	d102      	bne.n	1a003e54 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a003e4e:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003e52:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003e54:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003e58:	4770      	bx	lr
1a003e5a:	bf00      	nop
1a003e5c:	400c5000 	.word	0x400c5000

1a003e60 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003e60:	6803      	ldr	r3, [r0, #0]
1a003e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003e66:	0209      	lsls	r1, r1, #8
1a003e68:	b289      	uxth	r1, r1
1a003e6a:	430b      	orrs	r3, r1
1a003e6c:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a003e6e:	6102      	str	r2, [r0, #16]
1a003e70:	4770      	bx	lr
1a003e72:	bf00      	nop

1a003e74 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003e74:	b570      	push	{r4, r5, r6, lr}
1a003e76:	4606      	mov	r6, r0
1a003e78:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003e7a:	f7ff ffe5 	bl	1a003e48 <Chip_SSP_GetPeriphClockIndex>
1a003e7e:	f7ff fea3 	bl	1a003bc8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003e82:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a003e84:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a003e88:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a003e8a:	e00c      	b.n	1a003ea6 <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003e8c:	1c4c      	adds	r4, r1, #1
1a003e8e:	fb02 f304 	mul.w	r3, r2, r4
1a003e92:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003e96:	42ab      	cmp	r3, r5
1a003e98:	d905      	bls.n	1a003ea6 <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a003e9a:	2cff      	cmp	r4, #255	; 0xff
1a003e9c:	d902      	bls.n	1a003ea4 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a003e9e:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a003ea0:	2100      	movs	r1, #0
1a003ea2:	e000      	b.n	1a003ea6 <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003ea4:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a003ea6:	42ab      	cmp	r3, r5
1a003ea8:	d8f0      	bhi.n	1a003e8c <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003eaa:	4630      	mov	r0, r6
1a003eac:	f7ff ffd8 	bl	1a003e60 <Chip_SSP_SetClockRate>
1a003eb0:	bd70      	pop	{r4, r5, r6, pc}
1a003eb2:	bf00      	nop

1a003eb4 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003eb4:	b510      	push	{r4, lr}
1a003eb6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003eb8:	f7ff ffbc 	bl	1a003e34 <Chip_SSP_GetClockIndex>
1a003ebc:	f7ff fe6a 	bl	1a003b94 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003ec0:	4620      	mov	r0, r4
1a003ec2:	f7ff ffc1 	bl	1a003e48 <Chip_SSP_GetPeriphClockIndex>
1a003ec6:	f7ff fe65 	bl	1a003b94 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003eca:	6863      	ldr	r3, [r4, #4]
1a003ecc:	f023 0304 	bic.w	r3, r3, #4
1a003ed0:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003ed2:	6823      	ldr	r3, [r4, #0]
1a003ed4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003ed8:	f043 0307 	orr.w	r3, r3, #7
1a003edc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003ede:	4620      	mov	r0, r4
1a003ee0:	4901      	ldr	r1, [pc, #4]	; (1a003ee8 <Chip_SSP_Init+0x34>)
1a003ee2:	f7ff ffc7 	bl	1a003e74 <Chip_SSP_SetBitRate>
1a003ee6:	bd10      	pop	{r4, pc}
1a003ee8:	000186a0 	.word	0x000186a0

1a003eec <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a003eec:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a003eee:	4a19      	ldr	r2, [pc, #100]	; (1a003f54 <ResetISR+0x68>)
1a003ef0:	4b19      	ldr	r3, [pc, #100]	; (1a003f58 <ResetISR+0x6c>)
1a003ef2:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a003ef4:	4a19      	ldr	r2, [pc, #100]	; (1a003f5c <ResetISR+0x70>)
1a003ef6:	3304      	adds	r3, #4
1a003ef8:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003efa:	2300      	movs	r3, #0
1a003efc:	e005      	b.n	1a003f0a <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a003efe:	f04f 31ff 	mov.w	r1, #4294967295
1a003f02:	4a17      	ldr	r2, [pc, #92]	; (1a003f60 <ResetISR+0x74>)
1a003f04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003f08:	3301      	adds	r3, #1
1a003f0a:	2b07      	cmp	r3, #7
1a003f0c:	d9f7      	bls.n	1a003efe <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a003f0e:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a003f10:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a003f12:	f7ff fa27 	bl	1a003364 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a003f16:	4b13      	ldr	r3, [pc, #76]	; (1a003f64 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a003f18:	e007      	b.n	1a003f2a <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a003f1a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a003f1e:	6818      	ldr	r0, [r3, #0]
1a003f20:	6859      	ldr	r1, [r3, #4]
1a003f22:	689a      	ldr	r2, [r3, #8]
1a003f24:	f7fc f942 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a003f28:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a003f2a:	4a0f      	ldr	r2, [pc, #60]	; (1a003f68 <ResetISR+0x7c>)
1a003f2c:	4293      	cmp	r3, r2
1a003f2e:	d3f4      	bcc.n	1a003f1a <ResetISR+0x2e>
1a003f30:	e006      	b.n	1a003f40 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a003f32:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a003f34:	f854 0b08 	ldr.w	r0, [r4], #8
1a003f38:	6859      	ldr	r1, [r3, #4]
1a003f3a:	f7fc f945 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a003f3e:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a003f40:	4a0a      	ldr	r2, [pc, #40]	; (1a003f6c <ResetISR+0x80>)
1a003f42:	4293      	cmp	r3, r2
1a003f44:	d3f5      	bcc.n	1a003f32 <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a003f46:	f000 fae3 	bl	1a004510 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a003f4a:	f7ff f985 	bl	1a003258 <Board_Init>
    main();
1a003f4e:	f7fc f9d7 	bl	1a000300 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a003f52:	e7fe      	b.n	1a003f52 <ResetISR+0x66>
1a003f54:	10df1000 	.word	0x10df1000
1a003f58:	40053100 	.word	0x40053100
1a003f5c:	01dff7ff 	.word	0x01dff7ff
1a003f60:	e000e280 	.word	0xe000e280
1a003f64:	1a000114 	.word	0x1a000114
1a003f68:	1a000150 	.word	0x1a000150
1a003f6c:	1a000178 	.word	0x1a000178

1a003f70 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a003f70:	4770      	bx	lr
1a003f72:	bf00      	nop

1a003f74 <__aeabi_uldivmod>:
1a003f74:	b953      	cbnz	r3, 1a003f8c <__aeabi_uldivmod+0x18>
1a003f76:	b94a      	cbnz	r2, 1a003f8c <__aeabi_uldivmod+0x18>
1a003f78:	2900      	cmp	r1, #0
1a003f7a:	bf08      	it	eq
1a003f7c:	2800      	cmpeq	r0, #0
1a003f7e:	bf1c      	itt	ne
1a003f80:	f04f 31ff 	movne.w	r1, #4294967295
1a003f84:	f04f 30ff 	movne.w	r0, #4294967295
1a003f88:	f000 b83c 	b.w	1a004004 <__aeabi_idiv0>
1a003f8c:	b082      	sub	sp, #8
1a003f8e:	46ec      	mov	ip, sp
1a003f90:	e92d 5000 	stmdb	sp!, {ip, lr}
1a003f94:	f000 f81e 	bl	1a003fd4 <__gnu_uldivmod_helper>
1a003f98:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003f9c:	b002      	add	sp, #8
1a003f9e:	bc0c      	pop	{r2, r3}
1a003fa0:	4770      	bx	lr
1a003fa2:	bf00      	nop

1a003fa4 <__gnu_ldivmod_helper>:
1a003fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003fa8:	9c06      	ldr	r4, [sp, #24]
1a003faa:	4615      	mov	r5, r2
1a003fac:	4606      	mov	r6, r0
1a003fae:	460f      	mov	r7, r1
1a003fb0:	4698      	mov	r8, r3
1a003fb2:	f000 f829 	bl	1a004008 <__divdi3>
1a003fb6:	fb05 f301 	mul.w	r3, r5, r1
1a003fba:	fb00 3808 	mla	r8, r0, r8, r3
1a003fbe:	fba5 2300 	umull	r2, r3, r5, r0
1a003fc2:	1ab2      	subs	r2, r6, r2
1a003fc4:	4443      	add	r3, r8
1a003fc6:	eb67 0303 	sbc.w	r3, r7, r3
1a003fca:	e9c4 2300 	strd	r2, r3, [r4]
1a003fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003fd2:	bf00      	nop

1a003fd4 <__gnu_uldivmod_helper>:
1a003fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003fd8:	9c06      	ldr	r4, [sp, #24]
1a003fda:	4690      	mov	r8, r2
1a003fdc:	4606      	mov	r6, r0
1a003fde:	460f      	mov	r7, r1
1a003fe0:	461d      	mov	r5, r3
1a003fe2:	f000 f95f 	bl	1a0042a4 <__udivdi3>
1a003fe6:	fb00 f505 	mul.w	r5, r0, r5
1a003fea:	fba0 2308 	umull	r2, r3, r0, r8
1a003fee:	fb08 5501 	mla	r5, r8, r1, r5
1a003ff2:	1ab2      	subs	r2, r6, r2
1a003ff4:	442b      	add	r3, r5
1a003ff6:	eb67 0303 	sbc.w	r3, r7, r3
1a003ffa:	e9c4 2300 	strd	r2, r3, [r4]
1a003ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004002:	bf00      	nop

1a004004 <__aeabi_idiv0>:
1a004004:	4770      	bx	lr
1a004006:	bf00      	nop

1a004008 <__divdi3>:
1a004008:	2900      	cmp	r1, #0
1a00400a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00400e:	f2c0 80a6 	blt.w	1a00415e <__divdi3+0x156>
1a004012:	2600      	movs	r6, #0
1a004014:	2b00      	cmp	r3, #0
1a004016:	f2c0 809c 	blt.w	1a004152 <__divdi3+0x14a>
1a00401a:	4688      	mov	r8, r1
1a00401c:	4694      	mov	ip, r2
1a00401e:	469e      	mov	lr, r3
1a004020:	4615      	mov	r5, r2
1a004022:	4604      	mov	r4, r0
1a004024:	460f      	mov	r7, r1
1a004026:	2b00      	cmp	r3, #0
1a004028:	d13d      	bne.n	1a0040a6 <__divdi3+0x9e>
1a00402a:	428a      	cmp	r2, r1
1a00402c:	d959      	bls.n	1a0040e2 <__divdi3+0xda>
1a00402e:	fab2 f382 	clz	r3, r2
1a004032:	b13b      	cbz	r3, 1a004044 <__divdi3+0x3c>
1a004034:	f1c3 0220 	rsb	r2, r3, #32
1a004038:	409f      	lsls	r7, r3
1a00403a:	fa20 f202 	lsr.w	r2, r0, r2
1a00403e:	409d      	lsls	r5, r3
1a004040:	4317      	orrs	r7, r2
1a004042:	409c      	lsls	r4, r3
1a004044:	0c29      	lsrs	r1, r5, #16
1a004046:	0c22      	lsrs	r2, r4, #16
1a004048:	fbb7 fef1 	udiv	lr, r7, r1
1a00404c:	b2a8      	uxth	r0, r5
1a00404e:	fb01 771e 	mls	r7, r1, lr, r7
1a004052:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a004056:	fb00 f30e 	mul.w	r3, r0, lr
1a00405a:	42bb      	cmp	r3, r7
1a00405c:	d90a      	bls.n	1a004074 <__divdi3+0x6c>
1a00405e:	197f      	adds	r7, r7, r5
1a004060:	f10e 32ff 	add.w	r2, lr, #4294967295
1a004064:	f080 8105 	bcs.w	1a004272 <__divdi3+0x26a>
1a004068:	42bb      	cmp	r3, r7
1a00406a:	f240 8102 	bls.w	1a004272 <__divdi3+0x26a>
1a00406e:	f1ae 0e02 	sub.w	lr, lr, #2
1a004072:	442f      	add	r7, r5
1a004074:	1aff      	subs	r7, r7, r3
1a004076:	b2a4      	uxth	r4, r4
1a004078:	fbb7 f3f1 	udiv	r3, r7, r1
1a00407c:	fb01 7713 	mls	r7, r1, r3, r7
1a004080:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a004084:	fb00 f003 	mul.w	r0, r0, r3
1a004088:	42b8      	cmp	r0, r7
1a00408a:	d908      	bls.n	1a00409e <__divdi3+0x96>
1a00408c:	197f      	adds	r7, r7, r5
1a00408e:	f103 32ff 	add.w	r2, r3, #4294967295
1a004092:	f080 80f0 	bcs.w	1a004276 <__divdi3+0x26e>
1a004096:	42b8      	cmp	r0, r7
1a004098:	f240 80ed 	bls.w	1a004276 <__divdi3+0x26e>
1a00409c:	3b02      	subs	r3, #2
1a00409e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a0040a2:	2200      	movs	r2, #0
1a0040a4:	e003      	b.n	1a0040ae <__divdi3+0xa6>
1a0040a6:	428b      	cmp	r3, r1
1a0040a8:	d90f      	bls.n	1a0040ca <__divdi3+0xc2>
1a0040aa:	2200      	movs	r2, #0
1a0040ac:	4613      	mov	r3, r2
1a0040ae:	1c34      	adds	r4, r6, #0
1a0040b0:	bf18      	it	ne
1a0040b2:	2401      	movne	r4, #1
1a0040b4:	4260      	negs	r0, r4
1a0040b6:	f04f 0500 	mov.w	r5, #0
1a0040ba:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a0040be:	4058      	eors	r0, r3
1a0040c0:	4051      	eors	r1, r2
1a0040c2:	1900      	adds	r0, r0, r4
1a0040c4:	4169      	adcs	r1, r5
1a0040c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0040ca:	fab3 f283 	clz	r2, r3
1a0040ce:	2a00      	cmp	r2, #0
1a0040d0:	f040 8086 	bne.w	1a0041e0 <__divdi3+0x1d8>
1a0040d4:	428b      	cmp	r3, r1
1a0040d6:	d302      	bcc.n	1a0040de <__divdi3+0xd6>
1a0040d8:	4584      	cmp	ip, r0
1a0040da:	f200 80db 	bhi.w	1a004294 <__divdi3+0x28c>
1a0040de:	2301      	movs	r3, #1
1a0040e0:	e7e5      	b.n	1a0040ae <__divdi3+0xa6>
1a0040e2:	b912      	cbnz	r2, 1a0040ea <__divdi3+0xe2>
1a0040e4:	2301      	movs	r3, #1
1a0040e6:	fbb3 f5f2 	udiv	r5, r3, r2
1a0040ea:	fab5 f085 	clz	r0, r5
1a0040ee:	2800      	cmp	r0, #0
1a0040f0:	d13b      	bne.n	1a00416a <__divdi3+0x162>
1a0040f2:	1b78      	subs	r0, r7, r5
1a0040f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0040f8:	fa1f fc85 	uxth.w	ip, r5
1a0040fc:	2201      	movs	r2, #1
1a0040fe:	fbb0 f8fe 	udiv	r8, r0, lr
1a004102:	0c21      	lsrs	r1, r4, #16
1a004104:	fb0e 0718 	mls	r7, lr, r8, r0
1a004108:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a00410c:	fb0c f308 	mul.w	r3, ip, r8
1a004110:	42bb      	cmp	r3, r7
1a004112:	d907      	bls.n	1a004124 <__divdi3+0x11c>
1a004114:	197f      	adds	r7, r7, r5
1a004116:	f108 31ff 	add.w	r1, r8, #4294967295
1a00411a:	d202      	bcs.n	1a004122 <__divdi3+0x11a>
1a00411c:	42bb      	cmp	r3, r7
1a00411e:	f200 80bd 	bhi.w	1a00429c <__divdi3+0x294>
1a004122:	4688      	mov	r8, r1
1a004124:	1aff      	subs	r7, r7, r3
1a004126:	b2a4      	uxth	r4, r4
1a004128:	fbb7 f3fe 	udiv	r3, r7, lr
1a00412c:	fb0e 7713 	mls	r7, lr, r3, r7
1a004130:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a004134:	fb0c fc03 	mul.w	ip, ip, r3
1a004138:	45bc      	cmp	ip, r7
1a00413a:	d907      	bls.n	1a00414c <__divdi3+0x144>
1a00413c:	197f      	adds	r7, r7, r5
1a00413e:	f103 31ff 	add.w	r1, r3, #4294967295
1a004142:	d202      	bcs.n	1a00414a <__divdi3+0x142>
1a004144:	45bc      	cmp	ip, r7
1a004146:	f200 80a7 	bhi.w	1a004298 <__divdi3+0x290>
1a00414a:	460b      	mov	r3, r1
1a00414c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004150:	e7ad      	b.n	1a0040ae <__divdi3+0xa6>
1a004152:	4252      	negs	r2, r2
1a004154:	ea6f 0606 	mvn.w	r6, r6
1a004158:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00415c:	e75d      	b.n	1a00401a <__divdi3+0x12>
1a00415e:	4240      	negs	r0, r0
1a004160:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004164:	f04f 36ff 	mov.w	r6, #4294967295
1a004168:	e754      	b.n	1a004014 <__divdi3+0xc>
1a00416a:	f1c0 0220 	rsb	r2, r0, #32
1a00416e:	fa24 f102 	lsr.w	r1, r4, r2
1a004172:	fa07 f300 	lsl.w	r3, r7, r0
1a004176:	4085      	lsls	r5, r0
1a004178:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00417c:	40d7      	lsrs	r7, r2
1a00417e:	4319      	orrs	r1, r3
1a004180:	fbb7 f2fe 	udiv	r2, r7, lr
1a004184:	0c0b      	lsrs	r3, r1, #16
1a004186:	fb0e 7712 	mls	r7, lr, r2, r7
1a00418a:	fa1f fc85 	uxth.w	ip, r5
1a00418e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a004192:	fb0c f702 	mul.w	r7, ip, r2
1a004196:	429f      	cmp	r7, r3
1a004198:	fa04 f400 	lsl.w	r4, r4, r0
1a00419c:	d907      	bls.n	1a0041ae <__divdi3+0x1a6>
1a00419e:	195b      	adds	r3, r3, r5
1a0041a0:	f102 30ff 	add.w	r0, r2, #4294967295
1a0041a4:	d274      	bcs.n	1a004290 <__divdi3+0x288>
1a0041a6:	429f      	cmp	r7, r3
1a0041a8:	d972      	bls.n	1a004290 <__divdi3+0x288>
1a0041aa:	3a02      	subs	r2, #2
1a0041ac:	442b      	add	r3, r5
1a0041ae:	1bdf      	subs	r7, r3, r7
1a0041b0:	b289      	uxth	r1, r1
1a0041b2:	fbb7 f8fe 	udiv	r8, r7, lr
1a0041b6:	fb0e 7318 	mls	r3, lr, r8, r7
1a0041ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0041be:	fb0c f708 	mul.w	r7, ip, r8
1a0041c2:	429f      	cmp	r7, r3
1a0041c4:	d908      	bls.n	1a0041d8 <__divdi3+0x1d0>
1a0041c6:	195b      	adds	r3, r3, r5
1a0041c8:	f108 31ff 	add.w	r1, r8, #4294967295
1a0041cc:	d25c      	bcs.n	1a004288 <__divdi3+0x280>
1a0041ce:	429f      	cmp	r7, r3
1a0041d0:	d95a      	bls.n	1a004288 <__divdi3+0x280>
1a0041d2:	f1a8 0802 	sub.w	r8, r8, #2
1a0041d6:	442b      	add	r3, r5
1a0041d8:	1bd8      	subs	r0, r3, r7
1a0041da:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a0041de:	e78e      	b.n	1a0040fe <__divdi3+0xf6>
1a0041e0:	f1c2 0320 	rsb	r3, r2, #32
1a0041e4:	fa2c f103 	lsr.w	r1, ip, r3
1a0041e8:	fa0e fe02 	lsl.w	lr, lr, r2
1a0041ec:	fa20 f703 	lsr.w	r7, r0, r3
1a0041f0:	ea41 0e0e 	orr.w	lr, r1, lr
1a0041f4:	fa08 f002 	lsl.w	r0, r8, r2
1a0041f8:	fa28 f103 	lsr.w	r1, r8, r3
1a0041fc:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a004200:	4338      	orrs	r0, r7
1a004202:	fbb1 f8f5 	udiv	r8, r1, r5
1a004206:	0c03      	lsrs	r3, r0, #16
1a004208:	fb05 1118 	mls	r1, r5, r8, r1
1a00420c:	fa1f f78e 	uxth.w	r7, lr
1a004210:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a004214:	fb07 f308 	mul.w	r3, r7, r8
1a004218:	428b      	cmp	r3, r1
1a00421a:	fa0c fc02 	lsl.w	ip, ip, r2
1a00421e:	d909      	bls.n	1a004234 <__divdi3+0x22c>
1a004220:	eb11 010e 	adds.w	r1, r1, lr
1a004224:	f108 39ff 	add.w	r9, r8, #4294967295
1a004228:	d230      	bcs.n	1a00428c <__divdi3+0x284>
1a00422a:	428b      	cmp	r3, r1
1a00422c:	d92e      	bls.n	1a00428c <__divdi3+0x284>
1a00422e:	f1a8 0802 	sub.w	r8, r8, #2
1a004232:	4471      	add	r1, lr
1a004234:	1ac9      	subs	r1, r1, r3
1a004236:	b280      	uxth	r0, r0
1a004238:	fbb1 f3f5 	udiv	r3, r1, r5
1a00423c:	fb05 1113 	mls	r1, r5, r3, r1
1a004240:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a004244:	fb07 f703 	mul.w	r7, r7, r3
1a004248:	428f      	cmp	r7, r1
1a00424a:	d908      	bls.n	1a00425e <__divdi3+0x256>
1a00424c:	eb11 010e 	adds.w	r1, r1, lr
1a004250:	f103 30ff 	add.w	r0, r3, #4294967295
1a004254:	d216      	bcs.n	1a004284 <__divdi3+0x27c>
1a004256:	428f      	cmp	r7, r1
1a004258:	d914      	bls.n	1a004284 <__divdi3+0x27c>
1a00425a:	3b02      	subs	r3, #2
1a00425c:	4471      	add	r1, lr
1a00425e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004262:	1bc9      	subs	r1, r1, r7
1a004264:	fba3 890c 	umull	r8, r9, r3, ip
1a004268:	4549      	cmp	r1, r9
1a00426a:	d309      	bcc.n	1a004280 <__divdi3+0x278>
1a00426c:	d005      	beq.n	1a00427a <__divdi3+0x272>
1a00426e:	2200      	movs	r2, #0
1a004270:	e71d      	b.n	1a0040ae <__divdi3+0xa6>
1a004272:	4696      	mov	lr, r2
1a004274:	e6fe      	b.n	1a004074 <__divdi3+0x6c>
1a004276:	4613      	mov	r3, r2
1a004278:	e711      	b.n	1a00409e <__divdi3+0x96>
1a00427a:	4094      	lsls	r4, r2
1a00427c:	4544      	cmp	r4, r8
1a00427e:	d2f6      	bcs.n	1a00426e <__divdi3+0x266>
1a004280:	3b01      	subs	r3, #1
1a004282:	e7f4      	b.n	1a00426e <__divdi3+0x266>
1a004284:	4603      	mov	r3, r0
1a004286:	e7ea      	b.n	1a00425e <__divdi3+0x256>
1a004288:	4688      	mov	r8, r1
1a00428a:	e7a5      	b.n	1a0041d8 <__divdi3+0x1d0>
1a00428c:	46c8      	mov	r8, r9
1a00428e:	e7d1      	b.n	1a004234 <__divdi3+0x22c>
1a004290:	4602      	mov	r2, r0
1a004292:	e78c      	b.n	1a0041ae <__divdi3+0x1a6>
1a004294:	4613      	mov	r3, r2
1a004296:	e70a      	b.n	1a0040ae <__divdi3+0xa6>
1a004298:	3b02      	subs	r3, #2
1a00429a:	e757      	b.n	1a00414c <__divdi3+0x144>
1a00429c:	f1a8 0802 	sub.w	r8, r8, #2
1a0042a0:	442f      	add	r7, r5
1a0042a2:	e73f      	b.n	1a004124 <__divdi3+0x11c>

1a0042a4 <__udivdi3>:
1a0042a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0042a8:	2b00      	cmp	r3, #0
1a0042aa:	d144      	bne.n	1a004336 <__udivdi3+0x92>
1a0042ac:	428a      	cmp	r2, r1
1a0042ae:	4615      	mov	r5, r2
1a0042b0:	4604      	mov	r4, r0
1a0042b2:	d94f      	bls.n	1a004354 <__udivdi3+0xb0>
1a0042b4:	fab2 f782 	clz	r7, r2
1a0042b8:	460e      	mov	r6, r1
1a0042ba:	b14f      	cbz	r7, 1a0042d0 <__udivdi3+0x2c>
1a0042bc:	f1c7 0320 	rsb	r3, r7, #32
1a0042c0:	40b9      	lsls	r1, r7
1a0042c2:	fa20 f603 	lsr.w	r6, r0, r3
1a0042c6:	fa02 f507 	lsl.w	r5, r2, r7
1a0042ca:	430e      	orrs	r6, r1
1a0042cc:	fa00 f407 	lsl.w	r4, r0, r7
1a0042d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0042d4:	0c23      	lsrs	r3, r4, #16
1a0042d6:	fbb6 f0fe 	udiv	r0, r6, lr
1a0042da:	b2af      	uxth	r7, r5
1a0042dc:	fb0e 6110 	mls	r1, lr, r0, r6
1a0042e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0042e4:	fb07 f100 	mul.w	r1, r7, r0
1a0042e8:	4299      	cmp	r1, r3
1a0042ea:	d909      	bls.n	1a004300 <__udivdi3+0x5c>
1a0042ec:	195b      	adds	r3, r3, r5
1a0042ee:	f100 32ff 	add.w	r2, r0, #4294967295
1a0042f2:	f080 80ec 	bcs.w	1a0044ce <__udivdi3+0x22a>
1a0042f6:	4299      	cmp	r1, r3
1a0042f8:	f240 80e9 	bls.w	1a0044ce <__udivdi3+0x22a>
1a0042fc:	3802      	subs	r0, #2
1a0042fe:	442b      	add	r3, r5
1a004300:	1a5a      	subs	r2, r3, r1
1a004302:	b2a4      	uxth	r4, r4
1a004304:	fbb2 f3fe 	udiv	r3, r2, lr
1a004308:	fb0e 2213 	mls	r2, lr, r3, r2
1a00430c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a004310:	fb07 f703 	mul.w	r7, r7, r3
1a004314:	4297      	cmp	r7, r2
1a004316:	d908      	bls.n	1a00432a <__udivdi3+0x86>
1a004318:	1952      	adds	r2, r2, r5
1a00431a:	f103 31ff 	add.w	r1, r3, #4294967295
1a00431e:	f080 80d8 	bcs.w	1a0044d2 <__udivdi3+0x22e>
1a004322:	4297      	cmp	r7, r2
1a004324:	f240 80d5 	bls.w	1a0044d2 <__udivdi3+0x22e>
1a004328:	3b02      	subs	r3, #2
1a00432a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a00432e:	2600      	movs	r6, #0
1a004330:	4631      	mov	r1, r6
1a004332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004336:	428b      	cmp	r3, r1
1a004338:	d847      	bhi.n	1a0043ca <__udivdi3+0x126>
1a00433a:	fab3 f683 	clz	r6, r3
1a00433e:	2e00      	cmp	r6, #0
1a004340:	d148      	bne.n	1a0043d4 <__udivdi3+0x130>
1a004342:	428b      	cmp	r3, r1
1a004344:	d302      	bcc.n	1a00434c <__udivdi3+0xa8>
1a004346:	4282      	cmp	r2, r0
1a004348:	f200 80cd 	bhi.w	1a0044e6 <__udivdi3+0x242>
1a00434c:	2001      	movs	r0, #1
1a00434e:	4631      	mov	r1, r6
1a004350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004354:	b912      	cbnz	r2, 1a00435c <__udivdi3+0xb8>
1a004356:	2501      	movs	r5, #1
1a004358:	fbb5 f5f2 	udiv	r5, r5, r2
1a00435c:	fab5 f885 	clz	r8, r5
1a004360:	f1b8 0f00 	cmp.w	r8, #0
1a004364:	d177      	bne.n	1a004456 <__udivdi3+0x1b2>
1a004366:	1b4a      	subs	r2, r1, r5
1a004368:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00436c:	b2af      	uxth	r7, r5
1a00436e:	2601      	movs	r6, #1
1a004370:	fbb2 f0fe 	udiv	r0, r2, lr
1a004374:	0c23      	lsrs	r3, r4, #16
1a004376:	fb0e 2110 	mls	r1, lr, r0, r2
1a00437a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a00437e:	fb07 f300 	mul.w	r3, r7, r0
1a004382:	428b      	cmp	r3, r1
1a004384:	d907      	bls.n	1a004396 <__udivdi3+0xf2>
1a004386:	1949      	adds	r1, r1, r5
1a004388:	f100 32ff 	add.w	r2, r0, #4294967295
1a00438c:	d202      	bcs.n	1a004394 <__udivdi3+0xf0>
1a00438e:	428b      	cmp	r3, r1
1a004390:	f200 80ba 	bhi.w	1a004508 <__udivdi3+0x264>
1a004394:	4610      	mov	r0, r2
1a004396:	1ac9      	subs	r1, r1, r3
1a004398:	b2a4      	uxth	r4, r4
1a00439a:	fbb1 f3fe 	udiv	r3, r1, lr
1a00439e:	fb0e 1113 	mls	r1, lr, r3, r1
1a0043a2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a0043a6:	fb07 f703 	mul.w	r7, r7, r3
1a0043aa:	42a7      	cmp	r7, r4
1a0043ac:	d908      	bls.n	1a0043c0 <__udivdi3+0x11c>
1a0043ae:	1964      	adds	r4, r4, r5
1a0043b0:	f103 32ff 	add.w	r2, r3, #4294967295
1a0043b4:	f080 808f 	bcs.w	1a0044d6 <__udivdi3+0x232>
1a0043b8:	42a7      	cmp	r7, r4
1a0043ba:	f240 808c 	bls.w	1a0044d6 <__udivdi3+0x232>
1a0043be:	3b02      	subs	r3, #2
1a0043c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0043c4:	4631      	mov	r1, r6
1a0043c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0043ca:	2600      	movs	r6, #0
1a0043cc:	4630      	mov	r0, r6
1a0043ce:	4631      	mov	r1, r6
1a0043d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0043d4:	f1c6 0420 	rsb	r4, r6, #32
1a0043d8:	fa22 f504 	lsr.w	r5, r2, r4
1a0043dc:	40b3      	lsls	r3, r6
1a0043de:	432b      	orrs	r3, r5
1a0043e0:	fa20 fc04 	lsr.w	ip, r0, r4
1a0043e4:	fa01 f706 	lsl.w	r7, r1, r6
1a0043e8:	fa21 f504 	lsr.w	r5, r1, r4
1a0043ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a0043f0:	ea4c 0707 	orr.w	r7, ip, r7
1a0043f4:	fbb5 f8fe 	udiv	r8, r5, lr
1a0043f8:	0c39      	lsrs	r1, r7, #16
1a0043fa:	fb0e 5518 	mls	r5, lr, r8, r5
1a0043fe:	fa1f fc83 	uxth.w	ip, r3
1a004402:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a004406:	fb0c f108 	mul.w	r1, ip, r8
1a00440a:	42a9      	cmp	r1, r5
1a00440c:	fa02 f206 	lsl.w	r2, r2, r6
1a004410:	d904      	bls.n	1a00441c <__udivdi3+0x178>
1a004412:	18ed      	adds	r5, r5, r3
1a004414:	f108 34ff 	add.w	r4, r8, #4294967295
1a004418:	d367      	bcc.n	1a0044ea <__udivdi3+0x246>
1a00441a:	46a0      	mov	r8, r4
1a00441c:	1a6d      	subs	r5, r5, r1
1a00441e:	b2bf      	uxth	r7, r7
1a004420:	fbb5 f4fe 	udiv	r4, r5, lr
1a004424:	fb0e 5514 	mls	r5, lr, r4, r5
1a004428:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a00442c:	fb0c fc04 	mul.w	ip, ip, r4
1a004430:	458c      	cmp	ip, r1
1a004432:	d904      	bls.n	1a00443e <__udivdi3+0x19a>
1a004434:	18c9      	adds	r1, r1, r3
1a004436:	f104 35ff 	add.w	r5, r4, #4294967295
1a00443a:	d35c      	bcc.n	1a0044f6 <__udivdi3+0x252>
1a00443c:	462c      	mov	r4, r5
1a00443e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a004442:	ebcc 0101 	rsb	r1, ip, r1
1a004446:	fba4 2302 	umull	r2, r3, r4, r2
1a00444a:	4299      	cmp	r1, r3
1a00444c:	d348      	bcc.n	1a0044e0 <__udivdi3+0x23c>
1a00444e:	d044      	beq.n	1a0044da <__udivdi3+0x236>
1a004450:	4620      	mov	r0, r4
1a004452:	2600      	movs	r6, #0
1a004454:	e76c      	b.n	1a004330 <__udivdi3+0x8c>
1a004456:	f1c8 0420 	rsb	r4, r8, #32
1a00445a:	fa01 f308 	lsl.w	r3, r1, r8
1a00445e:	fa05 f508 	lsl.w	r5, r5, r8
1a004462:	fa20 f704 	lsr.w	r7, r0, r4
1a004466:	40e1      	lsrs	r1, r4
1a004468:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00446c:	431f      	orrs	r7, r3
1a00446e:	fbb1 f6fe 	udiv	r6, r1, lr
1a004472:	0c3a      	lsrs	r2, r7, #16
1a004474:	fb0e 1116 	mls	r1, lr, r6, r1
1a004478:	fa1f fc85 	uxth.w	ip, r5
1a00447c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a004480:	fb0c f206 	mul.w	r2, ip, r6
1a004484:	429a      	cmp	r2, r3
1a004486:	fa00 f408 	lsl.w	r4, r0, r8
1a00448a:	d907      	bls.n	1a00449c <__udivdi3+0x1f8>
1a00448c:	195b      	adds	r3, r3, r5
1a00448e:	f106 31ff 	add.w	r1, r6, #4294967295
1a004492:	d237      	bcs.n	1a004504 <__udivdi3+0x260>
1a004494:	429a      	cmp	r2, r3
1a004496:	d935      	bls.n	1a004504 <__udivdi3+0x260>
1a004498:	3e02      	subs	r6, #2
1a00449a:	442b      	add	r3, r5
1a00449c:	1a9b      	subs	r3, r3, r2
1a00449e:	b2bf      	uxth	r7, r7
1a0044a0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0044a4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0044a8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a0044ac:	fb0c f100 	mul.w	r1, ip, r0
1a0044b0:	4299      	cmp	r1, r3
1a0044b2:	d907      	bls.n	1a0044c4 <__udivdi3+0x220>
1a0044b4:	195b      	adds	r3, r3, r5
1a0044b6:	f100 32ff 	add.w	r2, r0, #4294967295
1a0044ba:	d221      	bcs.n	1a004500 <__udivdi3+0x25c>
1a0044bc:	4299      	cmp	r1, r3
1a0044be:	d91f      	bls.n	1a004500 <__udivdi3+0x25c>
1a0044c0:	3802      	subs	r0, #2
1a0044c2:	442b      	add	r3, r5
1a0044c4:	1a5a      	subs	r2, r3, r1
1a0044c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a0044ca:	4667      	mov	r7, ip
1a0044cc:	e750      	b.n	1a004370 <__udivdi3+0xcc>
1a0044ce:	4610      	mov	r0, r2
1a0044d0:	e716      	b.n	1a004300 <__udivdi3+0x5c>
1a0044d2:	460b      	mov	r3, r1
1a0044d4:	e729      	b.n	1a00432a <__udivdi3+0x86>
1a0044d6:	4613      	mov	r3, r2
1a0044d8:	e772      	b.n	1a0043c0 <__udivdi3+0x11c>
1a0044da:	40b0      	lsls	r0, r6
1a0044dc:	4290      	cmp	r0, r2
1a0044de:	d2b7      	bcs.n	1a004450 <__udivdi3+0x1ac>
1a0044e0:	1e60      	subs	r0, r4, #1
1a0044e2:	2600      	movs	r6, #0
1a0044e4:	e724      	b.n	1a004330 <__udivdi3+0x8c>
1a0044e6:	4630      	mov	r0, r6
1a0044e8:	e722      	b.n	1a004330 <__udivdi3+0x8c>
1a0044ea:	42a9      	cmp	r1, r5
1a0044ec:	d995      	bls.n	1a00441a <__udivdi3+0x176>
1a0044ee:	f1a8 0802 	sub.w	r8, r8, #2
1a0044f2:	441d      	add	r5, r3
1a0044f4:	e792      	b.n	1a00441c <__udivdi3+0x178>
1a0044f6:	458c      	cmp	ip, r1
1a0044f8:	d9a0      	bls.n	1a00443c <__udivdi3+0x198>
1a0044fa:	3c02      	subs	r4, #2
1a0044fc:	4419      	add	r1, r3
1a0044fe:	e79e      	b.n	1a00443e <__udivdi3+0x19a>
1a004500:	4610      	mov	r0, r2
1a004502:	e7df      	b.n	1a0044c4 <__udivdi3+0x220>
1a004504:	460e      	mov	r6, r1
1a004506:	e7c9      	b.n	1a00449c <__udivdi3+0x1f8>
1a004508:	3802      	subs	r0, #2
1a00450a:	4429      	add	r1, r5
1a00450c:	e743      	b.n	1a004396 <__udivdi3+0xf2>
1a00450e:	bf00      	nop

1a004510 <__libc_init_array>:
1a004510:	b570      	push	{r4, r5, r6, lr}
1a004512:	4b0e      	ldr	r3, [pc, #56]	; (1a00454c <__libc_init_array+0x3c>)
1a004514:	4c0e      	ldr	r4, [pc, #56]	; (1a004550 <__libc_init_array+0x40>)
1a004516:	1ae4      	subs	r4, r4, r3
1a004518:	10a4      	asrs	r4, r4, #2
1a00451a:	2500      	movs	r5, #0
1a00451c:	461e      	mov	r6, r3
1a00451e:	42a5      	cmp	r5, r4
1a004520:	d004      	beq.n	1a00452c <__libc_init_array+0x1c>
1a004522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004526:	4798      	blx	r3
1a004528:	3501      	adds	r5, #1
1a00452a:	e7f8      	b.n	1a00451e <__libc_init_array+0xe>
1a00452c:	f7ff fd20 	bl	1a003f70 <_init>
1a004530:	4c08      	ldr	r4, [pc, #32]	; (1a004554 <__libc_init_array+0x44>)
1a004532:	4b09      	ldr	r3, [pc, #36]	; (1a004558 <__libc_init_array+0x48>)
1a004534:	1ae4      	subs	r4, r4, r3
1a004536:	10a4      	asrs	r4, r4, #2
1a004538:	2500      	movs	r5, #0
1a00453a:	461e      	mov	r6, r3
1a00453c:	42a5      	cmp	r5, r4
1a00453e:	d004      	beq.n	1a00454a <__libc_init_array+0x3a>
1a004540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004544:	4798      	blx	r3
1a004546:	3501      	adds	r5, #1
1a004548:	e7f8      	b.n	1a00453c <__libc_init_array+0x2c>
1a00454a:	bd70      	pop	{r4, r5, r6, pc}
1a00454c:	1a005678 	.word	0x1a005678
1a004550:	1a005678 	.word	0x1a005678
1a004554:	1a005678 	.word	0x1a005678
1a004558:	1a005678 	.word	0x1a005678

1a00455c <memcpy>:
1a00455c:	b510      	push	{r4, lr}
1a00455e:	1e43      	subs	r3, r0, #1
1a004560:	440a      	add	r2, r1
1a004562:	4291      	cmp	r1, r2
1a004564:	d004      	beq.n	1a004570 <memcpy+0x14>
1a004566:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00456a:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00456e:	e7f8      	b.n	1a004562 <memcpy+0x6>
1a004570:	bd10      	pop	{r4, pc}

1a004572 <memset>:
1a004572:	4402      	add	r2, r0
1a004574:	4603      	mov	r3, r0
1a004576:	4293      	cmp	r3, r2
1a004578:	d002      	beq.n	1a004580 <memset+0xe>
1a00457a:	f803 1b01 	strb.w	r1, [r3], #1
1a00457e:	e7fa      	b.n	1a004576 <memset+0x4>
1a004580:	4770      	bx	lr
	...

1a004584 <iprintf>:
1a004584:	b40f      	push	{r0, r1, r2, r3}
1a004586:	4b0a      	ldr	r3, [pc, #40]	; (1a0045b0 <iprintf+0x2c>)
1a004588:	b513      	push	{r0, r1, r4, lr}
1a00458a:	681c      	ldr	r4, [r3, #0]
1a00458c:	b124      	cbz	r4, 1a004598 <iprintf+0x14>
1a00458e:	69a3      	ldr	r3, [r4, #24]
1a004590:	b913      	cbnz	r3, 1a004598 <iprintf+0x14>
1a004592:	4620      	mov	r0, r4
1a004594:	f000 f9d2 	bl	1a00493c <__sinit>
1a004598:	ab05      	add	r3, sp, #20
1a00459a:	4620      	mov	r0, r4
1a00459c:	68a1      	ldr	r1, [r4, #8]
1a00459e:	9a04      	ldr	r2, [sp, #16]
1a0045a0:	9301      	str	r3, [sp, #4]
1a0045a2:	f000 fb63 	bl	1a004c6c <_vfiprintf_r>
1a0045a6:	b002      	add	sp, #8
1a0045a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0045ac:	b004      	add	sp, #16
1a0045ae:	4770      	bx	lr
1a0045b0:	1000013c 	.word	0x1000013c

1a0045b4 <strchr>:
1a0045b4:	b2c9      	uxtb	r1, r1
1a0045b6:	4603      	mov	r3, r0
1a0045b8:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0045bc:	b11a      	cbz	r2, 1a0045c6 <strchr+0x12>
1a0045be:	428a      	cmp	r2, r1
1a0045c0:	d1f9      	bne.n	1a0045b6 <strchr+0x2>
1a0045c2:	4618      	mov	r0, r3
1a0045c4:	4770      	bx	lr
1a0045c6:	2900      	cmp	r1, #0
1a0045c8:	bf0c      	ite	eq
1a0045ca:	4618      	moveq	r0, r3
1a0045cc:	2000      	movne	r0, #0
1a0045ce:	4770      	bx	lr

1a0045d0 <strcpy>:
1a0045d0:	4603      	mov	r3, r0
1a0045d2:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0045d6:	f803 2b01 	strb.w	r2, [r3], #1
1a0045da:	2a00      	cmp	r2, #0
1a0045dc:	d1f9      	bne.n	1a0045d2 <strcpy+0x2>
1a0045de:	4770      	bx	lr

1a0045e0 <__swbuf_r>:
1a0045e0:	b570      	push	{r4, r5, r6, lr}
1a0045e2:	460d      	mov	r5, r1
1a0045e4:	4614      	mov	r4, r2
1a0045e6:	4606      	mov	r6, r0
1a0045e8:	b118      	cbz	r0, 1a0045f2 <__swbuf_r+0x12>
1a0045ea:	6983      	ldr	r3, [r0, #24]
1a0045ec:	b90b      	cbnz	r3, 1a0045f2 <__swbuf_r+0x12>
1a0045ee:	f000 f9a5 	bl	1a00493c <__sinit>
1a0045f2:	4b22      	ldr	r3, [pc, #136]	; (1a00467c <__swbuf_r+0x9c>)
1a0045f4:	429c      	cmp	r4, r3
1a0045f6:	d101      	bne.n	1a0045fc <__swbuf_r+0x1c>
1a0045f8:	6874      	ldr	r4, [r6, #4]
1a0045fa:	e008      	b.n	1a00460e <__swbuf_r+0x2e>
1a0045fc:	4b20      	ldr	r3, [pc, #128]	; (1a004680 <__swbuf_r+0xa0>)
1a0045fe:	429c      	cmp	r4, r3
1a004600:	d101      	bne.n	1a004606 <__swbuf_r+0x26>
1a004602:	68b4      	ldr	r4, [r6, #8]
1a004604:	e003      	b.n	1a00460e <__swbuf_r+0x2e>
1a004606:	4b1f      	ldr	r3, [pc, #124]	; (1a004684 <__swbuf_r+0xa4>)
1a004608:	429c      	cmp	r4, r3
1a00460a:	bf08      	it	eq
1a00460c:	68f4      	ldreq	r4, [r6, #12]
1a00460e:	69a3      	ldr	r3, [r4, #24]
1a004610:	60a3      	str	r3, [r4, #8]
1a004612:	89a3      	ldrh	r3, [r4, #12]
1a004614:	071a      	lsls	r2, r3, #28
1a004616:	d509      	bpl.n	1a00462c <__swbuf_r+0x4c>
1a004618:	6923      	ldr	r3, [r4, #16]
1a00461a:	b13b      	cbz	r3, 1a00462c <__swbuf_r+0x4c>
1a00461c:	6823      	ldr	r3, [r4, #0]
1a00461e:	6920      	ldr	r0, [r4, #16]
1a004620:	1a18      	subs	r0, r3, r0
1a004622:	6963      	ldr	r3, [r4, #20]
1a004624:	4298      	cmp	r0, r3
1a004626:	b2ed      	uxtb	r5, r5
1a004628:	db0f      	blt.n	1a00464a <__swbuf_r+0x6a>
1a00462a:	e008      	b.n	1a00463e <__swbuf_r+0x5e>
1a00462c:	4630      	mov	r0, r6
1a00462e:	4621      	mov	r1, r4
1a004630:	f000 f82a 	bl	1a004688 <__swsetup_r>
1a004634:	2800      	cmp	r0, #0
1a004636:	d0f1      	beq.n	1a00461c <__swbuf_r+0x3c>
1a004638:	f04f 30ff 	mov.w	r0, #4294967295
1a00463c:	bd70      	pop	{r4, r5, r6, pc}
1a00463e:	4630      	mov	r0, r6
1a004640:	4621      	mov	r1, r4
1a004642:	f000 f911 	bl	1a004868 <_fflush_r>
1a004646:	2800      	cmp	r0, #0
1a004648:	d1f6      	bne.n	1a004638 <__swbuf_r+0x58>
1a00464a:	68a3      	ldr	r3, [r4, #8]
1a00464c:	3b01      	subs	r3, #1
1a00464e:	60a3      	str	r3, [r4, #8]
1a004650:	6823      	ldr	r3, [r4, #0]
1a004652:	1c5a      	adds	r2, r3, #1
1a004654:	6022      	str	r2, [r4, #0]
1a004656:	701d      	strb	r5, [r3, #0]
1a004658:	6963      	ldr	r3, [r4, #20]
1a00465a:	3001      	adds	r0, #1
1a00465c:	4298      	cmp	r0, r3
1a00465e:	d004      	beq.n	1a00466a <__swbuf_r+0x8a>
1a004660:	89a3      	ldrh	r3, [r4, #12]
1a004662:	07db      	lsls	r3, r3, #31
1a004664:	d507      	bpl.n	1a004676 <__swbuf_r+0x96>
1a004666:	2d0a      	cmp	r5, #10
1a004668:	d105      	bne.n	1a004676 <__swbuf_r+0x96>
1a00466a:	4630      	mov	r0, r6
1a00466c:	4621      	mov	r1, r4
1a00466e:	f000 f8fb 	bl	1a004868 <_fflush_r>
1a004672:	2800      	cmp	r0, #0
1a004674:	d1e0      	bne.n	1a004638 <__swbuf_r+0x58>
1a004676:	4628      	mov	r0, r5
1a004678:	bd70      	pop	{r4, r5, r6, pc}
1a00467a:	bf00      	nop
1a00467c:	1a0055dc 	.word	0x1a0055dc
1a004680:	1a0055fc 	.word	0x1a0055fc
1a004684:	1a00561c 	.word	0x1a00561c

1a004688 <__swsetup_r>:
1a004688:	4b31      	ldr	r3, [pc, #196]	; (1a004750 <__swsetup_r+0xc8>)
1a00468a:	b570      	push	{r4, r5, r6, lr}
1a00468c:	681d      	ldr	r5, [r3, #0]
1a00468e:	4606      	mov	r6, r0
1a004690:	460c      	mov	r4, r1
1a004692:	b125      	cbz	r5, 1a00469e <__swsetup_r+0x16>
1a004694:	69ab      	ldr	r3, [r5, #24]
1a004696:	b913      	cbnz	r3, 1a00469e <__swsetup_r+0x16>
1a004698:	4628      	mov	r0, r5
1a00469a:	f000 f94f 	bl	1a00493c <__sinit>
1a00469e:	4b2d      	ldr	r3, [pc, #180]	; (1a004754 <__swsetup_r+0xcc>)
1a0046a0:	429c      	cmp	r4, r3
1a0046a2:	d101      	bne.n	1a0046a8 <__swsetup_r+0x20>
1a0046a4:	686c      	ldr	r4, [r5, #4]
1a0046a6:	e008      	b.n	1a0046ba <__swsetup_r+0x32>
1a0046a8:	4b2b      	ldr	r3, [pc, #172]	; (1a004758 <__swsetup_r+0xd0>)
1a0046aa:	429c      	cmp	r4, r3
1a0046ac:	d101      	bne.n	1a0046b2 <__swsetup_r+0x2a>
1a0046ae:	68ac      	ldr	r4, [r5, #8]
1a0046b0:	e003      	b.n	1a0046ba <__swsetup_r+0x32>
1a0046b2:	4b2a      	ldr	r3, [pc, #168]	; (1a00475c <__swsetup_r+0xd4>)
1a0046b4:	429c      	cmp	r4, r3
1a0046b6:	bf08      	it	eq
1a0046b8:	68ec      	ldreq	r4, [r5, #12]
1a0046ba:	89a3      	ldrh	r3, [r4, #12]
1a0046bc:	b29a      	uxth	r2, r3
1a0046be:	0711      	lsls	r1, r2, #28
1a0046c0:	d41d      	bmi.n	1a0046fe <__swsetup_r+0x76>
1a0046c2:	06d5      	lsls	r5, r2, #27
1a0046c4:	d402      	bmi.n	1a0046cc <__swsetup_r+0x44>
1a0046c6:	2209      	movs	r2, #9
1a0046c8:	6032      	str	r2, [r6, #0]
1a0046ca:	e038      	b.n	1a00473e <__swsetup_r+0xb6>
1a0046cc:	0750      	lsls	r0, r2, #29
1a0046ce:	d512      	bpl.n	1a0046f6 <__swsetup_r+0x6e>
1a0046d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0046d2:	b141      	cbz	r1, 1a0046e6 <__swsetup_r+0x5e>
1a0046d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0046d8:	4299      	cmp	r1, r3
1a0046da:	d002      	beq.n	1a0046e2 <__swsetup_r+0x5a>
1a0046dc:	4630      	mov	r0, r6
1a0046de:	f000 fa03 	bl	1a004ae8 <_free_r>
1a0046e2:	2300      	movs	r3, #0
1a0046e4:	6363      	str	r3, [r4, #52]	; 0x34
1a0046e6:	89a3      	ldrh	r3, [r4, #12]
1a0046e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0046ec:	81a3      	strh	r3, [r4, #12]
1a0046ee:	2300      	movs	r3, #0
1a0046f0:	6063      	str	r3, [r4, #4]
1a0046f2:	6923      	ldr	r3, [r4, #16]
1a0046f4:	6023      	str	r3, [r4, #0]
1a0046f6:	89a3      	ldrh	r3, [r4, #12]
1a0046f8:	f043 0308 	orr.w	r3, r3, #8
1a0046fc:	81a3      	strh	r3, [r4, #12]
1a0046fe:	6923      	ldr	r3, [r4, #16]
1a004700:	b94b      	cbnz	r3, 1a004716 <__swsetup_r+0x8e>
1a004702:	89a3      	ldrh	r3, [r4, #12]
1a004704:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00470c:	d003      	beq.n	1a004716 <__swsetup_r+0x8e>
1a00470e:	4630      	mov	r0, r6
1a004710:	4621      	mov	r1, r4
1a004712:	f000 f99b 	bl	1a004a4c <__smakebuf_r>
1a004716:	89a3      	ldrh	r3, [r4, #12]
1a004718:	f013 0201 	ands.w	r2, r3, #1
1a00471c:	d005      	beq.n	1a00472a <__swsetup_r+0xa2>
1a00471e:	2200      	movs	r2, #0
1a004720:	60a2      	str	r2, [r4, #8]
1a004722:	6962      	ldr	r2, [r4, #20]
1a004724:	4252      	negs	r2, r2
1a004726:	61a2      	str	r2, [r4, #24]
1a004728:	e003      	b.n	1a004732 <__swsetup_r+0xaa>
1a00472a:	0799      	lsls	r1, r3, #30
1a00472c:	bf58      	it	pl
1a00472e:	6962      	ldrpl	r2, [r4, #20]
1a004730:	60a2      	str	r2, [r4, #8]
1a004732:	6922      	ldr	r2, [r4, #16]
1a004734:	b94a      	cbnz	r2, 1a00474a <__swsetup_r+0xc2>
1a004736:	f003 0080 	and.w	r0, r3, #128	; 0x80
1a00473a:	b280      	uxth	r0, r0
1a00473c:	b130      	cbz	r0, 1a00474c <__swsetup_r+0xc4>
1a00473e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004742:	81a3      	strh	r3, [r4, #12]
1a004744:	f04f 30ff 	mov.w	r0, #4294967295
1a004748:	bd70      	pop	{r4, r5, r6, pc}
1a00474a:	2000      	movs	r0, #0
1a00474c:	bd70      	pop	{r4, r5, r6, pc}
1a00474e:	bf00      	nop
1a004750:	1000013c 	.word	0x1000013c
1a004754:	1a0055dc 	.word	0x1a0055dc
1a004758:	1a0055fc 	.word	0x1a0055fc
1a00475c:	1a00561c 	.word	0x1a00561c

1a004760 <__sflush_r>:
1a004760:	898a      	ldrh	r2, [r1, #12]
1a004762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004766:	4605      	mov	r5, r0
1a004768:	0710      	lsls	r0, r2, #28
1a00476a:	460c      	mov	r4, r1
1a00476c:	d457      	bmi.n	1a00481e <__sflush_r+0xbe>
1a00476e:	684b      	ldr	r3, [r1, #4]
1a004770:	2b00      	cmp	r3, #0
1a004772:	dc02      	bgt.n	1a00477a <__sflush_r+0x1a>
1a004774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a004776:	2b00      	cmp	r3, #0
1a004778:	dd18      	ble.n	1a0047ac <__sflush_r+0x4c>
1a00477a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00477c:	b1b6      	cbz	r6, 1a0047ac <__sflush_r+0x4c>
1a00477e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
1a004782:	2300      	movs	r3, #0
1a004784:	b292      	uxth	r2, r2
1a004786:	682f      	ldr	r7, [r5, #0]
1a004788:	602b      	str	r3, [r5, #0]
1a00478a:	b10a      	cbz	r2, 1a004790 <__sflush_r+0x30>
1a00478c:	6d62      	ldr	r2, [r4, #84]	; 0x54
1a00478e:	e010      	b.n	1a0047b2 <__sflush_r+0x52>
1a004790:	6a21      	ldr	r1, [r4, #32]
1a004792:	4628      	mov	r0, r5
1a004794:	2301      	movs	r3, #1
1a004796:	47b0      	blx	r6
1a004798:	1c41      	adds	r1, r0, #1
1a00479a:	4602      	mov	r2, r0
1a00479c:	d109      	bne.n	1a0047b2 <__sflush_r+0x52>
1a00479e:	682b      	ldr	r3, [r5, #0]
1a0047a0:	b13b      	cbz	r3, 1a0047b2 <__sflush_r+0x52>
1a0047a2:	2b1d      	cmp	r3, #29
1a0047a4:	d001      	beq.n	1a0047aa <__sflush_r+0x4a>
1a0047a6:	2b16      	cmp	r3, #22
1a0047a8:	d147      	bne.n	1a00483a <__sflush_r+0xda>
1a0047aa:	602f      	str	r7, [r5, #0]
1a0047ac:	2000      	movs	r0, #0
1a0047ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0047b2:	89a3      	ldrh	r3, [r4, #12]
1a0047b4:	075b      	lsls	r3, r3, #29
1a0047b6:	d505      	bpl.n	1a0047c4 <__sflush_r+0x64>
1a0047b8:	6863      	ldr	r3, [r4, #4]
1a0047ba:	1ad2      	subs	r2, r2, r3
1a0047bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0047be:	b10b      	cbz	r3, 1a0047c4 <__sflush_r+0x64>
1a0047c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0047c2:	1ad2      	subs	r2, r2, r3
1a0047c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0047c6:	6a21      	ldr	r1, [r4, #32]
1a0047c8:	2300      	movs	r3, #0
1a0047ca:	4628      	mov	r0, r5
1a0047cc:	47b0      	blx	r6
1a0047ce:	1c46      	adds	r6, r0, #1
1a0047d0:	89a3      	ldrh	r3, [r4, #12]
1a0047d2:	d105      	bne.n	1a0047e0 <__sflush_r+0x80>
1a0047d4:	682a      	ldr	r2, [r5, #0]
1a0047d6:	b11a      	cbz	r2, 1a0047e0 <__sflush_r+0x80>
1a0047d8:	2a1d      	cmp	r2, #29
1a0047da:	d001      	beq.n	1a0047e0 <__sflush_r+0x80>
1a0047dc:	2a16      	cmp	r2, #22
1a0047de:	d119      	bne.n	1a004814 <__sflush_r+0xb4>
1a0047e0:	2200      	movs	r2, #0
1a0047e2:	6062      	str	r2, [r4, #4]
1a0047e4:	04d9      	lsls	r1, r3, #19
1a0047e6:	6922      	ldr	r2, [r4, #16]
1a0047e8:	6022      	str	r2, [r4, #0]
1a0047ea:	d504      	bpl.n	1a0047f6 <__sflush_r+0x96>
1a0047ec:	1c42      	adds	r2, r0, #1
1a0047ee:	d101      	bne.n	1a0047f4 <__sflush_r+0x94>
1a0047f0:	682b      	ldr	r3, [r5, #0]
1a0047f2:	b903      	cbnz	r3, 1a0047f6 <__sflush_r+0x96>
1a0047f4:	6560      	str	r0, [r4, #84]	; 0x54
1a0047f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0047f8:	602f      	str	r7, [r5, #0]
1a0047fa:	2900      	cmp	r1, #0
1a0047fc:	d0d6      	beq.n	1a0047ac <__sflush_r+0x4c>
1a0047fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004802:	4299      	cmp	r1, r3
1a004804:	d002      	beq.n	1a00480c <__sflush_r+0xac>
1a004806:	4628      	mov	r0, r5
1a004808:	f000 f96e 	bl	1a004ae8 <_free_r>
1a00480c:	2000      	movs	r0, #0
1a00480e:	6360      	str	r0, [r4, #52]	; 0x34
1a004810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004818:	81a3      	strh	r3, [r4, #12]
1a00481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00481e:	690f      	ldr	r7, [r1, #16]
1a004820:	2f00      	cmp	r7, #0
1a004822:	d0c3      	beq.n	1a0047ac <__sflush_r+0x4c>
1a004824:	0793      	lsls	r3, r2, #30
1a004826:	680e      	ldr	r6, [r1, #0]
1a004828:	bf08      	it	eq
1a00482a:	694b      	ldreq	r3, [r1, #20]
1a00482c:	600f      	str	r7, [r1, #0]
1a00482e:	bf18      	it	ne
1a004830:	2300      	movne	r3, #0
1a004832:	ebc7 0806 	rsb	r8, r7, r6
1a004836:	608b      	str	r3, [r1, #8]
1a004838:	e012      	b.n	1a004860 <__sflush_r+0x100>
1a00483a:	89a3      	ldrh	r3, [r4, #12]
1a00483c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004840:	81a3      	strh	r3, [r4, #12]
1a004842:	f04f 30ff 	mov.w	r0, #4294967295
1a004846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00484a:	4628      	mov	r0, r5
1a00484c:	6a21      	ldr	r1, [r4, #32]
1a00484e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004850:	463a      	mov	r2, r7
1a004852:	4643      	mov	r3, r8
1a004854:	47b0      	blx	r6
1a004856:	2800      	cmp	r0, #0
1a004858:	ddef      	ble.n	1a00483a <__sflush_r+0xda>
1a00485a:	4407      	add	r7, r0
1a00485c:	ebc0 0808 	rsb	r8, r0, r8
1a004860:	f1b8 0f00 	cmp.w	r8, #0
1a004864:	dcf1      	bgt.n	1a00484a <__sflush_r+0xea>
1a004866:	e7a1      	b.n	1a0047ac <__sflush_r+0x4c>

1a004868 <_fflush_r>:
1a004868:	b538      	push	{r3, r4, r5, lr}
1a00486a:	690b      	ldr	r3, [r1, #16]
1a00486c:	4605      	mov	r5, r0
1a00486e:	460c      	mov	r4, r1
1a004870:	b1db      	cbz	r3, 1a0048aa <_fflush_r+0x42>
1a004872:	b118      	cbz	r0, 1a00487c <_fflush_r+0x14>
1a004874:	6983      	ldr	r3, [r0, #24]
1a004876:	b90b      	cbnz	r3, 1a00487c <_fflush_r+0x14>
1a004878:	f000 f860 	bl	1a00493c <__sinit>
1a00487c:	4b0c      	ldr	r3, [pc, #48]	; (1a0048b0 <_fflush_r+0x48>)
1a00487e:	429c      	cmp	r4, r3
1a004880:	d101      	bne.n	1a004886 <_fflush_r+0x1e>
1a004882:	686c      	ldr	r4, [r5, #4]
1a004884:	e008      	b.n	1a004898 <_fflush_r+0x30>
1a004886:	4b0b      	ldr	r3, [pc, #44]	; (1a0048b4 <_fflush_r+0x4c>)
1a004888:	429c      	cmp	r4, r3
1a00488a:	d101      	bne.n	1a004890 <_fflush_r+0x28>
1a00488c:	68ac      	ldr	r4, [r5, #8]
1a00488e:	e003      	b.n	1a004898 <_fflush_r+0x30>
1a004890:	4b09      	ldr	r3, [pc, #36]	; (1a0048b8 <_fflush_r+0x50>)
1a004892:	429c      	cmp	r4, r3
1a004894:	bf08      	it	eq
1a004896:	68ec      	ldreq	r4, [r5, #12]
1a004898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00489c:	b12b      	cbz	r3, 1a0048aa <_fflush_r+0x42>
1a00489e:	4628      	mov	r0, r5
1a0048a0:	4621      	mov	r1, r4
1a0048a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0048a6:	f7ff bf5b 	b.w	1a004760 <__sflush_r>
1a0048aa:	2000      	movs	r0, #0
1a0048ac:	bd38      	pop	{r3, r4, r5, pc}
1a0048ae:	bf00      	nop
1a0048b0:	1a0055dc 	.word	0x1a0055dc
1a0048b4:	1a0055fc 	.word	0x1a0055fc
1a0048b8:	1a00561c 	.word	0x1a00561c

1a0048bc <_cleanup_r>:
1a0048bc:	4901      	ldr	r1, [pc, #4]	; (1a0048c4 <_cleanup_r+0x8>)
1a0048be:	f000 b8a7 	b.w	1a004a10 <_fwalk_reent>
1a0048c2:	bf00      	nop
1a0048c4:	1a004869 	.word	0x1a004869

1a0048c8 <std.isra.0>:
1a0048c8:	2300      	movs	r3, #0
1a0048ca:	b510      	push	{r4, lr}
1a0048cc:	4604      	mov	r4, r0
1a0048ce:	6003      	str	r3, [r0, #0]
1a0048d0:	6043      	str	r3, [r0, #4]
1a0048d2:	6083      	str	r3, [r0, #8]
1a0048d4:	8181      	strh	r1, [r0, #12]
1a0048d6:	6643      	str	r3, [r0, #100]	; 0x64
1a0048d8:	81c2      	strh	r2, [r0, #14]
1a0048da:	6103      	str	r3, [r0, #16]
1a0048dc:	6143      	str	r3, [r0, #20]
1a0048de:	6183      	str	r3, [r0, #24]
1a0048e0:	4619      	mov	r1, r3
1a0048e2:	305c      	adds	r0, #92	; 0x5c
1a0048e4:	2208      	movs	r2, #8
1a0048e6:	f7ff fe44 	bl	1a004572 <memset>
1a0048ea:	4b05      	ldr	r3, [pc, #20]	; (1a004900 <std.isra.0+0x38>)
1a0048ec:	6263      	str	r3, [r4, #36]	; 0x24
1a0048ee:	4b05      	ldr	r3, [pc, #20]	; (1a004904 <std.isra.0+0x3c>)
1a0048f0:	62a3      	str	r3, [r4, #40]	; 0x28
1a0048f2:	4b05      	ldr	r3, [pc, #20]	; (1a004908 <std.isra.0+0x40>)
1a0048f4:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0048f6:	4b05      	ldr	r3, [pc, #20]	; (1a00490c <std.isra.0+0x44>)
1a0048f8:	6224      	str	r4, [r4, #32]
1a0048fa:	6323      	str	r3, [r4, #48]	; 0x30
1a0048fc:	bd10      	pop	{r4, pc}
1a0048fe:	bf00      	nop
1a004900:	1a0051a9 	.word	0x1a0051a9
1a004904:	1a0051cb 	.word	0x1a0051cb
1a004908:	1a005203 	.word	0x1a005203
1a00490c:	1a005227 	.word	0x1a005227

1a004910 <__sfmoreglue>:
1a004910:	b570      	push	{r4, r5, r6, lr}
1a004912:	2368      	movs	r3, #104	; 0x68
1a004914:	1e4d      	subs	r5, r1, #1
1a004916:	435d      	muls	r5, r3
1a004918:	460e      	mov	r6, r1
1a00491a:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00491e:	f000 f927 	bl	1a004b70 <_malloc_r>
1a004922:	4604      	mov	r4, r0
1a004924:	b140      	cbz	r0, 1a004938 <__sfmoreglue+0x28>
1a004926:	2100      	movs	r1, #0
1a004928:	e880 0042 	stmia.w	r0, {r1, r6}
1a00492c:	300c      	adds	r0, #12
1a00492e:	60a0      	str	r0, [r4, #8]
1a004930:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004934:	f7ff fe1d 	bl	1a004572 <memset>
1a004938:	4620      	mov	r0, r4
1a00493a:	bd70      	pop	{r4, r5, r6, pc}

1a00493c <__sinit>:
1a00493c:	6983      	ldr	r3, [r0, #24]
1a00493e:	b510      	push	{r4, lr}
1a004940:	4604      	mov	r4, r0
1a004942:	bb33      	cbnz	r3, 1a004992 <__sinit+0x56>
1a004944:	6483      	str	r3, [r0, #72]	; 0x48
1a004946:	64c3      	str	r3, [r0, #76]	; 0x4c
1a004948:	6503      	str	r3, [r0, #80]	; 0x50
1a00494a:	4b12      	ldr	r3, [pc, #72]	; (1a004994 <__sinit+0x58>)
1a00494c:	4a12      	ldr	r2, [pc, #72]	; (1a004998 <__sinit+0x5c>)
1a00494e:	681b      	ldr	r3, [r3, #0]
1a004950:	6282      	str	r2, [r0, #40]	; 0x28
1a004952:	4298      	cmp	r0, r3
1a004954:	bf04      	itt	eq
1a004956:	2301      	moveq	r3, #1
1a004958:	6183      	streq	r3, [r0, #24]
1a00495a:	f000 f81f 	bl	1a00499c <__sfp>
1a00495e:	6060      	str	r0, [r4, #4]
1a004960:	4620      	mov	r0, r4
1a004962:	f000 f81b 	bl	1a00499c <__sfp>
1a004966:	60a0      	str	r0, [r4, #8]
1a004968:	4620      	mov	r0, r4
1a00496a:	f000 f817 	bl	1a00499c <__sfp>
1a00496e:	2104      	movs	r1, #4
1a004970:	60e0      	str	r0, [r4, #12]
1a004972:	2200      	movs	r2, #0
1a004974:	6860      	ldr	r0, [r4, #4]
1a004976:	f7ff ffa7 	bl	1a0048c8 <std.isra.0>
1a00497a:	68a0      	ldr	r0, [r4, #8]
1a00497c:	2109      	movs	r1, #9
1a00497e:	2201      	movs	r2, #1
1a004980:	f7ff ffa2 	bl	1a0048c8 <std.isra.0>
1a004984:	68e0      	ldr	r0, [r4, #12]
1a004986:	2112      	movs	r1, #18
1a004988:	2202      	movs	r2, #2
1a00498a:	f7ff ff9d 	bl	1a0048c8 <std.isra.0>
1a00498e:	2301      	movs	r3, #1
1a004990:	61a3      	str	r3, [r4, #24]
1a004992:	bd10      	pop	{r4, pc}
1a004994:	1a005640 	.word	0x1a005640
1a004998:	1a0048bd 	.word	0x1a0048bd

1a00499c <__sfp>:
1a00499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00499e:	4b1b      	ldr	r3, [pc, #108]	; (1a004a0c <__sfp+0x70>)
1a0049a0:	681e      	ldr	r6, [r3, #0]
1a0049a2:	69b3      	ldr	r3, [r6, #24]
1a0049a4:	4607      	mov	r7, r0
1a0049a6:	b913      	cbnz	r3, 1a0049ae <__sfp+0x12>
1a0049a8:	4630      	mov	r0, r6
1a0049aa:	f7ff ffc7 	bl	1a00493c <__sinit>
1a0049ae:	3648      	adds	r6, #72	; 0x48
1a0049b0:	68b4      	ldr	r4, [r6, #8]
1a0049b2:	6873      	ldr	r3, [r6, #4]
1a0049b4:	3b01      	subs	r3, #1
1a0049b6:	d404      	bmi.n	1a0049c2 <__sfp+0x26>
1a0049b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0049bc:	b175      	cbz	r5, 1a0049dc <__sfp+0x40>
1a0049be:	3468      	adds	r4, #104	; 0x68
1a0049c0:	e7f8      	b.n	1a0049b4 <__sfp+0x18>
1a0049c2:	6833      	ldr	r3, [r6, #0]
1a0049c4:	b92b      	cbnz	r3, 1a0049d2 <__sfp+0x36>
1a0049c6:	4638      	mov	r0, r7
1a0049c8:	2104      	movs	r1, #4
1a0049ca:	f7ff ffa1 	bl	1a004910 <__sfmoreglue>
1a0049ce:	6030      	str	r0, [r6, #0]
1a0049d0:	b108      	cbz	r0, 1a0049d6 <__sfp+0x3a>
1a0049d2:	6836      	ldr	r6, [r6, #0]
1a0049d4:	e7ec      	b.n	1a0049b0 <__sfp+0x14>
1a0049d6:	230c      	movs	r3, #12
1a0049d8:	603b      	str	r3, [r7, #0]
1a0049da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0049dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0049e0:	81e3      	strh	r3, [r4, #14]
1a0049e2:	2301      	movs	r3, #1
1a0049e4:	81a3      	strh	r3, [r4, #12]
1a0049e6:	6665      	str	r5, [r4, #100]	; 0x64
1a0049e8:	6025      	str	r5, [r4, #0]
1a0049ea:	60a5      	str	r5, [r4, #8]
1a0049ec:	6065      	str	r5, [r4, #4]
1a0049ee:	6125      	str	r5, [r4, #16]
1a0049f0:	6165      	str	r5, [r4, #20]
1a0049f2:	61a5      	str	r5, [r4, #24]
1a0049f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0049f8:	4629      	mov	r1, r5
1a0049fa:	2208      	movs	r2, #8
1a0049fc:	f7ff fdb9 	bl	1a004572 <memset>
1a004a00:	6365      	str	r5, [r4, #52]	; 0x34
1a004a02:	63a5      	str	r5, [r4, #56]	; 0x38
1a004a04:	64a5      	str	r5, [r4, #72]	; 0x48
1a004a06:	64e5      	str	r5, [r4, #76]	; 0x4c
1a004a08:	4620      	mov	r0, r4
1a004a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004a0c:	1a005640 	.word	0x1a005640

1a004a10 <_fwalk_reent>:
1a004a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004a14:	4680      	mov	r8, r0
1a004a16:	4689      	mov	r9, r1
1a004a18:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004a1c:	2600      	movs	r6, #0
1a004a1e:	b194      	cbz	r4, 1a004a46 <_fwalk_reent+0x36>
1a004a20:	68a5      	ldr	r5, [r4, #8]
1a004a22:	6867      	ldr	r7, [r4, #4]
1a004a24:	3f01      	subs	r7, #1
1a004a26:	d40c      	bmi.n	1a004a42 <_fwalk_reent+0x32>
1a004a28:	89ab      	ldrh	r3, [r5, #12]
1a004a2a:	2b01      	cmp	r3, #1
1a004a2c:	d907      	bls.n	1a004a3e <_fwalk_reent+0x2e>
1a004a2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004a32:	3301      	adds	r3, #1
1a004a34:	d003      	beq.n	1a004a3e <_fwalk_reent+0x2e>
1a004a36:	4640      	mov	r0, r8
1a004a38:	4629      	mov	r1, r5
1a004a3a:	47c8      	blx	r9
1a004a3c:	4306      	orrs	r6, r0
1a004a3e:	3568      	adds	r5, #104	; 0x68
1a004a40:	e7f0      	b.n	1a004a24 <_fwalk_reent+0x14>
1a004a42:	6824      	ldr	r4, [r4, #0]
1a004a44:	e7eb      	b.n	1a004a1e <_fwalk_reent+0xe>
1a004a46:	4630      	mov	r0, r6
1a004a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a004a4c <__smakebuf_r>:
1a004a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004a4e:	898b      	ldrh	r3, [r1, #12]
1a004a50:	079d      	lsls	r5, r3, #30
1a004a52:	b091      	sub	sp, #68	; 0x44
1a004a54:	4606      	mov	r6, r0
1a004a56:	460c      	mov	r4, r1
1a004a58:	d426      	bmi.n	1a004aa8 <__smakebuf_r+0x5c>
1a004a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004a5e:	2900      	cmp	r1, #0
1a004a60:	da09      	bge.n	1a004a76 <__smakebuf_r+0x2a>
1a004a62:	89a3      	ldrh	r3, [r4, #12]
1a004a64:	f013 0f80 	tst.w	r3, #128	; 0x80
1a004a68:	f04f 0500 	mov.w	r5, #0
1a004a6c:	bf14      	ite	ne
1a004a6e:	2740      	movne	r7, #64	; 0x40
1a004a70:	f44f 6780 	moveq.w	r7, #1024	; 0x400
1a004a74:	e00d      	b.n	1a004a92 <__smakebuf_r+0x46>
1a004a76:	aa01      	add	r2, sp, #4
1a004a78:	f7fe fc12 	bl	1a0032a0 <_fstat_r>
1a004a7c:	2800      	cmp	r0, #0
1a004a7e:	dbf0      	blt.n	1a004a62 <__smakebuf_r+0x16>
1a004a80:	9d02      	ldr	r5, [sp, #8]
1a004a82:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
1a004a86:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
1a004a8a:	424d      	negs	r5, r1
1a004a8c:	414d      	adcs	r5, r1
1a004a8e:	f44f 6780 	mov.w	r7, #1024	; 0x400
1a004a92:	4630      	mov	r0, r6
1a004a94:	4639      	mov	r1, r7
1a004a96:	f000 f86b 	bl	1a004b70 <_malloc_r>
1a004a9a:	b960      	cbnz	r0, 1a004ab6 <__smakebuf_r+0x6a>
1a004a9c:	89a3      	ldrh	r3, [r4, #12]
1a004a9e:	059a      	lsls	r2, r3, #22
1a004aa0:	d41d      	bmi.n	1a004ade <__smakebuf_r+0x92>
1a004aa2:	f043 0302 	orr.w	r3, r3, #2
1a004aa6:	81a3      	strh	r3, [r4, #12]
1a004aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004aac:	6023      	str	r3, [r4, #0]
1a004aae:	6123      	str	r3, [r4, #16]
1a004ab0:	2301      	movs	r3, #1
1a004ab2:	6163      	str	r3, [r4, #20]
1a004ab4:	e013      	b.n	1a004ade <__smakebuf_r+0x92>
1a004ab6:	4b0b      	ldr	r3, [pc, #44]	; (1a004ae4 <__smakebuf_r+0x98>)
1a004ab8:	62b3      	str	r3, [r6, #40]	; 0x28
1a004aba:	89a3      	ldrh	r3, [r4, #12]
1a004abc:	6020      	str	r0, [r4, #0]
1a004abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004ac2:	81a3      	strh	r3, [r4, #12]
1a004ac4:	6120      	str	r0, [r4, #16]
1a004ac6:	6167      	str	r7, [r4, #20]
1a004ac8:	b14d      	cbz	r5, 1a004ade <__smakebuf_r+0x92>
1a004aca:	4630      	mov	r0, r6
1a004acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004ad0:	f7fe fbec 	bl	1a0032ac <_isatty_r>
1a004ad4:	b118      	cbz	r0, 1a004ade <__smakebuf_r+0x92>
1a004ad6:	89a3      	ldrh	r3, [r4, #12]
1a004ad8:	f043 0301 	orr.w	r3, r3, #1
1a004adc:	81a3      	strh	r3, [r4, #12]
1a004ade:	b011      	add	sp, #68	; 0x44
1a004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a004ae2:	bf00      	nop
1a004ae4:	1a0048bd 	.word	0x1a0048bd

1a004ae8 <_free_r>:
1a004ae8:	b530      	push	{r4, r5, lr}
1a004aea:	2900      	cmp	r1, #0
1a004aec:	d03d      	beq.n	1a004b6a <_free_r+0x82>
1a004aee:	f851 2c04 	ldr.w	r2, [r1, #-4]
1a004af2:	1f0b      	subs	r3, r1, #4
1a004af4:	491d      	ldr	r1, [pc, #116]	; (1a004b6c <_free_r+0x84>)
1a004af6:	2a00      	cmp	r2, #0
1a004af8:	bfb8      	it	lt
1a004afa:	189b      	addlt	r3, r3, r2
1a004afc:	680a      	ldr	r2, [r1, #0]
1a004afe:	460c      	mov	r4, r1
1a004b00:	b912      	cbnz	r2, 1a004b08 <_free_r+0x20>
1a004b02:	605a      	str	r2, [r3, #4]
1a004b04:	600b      	str	r3, [r1, #0]
1a004b06:	bd30      	pop	{r4, r5, pc}
1a004b08:	4293      	cmp	r3, r2
1a004b0a:	d20d      	bcs.n	1a004b28 <_free_r+0x40>
1a004b0c:	6819      	ldr	r1, [r3, #0]
1a004b0e:	1858      	adds	r0, r3, r1
1a004b10:	4290      	cmp	r0, r2
1a004b12:	bf01      	itttt	eq
1a004b14:	585a      	ldreq	r2, [r3, r1]
1a004b16:	1852      	addeq	r2, r2, r1
1a004b18:	601a      	streq	r2, [r3, #0]
1a004b1a:	6842      	ldreq	r2, [r0, #4]
1a004b1c:	605a      	str	r2, [r3, #4]
1a004b1e:	6023      	str	r3, [r4, #0]
1a004b20:	bd30      	pop	{r4, r5, pc}
1a004b22:	4299      	cmp	r1, r3
1a004b24:	d803      	bhi.n	1a004b2e <_free_r+0x46>
1a004b26:	460a      	mov	r2, r1
1a004b28:	6851      	ldr	r1, [r2, #4]
1a004b2a:	2900      	cmp	r1, #0
1a004b2c:	d1f9      	bne.n	1a004b22 <_free_r+0x3a>
1a004b2e:	6814      	ldr	r4, [r2, #0]
1a004b30:	1915      	adds	r5, r2, r4
1a004b32:	429d      	cmp	r5, r3
1a004b34:	d10a      	bne.n	1a004b4c <_free_r+0x64>
1a004b36:	681b      	ldr	r3, [r3, #0]
1a004b38:	4423      	add	r3, r4
1a004b3a:	18d0      	adds	r0, r2, r3
1a004b3c:	4288      	cmp	r0, r1
1a004b3e:	6013      	str	r3, [r2, #0]
1a004b40:	d113      	bne.n	1a004b6a <_free_r+0x82>
1a004b42:	6808      	ldr	r0, [r1, #0]
1a004b44:	4403      	add	r3, r0
1a004b46:	6013      	str	r3, [r2, #0]
1a004b48:	684b      	ldr	r3, [r1, #4]
1a004b4a:	e00d      	b.n	1a004b68 <_free_r+0x80>
1a004b4c:	d902      	bls.n	1a004b54 <_free_r+0x6c>
1a004b4e:	230c      	movs	r3, #12
1a004b50:	6003      	str	r3, [r0, #0]
1a004b52:	bd30      	pop	{r4, r5, pc}
1a004b54:	681c      	ldr	r4, [r3, #0]
1a004b56:	1918      	adds	r0, r3, r4
1a004b58:	4288      	cmp	r0, r1
1a004b5a:	bf04      	itt	eq
1a004b5c:	6808      	ldreq	r0, [r1, #0]
1a004b5e:	6849      	ldreq	r1, [r1, #4]
1a004b60:	6059      	str	r1, [r3, #4]
1a004b62:	bf04      	itt	eq
1a004b64:	1900      	addeq	r0, r0, r4
1a004b66:	6018      	streq	r0, [r3, #0]
1a004b68:	6053      	str	r3, [r2, #4]
1a004b6a:	bd30      	pop	{r4, r5, pc}
1a004b6c:	10002be4 	.word	0x10002be4

1a004b70 <_malloc_r>:
1a004b70:	b570      	push	{r4, r5, r6, lr}
1a004b72:	1ccc      	adds	r4, r1, #3
1a004b74:	f024 0403 	bic.w	r4, r4, #3
1a004b78:	3408      	adds	r4, #8
1a004b7a:	2c0c      	cmp	r4, #12
1a004b7c:	bf38      	it	cc
1a004b7e:	240c      	movcc	r4, #12
1a004b80:	2c00      	cmp	r4, #0
1a004b82:	4606      	mov	r6, r0
1a004b84:	da03      	bge.n	1a004b8e <_malloc_r+0x1e>
1a004b86:	230c      	movs	r3, #12
1a004b88:	6033      	str	r3, [r6, #0]
1a004b8a:	2000      	movs	r0, #0
1a004b8c:	bd70      	pop	{r4, r5, r6, pc}
1a004b8e:	428c      	cmp	r4, r1
1a004b90:	d3f9      	bcc.n	1a004b86 <_malloc_r+0x16>
1a004b92:	4a20      	ldr	r2, [pc, #128]	; (1a004c14 <_malloc_r+0xa4>)
1a004b94:	6813      	ldr	r3, [r2, #0]
1a004b96:	4610      	mov	r0, r2
1a004b98:	4619      	mov	r1, r3
1a004b9a:	b1a1      	cbz	r1, 1a004bc6 <_malloc_r+0x56>
1a004b9c:	680a      	ldr	r2, [r1, #0]
1a004b9e:	1b12      	subs	r2, r2, r4
1a004ba0:	d40e      	bmi.n	1a004bc0 <_malloc_r+0x50>
1a004ba2:	2a0b      	cmp	r2, #11
1a004ba4:	d903      	bls.n	1a004bae <_malloc_r+0x3e>
1a004ba6:	600a      	str	r2, [r1, #0]
1a004ba8:	188b      	adds	r3, r1, r2
1a004baa:	508c      	str	r4, [r1, r2]
1a004bac:	e01f      	b.n	1a004bee <_malloc_r+0x7e>
1a004bae:	428b      	cmp	r3, r1
1a004bb0:	bf0d      	iteet	eq
1a004bb2:	685a      	ldreq	r2, [r3, #4]
1a004bb4:	684a      	ldrne	r2, [r1, #4]
1a004bb6:	605a      	strne	r2, [r3, #4]
1a004bb8:	6002      	streq	r2, [r0, #0]
1a004bba:	bf18      	it	ne
1a004bbc:	460b      	movne	r3, r1
1a004bbe:	e016      	b.n	1a004bee <_malloc_r+0x7e>
1a004bc0:	460b      	mov	r3, r1
1a004bc2:	6849      	ldr	r1, [r1, #4]
1a004bc4:	e7e9      	b.n	1a004b9a <_malloc_r+0x2a>
1a004bc6:	4d14      	ldr	r5, [pc, #80]	; (1a004c18 <_malloc_r+0xa8>)
1a004bc8:	682b      	ldr	r3, [r5, #0]
1a004bca:	b91b      	cbnz	r3, 1a004bd4 <_malloc_r+0x64>
1a004bcc:	4630      	mov	r0, r6
1a004bce:	f7fe fba3 	bl	1a003318 <_sbrk_r>
1a004bd2:	6028      	str	r0, [r5, #0]
1a004bd4:	4630      	mov	r0, r6
1a004bd6:	4621      	mov	r1, r4
1a004bd8:	f7fe fb9e 	bl	1a003318 <_sbrk_r>
1a004bdc:	1c42      	adds	r2, r0, #1
1a004bde:	4603      	mov	r3, r0
1a004be0:	d0d1      	beq.n	1a004b86 <_malloc_r+0x16>
1a004be2:	1cc5      	adds	r5, r0, #3
1a004be4:	f025 0503 	bic.w	r5, r5, #3
1a004be8:	4285      	cmp	r5, r0
1a004bea:	d10a      	bne.n	1a004c02 <_malloc_r+0x92>
1a004bec:	601c      	str	r4, [r3, #0]
1a004bee:	f103 000b 	add.w	r0, r3, #11
1a004bf2:	1d1a      	adds	r2, r3, #4
1a004bf4:	f020 0007 	bic.w	r0, r0, #7
1a004bf8:	1a82      	subs	r2, r0, r2
1a004bfa:	d00a      	beq.n	1a004c12 <_malloc_r+0xa2>
1a004bfc:	4251      	negs	r1, r2
1a004bfe:	5099      	str	r1, [r3, r2]
1a004c00:	bd70      	pop	{r4, r5, r6, pc}
1a004c02:	4630      	mov	r0, r6
1a004c04:	1ae9      	subs	r1, r5, r3
1a004c06:	f7fe fb87 	bl	1a003318 <_sbrk_r>
1a004c0a:	3001      	adds	r0, #1
1a004c0c:	d0bb      	beq.n	1a004b86 <_malloc_r+0x16>
1a004c0e:	462b      	mov	r3, r5
1a004c10:	e7ec      	b.n	1a004bec <_malloc_r+0x7c>
1a004c12:	bd70      	pop	{r4, r5, r6, pc}
1a004c14:	10002be4 	.word	0x10002be4
1a004c18:	10002be0 	.word	0x10002be0

1a004c1c <__sfputc_r>:
1a004c1c:	6893      	ldr	r3, [r2, #8]
1a004c1e:	3b01      	subs	r3, #1
1a004c20:	2b00      	cmp	r3, #0
1a004c22:	b510      	push	{r4, lr}
1a004c24:	6093      	str	r3, [r2, #8]
1a004c26:	da09      	bge.n	1a004c3c <__sfputc_r+0x20>
1a004c28:	6994      	ldr	r4, [r2, #24]
1a004c2a:	42a3      	cmp	r3, r4
1a004c2c:	db02      	blt.n	1a004c34 <__sfputc_r+0x18>
1a004c2e:	b2cb      	uxtb	r3, r1
1a004c30:	2b0a      	cmp	r3, #10
1a004c32:	d103      	bne.n	1a004c3c <__sfputc_r+0x20>
1a004c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004c38:	f7ff bcd2 	b.w	1a0045e0 <__swbuf_r>
1a004c3c:	6813      	ldr	r3, [r2, #0]
1a004c3e:	1c58      	adds	r0, r3, #1
1a004c40:	6010      	str	r0, [r2, #0]
1a004c42:	7019      	strb	r1, [r3, #0]
1a004c44:	b2c8      	uxtb	r0, r1
1a004c46:	bd10      	pop	{r4, pc}

1a004c48 <__sfputs_r>:
1a004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004c4a:	4606      	mov	r6, r0
1a004c4c:	460f      	mov	r7, r1
1a004c4e:	4614      	mov	r4, r2
1a004c50:	18d5      	adds	r5, r2, r3
1a004c52:	42ac      	cmp	r4, r5
1a004c54:	d008      	beq.n	1a004c68 <__sfputs_r+0x20>
1a004c56:	4630      	mov	r0, r6
1a004c58:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004c5c:	463a      	mov	r2, r7
1a004c5e:	f7ff ffdd 	bl	1a004c1c <__sfputc_r>
1a004c62:	1c43      	adds	r3, r0, #1
1a004c64:	d1f5      	bne.n	1a004c52 <__sfputs_r+0xa>
1a004c66:	e000      	b.n	1a004c6a <__sfputs_r+0x22>
1a004c68:	2000      	movs	r0, #0
1a004c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a004c6c <_vfiprintf_r>:
1a004c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004c70:	b09d      	sub	sp, #116	; 0x74
1a004c72:	460d      	mov	r5, r1
1a004c74:	4690      	mov	r8, r2
1a004c76:	9303      	str	r3, [sp, #12]
1a004c78:	4606      	mov	r6, r0
1a004c7a:	b118      	cbz	r0, 1a004c84 <_vfiprintf_r+0x18>
1a004c7c:	6983      	ldr	r3, [r0, #24]
1a004c7e:	b90b      	cbnz	r3, 1a004c84 <_vfiprintf_r+0x18>
1a004c80:	f7ff fe5c 	bl	1a00493c <__sinit>
1a004c84:	4b75      	ldr	r3, [pc, #468]	; (1a004e5c <_vfiprintf_r+0x1f0>)
1a004c86:	429d      	cmp	r5, r3
1a004c88:	d101      	bne.n	1a004c8e <_vfiprintf_r+0x22>
1a004c8a:	6875      	ldr	r5, [r6, #4]
1a004c8c:	e008      	b.n	1a004ca0 <_vfiprintf_r+0x34>
1a004c8e:	4b74      	ldr	r3, [pc, #464]	; (1a004e60 <_vfiprintf_r+0x1f4>)
1a004c90:	429d      	cmp	r5, r3
1a004c92:	d101      	bne.n	1a004c98 <_vfiprintf_r+0x2c>
1a004c94:	68b5      	ldr	r5, [r6, #8]
1a004c96:	e003      	b.n	1a004ca0 <_vfiprintf_r+0x34>
1a004c98:	4b72      	ldr	r3, [pc, #456]	; (1a004e64 <_vfiprintf_r+0x1f8>)
1a004c9a:	429d      	cmp	r5, r3
1a004c9c:	bf08      	it	eq
1a004c9e:	68f5      	ldreq	r5, [r6, #12]
1a004ca0:	89ab      	ldrh	r3, [r5, #12]
1a004ca2:	071c      	lsls	r4, r3, #28
1a004ca4:	d50a      	bpl.n	1a004cbc <_vfiprintf_r+0x50>
1a004ca6:	692b      	ldr	r3, [r5, #16]
1a004ca8:	b143      	cbz	r3, 1a004cbc <_vfiprintf_r+0x50>
1a004caa:	2300      	movs	r3, #0
1a004cac:	9309      	str	r3, [sp, #36]	; 0x24
1a004cae:	2320      	movs	r3, #32
1a004cb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004cb4:	2330      	movs	r3, #48	; 0x30
1a004cb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004cba:	e041      	b.n	1a004d40 <_vfiprintf_r+0xd4>
1a004cbc:	4630      	mov	r0, r6
1a004cbe:	4629      	mov	r1, r5
1a004cc0:	f7ff fce2 	bl	1a004688 <__swsetup_r>
1a004cc4:	2800      	cmp	r0, #0
1a004cc6:	d0f0      	beq.n	1a004caa <_vfiprintf_r+0x3e>
1a004cc8:	f04f 30ff 	mov.w	r0, #4294967295
1a004ccc:	e0c2      	b.n	1a004e54 <_vfiprintf_r+0x1e8>
1a004cce:	9a03      	ldr	r2, [sp, #12]
1a004cd0:	1d11      	adds	r1, r2, #4
1a004cd2:	6812      	ldr	r2, [r2, #0]
1a004cd4:	9103      	str	r1, [sp, #12]
1a004cd6:	2a00      	cmp	r2, #0
1a004cd8:	bfbb      	ittet	lt
1a004cda:	4252      	neglt	r2, r2
1a004cdc:	f043 0302 	orrlt.w	r3, r3, #2
1a004ce0:	9207      	strge	r2, [sp, #28]
1a004ce2:	9207      	strlt	r2, [sp, #28]
1a004ce4:	bfb8      	it	lt
1a004ce6:	9304      	strlt	r3, [sp, #16]
1a004ce8:	3401      	adds	r4, #1
1a004cea:	7823      	ldrb	r3, [r4, #0]
1a004cec:	2b2e      	cmp	r3, #46	; 0x2e
1a004cee:	d07b      	beq.n	1a004de8 <_vfiprintf_r+0x17c>
1a004cf0:	f8df 8180 	ldr.w	r8, [pc, #384]	; 1a004e74 <_vfiprintf_r+0x208>
1a004cf4:	7821      	ldrb	r1, [r4, #0]
1a004cf6:	4640      	mov	r0, r8
1a004cf8:	2203      	movs	r2, #3
1a004cfa:	f000 fa98 	bl	1a00522e <memchr>
1a004cfe:	b138      	cbz	r0, 1a004d10 <_vfiprintf_r+0xa4>
1a004d00:	9a04      	ldr	r2, [sp, #16]
1a004d02:	ebc8 0000 	rsb	r0, r8, r0
1a004d06:	2340      	movs	r3, #64	; 0x40
1a004d08:	4083      	lsls	r3, r0
1a004d0a:	4313      	orrs	r3, r2
1a004d0c:	9304      	str	r3, [sp, #16]
1a004d0e:	3401      	adds	r4, #1
1a004d10:	7821      	ldrb	r1, [r4, #0]
1a004d12:	4855      	ldr	r0, [pc, #340]	; (1a004e68 <_vfiprintf_r+0x1fc>)
1a004d14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004d18:	2206      	movs	r2, #6
1a004d1a:	f104 0801 	add.w	r8, r4, #1
1a004d1e:	f000 fa86 	bl	1a00522e <memchr>
1a004d22:	2800      	cmp	r0, #0
1a004d24:	f000 8085 	beq.w	1a004e32 <_vfiprintf_r+0x1c6>
1a004d28:	4b50      	ldr	r3, [pc, #320]	; (1a004e6c <_vfiprintf_r+0x200>)
1a004d2a:	2b00      	cmp	r3, #0
1a004d2c:	d178      	bne.n	1a004e20 <_vfiprintf_r+0x1b4>
1a004d2e:	9b03      	ldr	r3, [sp, #12]
1a004d30:	3307      	adds	r3, #7
1a004d32:	f023 0307 	bic.w	r3, r3, #7
1a004d36:	3308      	adds	r3, #8
1a004d38:	9303      	str	r3, [sp, #12]
1a004d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004d3c:	443b      	add	r3, r7
1a004d3e:	9309      	str	r3, [sp, #36]	; 0x24
1a004d40:	4643      	mov	r3, r8
1a004d42:	461c      	mov	r4, r3
1a004d44:	f813 2b01 	ldrb.w	r2, [r3], #1
1a004d48:	b91a      	cbnz	r2, 1a004d52 <_vfiprintf_r+0xe6>
1a004d4a:	ebb4 0908 	subs.w	r9, r4, r8
1a004d4e:	d00e      	beq.n	1a004d6e <_vfiprintf_r+0x102>
1a004d50:	e002      	b.n	1a004d58 <_vfiprintf_r+0xec>
1a004d52:	2a25      	cmp	r2, #37	; 0x25
1a004d54:	d1f5      	bne.n	1a004d42 <_vfiprintf_r+0xd6>
1a004d56:	e7f8      	b.n	1a004d4a <_vfiprintf_r+0xde>
1a004d58:	4630      	mov	r0, r6
1a004d5a:	4629      	mov	r1, r5
1a004d5c:	4642      	mov	r2, r8
1a004d5e:	464b      	mov	r3, r9
1a004d60:	f7ff ff72 	bl	1a004c48 <__sfputs_r>
1a004d64:	3001      	adds	r0, #1
1a004d66:	d070      	beq.n	1a004e4a <_vfiprintf_r+0x1de>
1a004d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004d6a:	444b      	add	r3, r9
1a004d6c:	9309      	str	r3, [sp, #36]	; 0x24
1a004d6e:	7823      	ldrb	r3, [r4, #0]
1a004d70:	2b00      	cmp	r3, #0
1a004d72:	d06a      	beq.n	1a004e4a <_vfiprintf_r+0x1de>
1a004d74:	2300      	movs	r3, #0
1a004d76:	f04f 32ff 	mov.w	r2, #4294967295
1a004d7a:	9304      	str	r3, [sp, #16]
1a004d7c:	9307      	str	r3, [sp, #28]
1a004d7e:	9205      	str	r2, [sp, #20]
1a004d80:	9306      	str	r3, [sp, #24]
1a004d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004d86:	931a      	str	r3, [sp, #104]	; 0x68
1a004d88:	f104 0801 	add.w	r8, r4, #1
1a004d8c:	4644      	mov	r4, r8
1a004d8e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1a004e78 <_vfiprintf_r+0x20c>
1a004d92:	7821      	ldrb	r1, [r4, #0]
1a004d94:	4648      	mov	r0, r9
1a004d96:	2205      	movs	r2, #5
1a004d98:	f000 fa49 	bl	1a00522e <memchr>
1a004d9c:	f108 0801 	add.w	r8, r8, #1
1a004da0:	9b04      	ldr	r3, [sp, #16]
1a004da2:	b130      	cbz	r0, 1a004db2 <_vfiprintf_r+0x146>
1a004da4:	ebc9 0000 	rsb	r0, r9, r0
1a004da8:	2201      	movs	r2, #1
1a004daa:	4082      	lsls	r2, r0
1a004dac:	4313      	orrs	r3, r2
1a004dae:	9304      	str	r3, [sp, #16]
1a004db0:	e7ec      	b.n	1a004d8c <_vfiprintf_r+0x120>
1a004db2:	06d8      	lsls	r0, r3, #27
1a004db4:	bf44      	itt	mi
1a004db6:	2220      	movmi	r2, #32
1a004db8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004dbc:	0719      	lsls	r1, r3, #28
1a004dbe:	bf44      	itt	mi
1a004dc0:	222b      	movmi	r2, #43	; 0x2b
1a004dc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004dc6:	7822      	ldrb	r2, [r4, #0]
1a004dc8:	2a2a      	cmp	r2, #42	; 0x2a
1a004dca:	d080      	beq.n	1a004cce <_vfiprintf_r+0x62>
1a004dcc:	9907      	ldr	r1, [sp, #28]
1a004dce:	4623      	mov	r3, r4
1a004dd0:	461c      	mov	r4, r3
1a004dd2:	3301      	adds	r3, #1
1a004dd4:	7822      	ldrb	r2, [r4, #0]
1a004dd6:	3a30      	subs	r2, #48	; 0x30
1a004dd8:	2a09      	cmp	r2, #9
1a004dda:	d803      	bhi.n	1a004de4 <_vfiprintf_r+0x178>
1a004ddc:	200a      	movs	r0, #10
1a004dde:	fb00 2101 	mla	r1, r0, r1, r2
1a004de2:	e7f5      	b.n	1a004dd0 <_vfiprintf_r+0x164>
1a004de4:	9107      	str	r1, [sp, #28]
1a004de6:	e780      	b.n	1a004cea <_vfiprintf_r+0x7e>
1a004de8:	7863      	ldrb	r3, [r4, #1]
1a004dea:	2b2a      	cmp	r3, #42	; 0x2a
1a004dec:	d10a      	bne.n	1a004e04 <_vfiprintf_r+0x198>
1a004dee:	9b03      	ldr	r3, [sp, #12]
1a004df0:	1d1a      	adds	r2, r3, #4
1a004df2:	681b      	ldr	r3, [r3, #0]
1a004df4:	9203      	str	r2, [sp, #12]
1a004df6:	2b00      	cmp	r3, #0
1a004df8:	bfb8      	it	lt
1a004dfa:	f04f 33ff 	movlt.w	r3, #4294967295
1a004dfe:	3402      	adds	r4, #2
1a004e00:	9305      	str	r3, [sp, #20]
1a004e02:	e775      	b.n	1a004cf0 <_vfiprintf_r+0x84>
1a004e04:	1c61      	adds	r1, r4, #1
1a004e06:	2200      	movs	r2, #0
1a004e08:	460c      	mov	r4, r1
1a004e0a:	3101      	adds	r1, #1
1a004e0c:	7823      	ldrb	r3, [r4, #0]
1a004e0e:	3b30      	subs	r3, #48	; 0x30
1a004e10:	2b09      	cmp	r3, #9
1a004e12:	d803      	bhi.n	1a004e1c <_vfiprintf_r+0x1b0>
1a004e14:	200a      	movs	r0, #10
1a004e16:	fb00 3202 	mla	r2, r0, r2, r3
1a004e1a:	e7f5      	b.n	1a004e08 <_vfiprintf_r+0x19c>
1a004e1c:	9205      	str	r2, [sp, #20]
1a004e1e:	e767      	b.n	1a004cf0 <_vfiprintf_r+0x84>
1a004e20:	ab03      	add	r3, sp, #12
1a004e22:	9300      	str	r3, [sp, #0]
1a004e24:	4630      	mov	r0, r6
1a004e26:	a904      	add	r1, sp, #16
1a004e28:	462a      	mov	r2, r5
1a004e2a:	4b11      	ldr	r3, [pc, #68]	; (1a004e70 <_vfiprintf_r+0x204>)
1a004e2c:	f3af 8000 	nop.w
1a004e30:	e007      	b.n	1a004e42 <_vfiprintf_r+0x1d6>
1a004e32:	ab03      	add	r3, sp, #12
1a004e34:	9300      	str	r3, [sp, #0]
1a004e36:	4630      	mov	r0, r6
1a004e38:	a904      	add	r1, sp, #16
1a004e3a:	462a      	mov	r2, r5
1a004e3c:	4b0c      	ldr	r3, [pc, #48]	; (1a004e70 <_vfiprintf_r+0x204>)
1a004e3e:	f000 f893 	bl	1a004f68 <_printf_i>
1a004e42:	1c42      	adds	r2, r0, #1
1a004e44:	4607      	mov	r7, r0
1a004e46:	f47f af78 	bne.w	1a004d3a <_vfiprintf_r+0xce>
1a004e4a:	89ab      	ldrh	r3, [r5, #12]
1a004e4c:	065b      	lsls	r3, r3, #25
1a004e4e:	f53f af3b 	bmi.w	1a004cc8 <_vfiprintf_r+0x5c>
1a004e52:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004e54:	b01d      	add	sp, #116	; 0x74
1a004e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004e5a:	bf00      	nop
1a004e5c:	1a0055dc 	.word	0x1a0055dc
1a004e60:	1a0055fc 	.word	0x1a0055fc
1a004e64:	1a00561c 	.word	0x1a00561c
1a004e68:	1a00564e 	.word	0x1a00564e
1a004e6c:	00000000 	.word	0x00000000
1a004e70:	1a004c49 	.word	0x1a004c49
1a004e74:	1a00564a 	.word	0x1a00564a
1a004e78:	1a005644 	.word	0x1a005644

1a004e7c <_printf_common>:
1a004e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004e80:	4691      	mov	r9, r2
1a004e82:	461f      	mov	r7, r3
1a004e84:	688a      	ldr	r2, [r1, #8]
1a004e86:	690b      	ldr	r3, [r1, #16]
1a004e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004e8c:	4293      	cmp	r3, r2
1a004e8e:	bfb8      	it	lt
1a004e90:	4613      	movlt	r3, r2
1a004e92:	f8c9 3000 	str.w	r3, [r9]
1a004e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a004e9a:	4606      	mov	r6, r0
1a004e9c:	460c      	mov	r4, r1
1a004e9e:	b112      	cbz	r2, 1a004ea6 <_printf_common+0x2a>
1a004ea0:	3301      	adds	r3, #1
1a004ea2:	f8c9 3000 	str.w	r3, [r9]
1a004ea6:	6823      	ldr	r3, [r4, #0]
1a004ea8:	0699      	lsls	r1, r3, #26
1a004eaa:	bf42      	ittt	mi
1a004eac:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004eb0:	3302      	addmi	r3, #2
1a004eb2:	f8c9 3000 	strmi.w	r3, [r9]
1a004eb6:	6825      	ldr	r5, [r4, #0]
1a004eb8:	f015 0506 	ands.w	r5, r5, #6
1a004ebc:	d01c      	beq.n	1a004ef8 <_printf_common+0x7c>
1a004ebe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004ec2:	6822      	ldr	r2, [r4, #0]
1a004ec4:	3300      	adds	r3, #0
1a004ec6:	bf18      	it	ne
1a004ec8:	2301      	movne	r3, #1
1a004eca:	0692      	lsls	r2, r2, #26
1a004ecc:	d51f      	bpl.n	1a004f0e <_printf_common+0x92>
1a004ece:	18e1      	adds	r1, r4, r3
1a004ed0:	1c5a      	adds	r2, r3, #1
1a004ed2:	2030      	movs	r0, #48	; 0x30
1a004ed4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004ed8:	4422      	add	r2, r4
1a004eda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a004ede:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004ee2:	3302      	adds	r3, #2
1a004ee4:	e013      	b.n	1a004f0e <_printf_common+0x92>
1a004ee6:	4630      	mov	r0, r6
1a004ee8:	4639      	mov	r1, r7
1a004eea:	f104 0219 	add.w	r2, r4, #25
1a004eee:	2301      	movs	r3, #1
1a004ef0:	47c0      	blx	r8
1a004ef2:	3001      	adds	r0, #1
1a004ef4:	d007      	beq.n	1a004f06 <_printf_common+0x8a>
1a004ef6:	3501      	adds	r5, #1
1a004ef8:	68e3      	ldr	r3, [r4, #12]
1a004efa:	f8d9 2000 	ldr.w	r2, [r9]
1a004efe:	1a9b      	subs	r3, r3, r2
1a004f00:	429d      	cmp	r5, r3
1a004f02:	dbf0      	blt.n	1a004ee6 <_printf_common+0x6a>
1a004f04:	e7db      	b.n	1a004ebe <_printf_common+0x42>
1a004f06:	f04f 30ff 	mov.w	r0, #4294967295
1a004f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004f0e:	4630      	mov	r0, r6
1a004f10:	4639      	mov	r1, r7
1a004f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004f16:	47c0      	blx	r8
1a004f18:	3001      	adds	r0, #1
1a004f1a:	d0f4      	beq.n	1a004f06 <_printf_common+0x8a>
1a004f1c:	6822      	ldr	r2, [r4, #0]
1a004f1e:	f8d9 5000 	ldr.w	r5, [r9]
1a004f22:	68e3      	ldr	r3, [r4, #12]
1a004f24:	f002 0206 	and.w	r2, r2, #6
1a004f28:	2a04      	cmp	r2, #4
1a004f2a:	bf08      	it	eq
1a004f2c:	1b5d      	subeq	r5, r3, r5
1a004f2e:	6922      	ldr	r2, [r4, #16]
1a004f30:	68a3      	ldr	r3, [r4, #8]
1a004f32:	bf0c      	ite	eq
1a004f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004f38:	2500      	movne	r5, #0
1a004f3a:	4293      	cmp	r3, r2
1a004f3c:	bfc4      	itt	gt
1a004f3e:	1a9b      	subgt	r3, r3, r2
1a004f40:	18ed      	addgt	r5, r5, r3
1a004f42:	f04f 0900 	mov.w	r9, #0
1a004f46:	45a9      	cmp	r9, r5
1a004f48:	da0a      	bge.n	1a004f60 <_printf_common+0xe4>
1a004f4a:	4630      	mov	r0, r6
1a004f4c:	4639      	mov	r1, r7
1a004f4e:	f104 021a 	add.w	r2, r4, #26
1a004f52:	2301      	movs	r3, #1
1a004f54:	47c0      	blx	r8
1a004f56:	3001      	adds	r0, #1
1a004f58:	d0d5      	beq.n	1a004f06 <_printf_common+0x8a>
1a004f5a:	f109 0901 	add.w	r9, r9, #1
1a004f5e:	e7f2      	b.n	1a004f46 <_printf_common+0xca>
1a004f60:	2000      	movs	r0, #0
1a004f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

1a004f68 <_printf_i>:
1a004f68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
1a004f6c:	460c      	mov	r4, r1
1a004f6e:	4617      	mov	r7, r2
1a004f70:	7e22      	ldrb	r2, [r4, #24]
1a004f72:	2a6e      	cmp	r2, #110	; 0x6e
1a004f74:	4698      	mov	r8, r3
1a004f76:	4606      	mov	r6, r0
1a004f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004f7a:	f101 0143 	add.w	r1, r1, #67	; 0x43
1a004f7e:	f000 80af 	beq.w	1a0050e0 <_printf_i+0x178>
1a004f82:	d812      	bhi.n	1a004faa <_printf_i+0x42>
1a004f84:	2a63      	cmp	r2, #99	; 0x63
1a004f86:	d023      	beq.n	1a004fd0 <_printf_i+0x68>
1a004f88:	d80a      	bhi.n	1a004fa0 <_printf_i+0x38>
1a004f8a:	2a00      	cmp	r2, #0
1a004f8c:	f000 80bc 	beq.w	1a005108 <_printf_i+0x1a0>
1a004f90:	2a58      	cmp	r2, #88	; 0x58
1a004f92:	f040 80cb 	bne.w	1a00512c <_printf_i+0x1c4>
1a004f96:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a004f9a:	f8df e204 	ldr.w	lr, [pc, #516]	; 1a0051a0 <_printf_i+0x238>
1a004f9e:	e057      	b.n	1a005050 <_printf_i+0xe8>
1a004fa0:	2a64      	cmp	r2, #100	; 0x64
1a004fa2:	d01e      	beq.n	1a004fe2 <_printf_i+0x7a>
1a004fa4:	2a69      	cmp	r2, #105	; 0x69
1a004fa6:	d01c      	beq.n	1a004fe2 <_printf_i+0x7a>
1a004fa8:	e0c0      	b.n	1a00512c <_printf_i+0x1c4>
1a004faa:	2a73      	cmp	r2, #115	; 0x73
1a004fac:	f000 80b0 	beq.w	1a005110 <_printf_i+0x1a8>
1a004fb0:	d809      	bhi.n	1a004fc6 <_printf_i+0x5e>
1a004fb2:	2a6f      	cmp	r2, #111	; 0x6f
1a004fb4:	d02e      	beq.n	1a005014 <_printf_i+0xac>
1a004fb6:	2a70      	cmp	r2, #112	; 0x70
1a004fb8:	f040 80b8 	bne.w	1a00512c <_printf_i+0x1c4>
1a004fbc:	6822      	ldr	r2, [r4, #0]
1a004fbe:	f042 0220 	orr.w	r2, r2, #32
1a004fc2:	6022      	str	r2, [r4, #0]
1a004fc4:	e03f      	b.n	1a005046 <_printf_i+0xde>
1a004fc6:	2a75      	cmp	r2, #117	; 0x75
1a004fc8:	d024      	beq.n	1a005014 <_printf_i+0xac>
1a004fca:	2a78      	cmp	r2, #120	; 0x78
1a004fcc:	d03b      	beq.n	1a005046 <_printf_i+0xde>
1a004fce:	e0ad      	b.n	1a00512c <_printf_i+0x1c4>
1a004fd0:	681a      	ldr	r2, [r3, #0]
1a004fd2:	1d11      	adds	r1, r2, #4
1a004fd4:	6019      	str	r1, [r3, #0]
1a004fd6:	6813      	ldr	r3, [r2, #0]
1a004fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004fe0:	e0a8      	b.n	1a005134 <_printf_i+0x1cc>
1a004fe2:	6820      	ldr	r0, [r4, #0]
1a004fe4:	681a      	ldr	r2, [r3, #0]
1a004fe6:	f010 0f80 	tst.w	r0, #128	; 0x80
1a004fea:	d002      	beq.n	1a004ff2 <_printf_i+0x8a>
1a004fec:	1d10      	adds	r0, r2, #4
1a004fee:	6018      	str	r0, [r3, #0]
1a004ff0:	e008      	b.n	1a005004 <_printf_i+0x9c>
1a004ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
1a004ff6:	f102 0004 	add.w	r0, r2, #4
1a004ffa:	6018      	str	r0, [r3, #0]
1a004ffc:	d002      	beq.n	1a005004 <_printf_i+0x9c>
1a004ffe:	f9b2 3000 	ldrsh.w	r3, [r2]
1a005002:	e000      	b.n	1a005006 <_printf_i+0x9e>
1a005004:	6813      	ldr	r3, [r2, #0]
1a005006:	2b00      	cmp	r3, #0
1a005008:	da3e      	bge.n	1a005088 <_printf_i+0x120>
1a00500a:	222d      	movs	r2, #45	; 0x2d
1a00500c:	425b      	negs	r3, r3
1a00500e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a005012:	e039      	b.n	1a005088 <_printf_i+0x120>
1a005014:	6820      	ldr	r0, [r4, #0]
1a005016:	681a      	ldr	r2, [r3, #0]
1a005018:	f010 0f80 	tst.w	r0, #128	; 0x80
1a00501c:	d002      	beq.n	1a005024 <_printf_i+0xbc>
1a00501e:	1d10      	adds	r0, r2, #4
1a005020:	6018      	str	r0, [r3, #0]
1a005022:	e007      	b.n	1a005034 <_printf_i+0xcc>
1a005024:	f010 0f40 	tst.w	r0, #64	; 0x40
1a005028:	f102 0004 	add.w	r0, r2, #4
1a00502c:	6018      	str	r0, [r3, #0]
1a00502e:	d001      	beq.n	1a005034 <_printf_i+0xcc>
1a005030:	8813      	ldrh	r3, [r2, #0]
1a005032:	e000      	b.n	1a005036 <_printf_i+0xce>
1a005034:	6813      	ldr	r3, [r2, #0]
1a005036:	7e22      	ldrb	r2, [r4, #24]
1a005038:	f8df e164 	ldr.w	lr, [pc, #356]	; 1a0051a0 <_printf_i+0x238>
1a00503c:	2a6f      	cmp	r2, #111	; 0x6f
1a00503e:	bf0c      	ite	eq
1a005040:	2208      	moveq	r2, #8
1a005042:	220a      	movne	r2, #10
1a005044:	e01c      	b.n	1a005080 <_printf_i+0x118>
1a005046:	2278      	movs	r2, #120	; 0x78
1a005048:	f8df e158 	ldr.w	lr, [pc, #344]	; 1a0051a4 <_printf_i+0x23c>
1a00504c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a005050:	6822      	ldr	r2, [r4, #0]
1a005052:	6818      	ldr	r0, [r3, #0]
1a005054:	f012 0f80 	tst.w	r2, #128	; 0x80
1a005058:	f100 0504 	add.w	r5, r0, #4
1a00505c:	601d      	str	r5, [r3, #0]
1a00505e:	d103      	bne.n	1a005068 <_printf_i+0x100>
1a005060:	0655      	lsls	r5, r2, #25
1a005062:	d501      	bpl.n	1a005068 <_printf_i+0x100>
1a005064:	8803      	ldrh	r3, [r0, #0]
1a005066:	e000      	b.n	1a00506a <_printf_i+0x102>
1a005068:	6803      	ldr	r3, [r0, #0]
1a00506a:	07d0      	lsls	r0, r2, #31
1a00506c:	bf44      	itt	mi
1a00506e:	f042 0220 	orrmi.w	r2, r2, #32
1a005072:	6022      	strmi	r2, [r4, #0]
1a005074:	b91b      	cbnz	r3, 1a00507e <_printf_i+0x116>
1a005076:	6822      	ldr	r2, [r4, #0]
1a005078:	f022 0220 	bic.w	r2, r2, #32
1a00507c:	6022      	str	r2, [r4, #0]
1a00507e:	2210      	movs	r2, #16
1a005080:	2000      	movs	r0, #0
1a005082:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
1a005086:	e002      	b.n	1a00508e <_printf_i+0x126>
1a005088:	f8df e114 	ldr.w	lr, [pc, #276]	; 1a0051a0 <_printf_i+0x238>
1a00508c:	220a      	movs	r2, #10
1a00508e:	6865      	ldr	r5, [r4, #4]
1a005090:	60a5      	str	r5, [r4, #8]
1a005092:	2d00      	cmp	r5, #0
1a005094:	bfa2      	ittt	ge
1a005096:	6820      	ldrge	r0, [r4, #0]
1a005098:	f020 0004 	bicge.w	r0, r0, #4
1a00509c:	6020      	strge	r0, [r4, #0]
1a00509e:	b903      	cbnz	r3, 1a0050a2 <_printf_i+0x13a>
1a0050a0:	b165      	cbz	r5, 1a0050bc <_printf_i+0x154>
1a0050a2:	460d      	mov	r5, r1
1a0050a4:	fbb3 f0f2 	udiv	r0, r3, r2
1a0050a8:	fb02 3310 	mls	r3, r2, r0, r3
1a0050ac:	f81e 3003 	ldrb.w	r3, [lr, r3]
1a0050b0:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a0050b4:	4603      	mov	r3, r0
1a0050b6:	2800      	cmp	r0, #0
1a0050b8:	d1f4      	bne.n	1a0050a4 <_printf_i+0x13c>
1a0050ba:	e000      	b.n	1a0050be <_printf_i+0x156>
1a0050bc:	460d      	mov	r5, r1
1a0050be:	2a08      	cmp	r2, #8
1a0050c0:	d10b      	bne.n	1a0050da <_printf_i+0x172>
1a0050c2:	6823      	ldr	r3, [r4, #0]
1a0050c4:	07da      	lsls	r2, r3, #31
1a0050c6:	d508      	bpl.n	1a0050da <_printf_i+0x172>
1a0050c8:	6923      	ldr	r3, [r4, #16]
1a0050ca:	6862      	ldr	r2, [r4, #4]
1a0050cc:	429a      	cmp	r2, r3
1a0050ce:	bfde      	ittt	le
1a0050d0:	2330      	movle	r3, #48	; 0x30
1a0050d2:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0050d6:	f105 35ff 	addle.w	r5, r5, #4294967295
1a0050da:	1b49      	subs	r1, r1, r5
1a0050dc:	6121      	str	r1, [r4, #16]
1a0050de:	e02e      	b.n	1a00513e <_printf_i+0x1d6>
1a0050e0:	6825      	ldr	r5, [r4, #0]
1a0050e2:	681a      	ldr	r2, [r3, #0]
1a0050e4:	6960      	ldr	r0, [r4, #20]
1a0050e6:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0050ea:	d003      	beq.n	1a0050f4 <_printf_i+0x18c>
1a0050ec:	1d15      	adds	r5, r2, #4
1a0050ee:	601d      	str	r5, [r3, #0]
1a0050f0:	6813      	ldr	r3, [r2, #0]
1a0050f2:	e008      	b.n	1a005106 <_printf_i+0x19e>
1a0050f4:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0050f8:	f102 0504 	add.w	r5, r2, #4
1a0050fc:	601d      	str	r5, [r3, #0]
1a0050fe:	6813      	ldr	r3, [r2, #0]
1a005100:	d001      	beq.n	1a005106 <_printf_i+0x19e>
1a005102:	8018      	strh	r0, [r3, #0]
1a005104:	e000      	b.n	1a005108 <_printf_i+0x1a0>
1a005106:	6018      	str	r0, [r3, #0]
1a005108:	2300      	movs	r3, #0
1a00510a:	6123      	str	r3, [r4, #16]
1a00510c:	460d      	mov	r5, r1
1a00510e:	e016      	b.n	1a00513e <_printf_i+0x1d6>
1a005110:	681a      	ldr	r2, [r3, #0]
1a005112:	1d11      	adds	r1, r2, #4
1a005114:	6019      	str	r1, [r3, #0]
1a005116:	6815      	ldr	r5, [r2, #0]
1a005118:	6862      	ldr	r2, [r4, #4]
1a00511a:	4628      	mov	r0, r5
1a00511c:	2100      	movs	r1, #0
1a00511e:	f000 f886 	bl	1a00522e <memchr>
1a005122:	b108      	cbz	r0, 1a005128 <_printf_i+0x1c0>
1a005124:	1b40      	subs	r0, r0, r5
1a005126:	6060      	str	r0, [r4, #4]
1a005128:	6863      	ldr	r3, [r4, #4]
1a00512a:	e004      	b.n	1a005136 <_printf_i+0x1ce>
1a00512c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005130:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
1a005134:	2301      	movs	r3, #1
1a005136:	6123      	str	r3, [r4, #16]
1a005138:	2300      	movs	r3, #0
1a00513a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00513e:	f8cd 8000 	str.w	r8, [sp]
1a005142:	4630      	mov	r0, r6
1a005144:	4621      	mov	r1, r4
1a005146:	aa03      	add	r2, sp, #12
1a005148:	463b      	mov	r3, r7
1a00514a:	f7ff fe97 	bl	1a004e7c <_printf_common>
1a00514e:	3001      	adds	r0, #1
1a005150:	d102      	bne.n	1a005158 <_printf_i+0x1f0>
1a005152:	f04f 30ff 	mov.w	r0, #4294967295
1a005156:	e01f      	b.n	1a005198 <_printf_i+0x230>
1a005158:	4630      	mov	r0, r6
1a00515a:	4639      	mov	r1, r7
1a00515c:	462a      	mov	r2, r5
1a00515e:	6923      	ldr	r3, [r4, #16]
1a005160:	47c0      	blx	r8
1a005162:	3001      	adds	r0, #1
1a005164:	d0f5      	beq.n	1a005152 <_printf_i+0x1ea>
1a005166:	6823      	ldr	r3, [r4, #0]
1a005168:	079b      	lsls	r3, r3, #30
1a00516a:	d405      	bmi.n	1a005178 <_printf_i+0x210>
1a00516c:	68e0      	ldr	r0, [r4, #12]
1a00516e:	9b03      	ldr	r3, [sp, #12]
1a005170:	4298      	cmp	r0, r3
1a005172:	bfb8      	it	lt
1a005174:	4618      	movlt	r0, r3
1a005176:	e00f      	b.n	1a005198 <_printf_i+0x230>
1a005178:	2500      	movs	r5, #0
1a00517a:	68e3      	ldr	r3, [r4, #12]
1a00517c:	9a03      	ldr	r2, [sp, #12]
1a00517e:	1a9b      	subs	r3, r3, r2
1a005180:	429d      	cmp	r5, r3
1a005182:	daf3      	bge.n	1a00516c <_printf_i+0x204>
1a005184:	4630      	mov	r0, r6
1a005186:	4639      	mov	r1, r7
1a005188:	f104 0219 	add.w	r2, r4, #25
1a00518c:	2301      	movs	r3, #1
1a00518e:	47c0      	blx	r8
1a005190:	3001      	adds	r0, #1
1a005192:	d0de      	beq.n	1a005152 <_printf_i+0x1ea>
1a005194:	3501      	adds	r5, #1
1a005196:	e7f0      	b.n	1a00517a <_printf_i+0x212>
1a005198:	b004      	add	sp, #16
1a00519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00519e:	bf00      	nop
1a0051a0:	1a005655 	.word	0x1a005655
1a0051a4:	1a005666 	.word	0x1a005666

1a0051a8 <__sread>:
1a0051a8:	b510      	push	{r4, lr}
1a0051aa:	460c      	mov	r4, r1
1a0051ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0051b0:	f7fe f88c 	bl	1a0032cc <_read_r>
1a0051b4:	2800      	cmp	r0, #0
1a0051b6:	bfab      	itete	ge
1a0051b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0051ba:	89a3      	ldrhlt	r3, [r4, #12]
1a0051bc:	181b      	addge	r3, r3, r0
1a0051be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0051c2:	bfac      	ite	ge
1a0051c4:	6563      	strge	r3, [r4, #84]	; 0x54
1a0051c6:	81a3      	strhlt	r3, [r4, #12]
1a0051c8:	bd10      	pop	{r4, pc}

1a0051ca <__swrite>:
1a0051ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0051ce:	461d      	mov	r5, r3
1a0051d0:	898b      	ldrh	r3, [r1, #12]
1a0051d2:	05db      	lsls	r3, r3, #23
1a0051d4:	4607      	mov	r7, r0
1a0051d6:	460c      	mov	r4, r1
1a0051d8:	4616      	mov	r6, r2
1a0051da:	d505      	bpl.n	1a0051e8 <__swrite+0x1e>
1a0051dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0051e0:	2200      	movs	r2, #0
1a0051e2:	2302      	movs	r3, #2
1a0051e4:	f7fe f86c 	bl	1a0032c0 <_lseek_r>
1a0051e8:	89a3      	ldrh	r3, [r4, #12]
1a0051ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0051ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0051f2:	81a3      	strh	r3, [r4, #12]
1a0051f4:	4638      	mov	r0, r7
1a0051f6:	4632      	mov	r2, r6
1a0051f8:	462b      	mov	r3, r5
1a0051fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0051fe:	f7fe b89b 	b.w	1a003338 <_write_r>

1a005202 <__sseek>:
1a005202:	b510      	push	{r4, lr}
1a005204:	460c      	mov	r4, r1
1a005206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00520a:	f7fe f859 	bl	1a0032c0 <_lseek_r>
1a00520e:	1c43      	adds	r3, r0, #1
1a005210:	89a3      	ldrh	r3, [r4, #12]
1a005212:	bf15      	itete	ne
1a005214:	6560      	strne	r0, [r4, #84]	; 0x54
1a005216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00521a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00521e:	81a3      	strheq	r3, [r4, #12]
1a005220:	bf18      	it	ne
1a005222:	81a3      	strhne	r3, [r4, #12]
1a005224:	bd10      	pop	{r4, pc}

1a005226 <__sclose>:
1a005226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00522a:	f7fe b833 	b.w	1a003294 <_close_r>

1a00522e <memchr>:
1a00522e:	b510      	push	{r4, lr}
1a005230:	b2c9      	uxtb	r1, r1
1a005232:	4402      	add	r2, r0
1a005234:	4290      	cmp	r0, r2
1a005236:	4603      	mov	r3, r0
1a005238:	d006      	beq.n	1a005248 <memchr+0x1a>
1a00523a:	781c      	ldrb	r4, [r3, #0]
1a00523c:	428c      	cmp	r4, r1
1a00523e:	f100 0001 	add.w	r0, r0, #1
1a005242:	d1f7      	bne.n	1a005234 <memchr+0x6>
1a005244:	4618      	mov	r0, r3
1a005246:	bd10      	pop	{r4, pc}
1a005248:	2000      	movs	r0, #0
1a00524a:	bd10      	pop	{r4, pc}
1a00524c:	6e696c42 	.word	0x6e696c42
1a005250:	6320796b 	.word	0x6320796b
1a005254:	66206e6f 	.word	0x66206e6f
1a005258:	52656572 	.word	0x52656572
1a00525c:	20534f54 	.word	0x20534f54
1a005260:	41732079 	.word	0x41732079
1a005264:	002e4950 	.word	0x002e4950
1a005268:	6b736154 	.word	0x6b736154
1a00526c:	61557854 	.word	0x61557854
1a005270:	00007472 	.word	0x00007472
1a005274:	6154796d 	.word	0x6154796d
1a005278:	315f6b73 	.word	0x315f6b73
1a00527c:	00000000 	.word	0x00000000
1a005280:	64252054 	.word	0x64252054
1a005284:	00000a0d 	.word	0x00000a0d
1a005288:	25207872 	.word	0x25207872
1a00528c:	000a0d73 	.word	0x000a0d73
1a005290:	454c4449 	.word	0x454c4449
1a005294:	00000000 	.word	0x00000000
1a005298:	51726d54 	.word	0x51726d54
1a00529c:	00000000 	.word	0x00000000
1a0052a0:	20726d54 	.word	0x20726d54
1a0052a4:	00637653 	.word	0x00637653

1a0052a8 <ultrasonicSensorsIrqMap>:
1a0052a8:	00020100                                ....

1a0052ac <gpioPinsInit>:
1a0052ac:	02000104 00050701 05010d03 04080100     ................
1a0052bc:	02020002 02000304 00000403 04070002     ................
1a0052cc:	030c0300 09050402 05040103 04030208     ................
1a0052dc:	04020305 06040504 0802000c 03000b06     ................
1a0052ec:	00090607 07060503 060f0504 03030004     ................
1a0052fc:	02000404 00050404 06040502 04060200     ................
1a00530c:	0c050408 05040a04 0003010e 14010a00     ................
1a00531c:	010f0000 0d000012 00001101 0010010c     ................
1a00532c:	07070300 000f0300 01000001 00000000     ................
1a00533c:	000a0600 08060603 06100504 04030005     ................
1a00534c:	03000106 04090400 04010d05 010b0000     ................
1a00535c:	0200000f 00000001 00010104 02010800     ................
1a00536c:	01090000 09010006 05040002 04010200     ................
1a00537c:	02020105 02020504 0e00000a 01000b02     ................
1a00538c:	000c020b 00040c01 04000200 01020001     ................
1a00539c:	02000204 00030402 03070302 070b0300     ................
1a0053ac:	0c030004 03000507 0006070d 01020e03     ................
1a0053bc:	04010504 06020006 02000504 00040405     ................
1a0053cc:	08040402 040c0504 0d050409 05040a04     ................
1a0053dc:	0005010e 00000801 636b6974 69547265     ........tikcerTi
1a0053ec:	0072656d                                mer.

1a0053f0 <lpcUarts>:
1a0053f0:	40081000 06020406 00180205 40081000     ...@...........@
1a005400:	09070509 00180706 40082000 00000000     ......... .@....
1a005410:	00190000 400c1000 07060107 001a0602     .......@........
1a005420:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a005430:	02020302 001b0204                       ........

1a005438 <GpioPorts>:
1a005438:	03030003 0f050403 05031005 07030603     ................
1a005448:	00000802                                ....

1a00544c <OscRateIn>:
1a00544c:	00b71b00                                ....

1a005450 <ExtRateIn>:
1a005450:	00000000                                ....

1a005454 <GpioButtons>:
1a005454:	08000400 09010900                       ........

1a00545c <GpioLeds>:
1a00545c:	01050005 0e000205 0c010b01              ............

1a005468 <InitClkStates>:
1a005468:	00010308 00010307 01010f01              ............

1a005474 <pinmuxing>:
1a005474:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005484:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005494:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0054a4:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0054b4:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0054c4:	00d50301 00d50401 00160107 00560207     ..............V.
1a0054d4:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0054e4:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a0054f4:	00b31201 00f01301 00b31401 00b60707     ................
1a005504:	00f20000 00b60100                       ........

1a00550c <UART_BClock>:
1a00550c:	01a201c2 01620182                       ......b.

1a005514 <UART_PClock>:
1a005514:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005524:	000000ff                                ....

1a005528 <periph_to_base>:
1a005528:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005538:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005548:	000100e0 01000100 01200003 00060120     .......... . ...
1a005558:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005568:	01820013 00120182 01a201a2 01c20011     ................
1a005578:	001001c2 01e201e2 0202000f 000e0202     ................
1a005588:	02220222 0223000d 001c0223              "."...#.#...

1a005594 <InitClkStates>:
1a005594:	00010100 00010909 0001090a 01010701     ................
1a0055a4:	00010902 00010906 0101090c 0001090d     ................
1a0055b4:	0001090e 0001090f 00010910 00010911     ................
1a0055c4:	00010912 00010913 00011114 00011119     ................
1a0055d4:	0001111a 0001111b                       ........

1a0055dc <__sf_fake_stdin>:
	...

1a0055fc <__sf_fake_stdout>:
	...

1a00561c <__sf_fake_stderr>:
	...
1a00563c:	00000043                                C...

1a005640 <_global_impure_ptr>:
1a005640:	100000dc 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a005650:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a005660:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a005670:	64636261 ff006665                       abcdef..
