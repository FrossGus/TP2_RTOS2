
examples/c/sapi/rtos_freertos/dynamic_mem/freeRTOS_01_blinky/out/freeRTOS_01_blinky.elf:     file format elf32-littlearm
examples/c/sapi/rtos_freertos/dynamic_mem/freeRTOS_01_blinky/out/freeRTOS_01_blinky.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000661

Program Header:
0x70000001 off    0x00015388 vaddr 0x1a005388 paddr 0x1a005388 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002c58 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005390 memsz 0x00005390 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005390 align 2**16
         filesz 0x000000b4 memsz 0x000000b4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005384  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  10000000  1a005390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
  6 .bss          00002ba0  100000b8  100000b8  000000b8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
 11 .init_array   00000004  1a005384  1a005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005388  1a005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200b4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
 18 .noinit       00000000  10002c58  10002c58  000200b4  2**2
                  CONTENTS
 19 .debug_info   0002b12f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005674  00000000  00000000  0004b1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000f90  00000000  00000000  00050857  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000010a8  00000000  00000000  000517e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0001023a  00000000  00000000  0005288f  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00013a55  00000000  00000000  00062ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002fe15  00000000  00000000  0007651e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000a6333  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000a63b2  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002d90  00000000  00000000  000a63ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_loc    0000aca0  00000000  00000000  000a917c  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000b8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005384 l    d  .init_array	00000000 .init_array
1a005388 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c58 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003760 l     F .text	000000a4 uartProcessIRQ
10002b08 l     O .bss	00000004 rxIsrCallbackUART0
10002b0c l     O .bss	00000004 rxIsrCallbackUART2
10002b10 l     O .bss	00000004 rxIsrCallbackUART3
10002b14 l     O .bss	00000004 txIsrCallbackUART0
10002b18 l     O .bss	00000004 txIsrCallbackUART2
10002b1c l     O .bss	00000004 txIsrCallbackUART3
1a005158 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
100000b8 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 DriverDinamicMemoryRTOS.c
00000000 l    df *ABS*	00000000 Task.c
00000000 l    df *ABS*	00000000 system.c
100000c0 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a0007b4 l     F .text	00000064 prvHeapInit
100000c8 l     O .bss	00002000 ucHeap
1a000818 l     F .text	00000058 prvInsertBlockIntoFreeList
100000c4 l     O .bss	00000004 pxEnd
100020c8 l     O .bss	00000004 xBlockAllocatedBit
100020cc l     O .bss	00000004 xFreeBytesRemaining
100020d0 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020d4 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a0009fc l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000a0e l     F .text	0000001e prvIsQueueFull
1a000a2c l     F .text	0000001a prvIsQueueEmpty
1a000a46 l     F .text	00000076 prvCopyDataToQueue
1a000abc l     F .text	00000024 prvCopyDataFromQueue
1a000ae0 l     F .text	0000006e prvUnlockQueue
1a000bd4 l     F .text	00000022 prvInitialiseNewQueue
1a000e50 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020dc l     O .bss	00000168 uxIdleTaskStack.10728
10002244 l     O .bss	000005a0 uxTimerTaskStack.10735
100027e4 l     O .bss	00000060 xIdleTaskTCB.10727
10002844 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001380 l     F .text	0000002c prvResetNextTaskUnblockTime
1a0013ac l     F .text	00000092 prvInitialiseNewTask
1a001440 l     F .text	00000068 prvInitialiseTaskLists
1a0014a8 l     F .text	000000ac prvAddNewTaskToReadyList
1a001554 l     F .text	00000038 prvDeleteTCB
1a00158c l     F .text	0000004c prvCheckTasksWaitingTermination
1a0015d8 l     F .text	00000028 prvIdleTask
1a001600 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100028a8 l     O .bss	00000004 pxDelayedTaskList
100028ac l     O .bss	00000004 pxOverflowDelayedTaskList
100028b0 l     O .bss	0000008c pxReadyTasksLists
1000293c l     O .bss	00000004 uxCurrentNumberOfTasks
10002940 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002944 l     O .bss	00000004 uxPendedTicks
10002948 l     O .bss	00000004 uxSchedulerSuspended
1000294c l     O .bss	00000004 uxTaskNumber
10002950 l     O .bss	00000004 uxTopReadyPriority
10002954 l     O .bss	00000014 xDelayedTaskList1
10002968 l     O .bss	00000014 xDelayedTaskList2
1000297c l     O .bss	00000004 xNextTaskUnblockTime
10002980 l     O .bss	00000004 xNumOfOverflows
10002984 l     O .bss	00000014 xPendingReadyList
10002998 l     O .bss	00000004 xSchedulerRunning
1000299c l     O .bss	00000014 xSuspendedTaskList
100029b0 l     O .bss	00000014 xTasksWaitingTermination
100029c4 l     O .bss	00000004 xTickCount
100029c8 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002198 l     F .text	00000020 prvGetNextExpireTime
1a0021b8 l     F .text	00000048 prvInsertTimerInActiveList
1a002200 l     F .text	00000070 prvCheckForValidListAndQueue
1a002270 l     F .text	00000040 prvInitialiseNewTimer
1a002640 l     F .text	00000016 prvTimerTask
1a0023cc l     F .text	00000078 prvSwitchTimerLists
1a002444 l     F .text	0000002c prvSampleTimeNow
1a002470 l     F .text	00000060 prvProcessExpiredTimer
1a0024d0 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002544 l     F .text	000000fc prvProcessReceivedCommands
100029cc l     O .bss	00000004 pxCurrentTimerList
100029d0 l     O .bss	00000004 pxOverflowTimerList
100029d4 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002a74 l     O .bss	00000014 xActiveTimerList1
10002a88 l     O .bss	00000014 xActiveTimerList2
10002a9c l     O .bss	00000004 xLastTime.11777
10002aa0 l     O .bss	00000050 xStaticTimerQueue.11827
10002af0 l     O .bss	00000004 xTimerQueue
10002af4 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002658 l     F .text	00000040 prvTaskExitError
1a002698 l     F .text	00000022 prvPortStartFirstTask
1a0026c0 l     F .text	0000000e vPortEnableVFP
1a002720 l       .text	00000000 pxCurrentTCBConst2
1a002800 l       .text	00000000 pxCurrentTCBConst
10002af8 l     O .bss	00000001 ucMaxSysCallPriority
10002afc l     O .bss	00000004 ulMaxPRIGROUPValue
10000010 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a0029d4 l     F .text	00000044 Board_LED_Init
1a002a18 l     F .text	00000040 Board_TEC_Init
1a002a58 l     F .text	00000040 Board_GPIO_Init
1a002a98 l     F .text	00000030 Board_ADC_Init
1a002ac8 l     F .text	00000038 Board_SPI_Init
1a002b00 l     F .text	00000024 Board_I2C_Init
1a004fe4 l     O .text	00000008 GpioButtons
1a004fec l     O .text	0000000c GpioLeds
1a004ff8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005010 l     O .text	00000004 InitClkStates
1a005014 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002c70 l     F .text	0000002c Chip_UART_GetIndex
1a005088 l     O .text	00000008 UART_BClock
1a005090 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002e18 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002e2c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002ee0 l     F .text	000000a4 pll_calc_divs
1a002f84 l     F .text	0000010c pll_get_frac
1a003090 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003304 l     F .text	00000022 Chip_Clock_GetDivRate
10002b00 l     O .bss	00000008 audio_usb_pll_freq
1a0050a4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005110 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0035dc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0035f0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000014 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000004c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10002b20 l     O .bss	00000004 callBackFuncParams
10002b28 l     O .bss	00000008 tickCounter
10002b30 l     O .bss	00000004 tickHookFunction
10002b34 l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003aa4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b64 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004510 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0048bc l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000054 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005388 l       .init_array	00000000 __init_array_end
1a005384 l       .bss_RAM5	00000000 __preinit_array_end
1a005384 l       .init_array	00000000 __init_array_start
1a005384 l       .bss_RAM5	00000000 __preinit_array_start
1a003128 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000700 g     F .text	00000012 _isatty_r
1a00421e g     F .text	00000010 strcpy
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a003938 g     F .text	00000014 uartRxRead
1a000712 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002768 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0041d4 g     F .text	00000030 printf
1a002bb6 g     F .text	00000008 __stdio_init
1a004ea6 g     F .text	00000024 __sseek
1a004590 g     F .text	00000060 __sinit
1a004230 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001268 g     F .text	00000052 vQueueWaitForMessageRestricted
1a004564 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002ed2 g     F .text	0000000c Chip_ADC_SetResolution
1a004f82 g     F .text	00000002 __malloc_unlock
1a002804 g     F .text	0000002c SysTick_Handler
1a002cf0 g     F .text	00000040 Chip_UART_SetBaud
1a00065c  w    F .text	00000002 initialise_monitor_handles
1a003e4c g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002b5c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
10002b70 g     O .bss	00000004 SemTxUart
1a0027a0 g     F .text	00000064 PendSV_Handler
1a000e7e g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005390 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100028a4 g     O .bss	00000004 pxCurrentTCB
1a0006f6 g     F .text	0000000a _fstat_r
53ff722e g       *ABS*	00000000 __valid_user_code_checksum
1a005390 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0003f8 g     F .text	0000002a ModuleDinamicMemory_initialize
1a001cd8 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0033a6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002868 g     F .text	00000110 xPortStartScheduler
1a0041ac g     F .text	00000016 memcpy
1a001be4 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004558 g     F .text	0000000c _cleanup_r
1a002830  w    F .text	00000038 vPortSetupTimerInterrupt
1a003e64 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c58 g       .noinit	00000000 _noinit
1a00098c g     F .text	00000070 vPortFree
1a0039f6 g     F .text	00000018 uartWriteString
10002c50 g     O .bss	00000004 SystemCoreClock
1a002c9c g     F .text	00000054 Chip_UART_Init
1a0010a4 g     F .text	0000019c xQueueSemaphoreTake
1a003a24 g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002978 g     F .text	0000005c vPortValidateInterruptPriority
10002b74 g     O .bss	00000004 SemRxUart
1a000180  w    F .text	00000002 UsageFault_Handler
1a003424 g     F .text	0000004c Chip_Clock_GetRate
1a0012d6 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a003e3c g     F .text	00000010 printInitUart
1a002bf8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003e94 g     F .text	000002cc .hidden __udivmoddi4
1a000794 g     F .text	00000020 _sbrk_r
1a004fe0 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00071c g     F .text	0000004e _read_r
1a0012d0 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000f4c g     F .text	00000158 xQueueReceive
10002c10 g     O .bss	00000040 xQueueRegistry
1a001364 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005388 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00534c g     O .text	00000004 _global_impure_ptr
1a004164 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000870 g     F .text	0000011c pvPortMalloc
1a002b78 g     F .text	0000002c Board_Init
1a0006ea  w    F .text	00000002 _init
1a0012ba g     F .text	00000016 vListInitialise
1a000480 g     F .text	000000c8 myTask_1
1a000114 g       .text	00000000 __data_section_table
1a001814 g     F .text	0000000c xTaskGetTickCount
1a000cd4 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c58 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000660 g     F .text	00000088 Reset_Handler
1a003a58 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0036d4 g     F .text	00000038 Chip_I2C_SetClockRate
1a001e54 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000590 g     F .text	000000cc CallbackRx
1a0030dc g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001c4c g     F .text	0000008c xTaskRemoveFromEventList
1a00137e g     F .text	00000002 vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0052ec g     O .text	00000020 __sf_fake_stderr
1a0036b0 g     F .text	00000024 Chip_I2C_Init
10002b78 g     O .bss	00000004 xPointerQueue
1a003a0e g     F .text	0000000a UART2_IRQHandler
1a003e54 g     F .text	00000010 printEnter
1a003298 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0051ac g     O .text	00000140 gpioPinsInit
1a003804 g     F .text	00000090 uartInterrupt
1a0039dc g     F .text	0000001a uartWriteByte
1a001fc4 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003608 g     F .text	00000012 Chip_SSP_SetClockRate
1a003d16 g     F .text	00000016 gpioToggle
1a0048ea g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a004ee0 g     F .text	00000000 memchr
1a001cf0 g     F .text	00000080 xTaskCheckForTimeOut
1a00476c g     F .text	0000009c _free_r
1a003380 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001d9c g     F .text	000000b8 xTaskPriorityInherit
100000b8 g       .bss	00000000 _bss
1a002ea0 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000548 g     F .text	00000048 TaskTxUart
1a001804 g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00361a g     F .text	0000003e Chip_SSP_SetBitRate
1a001322 g     F .text	00000028 uxListRemove
10002b7c g     O .bss	0000006d Data
1a0035d8 g     F .text	00000002 Chip_GPIO_Init
1a00500c g     O .text	00000004 OscRateIn
1a003960 g     F .text	0000007c uartInit
1a001698 g     F .text	00000072 xTaskCreateStatic
10002c58 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001b1c g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000bf6 g     F .text	00000090 xQueueGenericCreateStatic
1a001c14 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
10002bec g     O .bss	00000020 ModuleData
1a0006ec g     F .text	0000000a _close_r
1a003ad8 g     F .text	00000194 gpioInit
1a001fe0 g     F .text	00000098 xTaskNotifyWait
1a00134c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002360 g     F .text	0000006c xTimerGenericCommand
1a0042d4 g     F .text	000000dc __swsetup_r
1a00137c g     F .text	00000002 vApplicationStackOverflowHook
1a004160  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0045f0 g     F .text	00000078 __sfp
1a004e4c g     F .text	00000022 __sread
1a003d2c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
100000bc g     O .bss	00000004 xTaskHandle_RxNotify
1a004f80 g     F .text	00000002 __malloc_lock
1a002b48 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0044bc g     F .text	00000054 _fflush_r
1a00530c g     O .text	00000020 __sf_fake_stdin
1a003144 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0041c2 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	000000f8 main
1a000474 g     F .text	0000000a ModuleDinamicMemory_Free
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0012ee g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
10002c0c g     O .bss	00000004 SemMutexUart
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002700 g     F .text	00000024 SVC_Handler
1a004eca g     F .text	00000008 __sclose
1a0022b0 g     F .text	00000064 xTimerCreateTimerTask
1a004808 g     F .text	000000b4 _malloc_r
1a003920 g     F .text	00000018 uartTxReady
1a001a2c g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0033b4 g     F .text	0000003c Chip_Clock_EnableOpts
1a002bae g     F .text	00000008 __stdio_getchar
1a000c86 g     F .text	0000004e xQueueGenericCreate
1a003160 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003218 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00370c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a002078 g     F .text	00000120 xTaskGenericNotifyFromISR
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003c6c g     F .text	00000056 gpioWrite
1a0006e8  w    F .text	00000002 _fini
1a0041d4 g     F .text	00000030 iprintf
1a001938 g     F .text	000000f4 xTaskResumeAll
1a001770 g     F .text	00000094 vTaskStartScheduler
1a002e60 g     F .text	00000040 Chip_ADC_Init
10002c54 g     O .bss	00000004 g_pUsbApi
1a002bc0 g     F .text	00000038 Board_SetupMuxing
1a002d30 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00076a g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a004b3c g     F .text	000000ea _printf_common
10000050 g     O .data	00000004 _impure_ptr
1a0043b0 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00394c g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001d70 g     F .text	0000000c vTaskMissedYield
10002c58 g       .bss	00000000 _pvHeapStart
10000000 g     O .data	00000010 Frame_parameters
1a000178 g       .text	00000000 __section_table_end
1a003658 g     F .text	00000038 Chip_SSP_Init
1a001240 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001820 g     F .text	00000118 xTaskIncrementTick
1a0046a4 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a002b24 g     F .text	00000024 Board_Debug_Init
1a002ba4 g     F .text	0000000a __stdio_putchar
1a000b50 g     F .text	00000084 xQueueGenericReset
100000b4 g       .data	00000000 _edata
1a003690 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00170a g     F .text	00000066 xTaskCreate
1a003484 g     F .text	00000154 Chip_SetupCoreClock
1a004e6e g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a004910 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a004668 g     F .text	0000003c _fwalk_reent
1a003470 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001ad0 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00532c g     O .text	00000020 __sf_fake_stdout
1a001d7c g     F .text	00000020 xTaskGetSchedulerState
1a001f04 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a004160  w    F .text	00000002 .hidden __aeabi_idiv0
1a003894 g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a0046ec g     F .text	00000080 __smakebuf_r
1a0026d4 g     F .text	0000002c pxPortInitialiseStack
1a004c28 g     F .text	00000224 _printf_i
1a0033f0 g     F .text	00000034 Chip_Clock_Enable
1a003a18 g     F .text	0000000a UART3_IRQHandler
1a000422 g     F .text	0000003c ModuleDinamicMemory_send
10002b6c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a002314 g     F .text	0000004c xTimerCreateStatic
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a004204 g     F .text	0000001a strchr
1a003cc2 g     F .text	00000054 gpioRead
1a003d48 g     F .text	000000f4 boardInit
1a002724 g     F .text	00000044 vPortEnterCritical
1a00045e g     F .text	00000016 ModuleDinamicMemory_receive
10002b68 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004910 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000e68 g     F .text	00000016 xQueueCreateMutex
1a003328 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003744 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002c64 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 61 06 00 1a 79 01 00 1a 7b 01 00 1a     ....a...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 2e 72 ff 53     }............r.S
	...
1a00002c:	01 27 00 1a 85 01 00 1a 00 00 00 00 a1 27 00 1a     .'...........'..
1a00003c:	05 28 00 1a                                         .(..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	2d 3d 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     -=..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 0f 3a 00 1a 19 3a 00 1a     .........:...:..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005390 	.word	0x1a005390
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000b4 	.word	0x000000b4
1a000120:	1a005390 	.word	0x1a005390
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005390 	.word	0x1a005390
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005390 	.word	0x1a005390
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005390 	.word	0x1a005390
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000b8 	.word	0x100000b8
1a000154:	00002ba0 	.word	0x00002ba0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
    PendSV_Handler,                 // The PendSV handler
    SysTick_Handler,                // The SysTick handler
};

__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
        *pulDest++ = *pulSrc++;
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 face 	bl	1a003760 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:


DEBUG_PRINT_ENABLE;

int main(void)
{
1a000300:	b500      	push	{lr}
1a000302:	b085      	sub	sp, #20
	// ---------- CONFIGURACIONES ------------------------------
	// Inicializar y configurar la plataforma
	boardConfig();
1a000304:	f003 fd20 	bl	1a003d48 <boardInit>
	// UART for debug messages
	debugPrintConfigUart( UART_USB, 115200 );
1a000308:	4c29      	ldr	r4, [pc, #164]	; (1a0003b0 <main+0xb0>)
1a00030a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a00030e:	2103      	movs	r1, #3
1a000310:	4620      	mov	r0, r4
1a000312:	f003 fd93 	bl	1a003e3c <printInitUart>
	debugPrintlnString( "Blinky con freeRTOS y sAPI." );
1a000316:	4927      	ldr	r1, [pc, #156]	; (1a0003b4 <main+0xb4>)
1a000318:	7820      	ldrb	r0, [r4, #0]
1a00031a:	f003 fd97 	bl	1a003e4c <printString>
1a00031e:	7820      	ldrb	r0, [r4, #0]
1a000320:	f003 fd98 	bl	1a003e54 <printEnter>



	uartConfig(UART_USB, 115200);
1a000324:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000328:	2003      	movs	r0, #3
1a00032a:	f003 fb19 	bl	1a003960 <uartInit>
//	// Seteo un callback al evento de recepcion y habilito su interrupcion
	uartCallbackSet(UART_USB, UART_RECEIVE, CallbackRx, NULL);
1a00032e:	2300      	movs	r3, #0
1a000330:	4a21      	ldr	r2, [pc, #132]	; (1a0003b8 <main+0xb8>)
1a000332:	4619      	mov	r1, r3
1a000334:	2003      	movs	r0, #3
1a000336:	f003 faad 	bl	1a003894 <uartCallbackSet>
//	// Habilito todas las interrupciones de UART_USB
	uartInterrupt(UART_USB, true);
1a00033a:	2101      	movs	r1, #1
1a00033c:	2003      	movs	r0, #3
1a00033e:	f003 fa61 	bl	1a003804 <uartInterrupt>

	SemTxUart = xSemaphoreCreateBinary();
1a000342:	2203      	movs	r2, #3
1a000344:	2100      	movs	r1, #0
1a000346:	2001      	movs	r0, #1
1a000348:	f000 fc9d 	bl	1a000c86 <xQueueGenericCreate>
1a00034c:	4b1b      	ldr	r3, [pc, #108]	; (1a0003bc <main+0xbc>)
1a00034e:	6018      	str	r0, [r3, #0]
	SemMutexUart =xSemaphoreCreateMutex() ;
1a000350:	2001      	movs	r0, #1
1a000352:	f000 fd89 	bl	1a000e68 <xQueueCreateMutex>
1a000356:	4b1a      	ldr	r3, [pc, #104]	; (1a0003c0 <main+0xc0>)
1a000358:	6018      	str	r0, [r3, #0]
	xPointerQueue = xQueueCreate(1 , sizeof(char *));
1a00035a:	2200      	movs	r2, #0
1a00035c:	2104      	movs	r1, #4
1a00035e:	2001      	movs	r0, #1
1a000360:	f000 fc91 	bl	1a000c86 <xQueueGenericCreate>
1a000364:	4b17      	ldr	r3, [pc, #92]	; (1a0003c4 <main+0xc4>)
1a000366:	6018      	str	r0, [r3, #0]
	xTaskCreate(TaskTxUart, (const char *)"TaskTxUart",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a000368:	2400      	movs	r4, #0
1a00036a:	9401      	str	r4, [sp, #4]
1a00036c:	2501      	movs	r5, #1
1a00036e:	9500      	str	r5, [sp, #0]
1a000370:	4623      	mov	r3, r4
1a000372:	22b4      	movs	r2, #180	; 0xb4
1a000374:	4914      	ldr	r1, [pc, #80]	; (1a0003c8 <main+0xc8>)
1a000376:	4815      	ldr	r0, [pc, #84]	; (1a0003cc <main+0xcc>)
1a000378:	f001 f9c7 	bl	1a00170a <xTaskCreate>
	xTaskCreate(myTask_1, (const char *)"myTask_1",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, &xTaskHandle_RxNotify);
1a00037c:	4b14      	ldr	r3, [pc, #80]	; (1a0003d0 <main+0xd0>)
1a00037e:	9301      	str	r3, [sp, #4]
1a000380:	9500      	str	r5, [sp, #0]
1a000382:	4623      	mov	r3, r4
1a000384:	22b4      	movs	r2, #180	; 0xb4
1a000386:	4913      	ldr	r1, [pc, #76]	; (1a0003d4 <main+0xd4>)
1a000388:	4813      	ldr	r0, [pc, #76]	; (1a0003d8 <main+0xd8>)
1a00038a:	f001 f9be 	bl	1a00170a <xTaskCreate>
//	xTaskCreate(Task_ToMayusculas_OP0, (const char *)"Task_ToMayusculas_OP0",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
//	xTaskCreate(Task_ToMinusculas_OP1, (const char *)"Task_ToMinusculas_OP1",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
//	xTaskCreate(Task_ReportStack_OP2, (const char *)"Task_ToMayusculas_OP0",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
//	xTaskCreate(Task_ReportHeap_OP3, (const char *)"Task_ToMinusculas_OP1",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);

	ModuleDinamicMemory_initialize(&ModuleData,50,xQueueGenericSend,xQueueGenericSendFromISR, xQueueReceive,xQueueGenericCreate,pvPortMalloc, vPortFree);
1a00038e:	4b13      	ldr	r3, [pc, #76]	; (1a0003dc <main+0xdc>)
1a000390:	9303      	str	r3, [sp, #12]
1a000392:	4b13      	ldr	r3, [pc, #76]	; (1a0003e0 <main+0xe0>)
1a000394:	9302      	str	r3, [sp, #8]
1a000396:	4b13      	ldr	r3, [pc, #76]	; (1a0003e4 <main+0xe4>)
1a000398:	9301      	str	r3, [sp, #4]
1a00039a:	4b13      	ldr	r3, [pc, #76]	; (1a0003e8 <main+0xe8>)
1a00039c:	9300      	str	r3, [sp, #0]
1a00039e:	4b13      	ldr	r3, [pc, #76]	; (1a0003ec <main+0xec>)
1a0003a0:	4a13      	ldr	r2, [pc, #76]	; (1a0003f0 <main+0xf0>)
1a0003a2:	2132      	movs	r1, #50	; 0x32
1a0003a4:	4813      	ldr	r0, [pc, #76]	; (1a0003f4 <main+0xf4>)
1a0003a6:	f000 f827 	bl	1a0003f8 <ModuleDinamicMemory_initialize>

	// Iniciar scheduler
	vTaskStartScheduler();
1a0003aa:	f001 f9e1 	bl	1a001770 <vTaskStartScheduler>
1a0003ae:	e7fe      	b.n	1a0003ae <main+0xae>
1a0003b0:	100000b8 	.word	0x100000b8
1a0003b4:	1a004f84 	.word	0x1a004f84
1a0003b8:	1a000591 	.word	0x1a000591
1a0003bc:	10002b70 	.word	0x10002b70
1a0003c0:	10002c0c 	.word	0x10002c0c
1a0003c4:	10002b78 	.word	0x10002b78
1a0003c8:	1a004fa0 	.word	0x1a004fa0
1a0003cc:	1a000549 	.word	0x1a000549
1a0003d0:	100000bc 	.word	0x100000bc
1a0003d4:	1a004fac 	.word	0x1a004fac
1a0003d8:	1a000481 	.word	0x1a000481
1a0003dc:	1a00098d 	.word	0x1a00098d
1a0003e0:	1a000871 	.word	0x1a000871
1a0003e4:	1a000c87 	.word	0x1a000c87
1a0003e8:	1a000f4d 	.word	0x1a000f4d
1a0003ec:	1a000e7f 	.word	0x1a000e7f
1a0003f0:	1a000cd5 	.word	0x1a000cd5
1a0003f4:	10002bec 	.word	0x10002bec

1a0003f8 <ModuleDinamicMemory_initialize>:

#include "DriverDinamicMemoryRTOS.h"
#include "Task.h"
void ModuleDinamicMemory_initialize( Module_Data_t *obj , uint32_t MaxLength, xQueueSendFCN xQueueSendFCN,xQueueSendFromISRFCN xQueueSendFromISRFCN, xQueueReceiveFCN xQueueReceiveFCN, xQueueCreateFCN xQueueCreateFCN, pvPortMallocFCN pvPortMallocFCN,vPortFreeFCN vPortFreeFCN)
{
1a0003f8:	b570      	push	{r4, r5, r6, lr}
1a0003fa:	4604      	mov	r4, r0
1a0003fc:	4616      	mov	r6, r2
1a0003fe:	461d      	mov	r5, r3
1a000400:	9b05      	ldr	r3, [sp, #20]
	obj->xMaxStringLength = MaxLength;
1a000402:	7101      	strb	r1, [r0, #4]
	//obj->xPointerQueue = xQueueCreate( 2 , sizeof( char * ) ); /*cola punteros tipo char*/
	obj->xQueueCreateFunction =xQueueCreateFCN;
1a000404:	61c3      	str	r3, [r0, #28]
	obj->xPointerQueue = obj->xQueueCreateFunction( 2 , sizeof( char * ) , 0);
1a000406:	2200      	movs	r2, #0
1a000408:	2104      	movs	r1, #4
1a00040a:	2002      	movs	r0, #2
1a00040c:	4798      	blx	r3
1a00040e:	6020      	str	r0, [r4, #0]
	obj->xQueueSendFunction = xQueueSendFCN;
1a000410:	60a6      	str	r6, [r4, #8]
	obj->xQueueSendFromISRFunction = xQueueSendFromISRFCN;
1a000412:	60e5      	str	r5, [r4, #12]
	obj->xQueueReceiveFunction = xQueueReceiveFCN;
1a000414:	9b04      	ldr	r3, [sp, #16]
1a000416:	6123      	str	r3, [r4, #16]
	obj->pvPortMallocFunction = pvPortMallocFCN;
1a000418:	9b06      	ldr	r3, [sp, #24]
1a00041a:	6163      	str	r3, [r4, #20]
	obj->vPortFreeFunction = vPortFreeFCN;
1a00041c:	9b07      	ldr	r3, [sp, #28]
1a00041e:	61a3      	str	r3, [r4, #24]
}
1a000420:	bd70      	pop	{r4, r5, r6, pc}

1a000422 <ModuleDinamicMemory_send>:

void ModuleDinamicMemory_send( Module_Data_t *obj ,uint8_t Isr, long * const xHigherPriorityTaskWoken, char* pbuf ,uint32_t portMaxDelay)
{
1a000422:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000424:	b083      	sub	sp, #12
1a000426:	4604      	mov	r4, r0
1a000428:	460d      	mov	r5, r1
1a00042a:	4617      	mov	r7, r2
1a00042c:	461e      	mov	r6, r3
	//char* PcStringToSend = pvPortMalloc( obj->xMaxStringLength );
	char* PcStringToSend = obj->pvPortMallocFunction( obj->xMaxStringLength );
1a00042e:	6943      	ldr	r3, [r0, #20]
1a000430:	7920      	ldrb	r0, [r4, #4]
1a000432:	2100      	movs	r1, #0
1a000434:	4798      	blx	r3
1a000436:	9001      	str	r0, [sp, #4]
	/*Si quiero copiar un strig con una variable o si quiero solo copiar el buffer en crudo enviar*/
	strcpy(PcStringToSend ,pbuf);
1a000438:	4631      	mov	r1, r6
1a00043a:	f003 fef0 	bl	1a00421e <strcpy>

	/*Si uso el enviar en una isr*/
	if(Isr) obj->xQueueSendFromISRFunction(obj->xPointerQueue ,&PcStringToSend,xHigherPriorityTaskWoken, 0);
1a00043e:	b93d      	cbnz	r5, 1a000450 <ModuleDinamicMemory_send+0x2e>
	else  obj->xQueueSendFunction(obj->xPointerQueue ,&PcStringToSend,portMaxDelay, 0);
1a000440:	68a5      	ldr	r5, [r4, #8]
1a000442:	2300      	movs	r3, #0
1a000444:	9a08      	ldr	r2, [sp, #32]
1a000446:	a901      	add	r1, sp, #4
1a000448:	6820      	ldr	r0, [r4, #0]
1a00044a:	47a8      	blx	r5
	//xQueueSend( obj->xPointerQueue ,&PcStringToSend,portMAX_DELAY );
}
1a00044c:	b003      	add	sp, #12
1a00044e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char* PcStringToSend = obj->pvPortMallocFunction( obj->xMaxStringLength );
	/*Si quiero copiar un strig con una variable o si quiero solo copiar el buffer en crudo enviar*/
	strcpy(PcStringToSend ,pbuf);

	/*Si uso el enviar en una isr*/
	if(Isr) obj->xQueueSendFromISRFunction(obj->xPointerQueue ,&PcStringToSend,xHigherPriorityTaskWoken, 0);
1a000450:	68e5      	ldr	r5, [r4, #12]
1a000452:	2300      	movs	r3, #0
1a000454:	463a      	mov	r2, r7
1a000456:	a901      	add	r1, sp, #4
1a000458:	6820      	ldr	r0, [r4, #0]
1a00045a:	47a8      	blx	r5
1a00045c:	e7f6      	b.n	1a00044c <ModuleDinamicMemory_send+0x2a>

1a00045e <ModuleDinamicMemory_receive>:
	else  obj->xQueueSendFunction(obj->xPointerQueue ,&PcStringToSend,portMaxDelay, 0);
	//xQueueSend( obj->xPointerQueue ,&PcStringToSend,portMAX_DELAY );
}

char* ModuleDinamicMemory_receive(Module_Data_t *obj, uint32_t portMaxDelay){
1a00045e:	b500      	push	{lr}
1a000460:	b083      	sub	sp, #12

	char* pbuffer; /*Dato recibido*/
	obj->xQueueReceiveFunction( obj->xPointerQueue , &pbuffer, portMaxDelay );
1a000462:	6903      	ldr	r3, [r0, #16]
1a000464:	460a      	mov	r2, r1
1a000466:	a901      	add	r1, sp, #4
1a000468:	6800      	ldr	r0, [r0, #0]
1a00046a:	4798      	blx	r3
	//xQueueReceive( obj->xPointerQueue , &pbuffer, portMAX_DELAY );
	return pbuffer;
}
1a00046c:	9801      	ldr	r0, [sp, #4]
1a00046e:	b003      	add	sp, #12
1a000470:	f85d fb04 	ldr.w	pc, [sp], #4

1a000474 <ModuleDinamicMemory_Free>:

void ModuleDinamicMemory_Free(Module_Data_t *obj , char *ultimo_mensaje){
1a000474:	b508      	push	{r3, lr}
	obj->vPortFreeFunction(ultimo_mensaje);
1a000476:	6983      	ldr	r3, [r0, #24]
1a000478:	4608      	mov	r0, r1
1a00047a:	4798      	blx	r3
	//vPortFree(ultimo_mensaje);
}
1a00047c:	bd08      	pop	{r3, pc}
1a00047e:	Address 0x000000001a00047e is out of bounds.


1a000480 <myTask_1>:

QueueHandle_t xPointerQueue;
/*=================================================================================*/

void myTask_1( void* taskParmPtr )
{
1a000480:	b530      	push	{r4, r5, lr}
1a000482:	b085      	sub	sp, #20
	char *PtrSOF = NULL;
	char *PtrEOF = NULL;

	gpioWrite( LED1, ON );
1a000484:	2101      	movs	r1, #1
1a000486:	202d      	movs	r0, #45	; 0x2d
1a000488:	f003 fbf0 	bl	1a003c6c <gpioWrite>
	vTaskDelay( 1000 / portTICK_RATE_MS );
1a00048c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000490:	f001 fb1e 	bl	1a001ad0 <vTaskDelay>
	gpioWrite( LED1, OFF );
1a000494:	2100      	movs	r1, #0
1a000496:	202d      	movs	r0, #45	; 0x2d
1a000498:	f003 fbe8 	bl	1a003c6c <gpioWrite>

	// Tarea periodica cada 500 ms
	portTickType xPeriodicity =  500 / portTICK_RATE_MS;
	portTickType xLastWakeTime = xTaskGetTickCount();
1a00049c:	f001 f9ba 	bl	1a001814 <xTaskGetTickCount>
1a0004a0:	9003      	str	r0, [sp, #12]
1a0004a2:	e015      	b.n	1a0004d0 <myTask_1+0x50>

			printf( "T %d\r\n",Frame_parameters.T[0]); // QUITAR
		}

		/*Envía el puntero al buffer con la trama a la cola*/
		ModuleDinamicMemory_send(&ModuleData,0,NULL,(char*)Frame_parameters.BufferAux, portMAX_DELAY);
1a0004a4:	4c24      	ldr	r4, [pc, #144]	; (1a000538 <myTask_1+0xb8>)
1a0004a6:	68a3      	ldr	r3, [r4, #8]
1a0004a8:	4d24      	ldr	r5, [pc, #144]	; (1a00053c <myTask_1+0xbc>)
1a0004aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0004ae:	9200      	str	r2, [sp, #0]
1a0004b0:	2200      	movs	r2, #0
1a0004b2:	4611      	mov	r1, r2
1a0004b4:	4628      	mov	r0, r5
1a0004b6:	f7ff ffb4 	bl	1a000422 <ModuleDinamicMemory_send>

		/*Libero memoria del buffer aux*/
		ModuleData.vPortFreeFunction(Frame_parameters.BufferAux );
1a0004ba:	69ab      	ldr	r3, [r5, #24]
1a0004bc:	68a0      	ldr	r0, [r4, #8]
1a0004be:	4798      	blx	r3
		gpioToggle( LEDB );
1a0004c0:	202c      	movs	r0, #44	; 0x2c
1a0004c2:	f003 fc28 	bl	1a003d16 <gpioToggle>

		/*sincronizar-Permite transmitir por uart lo que se recibe por la cola*/
		//xSemaphoreGive(SemTxUart);
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0004c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a0004ca:	a803      	add	r0, sp, #12
1a0004cc:	f001 faae 	bl	1a001a2c <vTaskDelayUntil>
	portTickType xPeriodicity =  500 / portTICK_RATE_MS;
	portTickType xLastWakeTime = xTaskGetTickCount();

	while(TRUE) {
		/*Notifica que llego trama lista*/
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
1a0004d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0004d4:	2200      	movs	r2, #0
1a0004d6:	4611      	mov	r1, r2
1a0004d8:	4610      	mov	r0, r2
1a0004da:	f001 fd81 	bl	1a001fe0 <xTaskNotifyWait>

		/*Proteger datos para hacer copia local*/
		taskENTER_CRITICAL();
1a0004de:	f002 f921 	bl	1a002724 <vPortEnterCritical>
		Frame_parameters.BufferAux = ModuleData.pvPortMallocFunction(sizeof(Data.Buffer));
1a0004e2:	4b16      	ldr	r3, [pc, #88]	; (1a00053c <myTask_1+0xbc>)
1a0004e4:	695b      	ldr	r3, [r3, #20]
1a0004e6:	206a      	movs	r0, #106	; 0x6a
1a0004e8:	2100      	movs	r1, #0
1a0004ea:	4798      	blx	r3
1a0004ec:	4c12      	ldr	r4, [pc, #72]	; (1a000538 <myTask_1+0xb8>)
1a0004ee:	60a0      	str	r0, [r4, #8]
		strcpy((char*)Frame_parameters.BufferAux,(const char*)Data.Buffer);
1a0004f0:	68a0      	ldr	r0, [r4, #8]
1a0004f2:	4913      	ldr	r1, [pc, #76]	; (1a000540 <myTask_1+0xc0>)
1a0004f4:	f003 fe93 	bl	1a00421e <strcpy>
		taskEXIT_CRITICAL();
1a0004f8:	f002 f936 	bl	1a002768 <vPortExitCritical>

		/*Busco posición del inicio de la trama*/
		PtrSOF = strchr((const char*)Frame_parameters.BufferAux, Frame_parameters._SOF);
1a0004fc:	68a0      	ldr	r0, [r4, #8]
1a0004fe:	7821      	ldrb	r1, [r4, #0]
1a000500:	f003 fe80 	bl	1a004204 <strchr>

		if( PtrSOF != NULL ){
1a000504:	4601      	mov	r1, r0
1a000506:	2800      	cmp	r0, #0
1a000508:	d0cc      	beq.n	1a0004a4 <myTask_1+0x24>
			Frame_parameters.T[0] =  ( *(PtrSOF +  OFFSET_TAMANO)-'0' )*10 + (*(PtrSOF +  OFFSET_TAMANO + 1)-'0' ) ; /*T[0] -'0' *10 + T[1] - '0'*/
1a00050a:	7882      	ldrb	r2, [r0, #2]
1a00050c:	78c3      	ldrb	r3, [r0, #3]
1a00050e:	3a30      	subs	r2, #48	; 0x30
1a000510:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000514:	0050      	lsls	r0, r2, #1
1a000516:	4403      	add	r3, r0
1a000518:	3b30      	subs	r3, #48	; 0x30
1a00051a:	b2db      	uxtb	r3, r3
1a00051c:	70a3      	strb	r3, [r4, #2]
			Frame_parameters.Operation = *(PtrSOF +  OFFSET_OP)-'0';
1a00051e:	784b      	ldrb	r3, [r1, #1]
1a000520:	3b30      	subs	r3, #48	; 0x30
1a000522:	b2db      	uxtb	r3, r3
1a000524:	7063      	strb	r3, [r4, #1]
			ModuleData.xMaxStringLength = Frame_parameters.T[0] + NUM_ELEMENTOS_REST_FRAME; /* + los demas elementos del frame*/
1a000526:	78a3      	ldrb	r3, [r4, #2]
1a000528:	3306      	adds	r3, #6
1a00052a:	4904      	ldr	r1, [pc, #16]	; (1a00053c <myTask_1+0xbc>)
1a00052c:	710b      	strb	r3, [r1, #4]

			printf( "T %d\r\n",Frame_parameters.T[0]); // QUITAR
1a00052e:	78a1      	ldrb	r1, [r4, #2]
1a000530:	4804      	ldr	r0, [pc, #16]	; (1a000544 <myTask_1+0xc4>)
1a000532:	f003 fe4f 	bl	1a0041d4 <iprintf>
1a000536:	e7b5      	b.n	1a0004a4 <myTask_1+0x24>
1a000538:	10000000 	.word	0x10000000
1a00053c:	10002bec 	.word	0x10002bec
1a000540:	10002b7c 	.word	0x10002b7c
1a000544:	1a004fc0 	.word	0x1a004fc0

1a000548 <TaskTxUart>:

void Task_ReportHeap_OP3( void* taskParmPtr ){

}
/*===========Task receive==================================================================================*/
void TaskTxUart( void* taskParmPtr ){
1a000548:	b570      	push	{r4, r5, r6, lr}
	while(true){
		/*sincronizar-Permite transmitir por uart lo que se recibe por la cola*/
		//if( pdTRUE == xSemaphoreTake(SemTxUart,portMAX_DELAY) )
		{
			/*Recibe por la cola*/
			rx = ModuleDinamicMemory_receive(&ModuleData, portMAX_DELAY);
1a00054a:	4c0e      	ldr	r4, [pc, #56]	; (1a000584 <TaskTxUart+0x3c>)
1a00054c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000550:	4620      	mov	r0, r4
1a000552:	f7ff ff84 	bl	1a00045e <ModuleDinamicMemory_receive>
1a000556:	4605      	mov	r5, r0

			xSemaphoreTake(SemMutexUart,portMAX_DELAY);
1a000558:	4e0b      	ldr	r6, [pc, #44]	; (1a000588 <TaskTxUart+0x40>)
1a00055a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00055e:	6830      	ldr	r0, [r6, #0]
1a000560:	f000 fda0 	bl	1a0010a4 <xQueueSemaphoreTake>
			printf( "rx %s\r\n",rx );
1a000564:	4629      	mov	r1, r5
1a000566:	4809      	ldr	r0, [pc, #36]	; (1a00058c <TaskTxUart+0x44>)
1a000568:	f003 fe34 	bl	1a0041d4 <iprintf>
			xSemaphoreGive(SemMutexUart);
1a00056c:	2300      	movs	r3, #0
1a00056e:	461a      	mov	r2, r3
1a000570:	4619      	mov	r1, r3
1a000572:	6830      	ldr	r0, [r6, #0]
1a000574:	f000 fbae 	bl	1a000cd4 <xQueueGenericSend>

			/*Libera memoria dinamica*/
			ModuleDinamicMemory_Free(&ModuleData, rx);
1a000578:	4629      	mov	r1, r5
1a00057a:	4620      	mov	r0, r4
1a00057c:	f7ff ff7a 	bl	1a000474 <ModuleDinamicMemory_Free>
1a000580:	e7e3      	b.n	1a00054a <TaskTxUart+0x2>
1a000582:	bf00      	nop
1a000584:	10002bec 	.word	0x10002bec
1a000588:	10002c0c 	.word	0x10002c0c
1a00058c:	1a004fb8 	.word	0x1a004fb8

1a000590 <CallbackRx>:
		}
	}
}

void CallbackRx( void *noUsado ){
1a000590:	b530      	push	{r4, r5, lr}
1a000592:	b085      	sub	sp, #20

	UBaseType_t uxSavedInterruptStatus;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000594:	2300      	movs	r3, #0
1a000596:	9303      	str	r3, [sp, #12]

	char c = uartRxRead( UART_USB );
1a000598:	2003      	movs	r0, #3
1a00059a:	f003 f9cd 	bl	1a003938 <uartRxRead>

	/*Verifica Inicio de trama*/
	if( Frame_parameters._SOF == c) Data.StartFrame = 1;
1a00059e:	4b2b      	ldr	r3, [pc, #172]	; (1a00064c <CallbackRx+0xbc>)
1a0005a0:	781b      	ldrb	r3, [r3, #0]
1a0005a2:	b2db      	uxtb	r3, r3
1a0005a4:	4283      	cmp	r3, r0
1a0005a6:	d039      	beq.n	1a00061c <CallbackRx+0x8c>

	if(Data.StartFrame){
1a0005a8:	4b29      	ldr	r3, [pc, #164]	; (1a000650 <CallbackRx+0xc0>)
1a0005aa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
1a0005ae:	2b00      	cmp	r3, #0
1a0005b0:	d032      	beq.n	1a000618 <CallbackRx+0x88>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0005b2:	f3ef 8311 	mrs	r3, BASEPRI
1a0005b6:	f04f 02a0 	mov.w	r2, #160	; 0xa0
1a0005ba:	f382 8811 	msr	BASEPRI, r2
1a0005be:	f3bf 8f6f 	isb	sy
1a0005c2:	f3bf 8f4f 	dsb	sy
		/*Porteger acceso al buffer*/
		taskENTER_CRITICAL_FROM_ISR();
		Data.Buffer[Data.Index++]= c;
1a0005c6:	4b22      	ldr	r3, [pc, #136]	; (1a000650 <CallbackRx+0xc0>)
1a0005c8:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
1a0005cc:	b2d2      	uxtb	r2, r2
1a0005ce:	1c51      	adds	r1, r2, #1
1a0005d0:	b2c9      	uxtb	r1, r1
1a0005d2:	f883 106b 	strb.w	r1, [r3, #107]	; 0x6b
1a0005d6:	5498      	strb	r0, [r3, r2]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0005d8:	2200      	movs	r2, #0
1a0005da:	f382 8811 	msr	BASEPRI, r2
		taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
	}
	else return;

	if(Data.Index > sizeof(Data)-1) Data.Index =0;
1a0005de:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
1a0005e2:	b2db      	uxtb	r3, r3
1a0005e4:	2b6c      	cmp	r3, #108	; 0x6c
1a0005e6:	d902      	bls.n	1a0005ee <CallbackRx+0x5e>
1a0005e8:	4b19      	ldr	r3, [pc, #100]	; (1a000650 <CallbackRx+0xc0>)
1a0005ea:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	Data.Buffer[Data.Index] = 0;  /*char NULL pos siguiente*/
1a0005ee:	4a18      	ldr	r2, [pc, #96]	; (1a000650 <CallbackRx+0xc0>)
1a0005f0:	f892 306b 	ldrb.w	r3, [r2, #107]	; 0x6b
1a0005f4:	b2db      	uxtb	r3, r3
1a0005f6:	2100      	movs	r1, #0
1a0005f8:	54d1      	strb	r1, [r2, r3]
	if(Frame_parameters._EOF == c){
1a0005fa:	4b14      	ldr	r3, [pc, #80]	; (1a00064c <CallbackRx+0xbc>)
1a0005fc:	7b1b      	ldrb	r3, [r3, #12]
1a0005fe:	b2db      	uxtb	r3, r3
1a000600:	4283      	cmp	r3, r0
1a000602:	d010      	beq.n	1a000626 <CallbackRx+0x96>
		Data.Index =0;
		//		xSemaphoreTakeFromISR(SemMutexUart,xHigherPriorityTaskWoken);
		//		printf( "Recibimos <<%s>> por UART\r\n", Data.Buffer );
		//		xSemaphoreGiveFromISR(SemMutexUart,xHigherPriorityTaskWoken);
	}
	if(xHigherPriorityTaskWoken) portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000604:	9b03      	ldr	r3, [sp, #12]
1a000606:	b13b      	cbz	r3, 1a000618 <CallbackRx+0x88>
1a000608:	4b12      	ldr	r3, [pc, #72]	; (1a000654 <CallbackRx+0xc4>)
1a00060a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00060e:	601a      	str	r2, [r3, #0]
1a000610:	f3bf 8f4f 	dsb	sy
1a000614:	f3bf 8f6f 	isb	sy
}
1a000618:	b005      	add	sp, #20
1a00061a:	bd30      	pop	{r4, r5, pc}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	char c = uartRxRead( UART_USB );

	/*Verifica Inicio de trama*/
	if( Frame_parameters._SOF == c) Data.StartFrame = 1;
1a00061c:	4b0c      	ldr	r3, [pc, #48]	; (1a000650 <CallbackRx+0xc0>)
1a00061e:	2201      	movs	r2, #1
1a000620:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
1a000624:	e7c0      	b.n	1a0005a8 <CallbackRx+0x18>
	else return;

	if(Data.Index > sizeof(Data)-1) Data.Index =0;
	Data.Buffer[Data.Index] = 0;  /*char NULL pos siguiente*/
	if(Frame_parameters._EOF == c){
		Data.StartFrame = 0;
1a000626:	4615      	mov	r5, r2
1a000628:	460c      	mov	r4, r1
1a00062a:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
		Data.Ready = 1;
1a00062e:	2301      	movs	r3, #1
1a000630:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
		xTaskNotifyFromISR(xTaskHandle_RxNotify,0,eNoAction,&xHigherPriorityTaskWoken);
1a000634:	4b08      	ldr	r3, [pc, #32]	; (1a000658 <CallbackRx+0xc8>)
1a000636:	6818      	ldr	r0, [r3, #0]
1a000638:	ab03      	add	r3, sp, #12
1a00063a:	9300      	str	r3, [sp, #0]
1a00063c:	460b      	mov	r3, r1
1a00063e:	460a      	mov	r2, r1
1a000640:	f001 fd1a 	bl	1a002078 <xTaskGenericNotifyFromISR>
		Data.Index =0;
1a000644:	f885 406b 	strb.w	r4, [r5, #107]	; 0x6b
1a000648:	e7dc      	b.n	1a000604 <CallbackRx+0x74>
1a00064a:	bf00      	nop
1a00064c:	10000000 	.word	0x10000000
1a000650:	10002b7c 	.word	0x10002b7c
1a000654:	e000ed04 	.word	0xe000ed04
1a000658:	100000bc 	.word	0x100000bc

1a00065c <initialise_monitor_handles>:

WEAK void initialise_monitor_handles(void);

void initialise_monitor_handles(void)
{
}
1a00065c:	4770      	bx	lr
1a00065e:	Address 0x000000001a00065e is out of bounds.


1a000660 <Reset_Handler>:
extern unsigned int __data_section_table;
extern unsigned int __data_section_table_end;
extern unsigned int __bss_section_table;
extern unsigned int __bss_section_table_end;

void Reset_Handler(void) {
1a000660:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000662:	b672      	cpsid	i

    volatile unsigned int *RESET_CONTROL = (unsigned int *) 0x40053100;
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000664:	4b19      	ldr	r3, [pc, #100]	; (1a0006cc <Reset_Handler+0x6c>)
1a000666:	4a1a      	ldr	r2, [pc, #104]	; (1a0006d0 <Reset_Handler+0x70>)
1a000668:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00066a:	3304      	adds	r3, #4
1a00066c:	4a19      	ldr	r2, [pc, #100]	; (1a0006d4 <Reset_Handler+0x74>)
1a00066e:	601a      	str	r2, [r3, #0]

    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000670:	2300      	movs	r3, #0
1a000672:	e005      	b.n	1a000680 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000674:	4a18      	ldr	r2, [pc, #96]	; (1a0006d8 <Reset_Handler+0x78>)
1a000676:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00067a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    *(RESET_CONTROL + 0) = 0x10DF1000;
    *(RESET_CONTROL + 1) = 0x01DFF7FF;

    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00067e:	3301      	adds	r3, #1
1a000680:	2b07      	cmp	r3, #7
1a000682:	d9f7      	bls.n	1a000674 <Reset_Handler+0x14>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }
    __asm__ volatile("cpsie i");
1a000684:	b662      	cpsie	i

    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    SectionTableAddr = &__data_section_table;
1a000686:	4b15      	ldr	r3, [pc, #84]	; (1a0006dc <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000688:	e007      	b.n	1a00069a <Reset_Handler+0x3a>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a00068a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00068e:	689a      	ldr	r2, [r3, #8]
1a000690:	6859      	ldr	r1, [r3, #4]
1a000692:	6818      	ldr	r0, [r3, #0]
1a000694:	f7ff fd79 	bl	1a00018a <data_init>

    SectionTableAddr = &__data_section_table;
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000698:	4623      	mov	r3, r4

    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    SectionTableAddr = &__data_section_table;
    while (SectionTableAddr < &__data_section_table_end) {
1a00069a:	4a11      	ldr	r2, [pc, #68]	; (1a0006e0 <Reset_Handler+0x80>)
1a00069c:	4293      	cmp	r3, r2
1a00069e:	d3f4      	bcc.n	1a00068a <Reset_Handler+0x2a>
1a0006a0:	e006      	b.n	1a0006b0 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a0006a2:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a0006a4:	6859      	ldr	r1, [r3, #4]
1a0006a6:	f854 0b08 	ldr.w	r0, [r4], #8
1a0006aa:	f7ff fd7d 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0006ae:	4623      	mov	r3, r4
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
1a0006b0:	4a0c      	ldr	r2, [pc, #48]	; (1a0006e4 <Reset_Handler+0x84>)
1a0006b2:	4293      	cmp	r3, r2
1a0006b4:	d3f5      	bcc.n	1a0006a2 <Reset_Handler+0x42>
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
    }

    SystemInit();
1a0006b6:	f003 f829 	bl	1a00370c <SystemInit>

    __libc_init_array();
1a0006ba:	f003 fd53 	bl	1a004164 <__libc_init_array>
    initialise_monitor_handles();
1a0006be:	f7ff ffcd 	bl	1a00065c <initialise_monitor_handles>
    main();
1a0006c2:	f7ff fe1d 	bl	1a000300 <main>
    while (1) {
        __asm__ volatile("wfi");
1a0006c6:	bf30      	wfi
1a0006c8:	e7fd      	b.n	1a0006c6 <Reset_Handler+0x66>
1a0006ca:	bf00      	nop
1a0006cc:	40053100 	.word	0x40053100
1a0006d0:	10df1000 	.word	0x10df1000
1a0006d4:	01dff7ff 	.word	0x01dff7ff
1a0006d8:	e000e280 	.word	0xe000e280
1a0006dc:	1a000114 	.word	0x1a000114
1a0006e0:	1a000150 	.word	0x1a000150
1a0006e4:	1a000178 	.word	0x1a000178

1a0006e8 <_fini>:
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

WEAK void _fini(void);
void _fini(void) {}
1a0006e8:	4770      	bx	lr

1a0006ea <_init>:

WEAK void _init(void);
void _init(void) {}
1a0006ea:	4770      	bx	lr

1a0006ec <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0006ec:	2309      	movs	r3, #9
1a0006ee:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0006f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006f4:	4770      	bx	lr

1a0006f6 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0006f6:	2358      	movs	r3, #88	; 0x58
1a0006f8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0006fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006fe:	4770      	bx	lr

1a000700 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000700:	2902      	cmp	r1, #2
1a000702:	d801      	bhi.n	1a000708 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000704:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000706:	4770      	bx	lr
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000708:	2309      	movs	r3, #9
1a00070a:	6003      	str	r3, [r0, #0]
       return -1;
1a00070c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000710:	4770      	bx	lr

1a000712 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000712:	2358      	movs	r3, #88	; 0x58
1a000714:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00071a:	4770      	bx	lr

1a00071c <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a00071c:	2902      	cmp	r1, #2
1a00071e:	d81f      	bhi.n	1a000760 <_read_r+0x44>
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000724:	461d      	mov	r5, r3
1a000726:	4617      	mov	r7, r2
1a000728:	4606      	mov	r6, r0
  size_t i = 0;
1a00072a:	2400      	movs	r4, #0
  switch (fd) {
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a00072c:	42ac      	cmp	r4, r5
1a00072e:	d211      	bcs.n	1a000754 <_read_r+0x38>
         int c = __stdio_getchar();
1a000730:	f002 fa3d 	bl	1a002bae <__stdio_getchar>
         if( c != -1 ){
1a000734:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000738:	d0f8      	beq.n	1a00072c <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00073a:	f104 0801 	add.w	r8, r4, #1
1a00073e:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000740:	280d      	cmp	r0, #13
1a000742:	d003      	beq.n	1a00074c <_read_r+0x30>
1a000744:	280a      	cmp	r0, #10
1a000746:	d001      	beq.n	1a00074c <_read_r+0x30>
  case 1:
  case 2:
      while( i < n ){
         int c = __stdio_getchar();
         if( c != -1 ){
            ((char*) b)[i++] = (char) c;
1a000748:	4644      	mov	r4, r8
1a00074a:	e7ef      	b.n	1a00072c <_read_r+0x10>
            if( c == '\r' || c == '\n' ){
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a00074c:	f002 fa2f 	bl	1a002bae <__stdio_getchar>
               return i;
1a000750:	4640      	mov	r0, r8
1a000752:	e003      	b.n	1a00075c <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000754:	2313      	movs	r3, #19
1a000756:	6033      	str	r3, [r6, #0]
      return -1;
1a000758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a00075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         }
      }
      SET_ERR(ENODEV);
      return -1;
  default:
      SET_ERR(ENODEV);
1a000760:	2313      	movs	r3, #19
1a000762:	6003      	str	r3, [r0, #0]
      return -1;
1a000764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
1a000768:	4770      	bx	lr

1a00076a <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00076a:	2902      	cmp	r1, #2
1a00076c:	d80c      	bhi.n	1a000788 <_write_r+0x1e>
   UNUSED(st);
   SET_ERR(ENOSYS);
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00076e:	b570      	push	{r4, r5, r6, lr}
1a000770:	461d      	mov	r5, r3
1a000772:	4616      	mov	r6, r2
   size_t i;
   switch (fd) {
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000774:	2400      	movs	r4, #0
1a000776:	e003      	b.n	1a000780 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000778:	5d30      	ldrb	r0, [r6, r4]
1a00077a:	f002 fa13 	bl	1a002ba4 <__stdio_putchar>
   size_t i;
   switch (fd) {
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00077e:	3401      	adds	r4, #1
1a000780:	42ac      	cmp	r4, r5
1a000782:	d3f9      	bcc.n	1a000778 <_write_r+0xe>
           __stdio_putchar(((char*) b)[i]);
       return n;
1a000784:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000786:	bd70      	pop	{r4, r5, r6, pc}
   case 2:
       for (i = 0; i < n; i++)
           __stdio_putchar(((char*) b)[i]);
       return n;
   default:
       SET_ERR(ENODEV);
1a000788:	2313      	movs	r3, #19
1a00078a:	6003      	str	r3, [r0, #0]
       return -1;
1a00078c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   }
}
1a000790:	4770      	bx	lr
1a000792:	Address 0x000000001a000792 is out of bounds.


1a000794 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000794:	4b05      	ldr	r3, [pc, #20]	; (1a0007ac <_sbrk_r+0x18>)
1a000796:	681b      	ldr	r3, [r3, #0]
1a000798:	b123      	cbz	r3, 1a0007a4 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00079a:	4b04      	ldr	r3, [pc, #16]	; (1a0007ac <_sbrk_r+0x18>)
1a00079c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00079e:	4401      	add	r1, r0
1a0007a0:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0007a2:	4770      	bx	lr
void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
       heap_end = &_pvHeapStart;
1a0007a4:	4b01      	ldr	r3, [pc, #4]	; (1a0007ac <_sbrk_r+0x18>)
1a0007a6:	4a02      	ldr	r2, [pc, #8]	; (1a0007b0 <_sbrk_r+0x1c>)
1a0007a8:	601a      	str	r2, [r3, #0]
1a0007aa:	e7f6      	b.n	1a00079a <_sbrk_r+0x6>
1a0007ac:	100000c0 	.word	0x100000c0
1a0007b0:	10002c58 	.word	0x10002c58

1a0007b4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a0007b4:	4a12      	ldr	r2, [pc, #72]	; (1a000800 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a0007b6:	f012 0f07 	tst.w	r2, #7
1a0007ba:	d01e      	beq.n	1a0007fa <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a0007bc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0007be:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a0007c2:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a0007c6:	4413      	add	r3, r2
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0007c8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a0007ca:	480e      	ldr	r0, [pc, #56]	; (1a000804 <prvHeapInit+0x50>)
1a0007cc:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a0007ce:	2100      	movs	r1, #0
1a0007d0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a0007d2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a0007d4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0007d6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a0007da:	480b      	ldr	r0, [pc, #44]	; (1a000808 <prvHeapInit+0x54>)
1a0007dc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a0007de:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a0007e0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a0007e2:	1a99      	subs	r1, r3, r2
1a0007e4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a0007e6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0007e8:	4b08      	ldr	r3, [pc, #32]	; (1a00080c <prvHeapInit+0x58>)
1a0007ea:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0007ec:	4b08      	ldr	r3, [pc, #32]	; (1a000810 <prvHeapInit+0x5c>)
1a0007ee:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0007f0:	4b08      	ldr	r3, [pc, #32]	; (1a000814 <prvHeapInit+0x60>)
1a0007f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a0007f6:	601a      	str	r2, [r3, #0]
}
1a0007f8:	4770      	bx	lr
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a0007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a0007fe:	e7e4      	b.n	1a0007ca <prvHeapInit+0x16>
1a000800:	100000c8 	.word	0x100000c8
1a000804:	100020d4 	.word	0x100020d4
1a000808:	100000c4 	.word	0x100000c4
1a00080c:	100020d0 	.word	0x100020d0
1a000810:	100020cc 	.word	0x100020cc
1a000814:	100020c8 	.word	0x100020c8

1a000818 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000818:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00081a:	4b13      	ldr	r3, [pc, #76]	; (1a000868 <prvInsertBlockIntoFreeList+0x50>)
1a00081c:	681a      	ldr	r2, [r3, #0]
1a00081e:	4282      	cmp	r2, r0
1a000820:	d31b      	bcc.n	1a00085a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000822:	6859      	ldr	r1, [r3, #4]
1a000824:	185c      	adds	r4, r3, r1
1a000826:	4284      	cmp	r4, r0
1a000828:	d103      	bne.n	1a000832 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a00082a:	6840      	ldr	r0, [r0, #4]
1a00082c:	4401      	add	r1, r0
1a00082e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000830:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000832:	6841      	ldr	r1, [r0, #4]
1a000834:	1844      	adds	r4, r0, r1
1a000836:	42a2      	cmp	r2, r4
1a000838:	d113      	bne.n	1a000862 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00083a:	4c0c      	ldr	r4, [pc, #48]	; (1a00086c <prvInsertBlockIntoFreeList+0x54>)
1a00083c:	6824      	ldr	r4, [r4, #0]
1a00083e:	42a2      	cmp	r2, r4
1a000840:	d00d      	beq.n	1a00085e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000842:	6852      	ldr	r2, [r2, #4]
1a000844:	4411      	add	r1, r2
1a000846:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000848:	681a      	ldr	r2, [r3, #0]
1a00084a:	6812      	ldr	r2, [r2, #0]
1a00084c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a00084e:	4298      	cmp	r0, r3
1a000850:	d000      	beq.n	1a000854 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000852:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000854:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000858:	4770      	bx	lr
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00085a:	4613      	mov	r3, r2
1a00085c:	e7de      	b.n	1a00081c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a00085e:	6004      	str	r4, [r0, #0]
1a000860:	e7f5      	b.n	1a00084e <prvInsertBlockIntoFreeList+0x36>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000862:	6002      	str	r2, [r0, #0]
1a000864:	e7f3      	b.n	1a00084e <prvInsertBlockIntoFreeList+0x36>
1a000866:	bf00      	nop
1a000868:	100020d4 	.word	0x100020d4
1a00086c:	100000c4 	.word	0x100000c4

1a000870 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000870:	b570      	push	{r4, r5, r6, lr}
1a000872:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
1a000874:	f000 ffc6 	bl	1a001804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
1a000878:	4b3f      	ldr	r3, [pc, #252]	; (1a000978 <pvPortMalloc+0x108>)
1a00087a:	681b      	ldr	r3, [r3, #0]
1a00087c:	b1a3      	cbz	r3, 1a0008a8 <pvPortMalloc+0x38>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a00087e:	4b3f      	ldr	r3, [pc, #252]	; (1a00097c <pvPortMalloc+0x10c>)
1a000880:	681b      	ldr	r3, [r3, #0]
1a000882:	421c      	tst	r4, r3
1a000884:	d013      	beq.n	1a0008ae <pvPortMalloc+0x3e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000886:	f001 f857 	bl	1a001938 <xTaskResumeAll>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
1a00088a:	2600      	movs	r6, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a00088c:	f000 fd77 	bl	1a00137e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000890:	f016 0f07 	tst.w	r6, #7
1a000894:	d06e      	beq.n	1a000974 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000896:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00089a:	f383 8811 	msr	BASEPRI, r3
1a00089e:	f3bf 8f6f 	isb	sy
1a0008a2:	f3bf 8f4f 	dsb	sy
1a0008a6:	e7fe      	b.n	1a0008a6 <pvPortMalloc+0x36>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
		{
			prvHeapInit();
1a0008a8:	f7ff ff84 	bl	1a0007b4 <prvHeapInit>
1a0008ac:	e7e7      	b.n	1a00087e <pvPortMalloc+0xe>
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
1a0008ae:	b194      	cbz	r4, 1a0008d6 <pvPortMalloc+0x66>
			{
				xWantedSize += xHeapStructSize;
1a0008b0:	3408      	adds	r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a0008b2:	f014 0f07 	tst.w	r4, #7
1a0008b6:	d00e      	beq.n	1a0008d6 <pvPortMalloc+0x66>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0008b8:	f024 0407 	bic.w	r4, r4, #7
1a0008bc:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0008be:	f004 0307 	and.w	r3, r4, #7
1a0008c2:	b143      	cbz	r3, 1a0008d6 <pvPortMalloc+0x66>
1a0008c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008c8:	f383 8811 	msr	BASEPRI, r3
1a0008cc:	f3bf 8f6f 	isb	sy
1a0008d0:	f3bf 8f4f 	dsb	sy
1a0008d4:	e7fe      	b.n	1a0008d4 <pvPortMalloc+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a0008d6:	b134      	cbz	r4, 1a0008e6 <pvPortMalloc+0x76>
1a0008d8:	4b29      	ldr	r3, [pc, #164]	; (1a000980 <pvPortMalloc+0x110>)
1a0008da:	681b      	ldr	r3, [r3, #0]
1a0008dc:	42a3      	cmp	r3, r4
1a0008de:	d306      	bcc.n	1a0008ee <pvPortMalloc+0x7e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
1a0008e0:	4b28      	ldr	r3, [pc, #160]	; (1a000984 <pvPortMalloc+0x114>)
1a0008e2:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0008e4:	e009      	b.n	1a0008fa <pvPortMalloc+0x8a>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0008e6:	f001 f827 	bl	1a001938 <xTaskResumeAll>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
1a0008ea:	2600      	movs	r6, #0
1a0008ec:	e7ce      	b.n	1a00088c <pvPortMalloc+0x1c>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0008ee:	f001 f823 	bl	1a001938 <xTaskResumeAll>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
1a0008f2:	2600      	movs	r6, #0
1a0008f4:	e7ca      	b.n	1a00088c <pvPortMalloc+0x1c>
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
				{
					pxPreviousBlock = pxBlock;
1a0008f6:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a0008f8:	4615      	mov	r5, r2
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0008fa:	686a      	ldr	r2, [r5, #4]
1a0008fc:	42a2      	cmp	r2, r4
1a0008fe:	d202      	bcs.n	1a000906 <pvPortMalloc+0x96>
1a000900:	682a      	ldr	r2, [r5, #0]
1a000902:	2a00      	cmp	r2, #0
1a000904:	d1f7      	bne.n	1a0008f6 <pvPortMalloc+0x86>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
1a000906:	4a1c      	ldr	r2, [pc, #112]	; (1a000978 <pvPortMalloc+0x108>)
1a000908:	6812      	ldr	r2, [r2, #0]
1a00090a:	42aa      	cmp	r2, r5
1a00090c:	d014      	beq.n	1a000938 <pvPortMalloc+0xc8>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a00090e:	681e      	ldr	r6, [r3, #0]
1a000910:	3608      	adds	r6, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000912:	682a      	ldr	r2, [r5, #0]
1a000914:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000916:	686b      	ldr	r3, [r5, #4]
1a000918:	1b1b      	subs	r3, r3, r4
1a00091a:	2b10      	cmp	r3, #16
1a00091c:	d914      	bls.n	1a000948 <pvPortMalloc+0xd8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a00091e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000920:	f010 0f07 	tst.w	r0, #7
1a000924:	d00c      	beq.n	1a000940 <pvPortMalloc+0xd0>
1a000926:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00092a:	f383 8811 	msr	BASEPRI, r3
1a00092e:	f3bf 8f6f 	isb	sy
1a000932:	f3bf 8f4f 	dsb	sy
1a000936:	e7fe      	b.n	1a000936 <pvPortMalloc+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000938:	f000 fffe 	bl	1a001938 <xTaskResumeAll>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
1a00093c:	2600      	movs	r6, #0
1a00093e:	e7a5      	b.n	1a00088c <pvPortMalloc+0x1c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000940:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000942:	606c      	str	r4, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000944:	f7ff ff68 	bl	1a000818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000948:	686a      	ldr	r2, [r5, #4]
1a00094a:	490d      	ldr	r1, [pc, #52]	; (1a000980 <pvPortMalloc+0x110>)
1a00094c:	680b      	ldr	r3, [r1, #0]
1a00094e:	1a9b      	subs	r3, r3, r2
1a000950:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000952:	490d      	ldr	r1, [pc, #52]	; (1a000988 <pvPortMalloc+0x118>)
1a000954:	6809      	ldr	r1, [r1, #0]
1a000956:	428b      	cmp	r3, r1
1a000958:	d201      	bcs.n	1a00095e <pvPortMalloc+0xee>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a00095a:	490b      	ldr	r1, [pc, #44]	; (1a000988 <pvPortMalloc+0x118>)
1a00095c:	600b      	str	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a00095e:	4b07      	ldr	r3, [pc, #28]	; (1a00097c <pvPortMalloc+0x10c>)
1a000960:	681b      	ldr	r3, [r3, #0]
1a000962:	4313      	orrs	r3, r2
1a000964:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000966:	2300      	movs	r3, #0
1a000968:	602b      	str	r3, [r5, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a00096a:	f000 ffe5 	bl	1a001938 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1a00096e:	2e00      	cmp	r6, #0
1a000970:	d18e      	bne.n	1a000890 <pvPortMalloc+0x20>
1a000972:	e78b      	b.n	1a00088c <pvPortMalloc+0x1c>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
1a000974:	4630      	mov	r0, r6
1a000976:	bd70      	pop	{r4, r5, r6, pc}
1a000978:	100000c4 	.word	0x100000c4
1a00097c:	100020c8 	.word	0x100020c8
1a000980:	100020cc 	.word	0x100020cc
1a000984:	100020d4 	.word	0x100020d4
1a000988:	100020d0 	.word	0x100020d0

1a00098c <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
1a00098c:	b380      	cbz	r0, 1a0009f0 <vPortFree+0x64>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
1a00098e:	b538      	push	{r3, r4, r5, lr}
1a000990:	4604      	mov	r4, r0

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
1a000992:	f1a0 0508 	sub.w	r5, r0, #8

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000996:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00099a:	4916      	ldr	r1, [pc, #88]	; (1a0009f4 <vPortFree+0x68>)
1a00099c:	6809      	ldr	r1, [r1, #0]
1a00099e:	420a      	tst	r2, r1
1a0009a0:	d108      	bne.n	1a0009b4 <vPortFree+0x28>
1a0009a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009a6:	f383 8811 	msr	BASEPRI, r3
1a0009aa:	f3bf 8f6f 	isb	sy
1a0009ae:	f3bf 8f4f 	dsb	sy
1a0009b2:	e7fe      	b.n	1a0009b2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a0009b4:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a0009b8:	b140      	cbz	r0, 1a0009cc <vPortFree+0x40>
1a0009ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009be:	f383 8811 	msr	BASEPRI, r3
1a0009c2:	f3bf 8f6f 	isb	sy
1a0009c6:	f3bf 8f4f 	dsb	sy
1a0009ca:	e7fe      	b.n	1a0009ca <vPortFree+0x3e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a0009cc:	ea22 0201 	bic.w	r2, r2, r1
1a0009d0:	f844 2c04 	str.w	r2, [r4, #-4]

				vTaskSuspendAll();
1a0009d4:	f000 ff16 	bl	1a001804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
1a0009d8:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a0009dc:	4a06      	ldr	r2, [pc, #24]	; (1a0009f8 <vPortFree+0x6c>)
1a0009de:	6813      	ldr	r3, [r2, #0]
1a0009e0:	440b      	add	r3, r1
1a0009e2:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a0009e4:	4628      	mov	r0, r5
1a0009e6:	f7ff ff17 	bl	1a000818 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
1a0009ea:	f000 ffa5 	bl	1a001938 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
1a0009ee:	bd38      	pop	{r3, r4, r5, pc}
1a0009f0:	4770      	bx	lr
1a0009f2:	bf00      	nop
1a0009f4:	100020c8 	.word	0x100020c8
1a0009f8:	100020cc 	.word	0x100020cc

1a0009fc <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a0009fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a0009fe:	b123      	cbz	r3, 1a000a0a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000a00:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000a02:	6818      	ldr	r0, [r3, #0]
1a000a04:	f1c0 0007 	rsb	r0, r0, #7
1a000a08:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000a0a:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000a0c:	4770      	bx	lr

1a000a0e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000a0e:	b510      	push	{r4, lr}
1a000a10:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000a12:	f001 fe87 	bl	1a002724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000a16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000a18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000a1a:	429a      	cmp	r2, r3
1a000a1c:	d004      	beq.n	1a000a28 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000a1e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000a20:	f001 fea2 	bl	1a002768 <vPortExitCritical>

	return xReturn;
}
1a000a24:	4620      	mov	r0, r4
1a000a26:	bd10      	pop	{r4, pc}

	taskENTER_CRITICAL();
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
		{
			xReturn = pdTRUE;
1a000a28:	2401      	movs	r4, #1
1a000a2a:	e7f9      	b.n	1a000a20 <prvIsQueueFull+0x12>

1a000a2c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
1a000a2c:	b510      	push	{r4, lr}
1a000a2e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000a30:	f001 fe78 	bl	1a002724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000a36:	b123      	cbz	r3, 1a000a42 <prvIsQueueEmpty+0x16>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000a38:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000a3a:	f001 fe95 	bl	1a002768 <vPortExitCritical>

	return xReturn;
}
1a000a3e:	4620      	mov	r0, r4
1a000a40:	bd10      	pop	{r4, pc}

	taskENTER_CRITICAL();
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
		{
			xReturn = pdTRUE;
1a000a42:	2401      	movs	r4, #1
1a000a44:	e7f9      	b.n	1a000a3a <prvIsQueueEmpty+0xe>

1a000a46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
1a000a46:	b570      	push	{r4, r5, r6, lr}
1a000a48:	4604      	mov	r4, r0
1a000a4a:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000a4c:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000a4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000a50:	b95a      	cbnz	r2, 1a000a6a <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000a52:	6803      	ldr	r3, [r0, #0]
1a000a54:	b11b      	cbz	r3, 1a000a5e <prvCopyDataToQueue+0x18>
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000a56:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000a58:	3501      	adds	r5, #1
1a000a5a:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
1a000a5c:	bd70      	pop	{r4, r5, r6, pc}
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000a5e:	6840      	ldr	r0, [r0, #4]
1a000a60:	f001 f9f8 	bl	1a001e54 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000a64:	2300      	movs	r3, #0
1a000a66:	6063      	str	r3, [r4, #4]
1a000a68:	e7f6      	b.n	1a000a58 <prvCopyDataToQueue+0x12>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
1a000a6a:	b96e      	cbnz	r6, 1a000a88 <prvCopyDataToQueue+0x42>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000a6c:	6880      	ldr	r0, [r0, #8]
1a000a6e:	f003 fb9d 	bl	1a0041ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000a72:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000a74:	68a3      	ldr	r3, [r4, #8]
1a000a76:	4413      	add	r3, r2
1a000a78:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000a7a:	6862      	ldr	r2, [r4, #4]
1a000a7c:	4293      	cmp	r3, r2
1a000a7e:	d319      	bcc.n	1a000ab4 <prvCopyDataToQueue+0x6e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000a80:	6823      	ldr	r3, [r4, #0]
1a000a82:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000a84:	2000      	movs	r0, #0
1a000a86:	e7e7      	b.n	1a000a58 <prvCopyDataToQueue+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000a88:	68c0      	ldr	r0, [r0, #12]
1a000a8a:	f003 fb8f 	bl	1a0041ac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000a8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000a90:	4252      	negs	r2, r2
1a000a92:	68e3      	ldr	r3, [r4, #12]
1a000a94:	4413      	add	r3, r2
1a000a96:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000a98:	6821      	ldr	r1, [r4, #0]
1a000a9a:	428b      	cmp	r3, r1
1a000a9c:	d202      	bcs.n	1a000aa4 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000a9e:	6863      	ldr	r3, [r4, #4]
1a000aa0:	441a      	add	r2, r3
1a000aa2:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
1a000aa4:	2e02      	cmp	r6, #2
1a000aa6:	d001      	beq.n	1a000aac <prvCopyDataToQueue+0x66>
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000aa8:	2000      	movs	r0, #0
1a000aaa:	e7d5      	b.n	1a000a58 <prvCopyDataToQueue+0x12>
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000aac:	b125      	cbz	r5, 1a000ab8 <prvCopyDataToQueue+0x72>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1a000aae:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000ab0:	2000      	movs	r0, #0
1a000ab2:	e7d1      	b.n	1a000a58 <prvCopyDataToQueue+0x12>
1a000ab4:	2000      	movs	r0, #0
1a000ab6:	e7cf      	b.n	1a000a58 <prvCopyDataToQueue+0x12>
1a000ab8:	2000      	movs	r0, #0
1a000aba:	e7cd      	b.n	1a000a58 <prvCopyDataToQueue+0x12>

1a000abc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000abc:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000abe:	b172      	cbz	r2, 1a000ade <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
1a000ac0:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000ac2:	68c3      	ldr	r3, [r0, #12]
1a000ac4:	4413      	add	r3, r2
1a000ac6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000ac8:	6844      	ldr	r4, [r0, #4]
1a000aca:	42a3      	cmp	r3, r4
1a000acc:	d301      	bcc.n	1a000ad2 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000ace:	6803      	ldr	r3, [r0, #0]
1a000ad0:	60c3      	str	r3, [r0, #12]
1a000ad2:	460c      	mov	r4, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000ad4:	68c1      	ldr	r1, [r0, #12]
1a000ad6:	4620      	mov	r0, r4
1a000ad8:	f003 fb68 	bl	1a0041ac <memcpy>
	}
}
1a000adc:	bd10      	pop	{r4, pc}
1a000ade:	4770      	bx	lr

1a000ae0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
1a000ae0:	b538      	push	{r3, r4, r5, lr}
1a000ae2:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
1a000ae4:	f001 fe1e 	bl	1a002724 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
1a000ae8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000aec:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000aee:	e003      	b.n	1a000af8 <prvUnlockQueue+0x18>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
1a000af0:	f001 f93e 	bl	1a001d70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1a000af4:	3c01      	subs	r4, #1
1a000af6:	b264      	sxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000af8:	2c00      	cmp	r4, #0
1a000afa:	dd08      	ble.n	1a000b0e <prvUnlockQueue+0x2e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000afc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000afe:	b133      	cbz	r3, 1a000b0e <prvUnlockQueue+0x2e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b00:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000b04:	f001 f8a2 	bl	1a001c4c <xTaskRemoveFromEventList>
1a000b08:	2800      	cmp	r0, #0
1a000b0a:	d0f3      	beq.n	1a000af4 <prvUnlockQueue+0x14>
1a000b0c:	e7f0      	b.n	1a000af0 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
1a000b0e:	23ff      	movs	r3, #255	; 0xff
1a000b10:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
1a000b14:	f001 fe28 	bl	1a002768 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1a000b18:	f001 fe04 	bl	1a002724 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
1a000b1c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000b20:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000b22:	e003      	b.n	1a000b2c <prvUnlockQueue+0x4c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					vTaskMissedYield();
1a000b24:	f001 f924 	bl	1a001d70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1a000b28:	3c01      	subs	r4, #1
1a000b2a:	b264      	sxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000b2c:	2c00      	cmp	r4, #0
1a000b2e:	dd08      	ble.n	1a000b42 <prvUnlockQueue+0x62>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000b30:	692b      	ldr	r3, [r5, #16]
1a000b32:	b133      	cbz	r3, 1a000b42 <prvUnlockQueue+0x62>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000b34:	f105 0010 	add.w	r0, r5, #16
1a000b38:	f001 f888 	bl	1a001c4c <xTaskRemoveFromEventList>
1a000b3c:	2800      	cmp	r0, #0
1a000b3e:	d0f3      	beq.n	1a000b28 <prvUnlockQueue+0x48>
1a000b40:	e7f0      	b.n	1a000b24 <prvUnlockQueue+0x44>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
1a000b42:	23ff      	movs	r3, #255	; 0xff
1a000b44:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
1a000b48:	f001 fe0e 	bl	1a002768 <vPortExitCritical>
}
1a000b4c:	bd38      	pop	{r3, r4, r5, pc}
1a000b4e:	Address 0x000000001a000b4e is out of bounds.


1a000b50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1a000b50:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000b52:	b940      	cbnz	r0, 1a000b66 <xQueueGenericReset+0x16>
1a000b54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b58:	f383 8811 	msr	BASEPRI, r3
1a000b5c:	f3bf 8f6f 	isb	sy
1a000b60:	f3bf 8f4f 	dsb	sy
1a000b64:	e7fe      	b.n	1a000b64 <xQueueGenericReset+0x14>
1a000b66:	4604      	mov	r4, r0
1a000b68:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
1a000b6a:	f001 fddb 	bl	1a002724 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000b6e:	6821      	ldr	r1, [r4, #0]
1a000b70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000b74:	fb03 1002 	mla	r0, r3, r2, r1
1a000b78:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000b7a:	2000      	movs	r0, #0
1a000b7c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000b7e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000b80:	3a01      	subs	r2, #1
1a000b82:	fb02 1303 	mla	r3, r2, r3, r1
1a000b86:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000b88:	23ff      	movs	r3, #255	; 0xff
1a000b8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
1a000b92:	b9a5      	cbnz	r5, 1a000bbe <xQueueGenericReset+0x6e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000b94:	6923      	ldr	r3, [r4, #16]
1a000b96:	b91b      	cbnz	r3, 1a000ba0 <xQueueGenericReset+0x50>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
1a000b98:	f001 fde6 	bl	1a002768 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
1a000b9c:	2001      	movs	r0, #1
1a000b9e:	bd38      	pop	{r3, r4, r5, pc}
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000ba0:	f104 0010 	add.w	r0, r4, #16
1a000ba4:	f001 f852 	bl	1a001c4c <xTaskRemoveFromEventList>
1a000ba8:	2800      	cmp	r0, #0
1a000baa:	d0f5      	beq.n	1a000b98 <xQueueGenericReset+0x48>
				{
					queueYIELD_IF_USING_PREEMPTION();
1a000bac:	4b08      	ldr	r3, [pc, #32]	; (1a000bd0 <xQueueGenericReset+0x80>)
1a000bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bb2:	601a      	str	r2, [r3, #0]
1a000bb4:	f3bf 8f4f 	dsb	sy
1a000bb8:	f3bf 8f6f 	isb	sy
1a000bbc:	e7ec      	b.n	1a000b98 <xQueueGenericReset+0x48>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000bbe:	f104 0010 	add.w	r0, r4, #16
1a000bc2:	f000 fb7a 	bl	1a0012ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000bc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000bca:	f000 fb76 	bl	1a0012ba <vListInitialise>
1a000bce:	e7e3      	b.n	1a000b98 <xQueueGenericReset+0x48>
1a000bd0:	e000ed04 	.word	0xe000ed04

1a000bd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1a000bd4:	b538      	push	{r3, r4, r5, lr}
1a000bd6:	461d      	mov	r5, r3
1a000bd8:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1a000bda:	460b      	mov	r3, r1
1a000bdc:	b149      	cbz	r1, 1a000bf2 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000bde:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1a000be0:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000be2:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000be4:	2101      	movs	r1, #1
1a000be6:	4620      	mov	r0, r4
1a000be8:	f7ff ffb2 	bl	1a000b50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
1a000bec:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
1a000bf0:	bd38      	pop	{r3, r4, r5, pc}
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000bf2:	6024      	str	r4, [r4, #0]
1a000bf4:	e7f4      	b.n	1a000be0 <prvInitialiseNewQueue+0xc>

1a000bf6 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000bf6:	b940      	cbnz	r0, 1a000c0a <xQueueGenericCreateStatic+0x14>
1a000bf8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bfc:	f383 8811 	msr	BASEPRI, r3
1a000c00:	f3bf 8f6f 	isb	sy
1a000c04:	f3bf 8f4f 	dsb	sy
1a000c08:	e7fe      	b.n	1a000c08 <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
1a000c0a:	b510      	push	{r4, lr}
1a000c0c:	b084      	sub	sp, #16
1a000c0e:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
1a000c10:	b153      	cbz	r3, 1a000c28 <xQueueGenericCreateStatic+0x32>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000c12:	b192      	cbz	r2, 1a000c3a <xQueueGenericCreateStatic+0x44>
1a000c14:	b989      	cbnz	r1, 1a000c3a <xQueueGenericCreateStatic+0x44>
1a000c16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c1a:	f383 8811 	msr	BASEPRI, r3
1a000c1e:	f3bf 8f6f 	isb	sy
1a000c22:	f3bf 8f4f 	dsb	sy
1a000c26:	e7fe      	b.n	1a000c26 <xQueueGenericCreateStatic+0x30>
1a000c28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c2c:	f383 8811 	msr	BASEPRI, r3
1a000c30:	f3bf 8f6f 	isb	sy
1a000c34:	f3bf 8f4f 	dsb	sy
1a000c38:	e7fe      	b.n	1a000c38 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000c3a:	b94a      	cbnz	r2, 1a000c50 <xQueueGenericCreateStatic+0x5a>
1a000c3c:	b141      	cbz	r1, 1a000c50 <xQueueGenericCreateStatic+0x5a>
1a000c3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c42:	f383 8811 	msr	BASEPRI, r3
1a000c46:	f3bf 8f6f 	isb	sy
1a000c4a:	f3bf 8f4f 	dsb	sy
1a000c4e:	e7fe      	b.n	1a000c4e <xQueueGenericCreateStatic+0x58>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000c50:	2050      	movs	r0, #80	; 0x50
1a000c52:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000c54:	9803      	ldr	r0, [sp, #12]
1a000c56:	2850      	cmp	r0, #80	; 0x50
1a000c58:	d008      	beq.n	1a000c6c <xQueueGenericCreateStatic+0x76>
1a000c5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c5e:	f383 8811 	msr	BASEPRI, r3
1a000c62:	f3bf 8f6f 	isb	sy
1a000c66:	f3bf 8f4f 	dsb	sy
1a000c6a:	e7fe      	b.n	1a000c6a <xQueueGenericCreateStatic+0x74>
1a000c6c:	4620      	mov	r0, r4
1a000c6e:	461c      	mov	r4, r3
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000c70:	2301      	movs	r3, #1
1a000c72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000c76:	9400      	str	r4, [sp, #0]
1a000c78:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000c7c:	f7ff ffaa 	bl	1a000bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000c80:	4620      	mov	r0, r4
1a000c82:	b004      	add	sp, #16
1a000c84:	bd10      	pop	{r4, pc}

1a000c86 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000c86:	b940      	cbnz	r0, 1a000c9a <xQueueGenericCreate+0x14>
1a000c88:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c8c:	f383 8811 	msr	BASEPRI, r3
1a000c90:	f3bf 8f6f 	isb	sy
1a000c94:	f3bf 8f4f 	dsb	sy
1a000c98:	e7fe      	b.n	1a000c98 <xQueueGenericCreate+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
1a000c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c9c:	b083      	sub	sp, #12
1a000c9e:	4606      	mov	r6, r0
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
1a000ca0:	b111      	cbz	r1, 1a000ca8 <xQueueGenericCreate+0x22>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000ca2:	fb01 f000 	mul.w	r0, r1, r0
1a000ca6:	e000      	b.n	1a000caa <xQueueGenericCreate+0x24>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
1a000ca8:	2000      	movs	r0, #0
1a000caa:	4617      	mov	r7, r2
1a000cac:	460c      	mov	r4, r1
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000cae:	3050      	adds	r0, #80	; 0x50
1a000cb0:	f7ff fdde 	bl	1a000870 <pvPortMalloc>

		if( pxNewQueue != NULL )
1a000cb4:	4605      	mov	r5, r0
1a000cb6:	b150      	cbz	r0, 1a000cce <xQueueGenericCreate+0x48>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000cb8:	2300      	movs	r3, #0
1a000cba:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000cbe:	9000      	str	r0, [sp, #0]
1a000cc0:	463b      	mov	r3, r7
1a000cc2:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000cc6:	4621      	mov	r1, r4
1a000cc8:	4630      	mov	r0, r6
1a000cca:	f7ff ff83 	bl	1a000bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000cce:	4628      	mov	r0, r5
1a000cd0:	b003      	add	sp, #12
1a000cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000cd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
1a000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cd6:	b085      	sub	sp, #20
1a000cd8:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000cda:	b160      	cbz	r0, 1a000cf6 <xQueueGenericSend+0x22>
1a000cdc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000cde:	b999      	cbnz	r1, 1a000d08 <xQueueGenericSend+0x34>
1a000ce0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000ce2:	b18a      	cbz	r2, 1a000d08 <xQueueGenericSend+0x34>
1a000ce4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ce8:	f383 8811 	msr	BASEPRI, r3
1a000cec:	f3bf 8f6f 	isb	sy
1a000cf0:	f3bf 8f4f 	dsb	sy
1a000cf4:	e7fe      	b.n	1a000cf4 <xQueueGenericSend+0x20>
1a000cf6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cfa:	f383 8811 	msr	BASEPRI, r3
1a000cfe:	f3bf 8f6f 	isb	sy
1a000d02:	f3bf 8f4f 	dsb	sy
1a000d06:	e7fe      	b.n	1a000d06 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000d08:	2b02      	cmp	r3, #2
1a000d0a:	d10b      	bne.n	1a000d24 <xQueueGenericSend+0x50>
1a000d0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000d0e:	2a01      	cmp	r2, #1
1a000d10:	d008      	beq.n	1a000d24 <xQueueGenericSend+0x50>
1a000d12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d16:	f383 8811 	msr	BASEPRI, r3
1a000d1a:	f3bf 8f6f 	isb	sy
1a000d1e:	f3bf 8f4f 	dsb	sy
1a000d22:	e7fe      	b.n	1a000d22 <xQueueGenericSend+0x4e>
1a000d24:	461e      	mov	r6, r3
1a000d26:	460f      	mov	r7, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d28:	f001 f828 	bl	1a001d7c <xTaskGetSchedulerState>
1a000d2c:	b950      	cbnz	r0, 1a000d44 <xQueueGenericSend+0x70>
1a000d2e:	9b01      	ldr	r3, [sp, #4]
1a000d30:	b153      	cbz	r3, 1a000d48 <xQueueGenericSend+0x74>
1a000d32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d36:	f383 8811 	msr	BASEPRI, r3
1a000d3a:	f3bf 8f6f 	isb	sy
1a000d3e:	f3bf 8f4f 	dsb	sy
1a000d42:	e7fe      	b.n	1a000d42 <xQueueGenericSend+0x6e>
1a000d44:	2500      	movs	r5, #0
1a000d46:	e03a      	b.n	1a000dbe <xQueueGenericSend+0xea>
1a000d48:	2500      	movs	r5, #0
1a000d4a:	e038      	b.n	1a000dbe <xQueueGenericSend+0xea>
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000d4c:	4632      	mov	r2, r6
1a000d4e:	4639      	mov	r1, r7
1a000d50:	4620      	mov	r0, r4
1a000d52:	f7ff fe78 	bl	1a000a46 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000d58:	b94b      	cbnz	r3, 1a000d6e <xQueueGenericSend+0x9a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
1a000d5a:	b1a8      	cbz	r0, 1a000d88 <xQueueGenericSend+0xb4>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
1a000d5c:	4b3b      	ldr	r3, [pc, #236]	; (1a000e4c <xQueueGenericSend+0x178>)
1a000d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d62:	601a      	str	r2, [r3, #0]
1a000d64:	f3bf 8f4f 	dsb	sy
1a000d68:	f3bf 8f6f 	isb	sy
1a000d6c:	e00c      	b.n	1a000d88 <xQueueGenericSend+0xb4>
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000d6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000d72:	f000 ff6b 	bl	1a001c4c <xTaskRemoveFromEventList>
1a000d76:	b138      	cbz	r0, 1a000d88 <xQueueGenericSend+0xb4>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
1a000d78:	4b34      	ldr	r3, [pc, #208]	; (1a000e4c <xQueueGenericSend+0x178>)
1a000d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d7e:	601a      	str	r2, [r3, #0]
1a000d80:	f3bf 8f4f 	dsb	sy
1a000d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
1a000d88:	f001 fcee 	bl	1a002768 <vPortExitCritical>
				return pdPASS;
1a000d8c:	2001      	movs	r0, #1

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
1a000d8e:	b005      	add	sp, #20
1a000d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a000d92:	f001 fce9 	bl	1a002768 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
1a000d96:	2000      	movs	r0, #0
1a000d98:	e7f9      	b.n	1a000d8e <xQueueGenericSend+0xba>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000d9a:	a802      	add	r0, sp, #8
1a000d9c:	f000 ff9c 	bl	1a001cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000da0:	2501      	movs	r5, #1
1a000da2:	e019      	b.n	1a000dd8 <xQueueGenericSend+0x104>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
1a000da4:	2300      	movs	r3, #0
1a000da6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000daa:	e021      	b.n	1a000df0 <xQueueGenericSend+0x11c>
1a000dac:	2300      	movs	r3, #0
1a000dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000db2:	e023      	b.n	1a000dfc <xQueueGenericSend+0x128>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
1a000db4:	4620      	mov	r0, r4
1a000db6:	f7ff fe93 	bl	1a000ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000dba:	f000 fdbd 	bl	1a001938 <xTaskResumeAll>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
1a000dbe:	f001 fcb1 	bl	1a002724 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000dc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000dc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000dc6:	429a      	cmp	r2, r3
1a000dc8:	d3c0      	bcc.n	1a000d4c <xQueueGenericSend+0x78>
1a000dca:	2e02      	cmp	r6, #2
1a000dcc:	d0be      	beq.n	1a000d4c <xQueueGenericSend+0x78>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a000dce:	9b01      	ldr	r3, [sp, #4]
1a000dd0:	2b00      	cmp	r3, #0
1a000dd2:	d0de      	beq.n	1a000d92 <xQueueGenericSend+0xbe>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
1a000dd4:	2d00      	cmp	r5, #0
1a000dd6:	d0e0      	beq.n	1a000d9a <xQueueGenericSend+0xc6>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a000dd8:	f001 fcc6 	bl	1a002768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a000ddc:	f000 fd12 	bl	1a001804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000de0:	f001 fca0 	bl	1a002724 <vPortEnterCritical>
1a000de4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000de8:	b25b      	sxtb	r3, r3
1a000dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000dee:	d0d9      	beq.n	1a000da4 <xQueueGenericSend+0xd0>
1a000df0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000df4:	b25b      	sxtb	r3, r3
1a000df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000dfa:	d0d7      	beq.n	1a000dac <xQueueGenericSend+0xd8>
1a000dfc:	f001 fcb4 	bl	1a002768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000e00:	a901      	add	r1, sp, #4
1a000e02:	a802      	add	r0, sp, #8
1a000e04:	f000 ff74 	bl	1a001cf0 <xTaskCheckForTimeOut>
1a000e08:	b9c8      	cbnz	r0, 1a000e3e <xQueueGenericSend+0x16a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000e0a:	4620      	mov	r0, r4
1a000e0c:	f7ff fdff 	bl	1a000a0e <prvIsQueueFull>
1a000e10:	2800      	cmp	r0, #0
1a000e12:	d0cf      	beq.n	1a000db4 <xQueueGenericSend+0xe0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000e14:	9901      	ldr	r1, [sp, #4]
1a000e16:	f104 0010 	add.w	r0, r4, #16
1a000e1a:	f000 fee3 	bl	1a001be4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
1a000e1e:	4620      	mov	r0, r4
1a000e20:	f7ff fe5e 	bl	1a000ae0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
1a000e24:	f000 fd88 	bl	1a001938 <xTaskResumeAll>
1a000e28:	2800      	cmp	r0, #0
1a000e2a:	d1c8      	bne.n	1a000dbe <xQueueGenericSend+0xea>
				{
					portYIELD_WITHIN_API();
1a000e2c:	4b07      	ldr	r3, [pc, #28]	; (1a000e4c <xQueueGenericSend+0x178>)
1a000e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e32:	601a      	str	r2, [r3, #0]
1a000e34:	f3bf 8f4f 	dsb	sy
1a000e38:	f3bf 8f6f 	isb	sy
1a000e3c:	e7bf      	b.n	1a000dbe <xQueueGenericSend+0xea>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
1a000e3e:	4620      	mov	r0, r4
1a000e40:	f7ff fe4e 	bl	1a000ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000e44:	f000 fd78 	bl	1a001938 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
1a000e48:	2000      	movs	r0, #0
1a000e4a:	e7a0      	b.n	1a000d8e <xQueueGenericSend+0xba>
1a000e4c:	e000ed04 	.word	0xe000ed04

1a000e50 <prvInitialiseMutex>:

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
		if( pxNewQueue != NULL )
1a000e50:	b148      	cbz	r0, 1a000e66 <prvInitialiseMutex+0x16>
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
1a000e52:	b508      	push	{r3, lr}
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
1a000e54:	2100      	movs	r1, #0
1a000e56:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a000e58:	6001      	str	r1, [r0, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a000e5a:	60c1      	str	r1, [r0, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a000e5c:	460b      	mov	r3, r1
1a000e5e:	460a      	mov	r2, r1
1a000e60:	f7ff ff38 	bl	1a000cd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
1a000e64:	bd08      	pop	{r3, pc}
1a000e66:	4770      	bx	lr

1a000e68 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
1a000e68:	b510      	push	{r4, lr}
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a000e6a:	4602      	mov	r2, r0
1a000e6c:	2100      	movs	r1, #0
1a000e6e:	2001      	movs	r0, #1
1a000e70:	f7ff ff09 	bl	1a000c86 <xQueueGenericCreate>
1a000e74:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a000e76:	f7ff ffeb 	bl	1a000e50 <prvInitialiseMutex>

		return pxNewQueue;
	}
1a000e7a:	4620      	mov	r0, r4
1a000e7c:	bd10      	pop	{r4, pc}

1a000e7e <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
1a000e7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000e82:	b160      	cbz	r0, 1a000e9e <xQueueGenericSendFromISR+0x20>
1a000e84:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000e86:	b999      	cbnz	r1, 1a000eb0 <xQueueGenericSendFromISR+0x32>
1a000e88:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000e8a:	b188      	cbz	r0, 1a000eb0 <xQueueGenericSendFromISR+0x32>
1a000e8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e90:	f383 8811 	msr	BASEPRI, r3
1a000e94:	f3bf 8f6f 	isb	sy
1a000e98:	f3bf 8f4f 	dsb	sy
1a000e9c:	e7fe      	b.n	1a000e9c <xQueueGenericSendFromISR+0x1e>
1a000e9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ea2:	f383 8811 	msr	BASEPRI, r3
1a000ea6:	f3bf 8f6f 	isb	sy
1a000eaa:	f3bf 8f4f 	dsb	sy
1a000eae:	e7fe      	b.n	1a000eae <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000eb0:	2b02      	cmp	r3, #2
1a000eb2:	d10b      	bne.n	1a000ecc <xQueueGenericSendFromISR+0x4e>
1a000eb4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000eb6:	2801      	cmp	r0, #1
1a000eb8:	d008      	beq.n	1a000ecc <xQueueGenericSendFromISR+0x4e>
1a000eba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ebe:	f383 8811 	msr	BASEPRI, r3
1a000ec2:	f3bf 8f6f 	isb	sy
1a000ec6:	f3bf 8f4f 	dsb	sy
1a000eca:	e7fe      	b.n	1a000eca <xQueueGenericSendFromISR+0x4c>
1a000ecc:	461f      	mov	r7, r3
1a000ece:	4690      	mov	r8, r2
1a000ed0:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000ed2:	f001 fd51 	bl	1a002978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000ed6:	f3ef 8611 	mrs	r6, BASEPRI
1a000eda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ede:	f383 8811 	msr	BASEPRI, r3
1a000ee2:	f3bf 8f6f 	isb	sy
1a000ee6:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000eea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000eee:	429a      	cmp	r2, r3
1a000ef0:	d303      	bcc.n	1a000efa <xQueueGenericSendFromISR+0x7c>
1a000ef2:	2f02      	cmp	r7, #2
1a000ef4:	d001      	beq.n	1a000efa <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1a000ef6:	2000      	movs	r0, #0
1a000ef8:	e00f      	b.n	1a000f1a <xQueueGenericSendFromISR+0x9c>
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1a000efa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000efe:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000f00:	463a      	mov	r2, r7
1a000f02:	4649      	mov	r1, r9
1a000f04:	4620      	mov	r0, r4
1a000f06:	f7ff fd9e 	bl	1a000a46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1a000f0a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000f0e:	d008      	beq.n	1a000f22 <xQueueGenericSendFromISR+0xa4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000f10:	1c6b      	adds	r3, r5, #1
1a000f12:	b25b      	sxtb	r3, r3
1a000f14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
1a000f18:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000f1a:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a000f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000f24:	b15b      	cbz	r3, 1a000f3e <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000f26:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f2a:	f000 fe8f 	bl	1a001c4c <xTaskRemoveFromEventList>
1a000f2e:	b140      	cbz	r0, 1a000f42 <xQueueGenericSendFromISR+0xc4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1a000f30:	f1b8 0f00 	cmp.w	r8, #0
1a000f34:	d007      	beq.n	1a000f46 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000f36:	2001      	movs	r0, #1
1a000f38:	f8c8 0000 	str.w	r0, [r8]
1a000f3c:	e7ed      	b.n	1a000f1a <xQueueGenericSendFromISR+0x9c>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
1a000f3e:	2001      	movs	r0, #1
1a000f40:	e7eb      	b.n	1a000f1a <xQueueGenericSendFromISR+0x9c>
1a000f42:	2001      	movs	r0, #1
1a000f44:	e7e9      	b.n	1a000f1a <xQueueGenericSendFromISR+0x9c>
1a000f46:	2001      	movs	r0, #1
1a000f48:	e7e7      	b.n	1a000f1a <xQueueGenericSendFromISR+0x9c>
1a000f4a:	Address 0x000000001a000f4a is out of bounds.


1a000f4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
1a000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f4e:	b085      	sub	sp, #20
1a000f50:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a000f52:	b160      	cbz	r0, 1a000f6e <xQueueReceive+0x22>
1a000f54:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000f56:	b999      	cbnz	r1, 1a000f80 <xQueueReceive+0x34>
1a000f58:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000f5a:	b18b      	cbz	r3, 1a000f80 <xQueueReceive+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000f5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f60:	f383 8811 	msr	BASEPRI, r3
1a000f64:	f3bf 8f6f 	isb	sy
1a000f68:	f3bf 8f4f 	dsb	sy
1a000f6c:	e7fe      	b.n	1a000f6c <xQueueReceive+0x20>
1a000f6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f72:	f383 8811 	msr	BASEPRI, r3
1a000f76:	f3bf 8f6f 	isb	sy
1a000f7a:	f3bf 8f4f 	dsb	sy
1a000f7e:	e7fe      	b.n	1a000f7e <xQueueReceive+0x32>
1a000f80:	460f      	mov	r7, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000f82:	f000 fefb 	bl	1a001d7c <xTaskGetSchedulerState>
1a000f86:	b950      	cbnz	r0, 1a000f9e <xQueueReceive+0x52>
1a000f88:	9b01      	ldr	r3, [sp, #4]
1a000f8a:	b153      	cbz	r3, 1a000fa2 <xQueueReceive+0x56>
1a000f8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f90:	f383 8811 	msr	BASEPRI, r3
1a000f94:	f3bf 8f6f 	isb	sy
1a000f98:	f3bf 8f4f 	dsb	sy
1a000f9c:	e7fe      	b.n	1a000f9c <xQueueReceive+0x50>
1a000f9e:	2600      	movs	r6, #0
1a000fa0:	e03e      	b.n	1a001020 <xQueueReceive+0xd4>
1a000fa2:	2600      	movs	r6, #0
1a000fa4:	e03c      	b.n	1a001020 <xQueueReceive+0xd4>
			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000fa6:	4639      	mov	r1, r7
1a000fa8:	4620      	mov	r0, r4
1a000faa:	f7ff fd87 	bl	1a000abc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000fae:	3d01      	subs	r5, #1
1a000fb0:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000fb2:	6923      	ldr	r3, [r4, #16]
1a000fb4:	b923      	cbnz	r3, 1a000fc0 <xQueueReceive+0x74>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a000fb6:	f001 fbd7 	bl	1a002768 <vPortExitCritical>
				return pdPASS;
1a000fba:	2001      	movs	r0, #1
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a000fbc:	b005      	add	sp, #20
1a000fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000fc0:	f104 0010 	add.w	r0, r4, #16
1a000fc4:	f000 fe42 	bl	1a001c4c <xTaskRemoveFromEventList>
1a000fc8:	2800      	cmp	r0, #0
1a000fca:	d0f4      	beq.n	1a000fb6 <xQueueReceive+0x6a>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a000fcc:	4b34      	ldr	r3, [pc, #208]	; (1a0010a0 <xQueueReceive+0x154>)
1a000fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000fd2:	601a      	str	r2, [r3, #0]
1a000fd4:	f3bf 8f4f 	dsb	sy
1a000fd8:	f3bf 8f6f 	isb	sy
1a000fdc:	e7eb      	b.n	1a000fb6 <xQueueReceive+0x6a>
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a000fde:	f001 fbc3 	bl	1a002768 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a000fe2:	2000      	movs	r0, #0
1a000fe4:	e7ea      	b.n	1a000fbc <xQueueReceive+0x70>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000fe6:	a802      	add	r0, sp, #8
1a000fe8:	f000 fe76 	bl	1a001cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000fec:	2601      	movs	r6, #1
1a000fee:	e021      	b.n	1a001034 <xQueueReceive+0xe8>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
1a000ff0:	2300      	movs	r3, #0
1a000ff2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000ff6:	e029      	b.n	1a00104c <xQueueReceive+0x100>
1a000ff8:	2300      	movs	r3, #0
1a000ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ffe:	e02b      	b.n	1a001058 <xQueueReceive+0x10c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
1a001000:	4620      	mov	r0, r4
1a001002:	f7ff fd6d 	bl	1a000ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001006:	f000 fc97 	bl	1a001938 <xTaskResumeAll>
1a00100a:	e009      	b.n	1a001020 <xQueueReceive+0xd4>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
1a00100c:	4620      	mov	r0, r4
1a00100e:	f7ff fd67 	bl	1a000ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001012:	f000 fc91 	bl	1a001938 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001016:	4620      	mov	r0, r4
1a001018:	f7ff fd08 	bl	1a000a2c <prvIsQueueEmpty>
1a00101c:	2800      	cmp	r0, #0
1a00101e:	d13d      	bne.n	1a00109c <xQueueReceive+0x150>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a001020:	f001 fb80 	bl	1a002724 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001024:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001026:	2d00      	cmp	r5, #0
1a001028:	d1bd      	bne.n	1a000fa6 <xQueueReceive+0x5a>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a00102a:	9b01      	ldr	r3, [sp, #4]
1a00102c:	2b00      	cmp	r3, #0
1a00102e:	d0d6      	beq.n	1a000fde <xQueueReceive+0x92>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
1a001030:	2e00      	cmp	r6, #0
1a001032:	d0d8      	beq.n	1a000fe6 <xQueueReceive+0x9a>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a001034:	f001 fb98 	bl	1a002768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a001038:	f000 fbe4 	bl	1a001804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00103c:	f001 fb72 	bl	1a002724 <vPortEnterCritical>
1a001040:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001044:	b25b      	sxtb	r3, r3
1a001046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00104a:	d0d1      	beq.n	1a000ff0 <xQueueReceive+0xa4>
1a00104c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001050:	b25b      	sxtb	r3, r3
1a001052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001056:	d0cf      	beq.n	1a000ff8 <xQueueReceive+0xac>
1a001058:	f001 fb86 	bl	1a002768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00105c:	a901      	add	r1, sp, #4
1a00105e:	a802      	add	r0, sp, #8
1a001060:	f000 fe46 	bl	1a001cf0 <xTaskCheckForTimeOut>
1a001064:	2800      	cmp	r0, #0
1a001066:	d1d1      	bne.n	1a00100c <xQueueReceive+0xc0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001068:	4620      	mov	r0, r4
1a00106a:	f7ff fcdf 	bl	1a000a2c <prvIsQueueEmpty>
1a00106e:	2800      	cmp	r0, #0
1a001070:	d0c6      	beq.n	1a001000 <xQueueReceive+0xb4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001072:	9901      	ldr	r1, [sp, #4]
1a001074:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001078:	f000 fdb4 	bl	1a001be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00107c:	4620      	mov	r0, r4
1a00107e:	f7ff fd2f 	bl	1a000ae0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001082:	f000 fc59 	bl	1a001938 <xTaskResumeAll>
1a001086:	2800      	cmp	r0, #0
1a001088:	d1ca      	bne.n	1a001020 <xQueueReceive+0xd4>
				{
					portYIELD_WITHIN_API();
1a00108a:	4b05      	ldr	r3, [pc, #20]	; (1a0010a0 <xQueueReceive+0x154>)
1a00108c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001090:	601a      	str	r2, [r3, #0]
1a001092:	f3bf 8f4f 	dsb	sy
1a001096:	f3bf 8f6f 	isb	sy
1a00109a:	e7c1      	b.n	1a001020 <xQueueReceive+0xd4>
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a00109c:	2000      	movs	r0, #0
1a00109e:	e78d      	b.n	1a000fbc <xQueueReceive+0x70>
1a0010a0:	e000ed04 	.word	0xe000ed04

1a0010a4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
1a0010a4:	b570      	push	{r4, r5, r6, lr}
1a0010a6:	b084      	sub	sp, #16
1a0010a8:	9101      	str	r1, [sp, #4]
#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a0010aa:	b940      	cbnz	r0, 1a0010be <xQueueSemaphoreTake+0x1a>
1a0010ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010b0:	f383 8811 	msr	BASEPRI, r3
1a0010b4:	f3bf 8f6f 	isb	sy
1a0010b8:	f3bf 8f4f 	dsb	sy
1a0010bc:	e7fe      	b.n	1a0010bc <xQueueSemaphoreTake+0x18>
1a0010be:	4604      	mov	r4, r0

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
1a0010c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0010c2:	b143      	cbz	r3, 1a0010d6 <xQueueSemaphoreTake+0x32>
1a0010c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010c8:	f383 8811 	msr	BASEPRI, r3
1a0010cc:	f3bf 8f6f 	isb	sy
1a0010d0:	f3bf 8f4f 	dsb	sy
1a0010d4:	e7fe      	b.n	1a0010d4 <xQueueSemaphoreTake+0x30>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0010d6:	f000 fe51 	bl	1a001d7c <xTaskGetSchedulerState>
1a0010da:	b950      	cbnz	r0, 1a0010f2 <xQueueSemaphoreTake+0x4e>
1a0010dc:	9b01      	ldr	r3, [sp, #4]
1a0010de:	b15b      	cbz	r3, 1a0010f8 <xQueueSemaphoreTake+0x54>
1a0010e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010e4:	f383 8811 	msr	BASEPRI, r3
1a0010e8:	f3bf 8f6f 	isb	sy
1a0010ec:	f3bf 8f4f 	dsb	sy
1a0010f0:	e7fe      	b.n	1a0010f0 <xQueueSemaphoreTake+0x4c>
1a0010f2:	2500      	movs	r5, #0
1a0010f4:	462e      	mov	r6, r5
1a0010f6:	e051      	b.n	1a00119c <xQueueSemaphoreTake+0xf8>
1a0010f8:	2500      	movs	r5, #0
1a0010fa:	462e      	mov	r6, r5
1a0010fc:	e04e      	b.n	1a00119c <xQueueSemaphoreTake+0xf8>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a0010fe:	3b01      	subs	r3, #1
1a001100:	63a3      	str	r3, [r4, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001102:	6823      	ldr	r3, [r4, #0]
1a001104:	b913      	cbnz	r3, 1a00110c <xQueueSemaphoreTake+0x68>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a001106:	f000 ff5d 	bl	1a001fc4 <pvTaskIncrementMutexHeldCount>
1a00110a:	6060      	str	r0, [r4, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00110c:	6923      	ldr	r3, [r4, #16]
1a00110e:	b163      	cbz	r3, 1a00112a <xQueueSemaphoreTake+0x86>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001110:	f104 0010 	add.w	r0, r4, #16
1a001114:	f000 fd9a 	bl	1a001c4c <xTaskRemoveFromEventList>
1a001118:	b138      	cbz	r0, 1a00112a <xQueueSemaphoreTake+0x86>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a00111a:	4b48      	ldr	r3, [pc, #288]	; (1a00123c <xQueueSemaphoreTake+0x198>)
1a00111c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001120:	601a      	str	r2, [r3, #0]
1a001122:	f3bf 8f4f 	dsb	sy
1a001126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a00112a:	f001 fb1d 	bl	1a002768 <vPortExitCritical>
				return pdPASS;
1a00112e:	2501      	movs	r5, #1
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a001130:	4628      	mov	r0, r5
1a001132:	b004      	add	sp, #16
1a001134:	bd70      	pop	{r4, r5, r6, pc}
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001136:	b145      	cbz	r5, 1a00114a <xQueueSemaphoreTake+0xa6>
1a001138:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00113c:	f383 8811 	msr	BASEPRI, r3
1a001140:	f3bf 8f6f 	isb	sy
1a001144:	f3bf 8f4f 	dsb	sy
1a001148:	e7fe      	b.n	1a001148 <xQueueSemaphoreTake+0xa4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
1a00114a:	f001 fb0d 	bl	1a002768 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a00114e:	e7ef      	b.n	1a001130 <xQueueSemaphoreTake+0x8c>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001150:	a802      	add	r0, sp, #8
1a001152:	f000 fdc1 	bl	1a001cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001156:	2601      	movs	r6, #1
1a001158:	e02a      	b.n	1a0011b0 <xQueueSemaphoreTake+0x10c>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
1a00115a:	2300      	movs	r3, #0
1a00115c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001160:	e032      	b.n	1a0011c8 <xQueueSemaphoreTake+0x124>
1a001162:	2300      	movs	r3, #0
1a001164:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001168:	e034      	b.n	1a0011d4 <xQueueSemaphoreTake+0x130>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						taskENTER_CRITICAL();
1a00116a:	f001 fadb 	bl	1a002724 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a00116e:	6860      	ldr	r0, [r4, #4]
1a001170:	f000 fe14 	bl	1a001d9c <xTaskPriorityInherit>
1a001174:	4605      	mov	r5, r0
						}
						taskEXIT_CRITICAL();
1a001176:	f001 faf7 	bl	1a002768 <vPortExitCritical>
1a00117a:	e03b      	b.n	1a0011f4 <xQueueSemaphoreTake+0x150>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
1a00117c:	4620      	mov	r0, r4
1a00117e:	f7ff fcaf 	bl	1a000ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001182:	f000 fbd9 	bl	1a001938 <xTaskResumeAll>
1a001186:	e009      	b.n	1a00119c <xQueueSemaphoreTake+0xf8>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
1a001188:	4620      	mov	r0, r4
1a00118a:	f7ff fca9 	bl	1a000ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00118e:	f000 fbd3 	bl	1a001938 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001192:	4620      	mov	r0, r4
1a001194:	f7ff fc4a 	bl	1a000a2c <prvIsQueueEmpty>
1a001198:	2800      	cmp	r0, #0
1a00119a:	d140      	bne.n	1a00121e <xQueueSemaphoreTake+0x17a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a00119c:	f001 fac2 	bl	1a002724 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a0011a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a0011a2:	2b00      	cmp	r3, #0
1a0011a4:	d1ab      	bne.n	1a0010fe <xQueueSemaphoreTake+0x5a>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a0011a6:	9b01      	ldr	r3, [sp, #4]
1a0011a8:	2b00      	cmp	r3, #0
1a0011aa:	d0c4      	beq.n	1a001136 <xQueueSemaphoreTake+0x92>
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
1a0011ac:	2e00      	cmp	r6, #0
1a0011ae:	d0cf      	beq.n	1a001150 <xQueueSemaphoreTake+0xac>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a0011b0:	f001 fada 	bl	1a002768 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
1a0011b4:	f000 fb26 	bl	1a001804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0011b8:	f001 fab4 	bl	1a002724 <vPortEnterCritical>
1a0011bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0011c0:	b25b      	sxtb	r3, r3
1a0011c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011c6:	d0c8      	beq.n	1a00115a <xQueueSemaphoreTake+0xb6>
1a0011c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0011cc:	b25b      	sxtb	r3, r3
1a0011ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011d2:	d0c6      	beq.n	1a001162 <xQueueSemaphoreTake+0xbe>
1a0011d4:	f001 fac8 	bl	1a002768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0011d8:	a901      	add	r1, sp, #4
1a0011da:	a802      	add	r0, sp, #8
1a0011dc:	f000 fd88 	bl	1a001cf0 <xTaskCheckForTimeOut>
1a0011e0:	2800      	cmp	r0, #0
1a0011e2:	d1d1      	bne.n	1a001188 <xQueueSemaphoreTake+0xe4>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0011e4:	4620      	mov	r0, r4
1a0011e6:	f7ff fc21 	bl	1a000a2c <prvIsQueueEmpty>
1a0011ea:	2800      	cmp	r0, #0
1a0011ec:	d0c6      	beq.n	1a00117c <xQueueSemaphoreTake+0xd8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0011ee:	6823      	ldr	r3, [r4, #0]
1a0011f0:	2b00      	cmp	r3, #0
1a0011f2:	d0ba      	beq.n	1a00116a <xQueueSemaphoreTake+0xc6>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0011f4:	9901      	ldr	r1, [sp, #4]
1a0011f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0011fa:	f000 fcf3 	bl	1a001be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0011fe:	4620      	mov	r0, r4
1a001200:	f7ff fc6e 	bl	1a000ae0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001204:	f000 fb98 	bl	1a001938 <xTaskResumeAll>
1a001208:	2800      	cmp	r0, #0
1a00120a:	d1c7      	bne.n	1a00119c <xQueueSemaphoreTake+0xf8>
				{
					portYIELD_WITHIN_API();
1a00120c:	4b0b      	ldr	r3, [pc, #44]	; (1a00123c <xQueueSemaphoreTake+0x198>)
1a00120e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001212:	601a      	str	r2, [r3, #0]
1a001214:	f3bf 8f4f 	dsb	sy
1a001218:	f3bf 8f6f 	isb	sy
1a00121c:	e7be      	b.n	1a00119c <xQueueSemaphoreTake+0xf8>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
1a00121e:	2d00      	cmp	r5, #0
1a001220:	d086      	beq.n	1a001130 <xQueueSemaphoreTake+0x8c>
					{
						taskENTER_CRITICAL();
1a001222:	f001 fa7f 	bl	1a002724 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001226:	4620      	mov	r0, r4
1a001228:	f7ff fbe8 	bl	1a0009fc <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a00122c:	4601      	mov	r1, r0
1a00122e:	6860      	ldr	r0, [r4, #4]
1a001230:	f000 fe68 	bl	1a001f04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
1a001234:	f001 fa98 	bl	1a002768 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a001238:	2500      	movs	r5, #0
1a00123a:	e779      	b.n	1a001130 <xQueueSemaphoreTake+0x8c>
1a00123c:	e000ed04 	.word	0xe000ed04

1a001240 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001240:	2300      	movs	r3, #0
1a001242:	2b07      	cmp	r3, #7
1a001244:	d80c      	bhi.n	1a001260 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001246:	4a07      	ldr	r2, [pc, #28]	; (1a001264 <vQueueAddToRegistry+0x24>)
1a001248:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00124c:	b10a      	cbz	r2, 1a001252 <vQueueAddToRegistry+0x12>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00124e:	3301      	adds	r3, #1
1a001250:	e7f7      	b.n	1a001242 <vQueueAddToRegistry+0x2>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001252:	4a04      	ldr	r2, [pc, #16]	; (1a001264 <vQueueAddToRegistry+0x24>)
1a001254:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00125c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00125e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001260:	4770      	bx	lr
1a001262:	bf00      	nop
1a001264:	10002c10 	.word	0x10002c10

1a001268 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001268:	b570      	push	{r4, r5, r6, lr}
1a00126a:	4604      	mov	r4, r0
1a00126c:	460d      	mov	r5, r1
1a00126e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001270:	f001 fa58 	bl	1a002724 <vPortEnterCritical>
1a001274:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001278:	b25b      	sxtb	r3, r3
1a00127a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00127e:	d00d      	beq.n	1a00129c <vQueueWaitForMessageRestricted+0x34>
1a001280:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001284:	b25b      	sxtb	r3, r3
1a001286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00128a:	d00b      	beq.n	1a0012a4 <vQueueWaitForMessageRestricted+0x3c>
1a00128c:	f001 fa6c 	bl	1a002768 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001290:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001292:	b15b      	cbz	r3, 1a0012ac <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001294:	4620      	mov	r0, r4
1a001296:	f7ff fc23 	bl	1a000ae0 <prvUnlockQueue>
	}
1a00129a:	bd70      	pop	{r4, r5, r6, pc}
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a00129c:	2300      	movs	r3, #0
1a00129e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0012a2:	e7ed      	b.n	1a001280 <vQueueWaitForMessageRestricted+0x18>
1a0012a4:	2300      	movs	r3, #0
1a0012a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0012aa:	e7ef      	b.n	1a00128c <vQueueWaitForMessageRestricted+0x24>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0012ac:	4632      	mov	r2, r6
1a0012ae:	4629      	mov	r1, r5
1a0012b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0012b4:	f000 fcae 	bl	1a001c14 <vTaskPlaceOnEventListRestricted>
1a0012b8:	e7ec      	b.n	1a001294 <vQueueWaitForMessageRestricted+0x2c>

1a0012ba <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0012ba:	f100 0308 	add.w	r3, r0, #8
1a0012be:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0012c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0012c4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0012c6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0012c8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0012ca:	2300      	movs	r3, #0
1a0012cc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0012ce:	4770      	bx	lr

1a0012d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0012d0:	2300      	movs	r3, #0
1a0012d2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0012d4:	4770      	bx	lr

1a0012d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0012d6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0012d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0012da:	689a      	ldr	r2, [r3, #8]
1a0012dc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0012de:	689a      	ldr	r2, [r3, #8]
1a0012e0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0012e2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0012e4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0012e6:	6803      	ldr	r3, [r0, #0]
1a0012e8:	3301      	adds	r3, #1
1a0012ea:	6003      	str	r3, [r0, #0]
}
1a0012ec:	4770      	bx	lr

1a0012ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0012ee:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0012f0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0012f2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0012f6:	d002      	beq.n	1a0012fe <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0012f8:	f100 0208 	add.w	r2, r0, #8
1a0012fc:	e002      	b.n	1a001304 <vListInsert+0x16>
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1a0012fe:	6902      	ldr	r2, [r0, #16]
1a001300:	e004      	b.n	1a00130c <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001302:	461a      	mov	r2, r3
1a001304:	6853      	ldr	r3, [r2, #4]
1a001306:	681c      	ldr	r4, [r3, #0]
1a001308:	42ac      	cmp	r4, r5
1a00130a:	d9fa      	bls.n	1a001302 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00130c:	6853      	ldr	r3, [r2, #4]
1a00130e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001310:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001312:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001314:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001316:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001318:	6803      	ldr	r3, [r0, #0]
1a00131a:	3301      	adds	r3, #1
1a00131c:	6003      	str	r3, [r0, #0]
}
1a00131e:	bc30      	pop	{r4, r5}
1a001320:	4770      	bx	lr

1a001322 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001322:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001324:	6842      	ldr	r2, [r0, #4]
1a001326:	6881      	ldr	r1, [r0, #8]
1a001328:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00132a:	6882      	ldr	r2, [r0, #8]
1a00132c:	6841      	ldr	r1, [r0, #4]
1a00132e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001330:	685a      	ldr	r2, [r3, #4]
1a001332:	4282      	cmp	r2, r0
1a001334:	d006      	beq.n	1a001344 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001336:	2200      	movs	r2, #0
1a001338:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00133a:	681a      	ldr	r2, [r3, #0]
1a00133c:	3a01      	subs	r2, #1
1a00133e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001340:	6818      	ldr	r0, [r3, #0]
}
1a001342:	4770      	bx	lr
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001344:	6882      	ldr	r2, [r0, #8]
1a001346:	605a      	str	r2, [r3, #4]
1a001348:	e7f5      	b.n	1a001336 <uxListRemove+0x14>
1a00134a:	Address 0x000000001a00134a is out of bounds.


1a00134c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00134c:	4b03      	ldr	r3, [pc, #12]	; (1a00135c <vApplicationGetIdleTaskMemory+0x10>)
1a00134e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001350:	4b03      	ldr	r3, [pc, #12]	; (1a001360 <vApplicationGetIdleTaskMemory+0x14>)
1a001352:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001354:	235a      	movs	r3, #90	; 0x5a
1a001356:	6013      	str	r3, [r2, #0]
}
1a001358:	4770      	bx	lr
1a00135a:	bf00      	nop
1a00135c:	100027e4 	.word	0x100027e4
1a001360:	100020dc 	.word	0x100020dc

1a001364 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001364:	4b03      	ldr	r3, [pc, #12]	; (1a001374 <vApplicationGetTimerTaskMemory+0x10>)
1a001366:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001368:	4b03      	ldr	r3, [pc, #12]	; (1a001378 <vApplicationGetTimerTaskMemory+0x14>)
1a00136a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a00136c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001370:	6013      	str	r3, [r2, #0]
1a001372:	4770      	bx	lr
1a001374:	10002844 	.word	0x10002844
1a001378:	10002244 	.word	0x10002244

1a00137c <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a00137c:	e7fe      	b.n	1a00137c <vApplicationStackOverflowHook>

1a00137e <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a00137e:	e7fe      	b.n	1a00137e <vApplicationMallocFailedHook>

1a001380 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001380:	4b08      	ldr	r3, [pc, #32]	; (1a0013a4 <prvResetNextTaskUnblockTime+0x24>)
1a001382:	681b      	ldr	r3, [r3, #0]
1a001384:	681b      	ldr	r3, [r3, #0]
1a001386:	b13b      	cbz	r3, 1a001398 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001388:	4b06      	ldr	r3, [pc, #24]	; (1a0013a4 <prvResetNextTaskUnblockTime+0x24>)
1a00138a:	681b      	ldr	r3, [r3, #0]
1a00138c:	68db      	ldr	r3, [r3, #12]
1a00138e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001390:	685a      	ldr	r2, [r3, #4]
1a001392:	4b05      	ldr	r3, [pc, #20]	; (1a0013a8 <prvResetNextTaskUnblockTime+0x28>)
1a001394:	601a      	str	r2, [r3, #0]
	}
}
1a001396:	4770      	bx	lr
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001398:	4b03      	ldr	r3, [pc, #12]	; (1a0013a8 <prvResetNextTaskUnblockTime+0x28>)
1a00139a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00139e:	601a      	str	r2, [r3, #0]
1a0013a0:	4770      	bx	lr
1a0013a2:	bf00      	nop
1a0013a4:	100028a8 	.word	0x100028a8
1a0013a8:	1000297c 	.word	0x1000297c

1a0013ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
1a0013ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0013b0:	4681      	mov	r9, r0
1a0013b2:	460d      	mov	r5, r1
1a0013b4:	4617      	mov	r7, r2
1a0013b6:	469a      	mov	sl, r3
1a0013b8:	9e08      	ldr	r6, [sp, #32]
1a0013ba:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0013be:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0013c0:	0092      	lsls	r2, r2, #2
1a0013c2:	21a5      	movs	r1, #165	; 0xa5
1a0013c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0013c6:	f002 fefc 	bl	1a0041c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0013ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0013cc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0013d0:	3a01      	subs	r2, #1
1a0013d2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0013d6:	f027 0707 	bic.w	r7, r7, #7

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0013da:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0013dc:	2300      	movs	r3, #0
1a0013de:	2b0f      	cmp	r3, #15
1a0013e0:	d807      	bhi.n	1a0013f2 <prvInitialiseNewTask+0x46>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0013e2:	5ce9      	ldrb	r1, [r5, r3]
1a0013e4:	18e2      	adds	r2, r4, r3
1a0013e6:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
1a0013ea:	5cea      	ldrb	r2, [r5, r3]
1a0013ec:	b10a      	cbz	r2, 1a0013f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0013ee:	3301      	adds	r3, #1
1a0013f0:	e7f5      	b.n	1a0013de <prvInitialiseNewTask+0x32>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0013f2:	2300      	movs	r3, #0
1a0013f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0013f8:	2e06      	cmp	r6, #6
1a0013fa:	d900      	bls.n	1a0013fe <prvInitialiseNewTask+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0013fc:	2606      	movs	r6, #6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
1a0013fe:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
1a001400:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001402:	2500      	movs	r5, #0
1a001404:	6565      	str	r5, [r4, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001406:	1d20      	adds	r0, r4, #4
1a001408:	f7ff ff62 	bl	1a0012d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a00140c:	f104 0018 	add.w	r0, r4, #24
1a001410:	f7ff ff5e 	bl	1a0012d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001414:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001416:	f1c6 0607 	rsb	r6, r6, #7
1a00141a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a00141c:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
1a00141e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001420:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001424:	4652      	mov	r2, sl
1a001426:	4649      	mov	r1, r9
1a001428:	4638      	mov	r0, r7
1a00142a:	f001 f953 	bl	1a0026d4 <pxPortInitialiseStack>
1a00142e:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
1a001430:	f1b8 0f00 	cmp.w	r8, #0
1a001434:	d001      	beq.n	1a00143a <prvInitialiseNewTask+0x8e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001436:	f8c8 4000 	str.w	r4, [r8]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a00143a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00143e:	Address 0x000000001a00143e is out of bounds.


1a001440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
1a001440:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001442:	2400      	movs	r4, #0
1a001444:	e007      	b.n	1a001456 <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001446:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00144a:	0093      	lsls	r3, r2, #2
1a00144c:	480e      	ldr	r0, [pc, #56]	; (1a001488 <prvInitialiseTaskLists+0x48>)
1a00144e:	4418      	add	r0, r3
1a001450:	f7ff ff33 	bl	1a0012ba <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001454:	3401      	adds	r4, #1
1a001456:	2c06      	cmp	r4, #6
1a001458:	d9f5      	bls.n	1a001446 <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
1a00145a:	4d0c      	ldr	r5, [pc, #48]	; (1a00148c <prvInitialiseTaskLists+0x4c>)
1a00145c:	4628      	mov	r0, r5
1a00145e:	f7ff ff2c 	bl	1a0012ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001462:	4c0b      	ldr	r4, [pc, #44]	; (1a001490 <prvInitialiseTaskLists+0x50>)
1a001464:	4620      	mov	r0, r4
1a001466:	f7ff ff28 	bl	1a0012ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00146a:	480a      	ldr	r0, [pc, #40]	; (1a001494 <prvInitialiseTaskLists+0x54>)
1a00146c:	f7ff ff25 	bl	1a0012ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
1a001470:	4809      	ldr	r0, [pc, #36]	; (1a001498 <prvInitialiseTaskLists+0x58>)
1a001472:	f7ff ff22 	bl	1a0012ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
1a001476:	4809      	ldr	r0, [pc, #36]	; (1a00149c <prvInitialiseTaskLists+0x5c>)
1a001478:	f7ff ff1f 	bl	1a0012ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
1a00147c:	4b08      	ldr	r3, [pc, #32]	; (1a0014a0 <prvInitialiseTaskLists+0x60>)
1a00147e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001480:	4b08      	ldr	r3, [pc, #32]	; (1a0014a4 <prvInitialiseTaskLists+0x64>)
1a001482:	601c      	str	r4, [r3, #0]
}
1a001484:	bd38      	pop	{r3, r4, r5, pc}
1a001486:	bf00      	nop
1a001488:	100028b0 	.word	0x100028b0
1a00148c:	10002954 	.word	0x10002954
1a001490:	10002968 	.word	0x10002968
1a001494:	10002984 	.word	0x10002984
1a001498:	100029b0 	.word	0x100029b0
1a00149c:	1000299c 	.word	0x1000299c
1a0014a0:	100028a8 	.word	0x100028a8
1a0014a4:	100028ac 	.word	0x100028ac

1a0014a8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
1a0014a8:	b510      	push	{r4, lr}
1a0014aa:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
1a0014ac:	f001 f93a 	bl	1a002724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
1a0014b0:	4a21      	ldr	r2, [pc, #132]	; (1a001538 <prvAddNewTaskToReadyList+0x90>)
1a0014b2:	6813      	ldr	r3, [r2, #0]
1a0014b4:	3301      	adds	r3, #1
1a0014b6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0014b8:	4b20      	ldr	r3, [pc, #128]	; (1a00153c <prvAddNewTaskToReadyList+0x94>)
1a0014ba:	681b      	ldr	r3, [r3, #0]
1a0014bc:	b15b      	cbz	r3, 1a0014d6 <prvAddNewTaskToReadyList+0x2e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
1a0014be:	4b20      	ldr	r3, [pc, #128]	; (1a001540 <prvAddNewTaskToReadyList+0x98>)
1a0014c0:	681b      	ldr	r3, [r3, #0]
1a0014c2:	b96b      	cbnz	r3, 1a0014e0 <prvAddNewTaskToReadyList+0x38>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0014c4:	4b1d      	ldr	r3, [pc, #116]	; (1a00153c <prvAddNewTaskToReadyList+0x94>)
1a0014c6:	681b      	ldr	r3, [r3, #0]
1a0014c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0014ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0014cc:	429a      	cmp	r2, r3
1a0014ce:	d807      	bhi.n	1a0014e0 <prvAddNewTaskToReadyList+0x38>
				{
					pxCurrentTCB = pxNewTCB;
1a0014d0:	4b1a      	ldr	r3, [pc, #104]	; (1a00153c <prvAddNewTaskToReadyList+0x94>)
1a0014d2:	601c      	str	r4, [r3, #0]
1a0014d4:	e004      	b.n	1a0014e0 <prvAddNewTaskToReadyList+0x38>
		uxCurrentNumberOfTasks++;
		if( pxCurrentTCB == NULL )
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
1a0014d6:	4b19      	ldr	r3, [pc, #100]	; (1a00153c <prvAddNewTaskToReadyList+0x94>)
1a0014d8:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0014da:	6813      	ldr	r3, [r2, #0]
1a0014dc:	2b01      	cmp	r3, #1
1a0014de:	d027      	beq.n	1a001530 <prvAddNewTaskToReadyList+0x88>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
1a0014e0:	4a18      	ldr	r2, [pc, #96]	; (1a001544 <prvAddNewTaskToReadyList+0x9c>)
1a0014e2:	6813      	ldr	r3, [r2, #0]
1a0014e4:	3301      	adds	r3, #1
1a0014e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0014e8:	64a3      	str	r3, [r4, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
1a0014ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0014ec:	2201      	movs	r2, #1
1a0014ee:	409a      	lsls	r2, r3
1a0014f0:	4915      	ldr	r1, [pc, #84]	; (1a001548 <prvAddNewTaskToReadyList+0xa0>)
1a0014f2:	6808      	ldr	r0, [r1, #0]
1a0014f4:	4302      	orrs	r2, r0
1a0014f6:	600a      	str	r2, [r1, #0]
1a0014f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014fc:	009a      	lsls	r2, r3, #2
1a0014fe:	1d21      	adds	r1, r4, #4
1a001500:	4812      	ldr	r0, [pc, #72]	; (1a00154c <prvAddNewTaskToReadyList+0xa4>)
1a001502:	4410      	add	r0, r2
1a001504:	f7ff fee7 	bl	1a0012d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
1a001508:	f001 f92e 	bl	1a002768 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
1a00150c:	4b0c      	ldr	r3, [pc, #48]	; (1a001540 <prvAddNewTaskToReadyList+0x98>)
1a00150e:	681b      	ldr	r3, [r3, #0]
1a001510:	b16b      	cbz	r3, 1a00152e <prvAddNewTaskToReadyList+0x86>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001512:	4b0a      	ldr	r3, [pc, #40]	; (1a00153c <prvAddNewTaskToReadyList+0x94>)
1a001514:	681b      	ldr	r3, [r3, #0]
1a001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001518:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00151a:	429a      	cmp	r2, r3
1a00151c:	d207      	bcs.n	1a00152e <prvAddNewTaskToReadyList+0x86>
		{
			taskYIELD_IF_USING_PREEMPTION();
1a00151e:	4b0c      	ldr	r3, [pc, #48]	; (1a001550 <prvAddNewTaskToReadyList+0xa8>)
1a001520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001524:	601a      	str	r2, [r3, #0]
1a001526:	f3bf 8f4f 	dsb	sy
1a00152a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a00152e:	bd10      	pop	{r4, pc}
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
1a001530:	f7ff ff86 	bl	1a001440 <prvInitialiseTaskLists>
1a001534:	e7d4      	b.n	1a0014e0 <prvAddNewTaskToReadyList+0x38>
1a001536:	bf00      	nop
1a001538:	1000293c 	.word	0x1000293c
1a00153c:	100028a4 	.word	0x100028a4
1a001540:	10002998 	.word	0x10002998
1a001544:	1000294c 	.word	0x1000294c
1a001548:	10002950 	.word	0x10002950
1a00154c:	100028b0 	.word	0x100028b0
1a001550:	e000ed04 	.word	0xe000ed04

1a001554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
1a001554:	b510      	push	{r4, lr}
1a001556:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001558:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a00155c:	b933      	cbnz	r3, 1a00156c <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
1a00155e:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001560:	f7ff fa14 	bl	1a00098c <vPortFree>
				vPortFree( pxTCB );
1a001564:	4620      	mov	r0, r4
1a001566:	f7ff fa11 	bl	1a00098c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
1a00156a:	bd10      	pop	{r4, pc}
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a00156c:	2b01      	cmp	r3, #1
1a00156e:	d00a      	beq.n	1a001586 <prvDeleteTCB+0x32>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001570:	2b02      	cmp	r3, #2
1a001572:	d0fa      	beq.n	1a00156a <prvDeleteTCB+0x16>
1a001574:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001578:	f383 8811 	msr	BASEPRI, r3
1a00157c:	f3bf 8f6f 	isb	sy
1a001580:	f3bf 8f4f 	dsb	sy
1a001584:	e7fe      	b.n	1a001584 <prvDeleteTCB+0x30>
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
1a001586:	f7ff fa01 	bl	1a00098c <vPortFree>
1a00158a:	e7ee      	b.n	1a00156a <prvDeleteTCB+0x16>

1a00158c <prvCheckTasksWaitingTermination>:
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00158c:	4b0f      	ldr	r3, [pc, #60]	; (1a0015cc <prvCheckTasksWaitingTermination+0x40>)
1a00158e:	681b      	ldr	r3, [r3, #0]
1a001590:	b1d3      	cbz	r3, 1a0015c8 <prvCheckTasksWaitingTermination+0x3c>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
1a001592:	b510      	push	{r4, lr}

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
1a001594:	f001 f8c6 	bl	1a002724 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001598:	4b0d      	ldr	r3, [pc, #52]	; (1a0015d0 <prvCheckTasksWaitingTermination+0x44>)
1a00159a:	68db      	ldr	r3, [r3, #12]
1a00159c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00159e:	1d20      	adds	r0, r4, #4
1a0015a0:	f7ff febf 	bl	1a001322 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0015a4:	4a0b      	ldr	r2, [pc, #44]	; (1a0015d4 <prvCheckTasksWaitingTermination+0x48>)
1a0015a6:	6813      	ldr	r3, [r2, #0]
1a0015a8:	3b01      	subs	r3, #1
1a0015aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0015ac:	4a07      	ldr	r2, [pc, #28]	; (1a0015cc <prvCheckTasksWaitingTermination+0x40>)
1a0015ae:	6813      	ldr	r3, [r2, #0]
1a0015b0:	3b01      	subs	r3, #1
1a0015b2:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
1a0015b4:	f001 f8d8 	bl	1a002768 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
1a0015b8:	4620      	mov	r0, r4
1a0015ba:	f7ff ffcb 	bl	1a001554 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0015be:	4b03      	ldr	r3, [pc, #12]	; (1a0015cc <prvCheckTasksWaitingTermination+0x40>)
1a0015c0:	681b      	ldr	r3, [r3, #0]
1a0015c2:	2b00      	cmp	r3, #0
1a0015c4:	d1e6      	bne.n	1a001594 <prvCheckTasksWaitingTermination+0x8>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
1a0015c6:	bd10      	pop	{r4, pc}
1a0015c8:	4770      	bx	lr
1a0015ca:	bf00      	nop
1a0015cc:	10002940 	.word	0x10002940
1a0015d0:	100029b0 	.word	0x100029b0
1a0015d4:	1000293c 	.word	0x1000293c

1a0015d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
1a0015d8:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
1a0015da:	f7ff ffd7 	bl	1a00158c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0015de:	4b06      	ldr	r3, [pc, #24]	; (1a0015f8 <prvIdleTask+0x20>)
1a0015e0:	681b      	ldr	r3, [r3, #0]
1a0015e2:	2b01      	cmp	r3, #1
1a0015e4:	d9f9      	bls.n	1a0015da <prvIdleTask+0x2>
			{
				taskYIELD();
1a0015e6:	4b05      	ldr	r3, [pc, #20]	; (1a0015fc <prvIdleTask+0x24>)
1a0015e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015ec:	601a      	str	r2, [r3, #0]
1a0015ee:	f3bf 8f4f 	dsb	sy
1a0015f2:	f3bf 8f6f 	isb	sy
1a0015f6:	e7f0      	b.n	1a0015da <prvIdleTask+0x2>
1a0015f8:	100028b0 	.word	0x100028b0
1a0015fc:	e000ed04 	.word	0xe000ed04

1a001600 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001600:	b570      	push	{r4, r5, r6, lr}
1a001602:	4604      	mov	r4, r0
1a001604:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001606:	4b1d      	ldr	r3, [pc, #116]	; (1a00167c <prvAddCurrentTaskToDelayedList+0x7c>)
1a001608:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00160a:	4b1d      	ldr	r3, [pc, #116]	; (1a001680 <prvAddCurrentTaskToDelayedList+0x80>)
1a00160c:	6818      	ldr	r0, [r3, #0]
1a00160e:	3004      	adds	r0, #4
1a001610:	f7ff fe87 	bl	1a001322 <uxListRemove>
1a001614:	b950      	cbnz	r0, 1a00162c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001616:	4b1a      	ldr	r3, [pc, #104]	; (1a001680 <prvAddCurrentTaskToDelayedList+0x80>)
1a001618:	681b      	ldr	r3, [r3, #0]
1a00161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00161c:	2301      	movs	r3, #1
1a00161e:	fa03 f202 	lsl.w	r2, r3, r2
1a001622:	4918      	ldr	r1, [pc, #96]	; (1a001684 <prvAddCurrentTaskToDelayedList+0x84>)
1a001624:	680b      	ldr	r3, [r1, #0]
1a001626:	ea23 0302 	bic.w	r3, r3, r2
1a00162a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00162c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001630:	d013      	beq.n	1a00165a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001632:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001634:	4b12      	ldr	r3, [pc, #72]	; (1a001680 <prvAddCurrentTaskToDelayedList+0x80>)
1a001636:	681b      	ldr	r3, [r3, #0]
1a001638:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00163a:	42a5      	cmp	r5, r4
1a00163c:	d816      	bhi.n	1a00166c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00163e:	4b12      	ldr	r3, [pc, #72]	; (1a001688 <prvAddCurrentTaskToDelayedList+0x88>)
1a001640:	6818      	ldr	r0, [r3, #0]
1a001642:	4b0f      	ldr	r3, [pc, #60]	; (1a001680 <prvAddCurrentTaskToDelayedList+0x80>)
1a001644:	6819      	ldr	r1, [r3, #0]
1a001646:	3104      	adds	r1, #4
1a001648:	f7ff fe51 	bl	1a0012ee <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a00164c:	4b0f      	ldr	r3, [pc, #60]	; (1a00168c <prvAddCurrentTaskToDelayedList+0x8c>)
1a00164e:	681b      	ldr	r3, [r3, #0]
1a001650:	42a3      	cmp	r3, r4
1a001652:	d912      	bls.n	1a00167a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001654:	4b0d      	ldr	r3, [pc, #52]	; (1a00168c <prvAddCurrentTaskToDelayedList+0x8c>)
1a001656:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001658:	e00f      	b.n	1a00167a <prvAddCurrentTaskToDelayedList+0x7a>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00165a:	2e00      	cmp	r6, #0
1a00165c:	d0e9      	beq.n	1a001632 <prvAddCurrentTaskToDelayedList+0x32>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00165e:	4b08      	ldr	r3, [pc, #32]	; (1a001680 <prvAddCurrentTaskToDelayedList+0x80>)
1a001660:	6819      	ldr	r1, [r3, #0]
1a001662:	3104      	adds	r1, #4
1a001664:	480a      	ldr	r0, [pc, #40]	; (1a001690 <prvAddCurrentTaskToDelayedList+0x90>)
1a001666:	f7ff fe36 	bl	1a0012d6 <vListInsertEnd>
1a00166a:	e006      	b.n	1a00167a <prvAddCurrentTaskToDelayedList+0x7a>

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00166c:	4b09      	ldr	r3, [pc, #36]	; (1a001694 <prvAddCurrentTaskToDelayedList+0x94>)
1a00166e:	6818      	ldr	r0, [r3, #0]
1a001670:	4b03      	ldr	r3, [pc, #12]	; (1a001680 <prvAddCurrentTaskToDelayedList+0x80>)
1a001672:	6819      	ldr	r1, [r3, #0]
1a001674:	3104      	adds	r1, #4
1a001676:	f7ff fe3a 	bl	1a0012ee <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a00167a:	bd70      	pop	{r4, r5, r6, pc}
1a00167c:	100029c4 	.word	0x100029c4
1a001680:	100028a4 	.word	0x100028a4
1a001684:	10002950 	.word	0x10002950
1a001688:	100028a8 	.word	0x100028a8
1a00168c:	1000297c 	.word	0x1000297c
1a001690:	1000299c 	.word	0x1000299c
1a001694:	100028ac 	.word	0x100028ac

1a001698 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
1a001698:	b570      	push	{r4, r5, r6, lr}
1a00169a:	b086      	sub	sp, #24
1a00169c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00169e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
1a0016a0:	b945      	cbnz	r5, 1a0016b4 <xTaskCreateStatic+0x1c>
1a0016a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016a6:	f383 8811 	msr	BASEPRI, r3
1a0016aa:	f3bf 8f6f 	isb	sy
1a0016ae:	f3bf 8f4f 	dsb	sy
1a0016b2:	e7fe      	b.n	1a0016b2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a0016b4:	b944      	cbnz	r4, 1a0016c8 <xTaskCreateStatic+0x30>
1a0016b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016ba:	f383 8811 	msr	BASEPRI, r3
1a0016be:	f3bf 8f6f 	isb	sy
1a0016c2:	f3bf 8f4f 	dsb	sy
1a0016c6:	e7fe      	b.n	1a0016c6 <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
1a0016c8:	2660      	movs	r6, #96	; 0x60
1a0016ca:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0016cc:	9e04      	ldr	r6, [sp, #16]
1a0016ce:	2e60      	cmp	r6, #96	; 0x60
1a0016d0:	d008      	beq.n	1a0016e4 <xTaskCreateStatic+0x4c>
1a0016d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016d6:	f383 8811 	msr	BASEPRI, r3
1a0016da:	f3bf 8f6f 	isb	sy
1a0016de:	f3bf 8f4f 	dsb	sy
1a0016e2:	e7fe      	b.n	1a0016e2 <xTaskCreateStatic+0x4a>
		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0016e4:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0016e6:	2502      	movs	r5, #2
1a0016e8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0016ec:	2500      	movs	r5, #0
1a0016ee:	9503      	str	r5, [sp, #12]
1a0016f0:	9402      	str	r4, [sp, #8]
1a0016f2:	ad05      	add	r5, sp, #20
1a0016f4:	9501      	str	r5, [sp, #4]
1a0016f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0016f8:	9500      	str	r5, [sp, #0]
1a0016fa:	f7ff fe57 	bl	1a0013ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0016fe:	4620      	mov	r0, r4
1a001700:	f7ff fed2 	bl	1a0014a8 <prvAddNewTaskToReadyList>
		{
			xReturn = NULL;
		}

		return xReturn;
	}
1a001704:	9805      	ldr	r0, [sp, #20]
1a001706:	b006      	add	sp, #24
1a001708:	bd70      	pop	{r4, r5, r6, pc}

1a00170a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
1a00170a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00170e:	b085      	sub	sp, #20
1a001710:	4607      	mov	r7, r0
1a001712:	4688      	mov	r8, r1
1a001714:	4615      	mov	r5, r2
1a001716:	4699      	mov	r9, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001718:	0090      	lsls	r0, r2, #2
1a00171a:	f7ff f8a9 	bl	1a000870 <pvPortMalloc>

			if( pxStack != NULL )
1a00171e:	b308      	cbz	r0, 1a001764 <xTaskCreate+0x5a>
1a001720:	4606      	mov	r6, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001722:	2060      	movs	r0, #96	; 0x60
1a001724:	f7ff f8a4 	bl	1a000870 <pvPortMalloc>

				if( pxNewTCB != NULL )
1a001728:	4604      	mov	r4, r0
1a00172a:	b1b8      	cbz	r0, 1a00175c <xTaskCreate+0x52>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
1a00172c:	6306      	str	r6, [r0, #48]	; 0x30
				pxNewTCB = NULL;
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
1a00172e:	b1e4      	cbz	r4, 1a00176a <xTaskCreate+0x60>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001730:	2300      	movs	r3, #0
1a001732:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001736:	9303      	str	r3, [sp, #12]
1a001738:	9402      	str	r4, [sp, #8]
1a00173a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00173c:	9301      	str	r3, [sp, #4]
1a00173e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001740:	9300      	str	r3, [sp, #0]
1a001742:	464b      	mov	r3, r9
1a001744:	462a      	mov	r2, r5
1a001746:	4641      	mov	r1, r8
1a001748:	4638      	mov	r0, r7
1a00174a:	f7ff fe2f 	bl	1a0013ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00174e:	4620      	mov	r0, r4
1a001750:	f7ff feaa 	bl	1a0014a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001754:	2001      	movs	r0, #1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
1a001756:	b005      	add	sp, #20
1a001758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
1a00175c:	4630      	mov	r0, r6
1a00175e:	f7ff f915 	bl	1a00098c <vPortFree>
1a001762:	e7e4      	b.n	1a00172e <xTaskCreate+0x24>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001768:	e7f5      	b.n	1a001756 <xTaskCreate+0x4c>
1a00176a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}

		return xReturn;
1a00176e:	e7f2      	b.n	1a001756 <xTaskCreate+0x4c>

1a001770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
1a001770:	b510      	push	{r4, lr}
1a001772:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001774:	2400      	movs	r4, #0
1a001776:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001778:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00177a:	aa07      	add	r2, sp, #28
1a00177c:	a906      	add	r1, sp, #24
1a00177e:	a805      	add	r0, sp, #20
1a001780:	f7ff fde4 	bl	1a00134c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001784:	9b05      	ldr	r3, [sp, #20]
1a001786:	9302      	str	r3, [sp, #8]
1a001788:	9b06      	ldr	r3, [sp, #24]
1a00178a:	9301      	str	r3, [sp, #4]
1a00178c:	9400      	str	r4, [sp, #0]
1a00178e:	4623      	mov	r3, r4
1a001790:	9a07      	ldr	r2, [sp, #28]
1a001792:	4917      	ldr	r1, [pc, #92]	; (1a0017f0 <vTaskStartScheduler+0x80>)
1a001794:	4817      	ldr	r0, [pc, #92]	; (1a0017f4 <vTaskStartScheduler+0x84>)
1a001796:	f7ff ff7f 	bl	1a001698 <xTaskCreateStatic>
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
1a00179a:	b140      	cbz	r0, 1a0017ae <vTaskStartScheduler+0x3e>

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
1a00179c:	f000 fd88 	bl	1a0022b0 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
1a0017a0:	2801      	cmp	r0, #1
1a0017a2:	d006      	beq.n	1a0017b2 <vTaskStartScheduler+0x42>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0017a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0017a8:	d018      	beq.n	1a0017dc <vTaskStartScheduler+0x6c>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
1a0017aa:	b008      	add	sp, #32
1a0017ac:	bd10      	pop	{r4, pc}
		{
			xReturn = pdPASS;
		}
		else
		{
			xReturn = pdFAIL;
1a0017ae:	2000      	movs	r0, #0
1a0017b0:	e7f6      	b.n	1a0017a0 <vTaskStartScheduler+0x30>
1a0017b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017b6:	f383 8811 	msr	BASEPRI, r3
1a0017ba:	f3bf 8f6f 	isb	sy
1a0017be:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
1a0017c2:	4b0d      	ldr	r3, [pc, #52]	; (1a0017f8 <vTaskStartScheduler+0x88>)
1a0017c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0017c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0017ca:	4b0c      	ldr	r3, [pc, #48]	; (1a0017fc <vTaskStartScheduler+0x8c>)
1a0017cc:	2201      	movs	r2, #1
1a0017ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0017d0:	4b0b      	ldr	r3, [pc, #44]	; (1a001800 <vTaskStartScheduler+0x90>)
1a0017d2:	2200      	movs	r2, #0
1a0017d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
1a0017d6:	f001 f847 	bl	1a002868 <xPortStartScheduler>
1a0017da:	e7e6      	b.n	1a0017aa <vTaskStartScheduler+0x3a>
1a0017dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017e0:	f383 8811 	msr	BASEPRI, r3
1a0017e4:	f3bf 8f6f 	isb	sy
1a0017e8:	f3bf 8f4f 	dsb	sy
1a0017ec:	e7fe      	b.n	1a0017ec <vTaskStartScheduler+0x7c>
1a0017ee:	bf00      	nop
1a0017f0:	1a004fc8 	.word	0x1a004fc8
1a0017f4:	1a0015d9 	.word	0x1a0015d9
1a0017f8:	1000297c 	.word	0x1000297c
1a0017fc:	10002998 	.word	0x10002998
1a001800:	100029c4 	.word	0x100029c4

1a001804 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
1a001804:	4a02      	ldr	r2, [pc, #8]	; (1a001810 <vTaskSuspendAll+0xc>)
1a001806:	6813      	ldr	r3, [r2, #0]
1a001808:	3301      	adds	r3, #1
1a00180a:	6013      	str	r3, [r2, #0]
}
1a00180c:	4770      	bx	lr
1a00180e:	bf00      	nop
1a001810:	10002948 	.word	0x10002948

1a001814 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
1a001814:	4b01      	ldr	r3, [pc, #4]	; (1a00181c <xTaskGetTickCount+0x8>)
1a001816:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
1a001818:	4770      	bx	lr
1a00181a:	bf00      	nop
1a00181c:	100029c4 	.word	0x100029c4

1a001820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
1a001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001822:	4b3a      	ldr	r3, [pc, #232]	; (1a00190c <xTaskIncrementTick+0xec>)
1a001824:	681b      	ldr	r3, [r3, #0]
1a001826:	2b00      	cmp	r3, #0
1a001828:	d164      	bne.n	1a0018f4 <xTaskIncrementTick+0xd4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00182a:	4b39      	ldr	r3, [pc, #228]	; (1a001910 <xTaskIncrementTick+0xf0>)
1a00182c:	681d      	ldr	r5, [r3, #0]
1a00182e:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
1a001830:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001832:	b9c5      	cbnz	r5, 1a001866 <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
1a001834:	4b37      	ldr	r3, [pc, #220]	; (1a001914 <xTaskIncrementTick+0xf4>)
1a001836:	681b      	ldr	r3, [r3, #0]
1a001838:	681b      	ldr	r3, [r3, #0]
1a00183a:	b143      	cbz	r3, 1a00184e <xTaskIncrementTick+0x2e>
1a00183c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001840:	f383 8811 	msr	BASEPRI, r3
1a001844:	f3bf 8f6f 	isb	sy
1a001848:	f3bf 8f4f 	dsb	sy
1a00184c:	e7fe      	b.n	1a00184c <xTaskIncrementTick+0x2c>
1a00184e:	4a31      	ldr	r2, [pc, #196]	; (1a001914 <xTaskIncrementTick+0xf4>)
1a001850:	6811      	ldr	r1, [r2, #0]
1a001852:	4b31      	ldr	r3, [pc, #196]	; (1a001918 <xTaskIncrementTick+0xf8>)
1a001854:	6818      	ldr	r0, [r3, #0]
1a001856:	6010      	str	r0, [r2, #0]
1a001858:	6019      	str	r1, [r3, #0]
1a00185a:	4a30      	ldr	r2, [pc, #192]	; (1a00191c <xTaskIncrementTick+0xfc>)
1a00185c:	6813      	ldr	r3, [r2, #0]
1a00185e:	3301      	adds	r3, #1
1a001860:	6013      	str	r3, [r2, #0]
1a001862:	f7ff fd8d 	bl	1a001380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001866:	4b2e      	ldr	r3, [pc, #184]	; (1a001920 <xTaskIncrementTick+0x100>)
1a001868:	681b      	ldr	r3, [r3, #0]
1a00186a:	42ab      	cmp	r3, r5
1a00186c:	d938      	bls.n	1a0018e0 <xTaskIncrementTick+0xc0>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a00186e:	2400      	movs	r4, #0
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001870:	4b2c      	ldr	r3, [pc, #176]	; (1a001924 <xTaskIncrementTick+0x104>)
1a001872:	681b      	ldr	r3, [r3, #0]
1a001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001876:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00187a:	009a      	lsls	r2, r3, #2
1a00187c:	4b2a      	ldr	r3, [pc, #168]	; (1a001928 <xTaskIncrementTick+0x108>)
1a00187e:	589b      	ldr	r3, [r3, r2]
1a001880:	2b01      	cmp	r3, #1
1a001882:	d93c      	bls.n	1a0018fe <xTaskIncrementTick+0xde>
			{
				xSwitchRequired = pdTRUE;
1a001884:	2401      	movs	r4, #1
1a001886:	e03a      	b.n	1a0018fe <xTaskIncrementTick+0xde>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
1a001888:	2401      	movs	r4, #1
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00188a:	4b22      	ldr	r3, [pc, #136]	; (1a001914 <xTaskIncrementTick+0xf4>)
1a00188c:	681b      	ldr	r3, [r3, #0]
1a00188e:	681b      	ldr	r3, [r3, #0]
1a001890:	b343      	cbz	r3, 1a0018e4 <xTaskIncrementTick+0xc4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001892:	4b20      	ldr	r3, [pc, #128]	; (1a001914 <xTaskIncrementTick+0xf4>)
1a001894:	681b      	ldr	r3, [r3, #0]
1a001896:	68db      	ldr	r3, [r3, #12]
1a001898:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00189a:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
1a00189c:	429d      	cmp	r5, r3
1a00189e:	d326      	bcc.n	1a0018ee <xTaskIncrementTick+0xce>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0018a0:	1d37      	adds	r7, r6, #4
1a0018a2:	4638      	mov	r0, r7
1a0018a4:	f7ff fd3d 	bl	1a001322 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0018a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0018aa:	b11b      	cbz	r3, 1a0018b4 <xTaskIncrementTick+0x94>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0018ac:	f106 0018 	add.w	r0, r6, #24
1a0018b0:	f7ff fd37 	bl	1a001322 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
1a0018b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0018b6:	2201      	movs	r2, #1
1a0018b8:	409a      	lsls	r2, r3
1a0018ba:	491c      	ldr	r1, [pc, #112]	; (1a00192c <xTaskIncrementTick+0x10c>)
1a0018bc:	6808      	ldr	r0, [r1, #0]
1a0018be:	4302      	orrs	r2, r0
1a0018c0:	600a      	str	r2, [r1, #0]
1a0018c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0018c6:	009a      	lsls	r2, r3, #2
1a0018c8:	4639      	mov	r1, r7
1a0018ca:	4817      	ldr	r0, [pc, #92]	; (1a001928 <xTaskIncrementTick+0x108>)
1a0018cc:	4410      	add	r0, r2
1a0018ce:	f7ff fd02 	bl	1a0012d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0018d2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0018d4:	4b13      	ldr	r3, [pc, #76]	; (1a001924 <xTaskIncrementTick+0x104>)
1a0018d6:	681b      	ldr	r3, [r3, #0]
1a0018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0018da:	429a      	cmp	r2, r3
1a0018dc:	d2d4      	bcs.n	1a001888 <xTaskIncrementTick+0x68>
1a0018de:	e7d4      	b.n	1a00188a <xTaskIncrementTick+0x6a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a0018e0:	2400      	movs	r4, #0
1a0018e2:	e7d2      	b.n	1a00188a <xTaskIncrementTick+0x6a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0018e4:	4b0e      	ldr	r3, [pc, #56]	; (1a001920 <xTaskIncrementTick+0x100>)
1a0018e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0018ea:	601a      	str	r2, [r3, #0]
					break;
1a0018ec:	e7c0      	b.n	1a001870 <xTaskIncrementTick+0x50>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
1a0018ee:	4a0c      	ldr	r2, [pc, #48]	; (1a001920 <xTaskIncrementTick+0x100>)
1a0018f0:	6013      	str	r3, [r2, #0]
						break;
1a0018f2:	e7bd      	b.n	1a001870 <xTaskIncrementTick+0x50>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
1a0018f4:	4a0e      	ldr	r2, [pc, #56]	; (1a001930 <xTaskIncrementTick+0x110>)
1a0018f6:	6813      	ldr	r3, [r2, #0]
1a0018f8:	3301      	adds	r3, #1
1a0018fa:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a0018fc:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
1a0018fe:	4b0d      	ldr	r3, [pc, #52]	; (1a001934 <xTaskIncrementTick+0x114>)
1a001900:	681b      	ldr	r3, [r3, #0]
1a001902:	b103      	cbz	r3, 1a001906 <xTaskIncrementTick+0xe6>
		{
			xSwitchRequired = pdTRUE;
1a001904:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
1a001906:	4620      	mov	r0, r4
1a001908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00190a:	bf00      	nop
1a00190c:	10002948 	.word	0x10002948
1a001910:	100029c4 	.word	0x100029c4
1a001914:	100028a8 	.word	0x100028a8
1a001918:	100028ac 	.word	0x100028ac
1a00191c:	10002980 	.word	0x10002980
1a001920:	1000297c 	.word	0x1000297c
1a001924:	100028a4 	.word	0x100028a4
1a001928:	100028b0 	.word	0x100028b0
1a00192c:	10002950 	.word	0x10002950
1a001930:	10002944 	.word	0x10002944
1a001934:	100029c8 	.word	0x100029c8

1a001938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
1a001938:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
1a00193a:	4b33      	ldr	r3, [pc, #204]	; (1a001a08 <xTaskResumeAll+0xd0>)
1a00193c:	681b      	ldr	r3, [r3, #0]
1a00193e:	b943      	cbnz	r3, 1a001952 <xTaskResumeAll+0x1a>
1a001940:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001944:	f383 8811 	msr	BASEPRI, r3
1a001948:	f3bf 8f6f 	isb	sy
1a00194c:	f3bf 8f4f 	dsb	sy
1a001950:	e7fe      	b.n	1a001950 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
1a001952:	f000 fee7 	bl	1a002724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
1a001956:	4b2c      	ldr	r3, [pc, #176]	; (1a001a08 <xTaskResumeAll+0xd0>)
1a001958:	681a      	ldr	r2, [r3, #0]
1a00195a:	3a01      	subs	r2, #1
1a00195c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00195e:	681b      	ldr	r3, [r3, #0]
1a001960:	2b00      	cmp	r3, #0
1a001962:	d14d      	bne.n	1a001a00 <xTaskResumeAll+0xc8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001964:	4b29      	ldr	r3, [pc, #164]	; (1a001a0c <xTaskResumeAll+0xd4>)
1a001966:	681b      	ldr	r3, [r3, #0]
1a001968:	b923      	cbnz	r3, 1a001974 <xTaskResumeAll+0x3c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a00196a:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00196c:	f000 fefc 	bl	1a002768 <vPortExitCritical>

	return xAlreadyYielded;
}
1a001970:	4620      	mov	r0, r4
1a001972:	bd38      	pop	{r3, r4, r5, pc}
#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
1a001974:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001976:	4b26      	ldr	r3, [pc, #152]	; (1a001a10 <xTaskResumeAll+0xd8>)
1a001978:	681b      	ldr	r3, [r3, #0]
1a00197a:	b31b      	cbz	r3, 1a0019c4 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00197c:	4b24      	ldr	r3, [pc, #144]	; (1a001a10 <xTaskResumeAll+0xd8>)
1a00197e:	68db      	ldr	r3, [r3, #12]
1a001980:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001982:	f104 0018 	add.w	r0, r4, #24
1a001986:	f7ff fccc 	bl	1a001322 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00198a:	1d25      	adds	r5, r4, #4
1a00198c:	4628      	mov	r0, r5
1a00198e:	f7ff fcc8 	bl	1a001322 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001994:	2201      	movs	r2, #1
1a001996:	409a      	lsls	r2, r3
1a001998:	491e      	ldr	r1, [pc, #120]	; (1a001a14 <xTaskResumeAll+0xdc>)
1a00199a:	6808      	ldr	r0, [r1, #0]
1a00199c:	4302      	orrs	r2, r0
1a00199e:	600a      	str	r2, [r1, #0]
1a0019a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0019a4:	009a      	lsls	r2, r3, #2
1a0019a6:	4629      	mov	r1, r5
1a0019a8:	481b      	ldr	r0, [pc, #108]	; (1a001a18 <xTaskResumeAll+0xe0>)
1a0019aa:	4410      	add	r0, r2
1a0019ac:	f7ff fc93 	bl	1a0012d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0019b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0019b2:	4b1a      	ldr	r3, [pc, #104]	; (1a001a1c <xTaskResumeAll+0xe4>)
1a0019b4:	681b      	ldr	r3, [r3, #0]
1a0019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0019b8:	429a      	cmp	r2, r3
1a0019ba:	d3dc      	bcc.n	1a001976 <xTaskResumeAll+0x3e>
					{
						xYieldPending = pdTRUE;
1a0019bc:	4b18      	ldr	r3, [pc, #96]	; (1a001a20 <xTaskResumeAll+0xe8>)
1a0019be:	2201      	movs	r2, #1
1a0019c0:	601a      	str	r2, [r3, #0]
1a0019c2:	e7d8      	b.n	1a001976 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1a0019c4:	b10c      	cbz	r4, 1a0019ca <xTaskResumeAll+0x92>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
1a0019c6:	f7ff fcdb 	bl	1a001380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0019ca:	4b16      	ldr	r3, [pc, #88]	; (1a001a24 <xTaskResumeAll+0xec>)
1a0019cc:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0019ce:	b154      	cbz	r4, 1a0019e6 <xTaskResumeAll+0xae>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
1a0019d0:	f7ff ff26 	bl	1a001820 <xTaskIncrementTick>
1a0019d4:	b110      	cbz	r0, 1a0019dc <xTaskResumeAll+0xa4>
							{
								xYieldPending = pdTRUE;
1a0019d6:	4b12      	ldr	r3, [pc, #72]	; (1a001a20 <xTaskResumeAll+0xe8>)
1a0019d8:	2201      	movs	r2, #1
1a0019da:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0019dc:	3c01      	subs	r4, #1
1a0019de:	d1f7      	bne.n	1a0019d0 <xTaskResumeAll+0x98>

						uxPendedTicks = 0;
1a0019e0:	4b10      	ldr	r3, [pc, #64]	; (1a001a24 <xTaskResumeAll+0xec>)
1a0019e2:	2200      	movs	r2, #0
1a0019e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
1a0019e6:	4b0e      	ldr	r3, [pc, #56]	; (1a001a20 <xTaskResumeAll+0xe8>)
1a0019e8:	681b      	ldr	r3, [r3, #0]
1a0019ea:	b15b      	cbz	r3, 1a001a04 <xTaskResumeAll+0xcc>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
1a0019ec:	4b0e      	ldr	r3, [pc, #56]	; (1a001a28 <xTaskResumeAll+0xf0>)
1a0019ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019f2:	601a      	str	r2, [r3, #0]
1a0019f4:	f3bf 8f4f 	dsb	sy
1a0019f8:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
1a0019fc:	2401      	movs	r4, #1
1a0019fe:	e7b5      	b.n	1a00196c <xTaskResumeAll+0x34>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001a00:	2400      	movs	r4, #0
1a001a02:	e7b3      	b.n	1a00196c <xTaskResumeAll+0x34>
1a001a04:	2400      	movs	r4, #0
1a001a06:	e7b1      	b.n	1a00196c <xTaskResumeAll+0x34>
1a001a08:	10002948 	.word	0x10002948
1a001a0c:	1000293c 	.word	0x1000293c
1a001a10:	10002984 	.word	0x10002984
1a001a14:	10002950 	.word	0x10002950
1a001a18:	100028b0 	.word	0x100028b0
1a001a1c:	100028a4 	.word	0x100028a4
1a001a20:	100029c8 	.word	0x100029c8
1a001a24:	10002944 	.word	0x10002944
1a001a28:	e000ed04 	.word	0xe000ed04

1a001a2c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
1a001a2c:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
1a001a2e:	b150      	cbz	r0, 1a001a46 <vTaskDelayUntil+0x1a>
1a001a30:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001a32:	b989      	cbnz	r1, 1a001a58 <vTaskDelayUntil+0x2c>
1a001a34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a38:	f383 8811 	msr	BASEPRI, r3
1a001a3c:	f3bf 8f6f 	isb	sy
1a001a40:	f3bf 8f4f 	dsb	sy
1a001a44:	e7fe      	b.n	1a001a44 <vTaskDelayUntil+0x18>
1a001a46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a4a:	f383 8811 	msr	BASEPRI, r3
1a001a4e:	f3bf 8f6f 	isb	sy
1a001a52:	f3bf 8f4f 	dsb	sy
1a001a56:	e7fe      	b.n	1a001a56 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001a58:	4b1a      	ldr	r3, [pc, #104]	; (1a001ac4 <vTaskDelayUntil+0x98>)
1a001a5a:	681b      	ldr	r3, [r3, #0]
1a001a5c:	b143      	cbz	r3, 1a001a70 <vTaskDelayUntil+0x44>
1a001a5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a62:	f383 8811 	msr	BASEPRI, r3
1a001a66:	f3bf 8f6f 	isb	sy
1a001a6a:	f3bf 8f4f 	dsb	sy
1a001a6e:	e7fe      	b.n	1a001a6e <vTaskDelayUntil+0x42>
1a001a70:	460c      	mov	r4, r1

		vTaskSuspendAll();
1a001a72:	f7ff fec7 	bl	1a001804 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
1a001a76:	4b14      	ldr	r3, [pc, #80]	; (1a001ac8 <vTaskDelayUntil+0x9c>)
1a001a78:	6818      	ldr	r0, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001a7a:	682a      	ldr	r2, [r5, #0]
1a001a7c:	4414      	add	r4, r2

			if( xConstTickCount < *pxPreviousWakeTime )
1a001a7e:	4282      	cmp	r2, r0
1a001a80:	d918      	bls.n	1a001ab4 <vTaskDelayUntil+0x88>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001a82:	42a2      	cmp	r2, r4
1a001a84:	d80c      	bhi.n	1a001aa0 <vTaskDelayUntil+0x74>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
1a001a86:	602c      	str	r4, [r5, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
1a001a88:	f7ff ff56 	bl	1a001938 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a001a8c:	b938      	cbnz	r0, 1a001a9e <vTaskDelayUntil+0x72>
		{
			portYIELD_WITHIN_API();
1a001a8e:	4b0f      	ldr	r3, [pc, #60]	; (1a001acc <vTaskDelayUntil+0xa0>)
1a001a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a94:	601a      	str	r2, [r3, #0]
1a001a96:	f3bf 8f4f 	dsb	sy
1a001a9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1a001a9e:	bd38      	pop	{r3, r4, r5, pc}
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001aa0:	42a0      	cmp	r0, r4
1a001aa2:	d301      	bcc.n	1a001aa8 <vTaskDelayUntil+0x7c>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
1a001aa4:	602c      	str	r4, [r5, #0]
1a001aa6:	e7ef      	b.n	1a001a88 <vTaskDelayUntil+0x5c>
1a001aa8:	602c      	str	r4, [r5, #0]
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001aaa:	2100      	movs	r1, #0
1a001aac:	1a20      	subs	r0, r4, r0
1a001aae:	f7ff fda7 	bl	1a001600 <prvAddCurrentTaskToDelayedList>
1a001ab2:	e7e9      	b.n	1a001a88 <vTaskDelayUntil+0x5c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001ab4:	42a2      	cmp	r2, r4
1a001ab6:	d801      	bhi.n	1a001abc <vTaskDelayUntil+0x90>
1a001ab8:	42a0      	cmp	r0, r4
1a001aba:	d201      	bcs.n	1a001ac0 <vTaskDelayUntil+0x94>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
1a001abc:	602c      	str	r4, [r5, #0]
1a001abe:	e7f4      	b.n	1a001aaa <vTaskDelayUntil+0x7e>
1a001ac0:	602c      	str	r4, [r5, #0]
1a001ac2:	e7e1      	b.n	1a001a88 <vTaskDelayUntil+0x5c>
1a001ac4:	10002948 	.word	0x10002948
1a001ac8:	100029c4 	.word	0x100029c4
1a001acc:	e000ed04 	.word	0xe000ed04

1a001ad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
1a001ad0:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001ad2:	b1a8      	cbz	r0, 1a001b00 <vTaskDelay+0x30>
1a001ad4:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
1a001ad6:	4b0f      	ldr	r3, [pc, #60]	; (1a001b14 <vTaskDelay+0x44>)
1a001ad8:	681b      	ldr	r3, [r3, #0]
1a001ada:	b143      	cbz	r3, 1a001aee <vTaskDelay+0x1e>
1a001adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ae0:	f383 8811 	msr	BASEPRI, r3
1a001ae4:	f3bf 8f6f 	isb	sy
1a001ae8:	f3bf 8f4f 	dsb	sy
1a001aec:	e7fe      	b.n	1a001aec <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001aee:	f7ff fe89 	bl	1a001804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001af2:	2100      	movs	r1, #0
1a001af4:	4620      	mov	r0, r4
1a001af6:	f7ff fd83 	bl	1a001600 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
1a001afa:	f7ff ff1d 	bl	1a001938 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a001afe:	b938      	cbnz	r0, 1a001b10 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
1a001b00:	4b05      	ldr	r3, [pc, #20]	; (1a001b18 <vTaskDelay+0x48>)
1a001b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b06:	601a      	str	r2, [r3, #0]
1a001b08:	f3bf 8f4f 	dsb	sy
1a001b0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1a001b10:	bd10      	pop	{r4, pc}
1a001b12:	bf00      	nop
1a001b14:	10002948 	.word	0x10002948
1a001b18:	e000ed04 	.word	0xe000ed04

1a001b1c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001b1c:	4b2c      	ldr	r3, [pc, #176]	; (1a001bd0 <vTaskSwitchContext+0xb4>)
1a001b1e:	681b      	ldr	r3, [r3, #0]
1a001b20:	b11b      	cbz	r3, 1a001b2a <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
1a001b22:	4b2c      	ldr	r3, [pc, #176]	; (1a001bd4 <vTaskSwitchContext+0xb8>)
1a001b24:	2201      	movs	r2, #1
1a001b26:	601a      	str	r2, [r3, #0]
1a001b28:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
1a001b2a:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
1a001b2c:	4b29      	ldr	r3, [pc, #164]	; (1a001bd4 <vTaskSwitchContext+0xb8>)
1a001b2e:	2200      	movs	r2, #0
1a001b30:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
1a001b32:	4b29      	ldr	r3, [pc, #164]	; (1a001bd8 <vTaskSwitchContext+0xbc>)
1a001b34:	681b      	ldr	r3, [r3, #0]
1a001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001b38:	681a      	ldr	r2, [r3, #0]
1a001b3a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001b3e:	d103      	bne.n	1a001b48 <vTaskSwitchContext+0x2c>
1a001b40:	685a      	ldr	r2, [r3, #4]
1a001b42:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001b46:	d01b      	beq.n	1a001b80 <vTaskSwitchContext+0x64>
1a001b48:	4b23      	ldr	r3, [pc, #140]	; (1a001bd8 <vTaskSwitchContext+0xbc>)
1a001b4a:	6818      	ldr	r0, [r3, #0]
1a001b4c:	6819      	ldr	r1, [r3, #0]
1a001b4e:	3134      	adds	r1, #52	; 0x34
1a001b50:	f7ff fc14 	bl	1a00137c <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001b54:	4b21      	ldr	r3, [pc, #132]	; (1a001bdc <vTaskSwitchContext+0xc0>)
1a001b56:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001b58:	fab3 f383 	clz	r3, r3
1a001b5c:	b2db      	uxtb	r3, r3
1a001b5e:	f1c3 031f 	rsb	r3, r3, #31
1a001b62:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001b66:	008a      	lsls	r2, r1, #2
1a001b68:	491d      	ldr	r1, [pc, #116]	; (1a001be0 <vTaskSwitchContext+0xc4>)
1a001b6a:	588a      	ldr	r2, [r1, r2]
1a001b6c:	b98a      	cbnz	r2, 1a001b92 <vTaskSwitchContext+0x76>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001b6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b72:	f383 8811 	msr	BASEPRI, r3
1a001b76:	f3bf 8f6f 	isb	sy
1a001b7a:	f3bf 8f4f 	dsb	sy
1a001b7e:	e7fe      	b.n	1a001b7e <vTaskSwitchContext+0x62>
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
1a001b80:	689a      	ldr	r2, [r3, #8]
1a001b82:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001b86:	d1df      	bne.n	1a001b48 <vTaskSwitchContext+0x2c>
1a001b88:	68db      	ldr	r3, [r3, #12]
1a001b8a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001b8e:	d1db      	bne.n	1a001b48 <vTaskSwitchContext+0x2c>
1a001b90:	e7e0      	b.n	1a001b54 <vTaskSwitchContext+0x38>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001b92:	4813      	ldr	r0, [pc, #76]	; (1a001be0 <vTaskSwitchContext+0xc4>)
1a001b94:	009a      	lsls	r2, r3, #2
1a001b96:	18d4      	adds	r4, r2, r3
1a001b98:	00a1      	lsls	r1, r4, #2
1a001b9a:	4401      	add	r1, r0
1a001b9c:	684c      	ldr	r4, [r1, #4]
1a001b9e:	6864      	ldr	r4, [r4, #4]
1a001ba0:	604c      	str	r4, [r1, #4]
1a001ba2:	441a      	add	r2, r3
1a001ba4:	0091      	lsls	r1, r2, #2
1a001ba6:	3108      	adds	r1, #8
1a001ba8:	4408      	add	r0, r1
1a001baa:	4284      	cmp	r4, r0
1a001bac:	d009      	beq.n	1a001bc2 <vTaskSwitchContext+0xa6>
1a001bae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001bb2:	009a      	lsls	r2, r3, #2
1a001bb4:	4b0a      	ldr	r3, [pc, #40]	; (1a001be0 <vTaskSwitchContext+0xc4>)
1a001bb6:	4413      	add	r3, r2
1a001bb8:	685b      	ldr	r3, [r3, #4]
1a001bba:	68da      	ldr	r2, [r3, #12]
1a001bbc:	4b06      	ldr	r3, [pc, #24]	; (1a001bd8 <vTaskSwitchContext+0xbc>)
1a001bbe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
1a001bc0:	bd10      	pop	{r4, pc}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001bc2:	6861      	ldr	r1, [r4, #4]
1a001bc4:	4806      	ldr	r0, [pc, #24]	; (1a001be0 <vTaskSwitchContext+0xc4>)
1a001bc6:	2214      	movs	r2, #20
1a001bc8:	fb02 0203 	mla	r2, r2, r3, r0
1a001bcc:	6051      	str	r1, [r2, #4]
1a001bce:	e7ee      	b.n	1a001bae <vTaskSwitchContext+0x92>
1a001bd0:	10002948 	.word	0x10002948
1a001bd4:	100029c8 	.word	0x100029c8
1a001bd8:	100028a4 	.word	0x100028a4
1a001bdc:	10002950 	.word	0x10002950
1a001be0:	100028b0 	.word	0x100028b0

1a001be4 <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
1a001be4:	b940      	cbnz	r0, 1a001bf8 <vTaskPlaceOnEventList+0x14>
1a001be6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bea:	f383 8811 	msr	BASEPRI, r3
1a001bee:	f3bf 8f6f 	isb	sy
1a001bf2:	f3bf 8f4f 	dsb	sy
1a001bf6:	e7fe      	b.n	1a001bf6 <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
1a001bf8:	b510      	push	{r4, lr}
1a001bfa:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001bfc:	4b04      	ldr	r3, [pc, #16]	; (1a001c10 <vTaskPlaceOnEventList+0x2c>)
1a001bfe:	6819      	ldr	r1, [r3, #0]
1a001c00:	3118      	adds	r1, #24
1a001c02:	f7ff fb74 	bl	1a0012ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001c06:	2101      	movs	r1, #1
1a001c08:	4620      	mov	r0, r4
1a001c0a:	f7ff fcf9 	bl	1a001600 <prvAddCurrentTaskToDelayedList>
}
1a001c0e:	bd10      	pop	{r4, pc}
1a001c10:	100028a4 	.word	0x100028a4

1a001c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001c14:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001c16:	b940      	cbnz	r0, 1a001c2a <vTaskPlaceOnEventListRestricted+0x16>
1a001c18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c1c:	f383 8811 	msr	BASEPRI, r3
1a001c20:	f3bf 8f6f 	isb	sy
1a001c24:	f3bf 8f4f 	dsb	sy
1a001c28:	e7fe      	b.n	1a001c28 <vTaskPlaceOnEventListRestricted+0x14>
1a001c2a:	460c      	mov	r4, r1
1a001c2c:	4615      	mov	r5, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001c2e:	4a06      	ldr	r2, [pc, #24]	; (1a001c48 <vTaskPlaceOnEventListRestricted+0x34>)
1a001c30:	6811      	ldr	r1, [r2, #0]
1a001c32:	3118      	adds	r1, #24
1a001c34:	f7ff fb4f 	bl	1a0012d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
1a001c38:	b10d      	cbz	r5, 1a001c3e <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
1a001c3a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001c3e:	4629      	mov	r1, r5
1a001c40:	4620      	mov	r0, r4
1a001c42:	f7ff fcdd 	bl	1a001600 <prvAddCurrentTaskToDelayedList>
	}
1a001c46:	bd38      	pop	{r3, r4, r5, pc}
1a001c48:	100028a4 	.word	0x100028a4

1a001c4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
1a001c4c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001c4e:	68c3      	ldr	r3, [r0, #12]
1a001c50:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001c52:	b944      	cbnz	r4, 1a001c66 <xTaskRemoveFromEventList+0x1a>
1a001c54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c58:	f383 8811 	msr	BASEPRI, r3
1a001c5c:	f3bf 8f6f 	isb	sy
1a001c60:	f3bf 8f4f 	dsb	sy
1a001c64:	e7fe      	b.n	1a001c64 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001c66:	f104 0518 	add.w	r5, r4, #24
1a001c6a:	4628      	mov	r0, r5
1a001c6c:	f7ff fb59 	bl	1a001322 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001c70:	4b13      	ldr	r3, [pc, #76]	; (1a001cc0 <xTaskRemoveFromEventList+0x74>)
1a001c72:	681b      	ldr	r3, [r3, #0]
1a001c74:	b9e3      	cbnz	r3, 1a001cb0 <xTaskRemoveFromEventList+0x64>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001c76:	1d25      	adds	r5, r4, #4
1a001c78:	4628      	mov	r0, r5
1a001c7a:	f7ff fb52 	bl	1a001322 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001c7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001c80:	2201      	movs	r2, #1
1a001c82:	409a      	lsls	r2, r3
1a001c84:	490f      	ldr	r1, [pc, #60]	; (1a001cc4 <xTaskRemoveFromEventList+0x78>)
1a001c86:	6808      	ldr	r0, [r1, #0]
1a001c88:	4302      	orrs	r2, r0
1a001c8a:	600a      	str	r2, [r1, #0]
1a001c8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c90:	009a      	lsls	r2, r3, #2
1a001c92:	4629      	mov	r1, r5
1a001c94:	480c      	ldr	r0, [pc, #48]	; (1a001cc8 <xTaskRemoveFromEventList+0x7c>)
1a001c96:	4410      	add	r0, r2
1a001c98:	f7ff fb1d 	bl	1a0012d6 <vListInsertEnd>
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001c9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001c9e:	4b0b      	ldr	r3, [pc, #44]	; (1a001ccc <xTaskRemoveFromEventList+0x80>)
1a001ca0:	681b      	ldr	r3, [r3, #0]
1a001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001ca4:	429a      	cmp	r2, r3
1a001ca6:	d908      	bls.n	1a001cba <xTaskRemoveFromEventList+0x6e>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
1a001ca8:	2001      	movs	r0, #1
1a001caa:	4b09      	ldr	r3, [pc, #36]	; (1a001cd0 <xTaskRemoveFromEventList+0x84>)
1a001cac:	6018      	str	r0, [r3, #0]
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
1a001cae:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001cb0:	4629      	mov	r1, r5
1a001cb2:	4808      	ldr	r0, [pc, #32]	; (1a001cd4 <xTaskRemoveFromEventList+0x88>)
1a001cb4:	f7ff fb0f 	bl	1a0012d6 <vListInsertEnd>
1a001cb8:	e7f0      	b.n	1a001c9c <xTaskRemoveFromEventList+0x50>
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
1a001cba:	2000      	movs	r0, #0
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
1a001cbc:	e7f7      	b.n	1a001cae <xTaskRemoveFromEventList+0x62>
1a001cbe:	bf00      	nop
1a001cc0:	10002948 	.word	0x10002948
1a001cc4:	10002950 	.word	0x10002950
1a001cc8:	100028b0 	.word	0x100028b0
1a001ccc:	100028a4 	.word	0x100028a4
1a001cd0:	100029c8 	.word	0x100029c8
1a001cd4:	10002984 	.word	0x10002984

1a001cd8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001cd8:	4b03      	ldr	r3, [pc, #12]	; (1a001ce8 <vTaskInternalSetTimeOutState+0x10>)
1a001cda:	681b      	ldr	r3, [r3, #0]
1a001cdc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001cde:	4b03      	ldr	r3, [pc, #12]	; (1a001cec <vTaskInternalSetTimeOutState+0x14>)
1a001ce0:	681b      	ldr	r3, [r3, #0]
1a001ce2:	6043      	str	r3, [r0, #4]
}
1a001ce4:	4770      	bx	lr
1a001ce6:	bf00      	nop
1a001ce8:	10002980 	.word	0x10002980
1a001cec:	100029c4 	.word	0x100029c4

1a001cf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
1a001cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1a001cf2:	b150      	cbz	r0, 1a001d0a <xTaskCheckForTimeOut+0x1a>
1a001cf4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001cf6:	b989      	cbnz	r1, 1a001d1c <xTaskCheckForTimeOut+0x2c>
1a001cf8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cfc:	f383 8811 	msr	BASEPRI, r3
1a001d00:	f3bf 8f6f 	isb	sy
1a001d04:	f3bf 8f4f 	dsb	sy
1a001d08:	e7fe      	b.n	1a001d08 <xTaskCheckForTimeOut+0x18>
1a001d0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d0e:	f383 8811 	msr	BASEPRI, r3
1a001d12:	f3bf 8f6f 	isb	sy
1a001d16:	f3bf 8f4f 	dsb	sy
1a001d1a:	e7fe      	b.n	1a001d1a <xTaskCheckForTimeOut+0x2a>
1a001d1c:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
1a001d1e:	f000 fd01 	bl	1a002724 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
1a001d22:	4b11      	ldr	r3, [pc, #68]	; (1a001d68 <xTaskCheckForTimeOut+0x78>)
1a001d24:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001d26:	6868      	ldr	r0, [r5, #4]
1a001d28:	1a0a      	subs	r2, r1, r0
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
1a001d2a:	6823      	ldr	r3, [r4, #0]
1a001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001d30:	d016      	beq.n	1a001d60 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001d32:	682f      	ldr	r7, [r5, #0]
1a001d34:	4e0d      	ldr	r6, [pc, #52]	; (1a001d6c <xTaskCheckForTimeOut+0x7c>)
1a001d36:	6836      	ldr	r6, [r6, #0]
1a001d38:	42b7      	cmp	r7, r6
1a001d3a:	d001      	beq.n	1a001d40 <xTaskCheckForTimeOut+0x50>
1a001d3c:	4288      	cmp	r0, r1
1a001d3e:	d911      	bls.n	1a001d64 <xTaskCheckForTimeOut+0x74>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001d40:	4293      	cmp	r3, r2
1a001d42:	d803      	bhi.n	1a001d4c <xTaskCheckForTimeOut+0x5c>
			vTaskInternalSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			*pxTicksToWait = 0;
1a001d44:	2300      	movs	r3, #0
1a001d46:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001d48:	2401      	movs	r4, #1
1a001d4a:	e005      	b.n	1a001d58 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
1a001d4c:	1a9b      	subs	r3, r3, r2
1a001d4e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001d50:	4628      	mov	r0, r5
1a001d52:	f7ff ffc1 	bl	1a001cd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001d56:	2400      	movs	r4, #0
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
1a001d58:	f000 fd06 	bl	1a002768 <vPortExitCritical>

	return xReturn;
}
1a001d5c:	4620      	mov	r0, r4
1a001d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
1a001d60:	2400      	movs	r4, #0
1a001d62:	e7f9      	b.n	1a001d58 <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
1a001d64:	2401      	movs	r4, #1
1a001d66:	e7f7      	b.n	1a001d58 <xTaskCheckForTimeOut+0x68>
1a001d68:	100029c4 	.word	0x100029c4
1a001d6c:	10002980 	.word	0x10002980

1a001d70 <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
1a001d70:	4b01      	ldr	r3, [pc, #4]	; (1a001d78 <vTaskMissedYield+0x8>)
1a001d72:	2201      	movs	r2, #1
1a001d74:	601a      	str	r2, [r3, #0]
}
1a001d76:	4770      	bx	lr
1a001d78:	100029c8 	.word	0x100029c8

1a001d7c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
1a001d7c:	4b05      	ldr	r3, [pc, #20]	; (1a001d94 <xTaskGetSchedulerState+0x18>)
1a001d7e:	681b      	ldr	r3, [r3, #0]
1a001d80:	b133      	cbz	r3, 1a001d90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001d82:	4b05      	ldr	r3, [pc, #20]	; (1a001d98 <xTaskGetSchedulerState+0x1c>)
1a001d84:	681b      	ldr	r3, [r3, #0]
1a001d86:	b10b      	cbz	r3, 1a001d8c <xTaskGetSchedulerState+0x10>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
1a001d88:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
1a001d8a:	4770      	bx	lr
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
1a001d8c:	2002      	movs	r0, #2
1a001d8e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001d90:	2001      	movs	r0, #1
1a001d92:	4770      	bx	lr
1a001d94:	10002998 	.word	0x10002998
1a001d98:	10002948 	.word	0x10002948

1a001d9c <xTaskPriorityInherit>:
	BaseType_t xReturn = pdFALSE;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
1a001d9c:	2800      	cmp	r0, #0
1a001d9e:	d050      	beq.n	1a001e42 <xTaskPriorityInherit+0xa6>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
1a001da0:	b538      	push	{r3, r4, r5, lr}
1a001da2:	4604      	mov	r4, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001da4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a001da6:	4928      	ldr	r1, [pc, #160]	; (1a001e48 <xTaskPriorityInherit+0xac>)
1a001da8:	6809      	ldr	r1, [r1, #0]
1a001daa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001dac:	428a      	cmp	r2, r1
1a001dae:	d23e      	bcs.n	1a001e2e <xTaskPriorityInherit+0x92>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001db0:	6981      	ldr	r1, [r0, #24]
1a001db2:	2900      	cmp	r1, #0
1a001db4:	db05      	blt.n	1a001dc2 <xTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001db6:	4924      	ldr	r1, [pc, #144]	; (1a001e48 <xTaskPriorityInherit+0xac>)
1a001db8:	6809      	ldr	r1, [r1, #0]
1a001dba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001dbc:	f1c1 0107 	rsb	r1, r1, #7
1a001dc0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001dc2:	6960      	ldr	r0, [r4, #20]
1a001dc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001dc8:	0091      	lsls	r1, r2, #2
1a001dca:	4a20      	ldr	r2, [pc, #128]	; (1a001e4c <xTaskPriorityInherit+0xb0>)
1a001dcc:	440a      	add	r2, r1
1a001dce:	4290      	cmp	r0, r2
1a001dd0:	d005      	beq.n	1a001dde <xTaskPriorityInherit+0x42>
					prvAddTaskToReadyList( pxMutexHolderTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001dd2:	4a1d      	ldr	r2, [pc, #116]	; (1a001e48 <xTaskPriorityInherit+0xac>)
1a001dd4:	6812      	ldr	r2, [r2, #0]
1a001dd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001dd8:	62e2      	str	r2, [r4, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
1a001dda:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001ddc:	bd38      	pop	{r3, r4, r5, pc}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001dde:	1d25      	adds	r5, r4, #4
1a001de0:	4628      	mov	r0, r5
1a001de2:	f7ff fa9e 	bl	1a001322 <uxListRemove>
1a001de6:	b968      	cbnz	r0, 1a001e04 <xTaskPriorityInherit+0x68>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001de8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001dea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001dee:	008a      	lsls	r2, r1, #2
1a001df0:	4916      	ldr	r1, [pc, #88]	; (1a001e4c <xTaskPriorityInherit+0xb0>)
1a001df2:	588a      	ldr	r2, [r1, r2]
1a001df4:	b932      	cbnz	r2, 1a001e04 <xTaskPriorityInherit+0x68>
1a001df6:	2201      	movs	r2, #1
1a001df8:	409a      	lsls	r2, r3
1a001dfa:	4915      	ldr	r1, [pc, #84]	; (1a001e50 <xTaskPriorityInherit+0xb4>)
1a001dfc:	680b      	ldr	r3, [r1, #0]
1a001dfe:	ea23 0302 	bic.w	r3, r3, r2
1a001e02:	600b      	str	r3, [r1, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001e04:	4b10      	ldr	r3, [pc, #64]	; (1a001e48 <xTaskPriorityInherit+0xac>)
1a001e06:	681b      	ldr	r3, [r3, #0]
1a001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001e0c:	2401      	movs	r4, #1
1a001e0e:	fa04 f203 	lsl.w	r2, r4, r3
1a001e12:	490f      	ldr	r1, [pc, #60]	; (1a001e50 <xTaskPriorityInherit+0xb4>)
1a001e14:	6808      	ldr	r0, [r1, #0]
1a001e16:	4302      	orrs	r2, r0
1a001e18:	600a      	str	r2, [r1, #0]
1a001e1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001e1e:	009a      	lsls	r2, r3, #2
1a001e20:	4629      	mov	r1, r5
1a001e22:	480a      	ldr	r0, [pc, #40]	; (1a001e4c <xTaskPriorityInherit+0xb0>)
1a001e24:	4410      	add	r0, r2
1a001e26:	f7ff fa56 	bl	1a0012d6 <vListInsertEnd>
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
1a001e2a:	4620      	mov	r0, r4
1a001e2c:	e7d6      	b.n	1a001ddc <xTaskPriorityInherit+0x40>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001e2e:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001e30:	4b05      	ldr	r3, [pc, #20]	; (1a001e48 <xTaskPriorityInherit+0xac>)
1a001e32:	681b      	ldr	r3, [r3, #0]
1a001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001e36:	429a      	cmp	r2, r3
1a001e38:	d201      	bcs.n	1a001e3e <xTaskPriorityInherit+0xa2>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
1a001e3a:	2001      	movs	r0, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
1a001e3c:	e7ce      	b.n	1a001ddc <xTaskPriorityInherit+0x40>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a001e3e:	2000      	movs	r0, #0
1a001e40:	e7cc      	b.n	1a001ddc <xTaskPriorityInherit+0x40>
1a001e42:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001e44:	4770      	bx	lr
1a001e46:	bf00      	nop
1a001e48:	100028a4 	.word	0x100028a4
1a001e4c:	100028b0 	.word	0x100028b0
1a001e50:	10002950 	.word	0x10002950

1a001e54 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
1a001e54:	2800      	cmp	r0, #0
1a001e56:	d049      	beq.n	1a001eec <xTaskPriorityDisinherit+0x98>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
1a001e58:	b538      	push	{r3, r4, r5, lr}
1a001e5a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1a001e5c:	4a26      	ldr	r2, [pc, #152]	; (1a001ef8 <xTaskPriorityDisinherit+0xa4>)
1a001e5e:	6812      	ldr	r2, [r2, #0]
1a001e60:	4282      	cmp	r2, r0
1a001e62:	d008      	beq.n	1a001e76 <xTaskPriorityDisinherit+0x22>
1a001e64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e68:	f383 8811 	msr	BASEPRI, r3
1a001e6c:	f3bf 8f6f 	isb	sy
1a001e70:	f3bf 8f4f 	dsb	sy
1a001e74:	e7fe      	b.n	1a001e74 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001e76:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001e78:	b942      	cbnz	r2, 1a001e8c <xTaskPriorityDisinherit+0x38>
1a001e7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e7e:	f383 8811 	msr	BASEPRI, r3
1a001e82:	f3bf 8f6f 	isb	sy
1a001e86:	f3bf 8f4f 	dsb	sy
1a001e8a:	e7fe      	b.n	1a001e8a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001e8c:	3a01      	subs	r2, #1
1a001e8e:	6542      	str	r2, [r0, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001e90:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001e92:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001e94:	4288      	cmp	r0, r1
1a001e96:	d02b      	beq.n	1a001ef0 <xTaskPriorityDisinherit+0x9c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001e98:	bb62      	cbnz	r2, 1a001ef4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001e9a:	1d25      	adds	r5, r4, #4
1a001e9c:	4628      	mov	r0, r5
1a001e9e:	f7ff fa40 	bl	1a001322 <uxListRemove>
1a001ea2:	b970      	cbnz	r0, 1a001ec2 <xTaskPriorityDisinherit+0x6e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001ea4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001ea6:	2314      	movs	r3, #20
1a001ea8:	fb03 f302 	mul.w	r3, r3, r2
1a001eac:	4913      	ldr	r1, [pc, #76]	; (1a001efc <xTaskPriorityDisinherit+0xa8>)
1a001eae:	58cb      	ldr	r3, [r1, r3]
1a001eb0:	b93b      	cbnz	r3, 1a001ec2 <xTaskPriorityDisinherit+0x6e>
1a001eb2:	2301      	movs	r3, #1
1a001eb4:	fa03 f202 	lsl.w	r2, r3, r2
1a001eb8:	4911      	ldr	r1, [pc, #68]	; (1a001f00 <xTaskPriorityDisinherit+0xac>)
1a001eba:	680b      	ldr	r3, [r1, #0]
1a001ebc:	ea23 0302 	bic.w	r3, r3, r2
1a001ec0:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001ec2:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001ec4:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ec6:	f1c3 0207 	rsb	r2, r3, #7
1a001eca:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001ecc:	2401      	movs	r4, #1
1a001ece:	fa04 f203 	lsl.w	r2, r4, r3
1a001ed2:	490b      	ldr	r1, [pc, #44]	; (1a001f00 <xTaskPriorityDisinherit+0xac>)
1a001ed4:	6808      	ldr	r0, [r1, #0]
1a001ed6:	4302      	orrs	r2, r0
1a001ed8:	600a      	str	r2, [r1, #0]
1a001eda:	4629      	mov	r1, r5
1a001edc:	4a07      	ldr	r2, [pc, #28]	; (1a001efc <xTaskPriorityDisinherit+0xa8>)
1a001ede:	2014      	movs	r0, #20
1a001ee0:	fb00 2003 	mla	r0, r0, r3, r2
1a001ee4:	f7ff f9f7 	bl	1a0012d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
1a001ee8:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001eea:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a001eec:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001eee:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a001ef0:	2000      	movs	r0, #0
1a001ef2:	e7fa      	b.n	1a001eea <xTaskPriorityDisinherit+0x96>
1a001ef4:	2000      	movs	r0, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
1a001ef6:	e7f8      	b.n	1a001eea <xTaskPriorityDisinherit+0x96>
1a001ef8:	100028a4 	.word	0x100028a4
1a001efc:	100028b0 	.word	0x100028b0
1a001f00:	10002950 	.word	0x10002950

1a001f04 <vTaskPriorityDisinheritAfterTimeout>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;

		if( pxMutexHolder != NULL )
1a001f04:	2800      	cmp	r0, #0
1a001f06:	d055      	beq.n	1a001fb4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
1a001f08:	b538      	push	{r3, r4, r5, lr}
1a001f0a:	4603      	mov	r3, r0

		if( pxMutexHolder != NULL )
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
1a001f0c:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001f0e:	b940      	cbnz	r0, 1a001f22 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001f10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f14:	f383 8811 	msr	BASEPRI, r3
1a001f18:	f3bf 8f6f 	isb	sy
1a001f1c:	f3bf 8f4f 	dsb	sy
1a001f20:	e7fe      	b.n	1a001f20 <vTaskPriorityDisinheritAfterTimeout+0x1c>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a001f24:	428a      	cmp	r2, r1
1a001f26:	d200      	bcs.n	1a001f2a <vTaskPriorityDisinheritAfterTimeout+0x26>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001f28:	460a      	mov	r2, r1
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001f2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a001f2c:	4291      	cmp	r1, r2
1a001f2e:	d001      	beq.n	1a001f34 <vTaskPriorityDisinheritAfterTimeout+0x30>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001f30:	2801      	cmp	r0, #1
1a001f32:	d000      	beq.n	1a001f36 <vTaskPriorityDisinheritAfterTimeout+0x32>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1a001f34:	bd38      	pop	{r3, r4, r5, pc}
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
1a001f36:	4820      	ldr	r0, [pc, #128]	; (1a001fb8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a001f38:	6800      	ldr	r0, [r0, #0]
1a001f3a:	4298      	cmp	r0, r3
1a001f3c:	d108      	bne.n	1a001f50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a001f3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f42:	f383 8811 	msr	BASEPRI, r3
1a001f46:	f3bf 8f6f 	isb	sy
1a001f4a:	f3bf 8f4f 	dsb	sy
1a001f4e:	e7fe      	b.n	1a001f4e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
					pxTCB->uxPriority = uxPriorityToUse;
1a001f50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001f52:	6998      	ldr	r0, [r3, #24]
1a001f54:	2800      	cmp	r0, #0
1a001f56:	db02      	blt.n	1a001f5e <vTaskPriorityDisinheritAfterTimeout+0x5a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f58:	f1c2 0207 	rsb	r2, r2, #7
1a001f5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001f5e:	695a      	ldr	r2, [r3, #20]
1a001f60:	4816      	ldr	r0, [pc, #88]	; (1a001fbc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001f62:	2414      	movs	r4, #20
1a001f64:	fb04 0101 	mla	r1, r4, r1, r0
1a001f68:	428a      	cmp	r2, r1
1a001f6a:	d1e3      	bne.n	1a001f34 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001f6c:	461c      	mov	r4, r3
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001f6e:	1d1d      	adds	r5, r3, #4
1a001f70:	4628      	mov	r0, r5
1a001f72:	f7ff f9d6 	bl	1a001322 <uxListRemove>
1a001f76:	b970      	cbnz	r0, 1a001f96 <vTaskPriorityDisinheritAfterTimeout+0x92>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001f78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001f7a:	2314      	movs	r3, #20
1a001f7c:	fb03 f302 	mul.w	r3, r3, r2
1a001f80:	490e      	ldr	r1, [pc, #56]	; (1a001fbc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001f82:	58cb      	ldr	r3, [r1, r3]
1a001f84:	b93b      	cbnz	r3, 1a001f96 <vTaskPriorityDisinheritAfterTimeout+0x92>
1a001f86:	2301      	movs	r3, #1
1a001f88:	fa03 f202 	lsl.w	r2, r3, r2
1a001f8c:	490c      	ldr	r1, [pc, #48]	; (1a001fc0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001f8e:	680b      	ldr	r3, [r1, #0]
1a001f90:	ea23 0302 	bic.w	r3, r3, r2
1a001f94:	600b      	str	r3, [r1, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
1a001f96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001f98:	2301      	movs	r3, #1
1a001f9a:	4093      	lsls	r3, r2
1a001f9c:	4908      	ldr	r1, [pc, #32]	; (1a001fc0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001f9e:	6808      	ldr	r0, [r1, #0]
1a001fa0:	4303      	orrs	r3, r0
1a001fa2:	600b      	str	r3, [r1, #0]
1a001fa4:	4629      	mov	r1, r5
1a001fa6:	4b05      	ldr	r3, [pc, #20]	; (1a001fbc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001fa8:	2014      	movs	r0, #20
1a001faa:	fb00 3002 	mla	r0, r0, r2, r3
1a001fae:	f7ff f992 	bl	1a0012d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1a001fb2:	e7bf      	b.n	1a001f34 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001fb4:	4770      	bx	lr
1a001fb6:	bf00      	nop
1a001fb8:	100028a4 	.word	0x100028a4
1a001fbc:	100028b0 	.word	0x100028b0
1a001fc0:	10002950 	.word	0x10002950

1a001fc4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
1a001fc4:	4b05      	ldr	r3, [pc, #20]	; (1a001fdc <pvTaskIncrementMutexHeldCount+0x18>)
1a001fc6:	681b      	ldr	r3, [r3, #0]
1a001fc8:	b123      	cbz	r3, 1a001fd4 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
1a001fca:	4b04      	ldr	r3, [pc, #16]	; (1a001fdc <pvTaskIncrementMutexHeldCount+0x18>)
1a001fcc:	681a      	ldr	r2, [r3, #0]
1a001fce:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001fd0:	3301      	adds	r3, #1
1a001fd2:	6553      	str	r3, [r2, #84]	; 0x54
		}

		return pxCurrentTCB;
1a001fd4:	4b01      	ldr	r3, [pc, #4]	; (1a001fdc <pvTaskIncrementMutexHeldCount+0x18>)
1a001fd6:	6818      	ldr	r0, [r3, #0]
	}
1a001fd8:	4770      	bx	lr
1a001fda:	bf00      	nop
1a001fdc:	100028a4 	.word	0x100028a4

1a001fe0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
1a001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001fe2:	4607      	mov	r7, r0
1a001fe4:	460d      	mov	r5, r1
1a001fe6:	4614      	mov	r4, r2
1a001fe8:	461e      	mov	r6, r3
	BaseType_t xReturn;

		taskENTER_CRITICAL();
1a001fea:	f000 fb9b 	bl	1a002724 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
1a001fee:	4b20      	ldr	r3, [pc, #128]	; (1a002070 <xTaskNotifyWait+0x90>)
1a001ff0:	681b      	ldr	r3, [r3, #0]
1a001ff2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
1a001ff6:	b2db      	uxtb	r3, r3
1a001ff8:	2b02      	cmp	r3, #2
1a001ffa:	d00a      	beq.n	1a002012 <xTaskNotifyWait+0x32>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
1a001ffc:	4b1c      	ldr	r3, [pc, #112]	; (1a002070 <xTaskNotifyWait+0x90>)
1a001ffe:	681a      	ldr	r2, [r3, #0]
1a002000:	6d90      	ldr	r0, [r2, #88]	; 0x58
1a002002:	ea20 0007 	bic.w	r0, r0, r7
1a002006:	6590      	str	r0, [r2, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
1a002008:	681b      	ldr	r3, [r3, #0]
1a00200a:	2201      	movs	r2, #1
1a00200c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
1a002010:	b9ce      	cbnz	r6, 1a002046 <xTaskNotifyWait+0x66>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
1a002012:	f000 fba9 	bl	1a002768 <vPortExitCritical>

		taskENTER_CRITICAL();
1a002016:	f000 fb85 	bl	1a002724 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
1a00201a:	b11c      	cbz	r4, 1a002024 <xTaskNotifyWait+0x44>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
1a00201c:	4b14      	ldr	r3, [pc, #80]	; (1a002070 <xTaskNotifyWait+0x90>)
1a00201e:	681b      	ldr	r3, [r3, #0]
1a002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1a002022:	6023      	str	r3, [r4, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
1a002024:	4b12      	ldr	r3, [pc, #72]	; (1a002070 <xTaskNotifyWait+0x90>)
1a002026:	681b      	ldr	r3, [r3, #0]
1a002028:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
1a00202c:	b2db      	uxtb	r3, r3
1a00202e:	2b02      	cmp	r3, #2
1a002030:	d016      	beq.n	1a002060 <xTaskNotifyWait+0x80>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
1a002032:	2400      	movs	r4, #0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a002034:	4b0e      	ldr	r3, [pc, #56]	; (1a002070 <xTaskNotifyWait+0x90>)
1a002036:	681b      	ldr	r3, [r3, #0]
1a002038:	2200      	movs	r2, #0
1a00203a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
1a00203e:	f000 fb93 	bl	1a002768 <vPortExitCritical>

		return xReturn;
	}
1a002042:	4620      	mov	r0, r4
1a002044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;

				if( xTicksToWait > ( TickType_t ) 0 )
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a002046:	4611      	mov	r1, r2
1a002048:	4630      	mov	r0, r6
1a00204a:	f7ff fad9 	bl	1a001600 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
1a00204e:	4b09      	ldr	r3, [pc, #36]	; (1a002074 <xTaskNotifyWait+0x94>)
1a002050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002054:	601a      	str	r2, [r3, #0]
1a002056:	f3bf 8f4f 	dsb	sy
1a00205a:	f3bf 8f6f 	isb	sy
1a00205e:	e7d8      	b.n	1a002012 <xTaskNotifyWait+0x32>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
1a002060:	4b03      	ldr	r3, [pc, #12]	; (1a002070 <xTaskNotifyWait+0x90>)
1a002062:	681a      	ldr	r2, [r3, #0]
1a002064:	6d93      	ldr	r3, [r2, #88]	; 0x58
1a002066:	ea23 0505 	bic.w	r5, r3, r5
1a00206a:	6595      	str	r5, [r2, #88]	; 0x58
				xReturn = pdTRUE;
1a00206c:	2401      	movs	r4, #1
1a00206e:	e7e1      	b.n	1a002034 <xTaskNotifyWait+0x54>
1a002070:	100028a4 	.word	0x100028a4
1a002074:	e000ed04 	.word	0xe000ed04

1a002078 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
1a002078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00207c:	9e08      	ldr	r6, [sp, #32]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
1a00207e:	b940      	cbnz	r0, 1a002092 <xTaskGenericNotifyFromISR+0x1a>
1a002080:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002084:	f383 8811 	msr	BASEPRI, r3
1a002088:	f3bf 8f6f 	isb	sy
1a00208c:	f3bf 8f4f 	dsb	sy
1a002090:	e7fe      	b.n	1a002090 <xTaskGenericNotifyFromISR+0x18>
1a002092:	4604      	mov	r4, r0
1a002094:	4699      	mov	r9, r3
1a002096:	4615      	mov	r5, r2
1a002098:	4688      	mov	r8, r1
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00209a:	f000 fc6d 	bl	1a002978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a00209e:	f3ef 8711 	mrs	r7, BASEPRI
1a0020a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020a6:	f383 8811 	msr	BASEPRI, r3
1a0020aa:	f3bf 8f6f 	isb	sy
1a0020ae:	f3bf 8f4f 	dsb	sy

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
1a0020b2:	f1b9 0f00 	cmp.w	r9, #0
1a0020b6:	d002      	beq.n	1a0020be <xTaskGenericNotifyFromISR+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
1a0020b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
1a0020ba:	f8c9 3000 	str.w	r3, [r9]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
1a0020be:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
1a0020c2:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
1a0020c4:	2202      	movs	r2, #2
1a0020c6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

			switch( eAction )
1a0020ca:	1e6a      	subs	r2, r5, #1
1a0020cc:	2a03      	cmp	r2, #3
1a0020ce:	d81e      	bhi.n	1a00210e <xTaskGenericNotifyFromISR+0x96>
1a0020d0:	e8df f002 	tbb	[pc, r2]
1a0020d4:	17130e02 	.word	0x17130e02
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
1a0020d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
1a0020da:	ea42 0208 	orr.w	r2, r2, r8
1a0020de:	65a2      	str	r2, [r4, #88]	; 0x58

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
1a0020e0:	2501      	movs	r5, #1

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
1a0020e2:	2b01      	cmp	r3, #1
1a0020e4:	d017      	beq.n	1a002116 <xTaskGenericNotifyFromISR+0x9e>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0020e6:	f387 8811 	msr	BASEPRI, r7
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
1a0020ea:	4628      	mov	r0, r5
1a0020ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
1a0020f0:	6da2      	ldr	r2, [r4, #88]	; 0x58
1a0020f2:	3201      	adds	r2, #1
1a0020f4:	65a2      	str	r2, [r4, #88]	; 0x58

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
1a0020f6:	2501      	movs	r5, #1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
1a0020f8:	e7f3      	b.n	1a0020e2 <xTaskGenericNotifyFromISR+0x6a>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
1a0020fa:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
1a0020fe:	2501      	movs	r5, #1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
1a002100:	e7ef      	b.n	1a0020e2 <xTaskGenericNotifyFromISR+0x6a>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
1a002102:	2b02      	cmp	r3, #2
1a002104:	d005      	beq.n	1a002112 <xTaskGenericNotifyFromISR+0x9a>
					{
						pxTCB->ulNotifiedValue = ulValue;
1a002106:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
1a00210a:	2501      	movs	r5, #1
1a00210c:	e7e9      	b.n	1a0020e2 <xTaskGenericNotifyFromISR+0x6a>
1a00210e:	2501      	movs	r5, #1
1a002110:	e7e7      	b.n	1a0020e2 <xTaskGenericNotifyFromISR+0x6a>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
1a002112:	2500      	movs	r5, #0
1a002114:	e7e5      	b.n	1a0020e2 <xTaskGenericNotifyFromISR+0x6a>
			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
1a002116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a002118:	b143      	cbz	r3, 1a00212c <xTaskGenericNotifyFromISR+0xb4>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00211a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00211e:	f383 8811 	msr	BASEPRI, r3
1a002122:	f3bf 8f6f 	isb	sy
1a002126:	f3bf 8f4f 	dsb	sy
1a00212a:	e7fe      	b.n	1a00212a <xTaskGenericNotifyFromISR+0xb2>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00212c:	4b14      	ldr	r3, [pc, #80]	; (1a002180 <xTaskGenericNotifyFromISR+0x108>)
1a00212e:	681b      	ldr	r3, [r3, #0]
1a002130:	b9e3      	cbnz	r3, 1a00216c <xTaskGenericNotifyFromISR+0xf4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002132:	f104 0804 	add.w	r8, r4, #4
1a002136:	4640      	mov	r0, r8
1a002138:	f7ff f8f3 	bl	1a001322 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00213c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00213e:	2301      	movs	r3, #1
1a002140:	4093      	lsls	r3, r2
1a002142:	4910      	ldr	r1, [pc, #64]	; (1a002184 <xTaskGenericNotifyFromISR+0x10c>)
1a002144:	6808      	ldr	r0, [r1, #0]
1a002146:	4303      	orrs	r3, r0
1a002148:	600b      	str	r3, [r1, #0]
1a00214a:	4641      	mov	r1, r8
1a00214c:	4b0e      	ldr	r3, [pc, #56]	; (1a002188 <xTaskGenericNotifyFromISR+0x110>)
1a00214e:	2014      	movs	r0, #20
1a002150:	fb00 3002 	mla	r0, r0, r2, r3
1a002154:	f7ff f8bf 	bl	1a0012d6 <vListInsertEnd>
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
1a002158:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00215a:	4b0c      	ldr	r3, [pc, #48]	; (1a00218c <xTaskGenericNotifyFromISR+0x114>)
1a00215c:	681b      	ldr	r3, [r3, #0]
1a00215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002160:	429a      	cmp	r2, r3
1a002162:	d9c0      	bls.n	1a0020e6 <xTaskGenericNotifyFromISR+0x6e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
1a002164:	b146      	cbz	r6, 1a002178 <xTaskGenericNotifyFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
1a002166:	2301      	movs	r3, #1
1a002168:	6033      	str	r3, [r6, #0]
1a00216a:	e7bc      	b.n	1a0020e6 <xTaskGenericNotifyFromISR+0x6e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1a00216c:	f104 0118 	add.w	r1, r4, #24
1a002170:	4807      	ldr	r0, [pc, #28]	; (1a002190 <xTaskGenericNotifyFromISR+0x118>)
1a002172:	f7ff f8b0 	bl	1a0012d6 <vListInsertEnd>
1a002176:	e7ef      	b.n	1a002158 <xTaskGenericNotifyFromISR+0xe0>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
1a002178:	4b06      	ldr	r3, [pc, #24]	; (1a002194 <xTaskGenericNotifyFromISR+0x11c>)
1a00217a:	2201      	movs	r2, #1
1a00217c:	601a      	str	r2, [r3, #0]
1a00217e:	e7b2      	b.n	1a0020e6 <xTaskGenericNotifyFromISR+0x6e>
1a002180:	10002948 	.word	0x10002948
1a002184:	10002950 	.word	0x10002950
1a002188:	100028b0 	.word	0x100028b0
1a00218c:	100028a4 	.word	0x100028a4
1a002190:	10002984 	.word	0x10002984
1a002194:	100029c8 	.word	0x100029c8

1a002198 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002198:	4b06      	ldr	r3, [pc, #24]	; (1a0021b4 <prvGetNextExpireTime+0x1c>)
1a00219a:	681a      	ldr	r2, [r3, #0]
1a00219c:	6813      	ldr	r3, [r2, #0]
1a00219e:	fab3 f383 	clz	r3, r3
1a0021a2:	095b      	lsrs	r3, r3, #5
1a0021a4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0021a6:	b913      	cbnz	r3, 1a0021ae <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0021a8:	68d3      	ldr	r3, [r2, #12]
1a0021aa:	6818      	ldr	r0, [r3, #0]
1a0021ac:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0021ae:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0021b0:	4770      	bx	lr
1a0021b2:	bf00      	nop
1a0021b4:	100029cc 	.word	0x100029cc

1a0021b8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0021b8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0021ba:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0021bc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0021be:	4291      	cmp	r1, r2
1a0021c0:	d80c      	bhi.n	1a0021dc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0021c2:	1ad2      	subs	r2, r2, r3
1a0021c4:	6983      	ldr	r3, [r0, #24]
1a0021c6:	429a      	cmp	r2, r3
1a0021c8:	d301      	bcc.n	1a0021ce <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a0021ca:	2001      	movs	r0, #1
1a0021cc:	e010      	b.n	1a0021f0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a0021ce:	1d01      	adds	r1, r0, #4
1a0021d0:	4b09      	ldr	r3, [pc, #36]	; (1a0021f8 <prvInsertTimerInActiveList+0x40>)
1a0021d2:	6818      	ldr	r0, [r3, #0]
1a0021d4:	f7ff f88b 	bl	1a0012ee <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a0021d8:	2000      	movs	r0, #0
1a0021da:	e009      	b.n	1a0021f0 <prvInsertTimerInActiveList+0x38>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0021dc:	429a      	cmp	r2, r3
1a0021de:	d201      	bcs.n	1a0021e4 <prvInsertTimerInActiveList+0x2c>
1a0021e0:	4299      	cmp	r1, r3
1a0021e2:	d206      	bcs.n	1a0021f2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0021e4:	1d01      	adds	r1, r0, #4
1a0021e6:	4b05      	ldr	r3, [pc, #20]	; (1a0021fc <prvInsertTimerInActiveList+0x44>)
1a0021e8:	6818      	ldr	r0, [r3, #0]
1a0021ea:	f7ff f880 	bl	1a0012ee <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a0021ee:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a0021f0:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
1a0021f2:	2001      	movs	r0, #1
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
1a0021f4:	e7fc      	b.n	1a0021f0 <prvInsertTimerInActiveList+0x38>
1a0021f6:	bf00      	nop
1a0021f8:	100029d0 	.word	0x100029d0
1a0021fc:	100029cc 	.word	0x100029cc

1a002200 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002200:	b530      	push	{r4, r5, lr}
1a002202:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002204:	f000 fa8e 	bl	1a002724 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002208:	4b11      	ldr	r3, [pc, #68]	; (1a002250 <prvCheckForValidListAndQueue+0x50>)
1a00220a:	681b      	ldr	r3, [r3, #0]
1a00220c:	b11b      	cbz	r3, 1a002216 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00220e:	f000 faab 	bl	1a002768 <vPortExitCritical>
}
1a002212:	b003      	add	sp, #12
1a002214:	bd30      	pop	{r4, r5, pc}
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
1a002216:	4d0f      	ldr	r5, [pc, #60]	; (1a002254 <prvCheckForValidListAndQueue+0x54>)
1a002218:	4628      	mov	r0, r5
1a00221a:	f7ff f84e 	bl	1a0012ba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a00221e:	4c0e      	ldr	r4, [pc, #56]	; (1a002258 <prvCheckForValidListAndQueue+0x58>)
1a002220:	4620      	mov	r0, r4
1a002222:	f7ff f84a 	bl	1a0012ba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a002226:	4b0d      	ldr	r3, [pc, #52]	; (1a00225c <prvCheckForValidListAndQueue+0x5c>)
1a002228:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a00222a:	4b0d      	ldr	r3, [pc, #52]	; (1a002260 <prvCheckForValidListAndQueue+0x60>)
1a00222c:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a00222e:	2300      	movs	r3, #0
1a002230:	9300      	str	r3, [sp, #0]
1a002232:	4b0c      	ldr	r3, [pc, #48]	; (1a002264 <prvCheckForValidListAndQueue+0x64>)
1a002234:	4a0c      	ldr	r2, [pc, #48]	; (1a002268 <prvCheckForValidListAndQueue+0x68>)
1a002236:	2110      	movs	r1, #16
1a002238:	200a      	movs	r0, #10
1a00223a:	f7fe fcdc 	bl	1a000bf6 <xQueueGenericCreateStatic>
1a00223e:	4b04      	ldr	r3, [pc, #16]	; (1a002250 <prvCheckForValidListAndQueue+0x50>)
1a002240:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
1a002242:	2800      	cmp	r0, #0
1a002244:	d0e3      	beq.n	1a00220e <prvCheckForValidListAndQueue+0xe>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a002246:	4909      	ldr	r1, [pc, #36]	; (1a00226c <prvCheckForValidListAndQueue+0x6c>)
1a002248:	f7fe fffa 	bl	1a001240 <vQueueAddToRegistry>
1a00224c:	e7df      	b.n	1a00220e <prvCheckForValidListAndQueue+0xe>
1a00224e:	bf00      	nop
1a002250:	10002af0 	.word	0x10002af0
1a002254:	10002a74 	.word	0x10002a74
1a002258:	10002a88 	.word	0x10002a88
1a00225c:	100029cc 	.word	0x100029cc
1a002260:	100029d0 	.word	0x100029d0
1a002264:	10002aa0 	.word	0x10002aa0
1a002268:	100029d4 	.word	0x100029d4
1a00226c:	1a004fd0 	.word	0x1a004fd0

1a002270 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
1a002270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002274:	9c07      	ldr	r4, [sp, #28]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a002276:	b941      	cbnz	r1, 1a00228a <prvInitialiseNewTimer+0x1a>
1a002278:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00227c:	f383 8811 	msr	BASEPRI, r3
1a002280:	f3bf 8f6f 	isb	sy
1a002284:	f3bf 8f4f 	dsb	sy
1a002288:	e7fe      	b.n	1a002288 <prvInitialiseNewTimer+0x18>
1a00228a:	460f      	mov	r7, r1

	if( pxNewTimer != NULL )
1a00228c:	b174      	cbz	r4, 1a0022ac <prvInitialiseNewTimer+0x3c>
1a00228e:	461d      	mov	r5, r3
1a002290:	4616      	mov	r6, r2
1a002292:	4680      	mov	r8, r0
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
1a002294:	f7ff ffb4 	bl	1a002200 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
1a002298:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a00229c:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a00229e:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0022a0:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0022a2:	9b06      	ldr	r3, [sp, #24]
1a0022a4:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0022a6:	1d20      	adds	r0, r4, #4
1a0022a8:	f7ff f812 	bl	1a0012d0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
1a0022ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0022b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
1a0022b0:	b510      	push	{r4, lr}
1a0022b2:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
1a0022b4:	f7ff ffa4 	bl	1a002200 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
1a0022b8:	4b12      	ldr	r3, [pc, #72]	; (1a002304 <xTimerCreateTimerTask+0x54>)
1a0022ba:	681b      	ldr	r3, [r3, #0]
1a0022bc:	b1cb      	cbz	r3, 1a0022f2 <xTimerCreateTimerTask+0x42>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0022be:	2400      	movs	r4, #0
1a0022c0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0022c2:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a0022c4:	aa07      	add	r2, sp, #28
1a0022c6:	a906      	add	r1, sp, #24
1a0022c8:	a805      	add	r0, sp, #20
1a0022ca:	f7ff f84b 	bl	1a001364 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a0022ce:	9b05      	ldr	r3, [sp, #20]
1a0022d0:	9302      	str	r3, [sp, #8]
1a0022d2:	9b06      	ldr	r3, [sp, #24]
1a0022d4:	9301      	str	r3, [sp, #4]
1a0022d6:	2304      	movs	r3, #4
1a0022d8:	9300      	str	r3, [sp, #0]
1a0022da:	4623      	mov	r3, r4
1a0022dc:	9a07      	ldr	r2, [sp, #28]
1a0022de:	490a      	ldr	r1, [pc, #40]	; (1a002308 <xTimerCreateTimerTask+0x58>)
1a0022e0:	480a      	ldr	r0, [pc, #40]	; (1a00230c <xTimerCreateTimerTask+0x5c>)
1a0022e2:	f7ff f9d9 	bl	1a001698 <xTaskCreateStatic>
1a0022e6:	4b0a      	ldr	r3, [pc, #40]	; (1a002310 <xTimerCreateTimerTask+0x60>)
1a0022e8:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
1a0022ea:	b110      	cbz	r0, 1a0022f2 <xTimerCreateTimerTask+0x42>
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
}
1a0022ec:	2001      	movs	r0, #1
1a0022ee:	b008      	add	sp, #32
1a0022f0:	bd10      	pop	{r4, pc}
1a0022f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022f6:	f383 8811 	msr	BASEPRI, r3
1a0022fa:	f3bf 8f6f 	isb	sy
1a0022fe:	f3bf 8f4f 	dsb	sy
1a002302:	e7fe      	b.n	1a002302 <xTimerCreateTimerTask+0x52>
1a002304:	10002af0 	.word	0x10002af0
1a002308:	1a004fd8 	.word	0x1a004fd8
1a00230c:	1a002641 	.word	0x1a002641
1a002310:	10002af4 	.word	0x10002af4

1a002314 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
1a002314:	b530      	push	{r4, r5, lr}
1a002316:	b085      	sub	sp, #20
1a002318:	9c09      	ldr	r4, [sp, #36]	; 0x24
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
1a00231a:	2530      	movs	r5, #48	; 0x30
1a00231c:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a00231e:	9d03      	ldr	r5, [sp, #12]
1a002320:	2d30      	cmp	r5, #48	; 0x30
1a002322:	d008      	beq.n	1a002336 <xTimerCreateStatic+0x22>
1a002324:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002328:	f383 8811 	msr	BASEPRI, r3
1a00232c:	f3bf 8f6f 	isb	sy
1a002330:	f3bf 8f4f 	dsb	sy
1a002334:	e7fe      	b.n	1a002334 <xTimerCreateStatic+0x20>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
1a002336:	b944      	cbnz	r4, 1a00234a <xTimerCreateStatic+0x36>
1a002338:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00233c:	f383 8811 	msr	BASEPRI, r3
1a002340:	f3bf 8f6f 	isb	sy
1a002344:	f3bf 8f4f 	dsb	sy
1a002348:	e7fe      	b.n	1a002348 <xTimerCreateStatic+0x34>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewTimer != NULL )
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a00234a:	9401      	str	r4, [sp, #4]
1a00234c:	9d08      	ldr	r5, [sp, #32]
1a00234e:	9500      	str	r5, [sp, #0]
1a002350:	f7ff ff8e 	bl	1a002270 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a002354:	2301      	movs	r3, #1
1a002356:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
	}
1a00235a:	4620      	mov	r0, r4
1a00235c:	b005      	add	sp, #20
1a00235e:	bd30      	pop	{r4, r5, pc}

1a002360 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
1a002360:	b1c8      	cbz	r0, 1a002396 <xTimerGenericCommand+0x36>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
1a002362:	b530      	push	{r4, r5, lr}
1a002364:	b085      	sub	sp, #20
1a002366:	4615      	mov	r5, r2
1a002368:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
1a00236a:	4a17      	ldr	r2, [pc, #92]	; (1a0023c8 <xTimerGenericCommand+0x68>)
1a00236c:	6810      	ldr	r0, [r2, #0]
1a00236e:	b340      	cbz	r0, 1a0023c2 <xTimerGenericCommand+0x62>
1a002370:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
1a002372:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002374:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002376:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002378:	2905      	cmp	r1, #5
1a00237a:	dc1d      	bgt.n	1a0023b8 <xTimerGenericCommand+0x58>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a00237c:	f7ff fcfe 	bl	1a001d7c <xTaskGetSchedulerState>
1a002380:	2802      	cmp	r0, #2
1a002382:	d011      	beq.n	1a0023a8 <xTimerGenericCommand+0x48>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002384:	2300      	movs	r3, #0
1a002386:	461a      	mov	r2, r3
1a002388:	4669      	mov	r1, sp
1a00238a:	480f      	ldr	r0, [pc, #60]	; (1a0023c8 <xTimerGenericCommand+0x68>)
1a00238c:	6800      	ldr	r0, [r0, #0]
1a00238e:	f7fe fca1 	bl	1a000cd4 <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
1a002392:	b005      	add	sp, #20
1a002394:	bd30      	pop	{r4, r5, pc}
1a002396:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00239a:	f383 8811 	msr	BASEPRI, r3
1a00239e:	f3bf 8f6f 	isb	sy
1a0023a2:	f3bf 8f4f 	dsb	sy
1a0023a6:	e7fe      	b.n	1a0023a6 <xTimerGenericCommand+0x46>

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0023a8:	2300      	movs	r3, #0
1a0023aa:	9a08      	ldr	r2, [sp, #32]
1a0023ac:	4669      	mov	r1, sp
1a0023ae:	4806      	ldr	r0, [pc, #24]	; (1a0023c8 <xTimerGenericCommand+0x68>)
1a0023b0:	6800      	ldr	r0, [r0, #0]
1a0023b2:	f7fe fc8f 	bl	1a000cd4 <xQueueGenericSend>
1a0023b6:	e7ec      	b.n	1a002392 <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0023b8:	2300      	movs	r3, #0
1a0023ba:	4669      	mov	r1, sp
1a0023bc:	f7fe fd5f 	bl	1a000e7e <xQueueGenericSendFromISR>
1a0023c0:	e7e7      	b.n	1a002392 <xTimerGenericCommand+0x32>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
1a0023c2:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
1a0023c4:	e7e5      	b.n	1a002392 <xTimerGenericCommand+0x32>
1a0023c6:	bf00      	nop
1a0023c8:	10002af0 	.word	0x10002af0

1a0023cc <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
1a0023cc:	b570      	push	{r4, r5, r6, lr}
1a0023ce:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0023d0:	4b1a      	ldr	r3, [pc, #104]	; (1a00243c <prvSwitchTimerLists+0x70>)
1a0023d2:	681b      	ldr	r3, [r3, #0]
1a0023d4:	681a      	ldr	r2, [r3, #0]
1a0023d6:	b352      	cbz	r2, 1a00242e <prvSwitchTimerLists+0x62>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0023d8:	68db      	ldr	r3, [r3, #12]
1a0023da:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0023dc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0023de:	1d25      	adds	r5, r4, #4
1a0023e0:	4628      	mov	r0, r5
1a0023e2:	f7fe ff9e 	bl	1a001322 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0023e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0023e8:	4620      	mov	r0, r4
1a0023ea:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0023ec:	69e3      	ldr	r3, [r4, #28]
1a0023ee:	2b01      	cmp	r3, #1
1a0023f0:	d1ee      	bne.n	1a0023d0 <prvSwitchTimerLists+0x4>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a0023f2:	69a3      	ldr	r3, [r4, #24]
1a0023f4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a0023f6:	429e      	cmp	r6, r3
1a0023f8:	d207      	bcs.n	1a00240a <prvSwitchTimerLists+0x3e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a0023fa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0023fc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0023fe:	4629      	mov	r1, r5
1a002400:	4b0e      	ldr	r3, [pc, #56]	; (1a00243c <prvSwitchTimerLists+0x70>)
1a002402:	6818      	ldr	r0, [r3, #0]
1a002404:	f7fe ff73 	bl	1a0012ee <vListInsert>
1a002408:	e7e2      	b.n	1a0023d0 <prvSwitchTimerLists+0x4>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00240a:	2100      	movs	r1, #0
1a00240c:	9100      	str	r1, [sp, #0]
1a00240e:	460b      	mov	r3, r1
1a002410:	4632      	mov	r2, r6
1a002412:	4620      	mov	r0, r4
1a002414:	f7ff ffa4 	bl	1a002360 <xTimerGenericCommand>
				configASSERT( xResult );
1a002418:	2800      	cmp	r0, #0
1a00241a:	d1d9      	bne.n	1a0023d0 <prvSwitchTimerLists+0x4>
1a00241c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002420:	f383 8811 	msr	BASEPRI, r3
1a002424:	f3bf 8f6f 	isb	sy
1a002428:	f3bf 8f4f 	dsb	sy
1a00242c:	e7fe      	b.n	1a00242c <prvSwitchTimerLists+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
1a00242e:	4a04      	ldr	r2, [pc, #16]	; (1a002440 <prvSwitchTimerLists+0x74>)
1a002430:	6810      	ldr	r0, [r2, #0]
1a002432:	4902      	ldr	r1, [pc, #8]	; (1a00243c <prvSwitchTimerLists+0x70>)
1a002434:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002436:	6013      	str	r3, [r2, #0]
}
1a002438:	b002      	add	sp, #8
1a00243a:	bd70      	pop	{r4, r5, r6, pc}
1a00243c:	100029cc 	.word	0x100029cc
1a002440:	100029d0 	.word	0x100029d0

1a002444 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
1a002444:	b538      	push	{r3, r4, r5, lr}
1a002446:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
1a002448:	f7ff f9e4 	bl	1a001814 <xTaskGetTickCount>
1a00244c:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
1a00244e:	4b07      	ldr	r3, [pc, #28]	; (1a00246c <prvSampleTimeNow+0x28>)
1a002450:	681b      	ldr	r3, [r3, #0]
1a002452:	4283      	cmp	r3, r0
1a002454:	d805      	bhi.n	1a002462 <prvSampleTimeNow+0x1e>
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
1a002456:	2300      	movs	r3, #0
1a002458:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
1a00245a:	4b04      	ldr	r3, [pc, #16]	; (1a00246c <prvSampleTimeNow+0x28>)
1a00245c:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
1a00245e:	4620      	mov	r0, r4
1a002460:	bd38      	pop	{r3, r4, r5, pc}

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
1a002462:	f7ff ffb3 	bl	1a0023cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002466:	2301      	movs	r3, #1
1a002468:	602b      	str	r3, [r5, #0]
1a00246a:	e7f6      	b.n	1a00245a <prvSampleTimeNow+0x16>
1a00246c:	10002a9c 	.word	0x10002a9c

1a002470 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
1a002470:	b570      	push	{r4, r5, r6, lr}
1a002472:	b082      	sub	sp, #8
1a002474:	4605      	mov	r5, r0
1a002476:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002478:	4b14      	ldr	r3, [pc, #80]	; (1a0024cc <prvProcessExpiredTimer+0x5c>)
1a00247a:	681b      	ldr	r3, [r3, #0]
1a00247c:	68db      	ldr	r3, [r3, #12]
1a00247e:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002480:	1d20      	adds	r0, r4, #4
1a002482:	f7fe ff4e 	bl	1a001322 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002486:	69e3      	ldr	r3, [r4, #28]
1a002488:	2b01      	cmp	r3, #1
1a00248a:	d004      	beq.n	1a002496 <prvProcessExpiredTimer+0x26>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00248c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00248e:	4620      	mov	r0, r4
1a002490:	4798      	blx	r3
}
1a002492:	b002      	add	sp, #8
1a002494:	bd70      	pop	{r4, r5, r6, pc}
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002496:	69a1      	ldr	r1, [r4, #24]
1a002498:	462b      	mov	r3, r5
1a00249a:	4632      	mov	r2, r6
1a00249c:	4429      	add	r1, r5
1a00249e:	4620      	mov	r0, r4
1a0024a0:	f7ff fe8a 	bl	1a0021b8 <prvInsertTimerInActiveList>
1a0024a4:	2800      	cmp	r0, #0
1a0024a6:	d0f1      	beq.n	1a00248c <prvProcessExpiredTimer+0x1c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0024a8:	2100      	movs	r1, #0
1a0024aa:	9100      	str	r1, [sp, #0]
1a0024ac:	460b      	mov	r3, r1
1a0024ae:	462a      	mov	r2, r5
1a0024b0:	4620      	mov	r0, r4
1a0024b2:	f7ff ff55 	bl	1a002360 <xTimerGenericCommand>
			configASSERT( xResult );
1a0024b6:	2800      	cmp	r0, #0
1a0024b8:	d1e8      	bne.n	1a00248c <prvProcessExpiredTimer+0x1c>
1a0024ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024be:	f383 8811 	msr	BASEPRI, r3
1a0024c2:	f3bf 8f6f 	isb	sy
1a0024c6:	f3bf 8f4f 	dsb	sy
1a0024ca:	e7fe      	b.n	1a0024ca <prvProcessExpiredTimer+0x5a>
1a0024cc:	100029cc 	.word	0x100029cc

1a0024d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
1a0024d0:	b570      	push	{r4, r5, r6, lr}
1a0024d2:	b082      	sub	sp, #8
1a0024d4:	4606      	mov	r6, r0
1a0024d6:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
1a0024d8:	f7ff f994 	bl	1a001804 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0024dc:	a801      	add	r0, sp, #4
1a0024de:	f7ff ffb1 	bl	1a002444 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0024e2:	9b01      	ldr	r3, [sp, #4]
1a0024e4:	bb1b      	cbnz	r3, 1a00252e <prvProcessTimerOrBlockTask+0x5e>
1a0024e6:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0024e8:	b90c      	cbnz	r4, 1a0024ee <prvProcessTimerOrBlockTask+0x1e>
1a0024ea:	42b0      	cmp	r0, r6
1a0024ec:	d218      	bcs.n	1a002520 <prvProcessTimerOrBlockTask+0x50>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
1a0024ee:	b12c      	cbz	r4, 1a0024fc <prvProcessTimerOrBlockTask+0x2c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a0024f0:	4b11      	ldr	r3, [pc, #68]	; (1a002538 <prvProcessTimerOrBlockTask+0x68>)
1a0024f2:	681b      	ldr	r3, [r3, #0]
1a0024f4:	681c      	ldr	r4, [r3, #0]
1a0024f6:	fab4 f484 	clz	r4, r4
1a0024fa:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a0024fc:	4622      	mov	r2, r4
1a0024fe:	1b71      	subs	r1, r6, r5
1a002500:	4b0e      	ldr	r3, [pc, #56]	; (1a00253c <prvProcessTimerOrBlockTask+0x6c>)
1a002502:	6818      	ldr	r0, [r3, #0]
1a002504:	f7fe feb0 	bl	1a001268 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
1a002508:	f7ff fa16 	bl	1a001938 <xTaskResumeAll>
1a00250c:	b988      	cbnz	r0, 1a002532 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
1a00250e:	4b0c      	ldr	r3, [pc, #48]	; (1a002540 <prvProcessTimerOrBlockTask+0x70>)
1a002510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002514:	601a      	str	r2, [r3, #0]
1a002516:	f3bf 8f4f 	dsb	sy
1a00251a:	f3bf 8f6f 	isb	sy
1a00251e:	e008      	b.n	1a002532 <prvProcessTimerOrBlockTask+0x62>
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
			{
				( void ) xTaskResumeAll();
1a002520:	f7ff fa0a 	bl	1a001938 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002524:	4629      	mov	r1, r5
1a002526:	4630      	mov	r0, r6
1a002528:	f7ff ffa2 	bl	1a002470 <prvProcessExpiredTimer>
1a00252c:	e001      	b.n	1a002532 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
1a00252e:	f7ff fa03 	bl	1a001938 <xTaskResumeAll>
		}
	}
}
1a002532:	b002      	add	sp, #8
1a002534:	bd70      	pop	{r4, r5, r6, pc}
1a002536:	bf00      	nop
1a002538:	100029d0 	.word	0x100029d0
1a00253c:	10002af0 	.word	0x10002af0
1a002540:	e000ed04 	.word	0xe000ed04

1a002544 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
1a002544:	b530      	push	{r4, r5, lr}
1a002546:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002548:	e002      	b.n	1a002550 <prvProcessReceivedCommands+0xc>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00254a:	9b04      	ldr	r3, [sp, #16]
1a00254c:	2b00      	cmp	r3, #0
1a00254e:	da0f      	bge.n	1a002570 <prvProcessReceivedCommands+0x2c>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002550:	2200      	movs	r2, #0
1a002552:	a904      	add	r1, sp, #16
1a002554:	4b39      	ldr	r3, [pc, #228]	; (1a00263c <prvProcessReceivedCommands+0xf8>)
1a002556:	6818      	ldr	r0, [r3, #0]
1a002558:	f7fe fcf8 	bl	1a000f4c <xQueueReceive>
1a00255c:	2800      	cmp	r0, #0
1a00255e:	d06a      	beq.n	1a002636 <prvProcessReceivedCommands+0xf2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002560:	9b04      	ldr	r3, [sp, #16]
1a002562:	2b00      	cmp	r3, #0
1a002564:	daf1      	bge.n	1a00254a <prvProcessReceivedCommands+0x6>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002566:	9907      	ldr	r1, [sp, #28]
1a002568:	9806      	ldr	r0, [sp, #24]
1a00256a:	9b05      	ldr	r3, [sp, #20]
1a00256c:	4798      	blx	r3
1a00256e:	e7ec      	b.n	1a00254a <prvProcessReceivedCommands+0x6>
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002570:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002572:	6963      	ldr	r3, [r4, #20]
1a002574:	b113      	cbz	r3, 1a00257c <prvProcessReceivedCommands+0x38>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002576:	1d20      	adds	r0, r4, #4
1a002578:	f7fe fed3 	bl	1a001322 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a00257c:	a803      	add	r0, sp, #12
1a00257e:	f7ff ff61 	bl	1a002444 <prvSampleTimeNow>

			switch( xMessage.xMessageID )
1a002582:	9b04      	ldr	r3, [sp, #16]
1a002584:	2b09      	cmp	r3, #9
1a002586:	d8e3      	bhi.n	1a002550 <prvProcessReceivedCommands+0xc>
1a002588:	a201      	add	r2, pc, #4	; (adr r2, 1a002590 <prvProcessReceivedCommands+0x4c>)
1a00258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00258e:	bf00      	nop
1a002590:	1a0025b9 	.word	0x1a0025b9
1a002594:	1a0025b9 	.word	0x1a0025b9
1a002598:	1a0025b9 	.word	0x1a0025b9
1a00259c:	1a002551 	.word	0x1a002551
1a0025a0:	1a002601 	.word	0x1a002601
1a0025a4:	1a002627 	.word	0x1a002627
1a0025a8:	1a0025b9 	.word	0x1a0025b9
1a0025ac:	1a0025b9 	.word	0x1a0025b9
1a0025b0:	1a002551 	.word	0x1a002551
1a0025b4:	1a002601 	.word	0x1a002601
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0025b8:	9905      	ldr	r1, [sp, #20]
1a0025ba:	69a5      	ldr	r5, [r4, #24]
1a0025bc:	460b      	mov	r3, r1
1a0025be:	4602      	mov	r2, r0
1a0025c0:	4429      	add	r1, r5
1a0025c2:	4620      	mov	r0, r4
1a0025c4:	f7ff fdf8 	bl	1a0021b8 <prvInsertTimerInActiveList>
1a0025c8:	2800      	cmp	r0, #0
1a0025ca:	d0c1      	beq.n	1a002550 <prvProcessReceivedCommands+0xc>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0025cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0025ce:	4620      	mov	r0, r4
1a0025d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0025d2:	69e3      	ldr	r3, [r4, #28]
1a0025d4:	2b01      	cmp	r3, #1
1a0025d6:	d1bb      	bne.n	1a002550 <prvProcessReceivedCommands+0xc>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0025d8:	69a2      	ldr	r2, [r4, #24]
1a0025da:	2100      	movs	r1, #0
1a0025dc:	9100      	str	r1, [sp, #0]
1a0025de:	460b      	mov	r3, r1
1a0025e0:	9805      	ldr	r0, [sp, #20]
1a0025e2:	4402      	add	r2, r0
1a0025e4:	4620      	mov	r0, r4
1a0025e6:	f7ff febb 	bl	1a002360 <xTimerGenericCommand>
							configASSERT( xResult );
1a0025ea:	2800      	cmp	r0, #0
1a0025ec:	d1b0      	bne.n	1a002550 <prvProcessReceivedCommands+0xc>
1a0025ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025f2:	f383 8811 	msr	BASEPRI, r3
1a0025f6:	f3bf 8f6f 	isb	sy
1a0025fa:	f3bf 8f4f 	dsb	sy
1a0025fe:	e7fe      	b.n	1a0025fe <prvProcessReceivedCommands+0xba>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002600:	9905      	ldr	r1, [sp, #20]
1a002602:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002604:	b131      	cbz	r1, 1a002614 <prvProcessReceivedCommands+0xd0>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002606:	4603      	mov	r3, r0
1a002608:	4602      	mov	r2, r0
1a00260a:	4401      	add	r1, r0
1a00260c:	4620      	mov	r0, r4
1a00260e:	f7ff fdd3 	bl	1a0021b8 <prvInsertTimerInActiveList>
					break;
1a002612:	e79d      	b.n	1a002550 <prvProcessReceivedCommands+0xc>
1a002614:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002618:	f383 8811 	msr	BASEPRI, r3
1a00261c:	f3bf 8f6f 	isb	sy
1a002620:	f3bf 8f4f 	dsb	sy
1a002624:	e7fe      	b.n	1a002624 <prvProcessReceivedCommands+0xe0>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002626:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00262a:	2b00      	cmp	r3, #0
1a00262c:	d190      	bne.n	1a002550 <prvProcessReceivedCommands+0xc>
						{
							vPortFree( pxTimer );
1a00262e:	4620      	mov	r0, r4
1a002630:	f7fe f9ac 	bl	1a00098c <vPortFree>
1a002634:	e78c      	b.n	1a002550 <prvProcessReceivedCommands+0xc>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
1a002636:	b009      	add	sp, #36	; 0x24
1a002638:	bd30      	pop	{r4, r5, pc}
1a00263a:	bf00      	nop
1a00263c:	10002af0 	.word	0x10002af0

1a002640 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
1a002640:	b500      	push	{lr}
1a002642:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002644:	a801      	add	r0, sp, #4
1a002646:	f7ff fda7 	bl	1a002198 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00264a:	9901      	ldr	r1, [sp, #4]
1a00264c:	f7ff ff40 	bl	1a0024d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
1a002650:	f7ff ff78 	bl	1a002544 <prvProcessReceivedCommands>
1a002654:	e7f6      	b.n	1a002644 <prvTimerTask+0x4>
1a002656:	Address 0x000000001a002656 is out of bounds.


1a002658 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002658:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00265a:	2300      	movs	r3, #0
1a00265c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a00265e:	4b0d      	ldr	r3, [pc, #52]	; (1a002694 <prvTaskExitError+0x3c>)
1a002660:	681b      	ldr	r3, [r3, #0]
1a002662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002666:	d008      	beq.n	1a00267a <prvTaskExitError+0x22>
1a002668:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00266c:	f383 8811 	msr	BASEPRI, r3
1a002670:	f3bf 8f6f 	isb	sy
1a002674:	f3bf 8f4f 	dsb	sy
1a002678:	e7fe      	b.n	1a002678 <prvTaskExitError+0x20>
1a00267a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00267e:	f383 8811 	msr	BASEPRI, r3
1a002682:	f3bf 8f6f 	isb	sy
1a002686:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a00268a:	9b01      	ldr	r3, [sp, #4]
1a00268c:	2b00      	cmp	r3, #0
1a00268e:	d0fc      	beq.n	1a00268a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002690:	b002      	add	sp, #8
1a002692:	4770      	bx	lr
1a002694:	10000010 	.word	0x10000010

1a002698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002698:	4808      	ldr	r0, [pc, #32]	; (1a0026bc <prvPortStartFirstTask+0x24>)
1a00269a:	6800      	ldr	r0, [r0, #0]
1a00269c:	6800      	ldr	r0, [r0, #0]
1a00269e:	f380 8808 	msr	MSP, r0
1a0026a2:	f04f 0000 	mov.w	r0, #0
1a0026a6:	f380 8814 	msr	CONTROL, r0
1a0026aa:	b662      	cpsie	i
1a0026ac:	b661      	cpsie	f
1a0026ae:	f3bf 8f4f 	dsb	sy
1a0026b2:	f3bf 8f6f 	isb	sy
1a0026b6:	df00      	svc	0
1a0026b8:	bf00      	nop
1a0026ba:	0000      	.short	0x0000
1a0026bc:	e000ed08 	.word	0xe000ed08

1a0026c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0026c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0026d0 <vPortEnableVFP+0x10>
1a0026c4:	6801      	ldr	r1, [r0, #0]
1a0026c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0026ca:	6001      	str	r1, [r0, #0]
1a0026cc:	4770      	bx	lr
1a0026ce:	0000      	.short	0x0000
1a0026d0:	e000ed88 	.word	0xe000ed88

1a0026d4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0026d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a0026d8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0026dc:	f021 0101 	bic.w	r1, r1, #1
1a0026e0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0026e4:	4b05      	ldr	r3, [pc, #20]	; (1a0026fc <pxPortInitialiseStack+0x28>)
1a0026e6:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0026ea:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0026ee:	f06f 0302 	mvn.w	r3, #2
1a0026f2:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
1a0026f6:	3844      	subs	r0, #68	; 0x44
1a0026f8:	4770      	bx	lr
1a0026fa:	bf00      	nop
1a0026fc:	1a002659 	.word	0x1a002659

1a002700 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
1a002700:	4b07      	ldr	r3, [pc, #28]	; (1a002720 <pxCurrentTCBConst2>)
1a002702:	6819      	ldr	r1, [r3, #0]
1a002704:	6808      	ldr	r0, [r1, #0]
1a002706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00270a:	f380 8809 	msr	PSP, r0
1a00270e:	f3bf 8f6f 	isb	sy
1a002712:	f04f 0000 	mov.w	r0, #0
1a002716:	f380 8811 	msr	BASEPRI, r0
1a00271a:	4770      	bx	lr
1a00271c:	f3af 8000 	nop.w

1a002720 <pxCurrentTCBConst2>:
1a002720:	100028a4 	.word	0x100028a4

1a002724 <vPortEnterCritical>:
1a002724:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002728:	f383 8811 	msr	BASEPRI, r3
1a00272c:	f3bf 8f6f 	isb	sy
1a002730:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
1a002734:	4a0a      	ldr	r2, [pc, #40]	; (1a002760 <vPortEnterCritical+0x3c>)
1a002736:	6813      	ldr	r3, [r2, #0]
1a002738:	3301      	adds	r3, #1
1a00273a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
1a00273c:	2b01      	cmp	r3, #1
1a00273e:	d000      	beq.n	1a002742 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
1a002740:	4770      	bx	lr
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002742:	4b08      	ldr	r3, [pc, #32]	; (1a002764 <vPortEnterCritical+0x40>)
1a002744:	681b      	ldr	r3, [r3, #0]
1a002746:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00274a:	d0f9      	beq.n	1a002740 <vPortEnterCritical+0x1c>
1a00274c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002750:	f383 8811 	msr	BASEPRI, r3
1a002754:	f3bf 8f6f 	isb	sy
1a002758:	f3bf 8f4f 	dsb	sy
1a00275c:	e7fe      	b.n	1a00275c <vPortEnterCritical+0x38>
1a00275e:	bf00      	nop
1a002760:	10000010 	.word	0x10000010
1a002764:	e000ed04 	.word	0xe000ed04

1a002768 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
1a002768:	4b09      	ldr	r3, [pc, #36]	; (1a002790 <vPortExitCritical+0x28>)
1a00276a:	681b      	ldr	r3, [r3, #0]
1a00276c:	b943      	cbnz	r3, 1a002780 <vPortExitCritical+0x18>
1a00276e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002772:	f383 8811 	msr	BASEPRI, r3
1a002776:	f3bf 8f6f 	isb	sy
1a00277a:	f3bf 8f4f 	dsb	sy
1a00277e:	e7fe      	b.n	1a00277e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002780:	3b01      	subs	r3, #1
1a002782:	4a03      	ldr	r2, [pc, #12]	; (1a002790 <vPortExitCritical+0x28>)
1a002784:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002786:	b90b      	cbnz	r3, 1a00278c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a002788:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
1a00278c:	4770      	bx	lr
1a00278e:	bf00      	nop
1a002790:	10000010 	.word	0x10000010
1a002794:	ffffffff 	.word	0xffffffff
1a002798:	ffffffff 	.word	0xffffffff
1a00279c:	ffffffff 	.word	0xffffffff

1a0027a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
1a0027a0:	f3ef 8009 	mrs	r0, PSP
1a0027a4:	f3bf 8f6f 	isb	sy
1a0027a8:	4b15      	ldr	r3, [pc, #84]	; (1a002800 <pxCurrentTCBConst>)
1a0027aa:	681a      	ldr	r2, [r3, #0]
1a0027ac:	f01e 0f10 	tst.w	lr, #16
1a0027b0:	bf08      	it	eq
1a0027b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0027b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0027ba:	6010      	str	r0, [r2, #0]
1a0027bc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0027c0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0027c4:	f380 8811 	msr	BASEPRI, r0
1a0027c8:	f3bf 8f4f 	dsb	sy
1a0027cc:	f3bf 8f6f 	isb	sy
1a0027d0:	f7ff f9a4 	bl	1a001b1c <vTaskSwitchContext>
1a0027d4:	f04f 0000 	mov.w	r0, #0
1a0027d8:	f380 8811 	msr	BASEPRI, r0
1a0027dc:	bc09      	pop	{r0, r3}
1a0027de:	6819      	ldr	r1, [r3, #0]
1a0027e0:	6808      	ldr	r0, [r1, #0]
1a0027e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0027e6:	f01e 0f10 	tst.w	lr, #16
1a0027ea:	bf08      	it	eq
1a0027ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0027f0:	f380 8809 	msr	PSP, r0
1a0027f4:	f3bf 8f6f 	isb	sy
1a0027f8:	4770      	bx	lr
1a0027fa:	bf00      	nop
1a0027fc:	f3af 8000 	nop.w

1a002800 <pxCurrentTCBConst>:
1a002800:	100028a4 	.word	0x100028a4

1a002804 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
1a002804:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a002806:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00280a:	f383 8811 	msr	BASEPRI, r3
1a00280e:	f3bf 8f6f 	isb	sy
1a002812:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
1a002816:	f7ff f803 	bl	1a001820 <xTaskIncrementTick>
1a00281a:	b118      	cbz	r0, 1a002824 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00281c:	4b03      	ldr	r3, [pc, #12]	; (1a00282c <SysTick_Handler+0x28>)
1a00281e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002822:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a002824:	2300      	movs	r3, #0
1a002826:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
1a00282a:	bd08      	pop	{r3, pc}
1a00282c:	e000ed04 	.word	0xe000ed04

1a002830 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002830:	4a08      	ldr	r2, [pc, #32]	; (1a002854 <vPortSetupTimerInterrupt+0x24>)
1a002832:	2300      	movs	r3, #0
1a002834:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002836:	4908      	ldr	r1, [pc, #32]	; (1a002858 <vPortSetupTimerInterrupt+0x28>)
1a002838:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00283a:	4b08      	ldr	r3, [pc, #32]	; (1a00285c <vPortSetupTimerInterrupt+0x2c>)
1a00283c:	681b      	ldr	r3, [r3, #0]
1a00283e:	4908      	ldr	r1, [pc, #32]	; (1a002860 <vPortSetupTimerInterrupt+0x30>)
1a002840:	fba1 1303 	umull	r1, r3, r1, r3
1a002844:	099b      	lsrs	r3, r3, #6
1a002846:	3b01      	subs	r3, #1
1a002848:	4906      	ldr	r1, [pc, #24]	; (1a002864 <vPortSetupTimerInterrupt+0x34>)
1a00284a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00284c:	2307      	movs	r3, #7
1a00284e:	6013      	str	r3, [r2, #0]
}
1a002850:	4770      	bx	lr
1a002852:	bf00      	nop
1a002854:	e000e010 	.word	0xe000e010
1a002858:	e000e018 	.word	0xe000e018
1a00285c:	10002c50 	.word	0x10002c50
1a002860:	10624dd3 	.word	0x10624dd3
1a002864:	e000e014 	.word	0xe000e014

1a002868 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002868:	4b3a      	ldr	r3, [pc, #232]	; (1a002954 <xPortStartScheduler+0xec>)
1a00286a:	681a      	ldr	r2, [r3, #0]
1a00286c:	4b3a      	ldr	r3, [pc, #232]	; (1a002958 <xPortStartScheduler+0xf0>)
1a00286e:	429a      	cmp	r2, r3
1a002870:	d00d      	beq.n	1a00288e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002872:	4b38      	ldr	r3, [pc, #224]	; (1a002954 <xPortStartScheduler+0xec>)
1a002874:	681a      	ldr	r2, [r3, #0]
1a002876:	4b39      	ldr	r3, [pc, #228]	; (1a00295c <xPortStartScheduler+0xf4>)
1a002878:	429a      	cmp	r2, r3
1a00287a:	d111      	bne.n	1a0028a0 <xPortStartScheduler+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00287c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002880:	f383 8811 	msr	BASEPRI, r3
1a002884:	f3bf 8f6f 	isb	sy
1a002888:	f3bf 8f4f 	dsb	sy
1a00288c:	e7fe      	b.n	1a00288c <xPortStartScheduler+0x24>
1a00288e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002892:	f383 8811 	msr	BASEPRI, r3
1a002896:	f3bf 8f6f 	isb	sy
1a00289a:	f3bf 8f4f 	dsb	sy
1a00289e:	e7fe      	b.n	1a00289e <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
1a0028a0:	b510      	push	{r4, lr}
1a0028a2:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0028a4:	4b2e      	ldr	r3, [pc, #184]	; (1a002960 <xPortStartScheduler+0xf8>)
1a0028a6:	781a      	ldrb	r2, [r3, #0]
1a0028a8:	b2d2      	uxtb	r2, r2
1a0028aa:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0028ac:	22ff      	movs	r2, #255	; 0xff
1a0028ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0028b0:	781b      	ldrb	r3, [r3, #0]
1a0028b2:	b2db      	uxtb	r3, r3
1a0028b4:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0028b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0028bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0028c0:	4a28      	ldr	r2, [pc, #160]	; (1a002964 <xPortStartScheduler+0xfc>)
1a0028c2:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0028c4:	4b28      	ldr	r3, [pc, #160]	; (1a002968 <xPortStartScheduler+0x100>)
1a0028c6:	2207      	movs	r2, #7
1a0028c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0028ca:	e009      	b.n	1a0028e0 <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
1a0028cc:	4a26      	ldr	r2, [pc, #152]	; (1a002968 <xPortStartScheduler+0x100>)
1a0028ce:	6813      	ldr	r3, [r2, #0]
1a0028d0:	3b01      	subs	r3, #1
1a0028d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0028d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0028d8:	005b      	lsls	r3, r3, #1
1a0028da:	b2db      	uxtb	r3, r3
1a0028dc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0028e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0028e4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0028e8:	d1f0      	bne.n	1a0028cc <xPortStartScheduler+0x64>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0028ea:	4b1f      	ldr	r3, [pc, #124]	; (1a002968 <xPortStartScheduler+0x100>)
1a0028ec:	681b      	ldr	r3, [r3, #0]
1a0028ee:	2b04      	cmp	r3, #4
1a0028f0:	d008      	beq.n	1a002904 <xPortStartScheduler+0x9c>
1a0028f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028f6:	f383 8811 	msr	BASEPRI, r3
1a0028fa:	f3bf 8f6f 	isb	sy
1a0028fe:	f3bf 8f4f 	dsb	sy
1a002902:	e7fe      	b.n	1a002902 <xPortStartScheduler+0x9a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002904:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00290a:	4a17      	ldr	r2, [pc, #92]	; (1a002968 <xPortStartScheduler+0x100>)
1a00290c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00290e:	9b01      	ldr	r3, [sp, #4]
1a002910:	b2db      	uxtb	r3, r3
1a002912:	4a13      	ldr	r2, [pc, #76]	; (1a002960 <xPortStartScheduler+0xf8>)
1a002914:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002916:	4b15      	ldr	r3, [pc, #84]	; (1a00296c <xPortStartScheduler+0x104>)
1a002918:	681a      	ldr	r2, [r3, #0]
1a00291a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00291e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002920:	681a      	ldr	r2, [r3, #0]
1a002922:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002926:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
1a002928:	f7ff ff82 	bl	1a002830 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
1a00292c:	2400      	movs	r4, #0
1a00292e:	4b10      	ldr	r3, [pc, #64]	; (1a002970 <xPortStartScheduler+0x108>)
1a002930:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
1a002932:	f7ff fec5 	bl	1a0026c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002936:	4a0f      	ldr	r2, [pc, #60]	; (1a002974 <xPortStartScheduler+0x10c>)
1a002938:	6813      	ldr	r3, [r2, #0]
1a00293a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00293e:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
1a002940:	f7ff feaa 	bl	1a002698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
1a002944:	f7ff f8ea 	bl	1a001b1c <vTaskSwitchContext>
	prvTaskExitError();
1a002948:	f7ff fe86 	bl	1a002658 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
1a00294c:	4620      	mov	r0, r4
1a00294e:	b002      	add	sp, #8
1a002950:	bd10      	pop	{r4, pc}
1a002952:	bf00      	nop
1a002954:	e000ed00 	.word	0xe000ed00
1a002958:	410fc271 	.word	0x410fc271
1a00295c:	410fc270 	.word	0x410fc270
1a002960:	e000e400 	.word	0xe000e400
1a002964:	10002af8 	.word	0x10002af8
1a002968:	10002afc 	.word	0x10002afc
1a00296c:	e000ed20 	.word	0xe000ed20
1a002970:	10000010 	.word	0x10000010
1a002974:	e000ef34 	.word	0xe000ef34

1a002978 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002978:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00297c:	2b0f      	cmp	r3, #15
1a00297e:	d90f      	bls.n	1a0029a0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002980:	4a10      	ldr	r2, [pc, #64]	; (1a0029c4 <vPortValidateInterruptPriority+0x4c>)
1a002982:	5c9b      	ldrb	r3, [r3, r2]
1a002984:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002986:	4a10      	ldr	r2, [pc, #64]	; (1a0029c8 <vPortValidateInterruptPriority+0x50>)
1a002988:	7812      	ldrb	r2, [r2, #0]
1a00298a:	429a      	cmp	r2, r3
1a00298c:	d908      	bls.n	1a0029a0 <vPortValidateInterruptPriority+0x28>
1a00298e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002992:	f383 8811 	msr	BASEPRI, r3
1a002996:	f3bf 8f6f 	isb	sy
1a00299a:	f3bf 8f4f 	dsb	sy
1a00299e:	e7fe      	b.n	1a00299e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0029a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0029cc <vPortValidateInterruptPriority+0x54>)
1a0029a2:	681b      	ldr	r3, [r3, #0]
1a0029a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0029a8:	4a09      	ldr	r2, [pc, #36]	; (1a0029d0 <vPortValidateInterruptPriority+0x58>)
1a0029aa:	6812      	ldr	r2, [r2, #0]
1a0029ac:	4293      	cmp	r3, r2
1a0029ae:	d908      	bls.n	1a0029c2 <vPortValidateInterruptPriority+0x4a>
1a0029b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029b4:	f383 8811 	msr	BASEPRI, r3
1a0029b8:	f3bf 8f6f 	isb	sy
1a0029bc:	f3bf 8f4f 	dsb	sy
1a0029c0:	e7fe      	b.n	1a0029c0 <vPortValidateInterruptPriority+0x48>
	}
1a0029c2:	4770      	bx	lr
1a0029c4:	e000e3f0 	.word	0xe000e3f0
1a0029c8:	10002af8 	.word	0x10002af8
1a0029cc:	e000ed0c 	.word	0xe000ed0c
1a0029d0:	10002afc 	.word	0x10002afc

1a0029d4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0029d4:	2200      	movs	r2, #0
1a0029d6:	2a05      	cmp	r2, #5
1a0029d8:	d819      	bhi.n	1a002a0e <Board_LED_Init+0x3a>
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a0029da:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0029dc:	490c      	ldr	r1, [pc, #48]	; (1a002a10 <Board_LED_Init+0x3c>)
1a0029de:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0029e2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0029e6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0029e8:	4b0a      	ldr	r3, [pc, #40]	; (1a002a14 <Board_LED_Init+0x40>)
1a0029ea:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0029ee:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0029f2:	2001      	movs	r0, #1
1a0029f4:	40a0      	lsls	r0, r4
1a0029f6:	4301      	orrs	r1, r0
1a0029f8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0029fc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002a00:	2100      	movs	r1, #0
1a002a02:	5519      	strb	r1, [r3, r4]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002a04:	3201      	adds	r2, #1
1a002a06:	2a05      	cmp	r2, #5
1a002a08:	d9e8      	bls.n	1a0029dc <Board_LED_Init+0x8>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002a0a:	bc70      	pop	{r4, r5, r6}
1a002a0c:	4770      	bx	lr
1a002a0e:	4770      	bx	lr
1a002a10:	1a004fec 	.word	0x1a004fec
1a002a14:	400f4000 	.word	0x400f4000

1a002a18 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002a18:	2300      	movs	r3, #0
1a002a1a:	2b03      	cmp	r3, #3
1a002a1c:	d816      	bhi.n	1a002a4c <Board_TEC_Init+0x34>
    }
}


static void Board_TEC_Init()
{
1a002a1e:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002a20:	490b      	ldr	r1, [pc, #44]	; (1a002a50 <Board_TEC_Init+0x38>)
1a002a22:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002a26:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002a2a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002a2c:	4c09      	ldr	r4, [pc, #36]	; (1a002a54 <Board_TEC_Init+0x3c>)
1a002a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002a32:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002a36:	2001      	movs	r0, #1
1a002a38:	40a8      	lsls	r0, r5
1a002a3a:	ea21 0100 	bic.w	r1, r1, r0
1a002a3e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002a42:	3301      	adds	r3, #1
1a002a44:	2b03      	cmp	r3, #3
1a002a46:	d9eb      	bls.n	1a002a20 <Board_TEC_Init+0x8>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a002a48:	bc30      	pop	{r4, r5}
1a002a4a:	4770      	bx	lr
1a002a4c:	4770      	bx	lr
1a002a4e:	bf00      	nop
1a002a50:	1a004fe4 	.word	0x1a004fe4
1a002a54:	400f4000 	.word	0x400f4000

1a002a58 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002a58:	2300      	movs	r3, #0
1a002a5a:	2b08      	cmp	r3, #8
1a002a5c:	d816      	bhi.n	1a002a8c <Board_GPIO_Init+0x34>
    }
}


static void Board_GPIO_Init()
{
1a002a5e:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002a60:	490b      	ldr	r1, [pc, #44]	; (1a002a90 <Board_GPIO_Init+0x38>)
1a002a62:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002a66:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002a6a:	784d      	ldrb	r5, [r1, #1]
1a002a6c:	4c09      	ldr	r4, [pc, #36]	; (1a002a94 <Board_GPIO_Init+0x3c>)
1a002a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002a72:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002a76:	2001      	movs	r0, #1
1a002a78:	40a8      	lsls	r0, r5
1a002a7a:	ea21 0100 	bic.w	r1, r1, r0
1a002a7e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002a82:	3301      	adds	r3, #1
1a002a84:	2b08      	cmp	r3, #8
1a002a86:	d9eb      	bls.n	1a002a60 <Board_GPIO_Init+0x8>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a002a88:	bc30      	pop	{r4, r5}
1a002a8a:	4770      	bx	lr
1a002a8c:	4770      	bx	lr
1a002a8e:	bf00      	nop
1a002a90:	1a004ff8 	.word	0x1a004ff8
1a002a94:	400f4000 	.word	0x400f4000

1a002a98 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002a98:	b510      	push	{r4, lr}
1a002a9a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002a9c:	4c08      	ldr	r4, [pc, #32]	; (1a002ac0 <Board_ADC_Init+0x28>)
1a002a9e:	4669      	mov	r1, sp
1a002aa0:	4620      	mov	r0, r4
1a002aa2:	f000 f9dd 	bl	1a002e60 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002aa6:	4a07      	ldr	r2, [pc, #28]	; (1a002ac4 <Board_ADC_Init+0x2c>)
1a002aa8:	4669      	mov	r1, sp
1a002aaa:	4620      	mov	r0, r4
1a002aac:	f000 f9f8 	bl	1a002ea0 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002ab0:	2200      	movs	r2, #0
1a002ab2:	4669      	mov	r1, sp
1a002ab4:	4620      	mov	r0, r4
1a002ab6:	f000 fa0c 	bl	1a002ed2 <Chip_ADC_SetResolution>
}
1a002aba:	b002      	add	sp, #8
1a002abc:	bd10      	pop	{r4, pc}
1a002abe:	bf00      	nop
1a002ac0:	400e3000 	.word	0x400e3000
1a002ac4:	00061a80 	.word	0x00061a80

1a002ac8 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a002ac8:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a002aca:	4c0b      	ldr	r4, [pc, #44]	; (1a002af8 <Board_SPI_Init+0x30>)
1a002acc:	4620      	mov	r0, r4
1a002ace:	f000 fdc3 	bl	1a003658 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002ad2:	6863      	ldr	r3, [r4, #4]
1a002ad4:	f023 0304 	bic.w	r3, r3, #4
1a002ad8:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002ada:	6823      	ldr	r3, [r4, #0]
1a002adc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002ae0:	f043 0307 	orr.w	r3, r3, #7
1a002ae4:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002ae6:	4905      	ldr	r1, [pc, #20]	; (1a002afc <Board_SPI_Init+0x34>)
1a002ae8:	4620      	mov	r0, r4
1a002aea:	f000 fd96 	bl	1a00361a <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002aee:	6863      	ldr	r3, [r4, #4]
1a002af0:	f043 0302 	orr.w	r3, r3, #2
1a002af4:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a002af6:	bd10      	pop	{r4, pc}
1a002af8:	400c5000 	.word	0x400c5000
1a002afc:	000186a0 	.word	0x000186a0

1a002b00 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a002b00:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002b02:	2000      	movs	r0, #0
1a002b04:	f000 fdd4 	bl	1a0036b0 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002b08:	4b04      	ldr	r3, [pc, #16]	; (1a002b1c <Board_I2C_Init+0x1c>)
1a002b0a:	f640 0208 	movw	r2, #2056	; 0x808
1a002b0e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002b12:	4903      	ldr	r1, [pc, #12]	; (1a002b20 <Board_I2C_Init+0x20>)
1a002b14:	2000      	movs	r0, #0
1a002b16:	f000 fddd 	bl	1a0036d4 <Chip_I2C_SetClockRate>
}
1a002b1a:	bd08      	pop	{r3, pc}
1a002b1c:	40086000 	.word	0x40086000
1a002b20:	000f4240 	.word	0x000f4240

1a002b24 <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a002b24:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002b26:	4c07      	ldr	r4, [pc, #28]	; (1a002b44 <Board_Debug_Init+0x20>)
1a002b28:	4620      	mov	r0, r4
1a002b2a:	f000 f8b7 	bl	1a002c9c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002b2e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002b32:	4620      	mov	r0, r4
1a002b34:	f000 f8fc 	bl	1a002d30 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002b38:	2303      	movs	r3, #3
1a002b3a:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a002b3c:	2301      	movs	r3, #1
1a002b3e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002b40:	bd10      	pop	{r4, pc}
1a002b42:	bf00      	nop
1a002b44:	400c1000 	.word	0x400c1000

1a002b48 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002b48:	4b03      	ldr	r3, [pc, #12]	; (1a002b58 <Board_UARTPutChar+0x10>)
1a002b4a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002b4c:	f013 0f20 	tst.w	r3, #32
1a002b50:	d0fa      	beq.n	1a002b48 <Board_UARTPutChar>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a002b52:	4b01      	ldr	r3, [pc, #4]	; (1a002b58 <Board_UARTPutChar+0x10>)
1a002b54:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002b56:	4770      	bx	lr
1a002b58:	400c1000 	.word	0x400c1000

1a002b5c <Board_UARTGetChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002b5c:	4b05      	ldr	r3, [pc, #20]	; (1a002b74 <Board_UARTGetChar+0x18>)
1a002b5e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002b60:	f013 0f01 	tst.w	r3, #1
1a002b64:	d003      	beq.n	1a002b6e <Board_UARTGetChar+0x12>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002b66:	4b03      	ldr	r3, [pc, #12]	; (1a002b74 <Board_UARTGetChar+0x18>)
1a002b68:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002b6a:	b2c0      	uxtb	r0, r0
1a002b6c:	4770      	bx	lr
    }
    return EOF;
1a002b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002b72:	4770      	bx	lr
1a002b74:	400c1000 	.word	0x400c1000

1a002b78 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002b78:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002b7a:	f7ff ffd3 	bl	1a002b24 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002b7e:	4808      	ldr	r0, [pc, #32]	; (1a002ba0 <Board_Init+0x28>)
1a002b80:	f000 fd2a 	bl	1a0035d8 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a002b84:	f7ff ff68 	bl	1a002a58 <Board_GPIO_Init>
   Board_ADC_Init();
1a002b88:	f7ff ff86 	bl	1a002a98 <Board_ADC_Init>
   Board_SPI_Init();
1a002b8c:	f7ff ff9c 	bl	1a002ac8 <Board_SPI_Init>
   Board_I2C_Init();
1a002b90:	f7ff ffb6 	bl	1a002b00 <Board_I2C_Init>

   Board_LED_Init();
1a002b94:	f7ff ff1e 	bl	1a0029d4 <Board_LED_Init>
   Board_TEC_Init();
1a002b98:	f7ff ff3e 	bl	1a002a18 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a002b9c:	bd08      	pop	{r3, pc}
1a002b9e:	bf00      	nop
1a002ba0:	400f4000 	.word	0x400f4000

1a002ba4 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a002ba4:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002ba6:	b2c0      	uxtb	r0, r0
1a002ba8:	f7ff ffce 	bl	1a002b48 <Board_UARTPutChar>
}
1a002bac:	bd08      	pop	{r3, pc}

1a002bae <__stdio_getchar>:

int __stdio_getchar() {
1a002bae:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002bb0:	f7ff ffd4 	bl	1a002b5c <Board_UARTGetChar>
}
1a002bb4:	bd08      	pop	{r3, pc}

1a002bb6 <__stdio_init>:

void __stdio_init() {
1a002bb6:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002bb8:	f7ff ffb4 	bl	1a002b24 <Board_Debug_Init>
1a002bbc:	bd08      	pop	{r3, pc}
1a002bbe:	Address 0x000000001a002bbe is out of bounds.


1a002bc0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002bc0:	2300      	movs	r3, #0
1a002bc2:	2b1c      	cmp	r3, #28
1a002bc4:	d812      	bhi.n	1a002bec <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002bc6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002bc8:	4a09      	ldr	r2, [pc, #36]	; (1a002bf0 <Board_SetupMuxing+0x30>)
1a002bca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002bce:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002bd2:	784a      	ldrb	r2, [r1, #1]
1a002bd4:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002bd6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002bda:	4906      	ldr	r1, [pc, #24]	; (1a002bf4 <Board_SetupMuxing+0x34>)
1a002bdc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002be0:	3301      	adds	r3, #1
1a002be2:	2b1c      	cmp	r3, #28
1a002be4:	d9f0      	bls.n	1a002bc8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002be6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002bea:	4770      	bx	lr
1a002bec:	4770      	bx	lr
1a002bee:	bf00      	nop
1a002bf0:	1a005014 	.word	0x1a005014
1a002bf4:	40086000 	.word	0x40086000

1a002bf8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002bf8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002bfa:	4a17      	ldr	r2, [pc, #92]	; (1a002c58 <Board_SetupClocking+0x60>)
1a002bfc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002c04:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002c08:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002c0c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002c14:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002c18:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002c1c:	2201      	movs	r2, #1
1a002c1e:	490f      	ldr	r1, [pc, #60]	; (1a002c5c <Board_SetupClocking+0x64>)
1a002c20:	2006      	movs	r0, #6
1a002c22:	f000 fc2f 	bl	1a003484 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002c26:	2400      	movs	r4, #0
1a002c28:	b14c      	cbz	r4, 1a002c3e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002c2a:	4b0b      	ldr	r3, [pc, #44]	; (1a002c58 <Board_SetupClocking+0x60>)
1a002c2c:	685a      	ldr	r2, [r3, #4]
1a002c2e:	f022 020c 	bic.w	r2, r2, #12
1a002c32:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002c34:	685a      	ldr	r2, [r3, #4]
1a002c36:	f042 0203 	orr.w	r2, r2, #3
1a002c3a:	605a      	str	r2, [r3, #4]
}
1a002c3c:	bd10      	pop	{r4, pc}
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002c3e:	4808      	ldr	r0, [pc, #32]	; (1a002c60 <Board_SetupClocking+0x68>)
1a002c40:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002c44:	2301      	movs	r3, #1
1a002c46:	788a      	ldrb	r2, [r1, #2]
1a002c48:	7849      	ldrb	r1, [r1, #1]
1a002c4a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002c4e:	f000 fb6b 	bl	1a003328 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002c52:	3401      	adds	r4, #1
1a002c54:	e7e8      	b.n	1a002c28 <Board_SetupClocking+0x30>
1a002c56:	bf00      	nop
1a002c58:	40043000 	.word	0x40043000
1a002c5c:	0c28cb00 	.word	0x0c28cb00
1a002c60:	1a005010 	.word	0x1a005010

1a002c64 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002c64:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002c66:	f7ff ffab 	bl	1a002bc0 <Board_SetupMuxing>
    Board_SetupClocking();
1a002c6a:	f7ff ffc5 	bl	1a002bf8 <Board_SetupClocking>
}
1a002c6e:	bd08      	pop	{r3, pc}

1a002c70 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002c70:	4b09      	ldr	r3, [pc, #36]	; (1a002c98 <Chip_UART_GetIndex+0x28>)
1a002c72:	4298      	cmp	r0, r3
1a002c74:	d009      	beq.n	1a002c8a <Chip_UART_GetIndex+0x1a>
1a002c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002c7a:	4298      	cmp	r0, r3
1a002c7c:	d007      	beq.n	1a002c8e <Chip_UART_GetIndex+0x1e>
1a002c7e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002c82:	4298      	cmp	r0, r3
1a002c84:	d005      	beq.n	1a002c92 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002c86:	2000      	movs	r0, #0
1a002c88:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002c8a:	2002      	movs	r0, #2
1a002c8c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002c8e:	2003      	movs	r0, #3
1a002c90:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a002c92:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a002c94:	4770      	bx	lr
1a002c96:	bf00      	nop
1a002c98:	400c1000 	.word	0x400c1000

1a002c9c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002c9c:	b530      	push	{r4, r5, lr}
1a002c9e:	b083      	sub	sp, #12
1a002ca0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002ca2:	f7ff ffe5 	bl	1a002c70 <Chip_UART_GetIndex>
1a002ca6:	2301      	movs	r3, #1
1a002ca8:	461a      	mov	r2, r3
1a002caa:	4619      	mov	r1, r3
1a002cac:	4d0e      	ldr	r5, [pc, #56]	; (1a002ce8 <Chip_UART_Init+0x4c>)
1a002cae:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002cb2:	f000 fb7f 	bl	1a0033b4 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002cb6:	2307      	movs	r3, #7
1a002cb8:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a002cba:	2300      	movs	r3, #0
1a002cbc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002cbe:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002cc0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002cc2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002cc4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002cc6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002cc8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002cca:	4b08      	ldr	r3, [pc, #32]	; (1a002cec <Chip_UART_Init+0x50>)
1a002ccc:	429c      	cmp	r4, r3
1a002cce:	d006      	beq.n	1a002cde <Chip_UART_Init+0x42>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002cd0:	2303      	movs	r3, #3
1a002cd2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002cd4:	2310      	movs	r3, #16
1a002cd6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002cd8:	9b01      	ldr	r3, [sp, #4]
}
1a002cda:	b003      	add	sp, #12
1a002cdc:	bd30      	pop	{r4, r5, pc}
	pUART->RS485ADRMATCH = 0;

    /* Clear MCR */
    if (pUART == LPC_UART1) {
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a002cde:	2300      	movs	r3, #0
1a002ce0:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a002ce2:	69a3      	ldr	r3, [r4, #24]
1a002ce4:	9301      	str	r3, [sp, #4]
1a002ce6:	e7f3      	b.n	1a002cd0 <Chip_UART_Init+0x34>
1a002ce8:	1a005090 	.word	0x1a005090
1a002cec:	40082000 	.word	0x40082000

1a002cf0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002cf0:	b538      	push	{r3, r4, r5, lr}
1a002cf2:	4605      	mov	r5, r0
1a002cf4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002cf6:	f7ff ffbb 	bl	1a002c70 <Chip_UART_GetIndex>
1a002cfa:	4b0c      	ldr	r3, [pc, #48]	; (1a002d2c <Chip_UART_SetBaud+0x3c>)
1a002cfc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002d00:	f000 fb90 	bl	1a003424 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002d04:	0123      	lsls	r3, r4, #4
1a002d06:	fbb0 f3f3 	udiv	r3, r0, r3
1a002d0a:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002d0c:	68ea      	ldr	r2, [r5, #12]
1a002d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002d12:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a002d14:	6029      	str	r1, [r5, #0]
1a002d16:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002d1a:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002d1c:	68ea      	ldr	r2, [r5, #12]
1a002d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002d22:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002d24:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002d28:	0900      	lsrs	r0, r0, #4
1a002d2a:	bd38      	pop	{r3, r4, r5, pc}
1a002d2c:	1a005088 	.word	0x1a005088

1a002d30 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002d34:	b083      	sub	sp, #12
1a002d36:	4683      	mov	fp, r0
1a002d38:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002d3a:	f7ff ff99 	bl	1a002c70 <Chip_UART_GetIndex>
1a002d3e:	4b35      	ldr	r3, [pc, #212]	; (1a002e14 <Chip_UART_SetBaudFDR+0xe4>)
1a002d40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002d44:	f000 fb6e 	bl	1a003424 <Chip_Clock_GetRate>
1a002d48:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a002d4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002d4e:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002d50:	2300      	movs	r3, #0
1a002d52:	9301      	str	r3, [sp, #4]
1a002d54:	46a2      	mov	sl, r4
1a002d56:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002d58:	e02a      	b.n	1a002db0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002d5a:	4242      	negs	r2, r0
				div ++;
1a002d5c:	1c4b      	adds	r3, r1, #1
1a002d5e:	e017      	b.n	1a002d90 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002d60:	b30a      	cbz	r2, 1a002da6 <Chip_UART_SetBaudFDR+0x76>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a002d62:	4617      	mov	r7, r2
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a002d64:	9501      	str	r5, [sp, #4]
			sm = m;
1a002d66:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002d68:	4699      	mov	r9, r3
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a002d6a:	3501      	adds	r5, #1
1a002d6c:	42ac      	cmp	r4, r5
1a002d6e:	d91e      	bls.n	1a002dae <Chip_UART_SetBaudFDR+0x7e>
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002d70:	0933      	lsrs	r3, r6, #4
1a002d72:	0730      	lsls	r0, r6, #28
1a002d74:	fba4 0100 	umull	r0, r1, r4, r0
1a002d78:	fb04 1103 	mla	r1, r4, r3, r1
1a002d7c:	1962      	adds	r2, r4, r5
1a002d7e:	fb08 f202 	mul.w	r2, r8, r2
1a002d82:	2300      	movs	r3, #0
1a002d84:	f001 f86e 	bl	1a003e64 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a002d88:	4602      	mov	r2, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a002d8a:	460b      	mov	r3, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a002d8c:	2800      	cmp	r0, #0
1a002d8e:	dbe4      	blt.n	1a002d5a <Chip_UART_SetBaudFDR+0x2a>
				diff = -diff;
				div ++;
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002d90:	4297      	cmp	r7, r2
1a002d92:	d3ea      	bcc.n	1a002d6a <Chip_UART_SetBaudFDR+0x3a>
1a002d94:	2b00      	cmp	r3, #0
1a002d96:	d0e8      	beq.n	1a002d6a <Chip_UART_SetBaudFDR+0x3a>
1a002d98:	0c19      	lsrs	r1, r3, #16
1a002d9a:	d1e6      	bne.n	1a002d6a <Chip_UART_SetBaudFDR+0x3a>
1a002d9c:	2b02      	cmp	r3, #2
1a002d9e:	d8df      	bhi.n	1a002d60 <Chip_UART_SetBaudFDR+0x30>
1a002da0:	2d00      	cmp	r5, #0
1a002da2:	d0dd      	beq.n	1a002d60 <Chip_UART_SetBaudFDR+0x30>
1a002da4:	e7e1      	b.n	1a002d6a <Chip_UART_SetBaudFDR+0x3a>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a002da6:	4617      	mov	r7, r2
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a002da8:	9501      	str	r5, [sp, #4]
			sm = m;
1a002daa:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002dac:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002dae:	3401      	adds	r4, #1
1a002db0:	b11f      	cbz	r7, 1a002dba <Chip_UART_SetBaudFDR+0x8a>
1a002db2:	2c0f      	cmp	r4, #15
1a002db4:	d801      	bhi.n	1a002dba <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002db6:	2500      	movs	r5, #0
1a002db8:	e7d8      	b.n	1a002d6c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002dba:	f1b9 0f00 	cmp.w	r9, #0
1a002dbe:	d024      	beq.n	1a002e0a <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002dc0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002dc8:	f8cb 300c 	str.w	r3, [fp, #12]
1a002dcc:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a002dd0:	f8cb 3000 	str.w	r3, [fp]
1a002dd4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002dd8:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002ddc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002de4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002de8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002dec:	b2db      	uxtb	r3, r3
1a002dee:	9901      	ldr	r1, [sp, #4]
1a002df0:	f001 020f 	and.w	r2, r1, #15
1a002df4:	4313      	orrs	r3, r2
1a002df6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002dfa:	0933      	lsrs	r3, r6, #4
1a002dfc:	fb0a f303 	mul.w	r3, sl, r3
1a002e00:	448a      	add	sl, r1
1a002e02:	fb09 f90a 	mul.w	r9, r9, sl
1a002e06:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002e0a:	4648      	mov	r0, r9
1a002e0c:	b003      	add	sp, #12
1a002e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002e12:	bf00      	nop
1a002e14:	1a005088 	.word	0x1a005088

1a002e18 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002e18:	4b03      	ldr	r3, [pc, #12]	; (1a002e28 <Chip_ADC_GetClockIndex+0x10>)
1a002e1a:	4298      	cmp	r0, r3
1a002e1c:	d001      	beq.n	1a002e22 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002e1e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002e20:	4770      	bx	lr
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
		clkADC = CLK_APB3_ADC1;
1a002e22:	2004      	movs	r0, #4
1a002e24:	4770      	bx	lr
1a002e26:	bf00      	nop
1a002e28:	400e4000 	.word	0x400e4000

1a002e2c <getClkDiv>:
	return clkADC;
}

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002e2c:	b570      	push	{r4, r5, r6, lr}
1a002e2e:	460d      	mov	r5, r1
1a002e30:	4614      	mov	r4, r2
1a002e32:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002e34:	f7ff fff0 	bl	1a002e18 <Chip_ADC_GetClockIndex>
1a002e38:	f000 faf4 	bl	1a003424 <Chip_Clock_GetRate>
	if (burstMode) {
1a002e3c:	b965      	cbnz	r5, 1a002e58 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002e3e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002e42:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002e46:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002e4a:	0064      	lsls	r4, r4, #1
1a002e4c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002e50:	b2c0      	uxtb	r0, r0
1a002e52:	3801      	subs	r0, #1
	return div;
}
1a002e54:	b2c0      	uxtb	r0, r0
1a002e56:	bd70      	pop	{r4, r5, r6, pc}
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
	if (burstMode) {
		fullAdcRate = adcRate * clks;
1a002e58:	fb04 f406 	mul.w	r4, r4, r6
1a002e5c:	e7f3      	b.n	1a002e46 <getClkDiv+0x1a>
1a002e5e:	Address 0x000000001a002e5e is out of bounds.


1a002e60 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002e60:	b538      	push	{r3, r4, r5, lr}
1a002e62:	4605      	mov	r5, r0
1a002e64:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002e66:	f7ff ffd7 	bl	1a002e18 <Chip_ADC_GetClockIndex>
1a002e6a:	2301      	movs	r3, #1
1a002e6c:	461a      	mov	r2, r3
1a002e6e:	4619      	mov	r1, r3
1a002e70:	f000 faa0 	bl	1a0033b4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002e74:	2100      	movs	r1, #0
1a002e76:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002e78:	4a08      	ldr	r2, [pc, #32]	; (1a002e9c <Chip_ADC_Init+0x3c>)
1a002e7a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002e7c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002e7e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002e80:	230b      	movs	r3, #11
1a002e82:	4628      	mov	r0, r5
1a002e84:	f7ff ffd2 	bl	1a002e2c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002e88:	0200      	lsls	r0, r0, #8
1a002e8a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002e8e:	7920      	ldrb	r0, [r4, #4]
1a002e90:	0440      	lsls	r0, r0, #17
1a002e92:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002e96:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002e98:	6028      	str	r0, [r5, #0]
}
1a002e9a:	bd38      	pop	{r3, r4, r5, pc}
1a002e9c:	00061a80 	.word	0x00061a80

1a002ea0 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002ea0:	b570      	push	{r4, r5, r6, lr}
1a002ea2:	4605      	mov	r5, r0
1a002ea4:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002ea6:	6804      	ldr	r4, [r0, #0]
1a002ea8:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002eac:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002eb0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002eb2:	790b      	ldrb	r3, [r1, #4]
1a002eb4:	f1c3 030b 	rsb	r3, r3, #11
1a002eb8:	b2db      	uxtb	r3, r3
1a002eba:	7949      	ldrb	r1, [r1, #5]
1a002ebc:	f7ff ffb6 	bl	1a002e2c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002ec0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002ec4:	7930      	ldrb	r0, [r6, #4]
1a002ec6:	0440      	lsls	r0, r0, #17
1a002ec8:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002ecc:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002ece:	6028      	str	r0, [r5, #0]
}
1a002ed0:	bd70      	pop	{r4, r5, r6, pc}

1a002ed2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002ed2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002ed4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002ed6:	680a      	ldr	r2, [r1, #0]
1a002ed8:	f7ff ffe2 	bl	1a002ea0 <Chip_ADC_SetSampleRate>
}
1a002edc:	bd08      	pop	{r3, pc}
1a002ede:	Address 0x000000001a002ede is out of bounds.


1a002ee0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002ee0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002ee2:	680b      	ldr	r3, [r1, #0]
1a002ee4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ee8:	d002      	beq.n	1a002ef0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002eee:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002ef0:	4607      	mov	r7, r0
1a002ef2:	2501      	movs	r5, #1
1a002ef4:	e03b      	b.n	1a002f6e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002ef6:	694b      	ldr	r3, [r1, #20]
1a002ef8:	fb03 f302 	mul.w	r3, r3, r2
1a002efc:	fbb3 f3f5 	udiv	r3, r3, r5
1a002f00:	e014      	b.n	1a002f2c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002f02:	461c      	mov	r4, r3
1a002f04:	e020      	b.n	1a002f48 <pll_calc_divs+0x68>
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
		return -val;
1a002f06:	f1cc 0c00 	rsb	ip, ip, #0
1a002f0a:	e020      	b.n	1a002f4e <pll_calc_divs+0x6e>
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a002f0c:	3201      	adds	r2, #1
1a002f0e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002f12:	dc26      	bgt.n	1a002f62 <pll_calc_divs+0x82>
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a002f14:	680c      	ldr	r4, [r1, #0]
1a002f16:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002f1a:	d0ec      	beq.n	1a002ef6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002f1c:	1c73      	adds	r3, r6, #1
1a002f1e:	fa02 fc03 	lsl.w	ip, r2, r3
1a002f22:	694b      	ldr	r3, [r1, #20]
1a002f24:	fb03 f30c 	mul.w	r3, r3, ip
1a002f28:	fbb3 f3f5 	udiv	r3, r3, r5
				} else {
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002f2c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002f7c <pll_calc_divs+0x9c>
1a002f30:	4563      	cmp	r3, ip
1a002f32:	d9eb      	bls.n	1a002f0c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002f34:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002f80 <pll_calc_divs+0xa0>
1a002f38:	4563      	cmp	r3, ip
1a002f3a:	d812      	bhi.n	1a002f62 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002f3c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002f40:	d1df      	bne.n	1a002f02 <pll_calc_divs+0x22>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a002f42:	1c74      	adds	r4, r6, #1
1a002f44:	fa23 f404 	lsr.w	r4, r3, r4
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002f48:	ebb0 0c04 	subs.w	ip, r0, r4
1a002f4c:	d4db      	bmi.n	1a002f06 <pll_calc_divs+0x26>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002f4e:	4567      	cmp	r7, ip
1a002f50:	d9dc      	bls.n	1a002f0c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002f52:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002f54:	1c77      	adds	r7, r6, #1
1a002f56:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002f58:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002f5a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002f5c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002f5e:	4667      	mov	r7, ip
1a002f60:	e7d4      	b.n	1a002f0c <pll_calc_divs+0x2c>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002f62:	3601      	adds	r6, #1
1a002f64:	2e03      	cmp	r6, #3
1a002f66:	dc01      	bgt.n	1a002f6c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002f68:	2201      	movs	r2, #1
1a002f6a:	e7d0      	b.n	1a002f0e <pll_calc_divs+0x2e>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a002f6c:	3501      	adds	r5, #1
1a002f6e:	2d04      	cmp	r5, #4
1a002f70:	dc01      	bgt.n	1a002f76 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002f72:	2600      	movs	r6, #0
1a002f74:	e7f6      	b.n	1a002f64 <pll_calc_divs+0x84>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a002f76:	bcf0      	pop	{r4, r5, r6, r7}
1a002f78:	4770      	bx	lr
1a002f7a:	bf00      	nop
1a002f7c:	094c5eff 	.word	0x094c5eff
1a002f80:	1312d000 	.word	0x1312d000

1a002f84 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002f84:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002f86:	b099      	sub	sp, #100	; 0x64
1a002f88:	4605      	mov	r5, r0
1a002f8a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002f8c:	225c      	movs	r2, #92	; 0x5c
1a002f8e:	2100      	movs	r1, #0
1a002f90:	a801      	add	r0, sp, #4
1a002f92:	f001 f916 	bl	1a0041c2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002f96:	2380      	movs	r3, #128	; 0x80
1a002f98:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002f9a:	6963      	ldr	r3, [r4, #20]
1a002f9c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002f9e:	7923      	ldrb	r3, [r4, #4]
1a002fa0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002fa4:	4669      	mov	r1, sp
1a002fa6:	4628      	mov	r0, r5
1a002fa8:	f7ff ff9a 	bl	1a002ee0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002fac:	9b06      	ldr	r3, [sp, #24]
1a002fae:	42ab      	cmp	r3, r5
1a002fb0:	d027      	beq.n	1a003002 <pll_get_frac+0x7e>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002fb2:	1aeb      	subs	r3, r5, r3
1a002fb4:	d42e      	bmi.n	1a003014 <pll_get_frac+0x90>
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002fb6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002fbe:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002fc0:	6963      	ldr	r3, [r4, #20]
1a002fc2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002fc4:	7923      	ldrb	r3, [r4, #4]
1a002fc6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002fca:	a910      	add	r1, sp, #64	; 0x40
1a002fcc:	4628      	mov	r0, r5
1a002fce:	f7ff ff87 	bl	1a002ee0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002fd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002fd4:	42ab      	cmp	r3, r5
1a002fd6:	d01f      	beq.n	1a003018 <pll_get_frac+0x94>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002fd8:	1aeb      	subs	r3, r5, r3
1a002fda:	d425      	bmi.n	1a003028 <pll_get_frac+0xa4>
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002fdc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002fde:	4b2b      	ldr	r3, [pc, #172]	; (1a00308c <pll_get_frac+0x108>)
1a002fe0:	429d      	cmp	r5, r3
1a002fe2:	d923      	bls.n	1a00302c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002fe6:	1aed      	subs	r5, r5, r3
1a002fe8:	d433      	bmi.n	1a003052 <pll_get_frac+0xce>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002fea:	42ae      	cmp	r6, r5
1a002fec:	dc3b      	bgt.n	1a003066 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002fee:	42be      	cmp	r6, r7
1a002ff0:	dc31      	bgt.n	1a003056 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002ff2:	466d      	mov	r5, sp
1a002ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ff8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003000:	e006      	b.n	1a003010 <pll_get_frac+0x8c>
	pll[0].ctrl |= (1 << 7);
	pll[0].fin = ppll->fin;
	pll[0].srcin = ppll->srcin;
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
1a003002:	466d      	mov	r5, sp
1a003004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003008:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00300c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003010:	b019      	add	sp, #100	; 0x64
1a003012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
		return -val;
1a003014:	425b      	negs	r3, r3
1a003016:	e7ce      	b.n	1a002fb6 <pll_get_frac+0x32>
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
	pll[2].fin = ppll->fin;
	pll[2].srcin = ppll->srcin;
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
1a003018:	ad10      	add	r5, sp, #64	; 0x40
1a00301a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00301c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00301e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a003026:	e7f3      	b.n	1a003010 <pll_get_frac+0x8c>
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
		return -val;
1a003028:	425b      	negs	r3, r3
1a00302a:	e7d7      	b.n	1a002fdc <pll_get_frac+0x58>
	}
	diff[2] = ABS(freq - pll[2].fout);
	
	if (freq <= 110000000) {
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a00302c:	2340      	movs	r3, #64	; 0x40
1a00302e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003030:	6963      	ldr	r3, [r4, #20]
1a003032:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003034:	a908      	add	r1, sp, #32
1a003036:	4628      	mov	r0, r5
1a003038:	f7ff ff52 	bl	1a002ee0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00303c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00303e:	42ab      	cmp	r3, r5
1a003040:	d1d0      	bne.n	1a002fe4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003042:	ad08      	add	r5, sp, #32
1a003044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003048:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00304c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003050:	e7de      	b.n	1a003010 <pll_get_frac+0x8c>
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
		return -val;
1a003052:	426d      	negs	r5, r5
1a003054:	e7c9      	b.n	1a002fea <pll_get_frac+0x66>
	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
		if (diff[0] <= diff[2]) {
			*ppll = pll[0];
		} else {
			*ppll = pll[2];
1a003056:	ad10      	add	r5, sp, #64	; 0x40
1a003058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00305a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00305c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003064:	e7d4      	b.n	1a003010 <pll_get_frac+0x8c>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a003066:	42af      	cmp	r7, r5
1a003068:	db07      	blt.n	1a00307a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00306a:	ad08      	add	r5, sp, #32
1a00306c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00306e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003070:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003078:	e7ca      	b.n	1a003010 <pll_get_frac+0x8c>
		} else {
			*ppll = pll[2];
1a00307a:	ad10      	add	r5, sp, #64	; 0x40
1a00307c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00307e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003080:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003088:	e7c2      	b.n	1a003010 <pll_get_frac+0x8c>
1a00308a:	bf00      	nop
1a00308c:	068e7780 	.word	0x068e7780

1a003090 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003090:	b430      	push	{r4, r5}
1a003092:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003094:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003096:	201c      	movs	r0, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003098:	e000      	b.n	1a00309c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00309a:	3301      	adds	r3, #1
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00309c:	281c      	cmp	r0, #28
1a00309e:	d118      	bne.n	1a0030d2 <Chip_Clock_FindBaseClock+0x42>
1a0030a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0030a4:	0051      	lsls	r1, r2, #1
1a0030a6:	4a0c      	ldr	r2, [pc, #48]	; (1a0030d8 <Chip_Clock_FindBaseClock+0x48>)
1a0030a8:	440a      	add	r2, r1
1a0030aa:	7914      	ldrb	r4, [r2, #4]
1a0030ac:	4284      	cmp	r4, r0
1a0030ae:	d010      	beq.n	1a0030d2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0030b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0030b4:	004a      	lsls	r2, r1, #1
1a0030b6:	4908      	ldr	r1, [pc, #32]	; (1a0030d8 <Chip_Clock_FindBaseClock+0x48>)
1a0030b8:	5a8a      	ldrh	r2, [r1, r2]
1a0030ba:	42aa      	cmp	r2, r5
1a0030bc:	d8ed      	bhi.n	1a00309a <Chip_Clock_FindBaseClock+0xa>
1a0030be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0030c2:	0051      	lsls	r1, r2, #1
1a0030c4:	4a04      	ldr	r2, [pc, #16]	; (1a0030d8 <Chip_Clock_FindBaseClock+0x48>)
1a0030c6:	440a      	add	r2, r1
1a0030c8:	8852      	ldrh	r2, [r2, #2]
1a0030ca:	42aa      	cmp	r2, r5
1a0030cc:	d3e5      	bcc.n	1a00309a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0030ce:	4620      	mov	r0, r4
1a0030d0:	e7e4      	b.n	1a00309c <Chip_Clock_FindBaseClock+0xc>
			i++;
		}
	}

	return baseclk;
}
1a0030d2:	bc30      	pop	{r4, r5}
1a0030d4:	4770      	bx	lr
1a0030d6:	bf00      	nop
1a0030d8:	1a0050a4 	.word	0x1a0050a4

1a0030dc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0030dc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0030de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0030e2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0030e4:	4a0d      	ldr	r2, [pc, #52]	; (1a00311c <Chip_Clock_EnableCrystal+0x40>)
1a0030e6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0030e8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0030ec:	6992      	ldr	r2, [r2, #24]
1a0030ee:	428a      	cmp	r2, r1
1a0030f0:	d001      	beq.n	1a0030f6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0030f2:	4a0a      	ldr	r2, [pc, #40]	; (1a00311c <Chip_Clock_EnableCrystal+0x40>)
1a0030f4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0030f6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0030fa:	4a09      	ldr	r2, [pc, #36]	; (1a003120 <Chip_Clock_EnableCrystal+0x44>)
1a0030fc:	6811      	ldr	r1, [r2, #0]
1a0030fe:	4a09      	ldr	r2, [pc, #36]	; (1a003124 <Chip_Clock_EnableCrystal+0x48>)
1a003100:	4291      	cmp	r1, r2
1a003102:	d901      	bls.n	1a003108 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003104:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003108:	4a04      	ldr	r2, [pc, #16]	; (1a00311c <Chip_Clock_EnableCrystal+0x40>)
1a00310a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a00310c:	9b01      	ldr	r3, [sp, #4]
1a00310e:	1e5a      	subs	r2, r3, #1
1a003110:	9201      	str	r2, [sp, #4]
1a003112:	2b00      	cmp	r3, #0
1a003114:	d1fa      	bne.n	1a00310c <Chip_Clock_EnableCrystal+0x30>
}
1a003116:	b002      	add	sp, #8
1a003118:	4770      	bx	lr
1a00311a:	bf00      	nop
1a00311c:	40050000 	.word	0x40050000
1a003120:	1a00500c 	.word	0x1a00500c
1a003124:	01312cff 	.word	0x01312cff

1a003128 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003128:	3012      	adds	r0, #18
1a00312a:	4b05      	ldr	r3, [pc, #20]	; (1a003140 <Chip_Clock_GetDividerSource+0x18>)
1a00312c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003130:	f010 0f01 	tst.w	r0, #1
1a003134:	d102      	bne.n	1a00313c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003136:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00313a:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a00313c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00313e:	4770      	bx	lr
1a003140:	40050000 	.word	0x40050000

1a003144 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003144:	f100 0212 	add.w	r2, r0, #18
1a003148:	4b03      	ldr	r3, [pc, #12]	; (1a003158 <Chip_Clock_GetDividerDivisor+0x14>)
1a00314a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00314e:	4b03      	ldr	r3, [pc, #12]	; (1a00315c <Chip_Clock_GetDividerDivisor+0x18>)
1a003150:	5c18      	ldrb	r0, [r3, r0]
}
1a003152:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003156:	4770      	bx	lr
1a003158:	40050000 	.word	0x40050000
1a00315c:	1a00509c 	.word	0x1a00509c

1a003160 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003160:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003162:	2810      	cmp	r0, #16
1a003164:	d80a      	bhi.n	1a00317c <Chip_Clock_GetClockInputHz+0x1c>
1a003166:	e8df f000 	tbb	[pc, r0]
1a00316a:	0b42      	.short	0x0b42
1a00316c:	091f160d 	.word	0x091f160d
1a003170:	2b282522 	.word	0x2b282522
1a003174:	322e0909 	.word	0x322e0909
1a003178:	3a36      	.short	0x3a36
1a00317a:	3e          	.byte	0x3e
1a00317b:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a00317c:	2000      	movs	r0, #0
1a00317e:	e038      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003180:	481e      	ldr	r0, [pc, #120]	; (1a0031fc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003182:	e036      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003184:	4b1e      	ldr	r3, [pc, #120]	; (1a003200 <Chip_Clock_GetClockInputHz+0xa0>)
1a003186:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00318a:	f003 0307 	and.w	r3, r3, #7
1a00318e:	2b04      	cmp	r3, #4
1a003190:	d130      	bne.n	1a0031f4 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003192:	2000      	movs	r0, #0
1a003194:	e02d      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003196:	4b1a      	ldr	r3, [pc, #104]	; (1a003200 <Chip_Clock_GetClockInputHz+0xa0>)
1a003198:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00319c:	f003 0307 	and.w	r3, r3, #7
1a0031a0:	2b04      	cmp	r3, #4
1a0031a2:	d029      	beq.n	1a0031f8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0031a4:	4817      	ldr	r0, [pc, #92]	; (1a003204 <Chip_Clock_GetClockInputHz+0xa4>)
1a0031a6:	e024      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0031a8:	4b17      	ldr	r3, [pc, #92]	; (1a003208 <Chip_Clock_GetClockInputHz+0xa8>)
1a0031aa:	6818      	ldr	r0, [r3, #0]
		break;
1a0031ac:	e021      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0031ae:	4b17      	ldr	r3, [pc, #92]	; (1a00320c <Chip_Clock_GetClockInputHz+0xac>)
1a0031b0:	6818      	ldr	r0, [r3, #0]
		break;
1a0031b2:	e01e      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0031b4:	4b16      	ldr	r3, [pc, #88]	; (1a003210 <Chip_Clock_GetClockInputHz+0xb0>)
1a0031b6:	6818      	ldr	r0, [r3, #0]
		break;
1a0031b8:	e01b      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0031ba:	4b15      	ldr	r3, [pc, #84]	; (1a003210 <Chip_Clock_GetClockInputHz+0xb0>)
1a0031bc:	6858      	ldr	r0, [r3, #4]
		break;
1a0031be:	e018      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0031c0:	f000 f86a 	bl	1a003298 <Chip_Clock_GetMainPLLHz>
		break;
1a0031c4:	e015      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0031c6:	2100      	movs	r1, #0
1a0031c8:	f000 f89c 	bl	1a003304 <Chip_Clock_GetDivRate>
		break;
1a0031cc:	e011      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0031ce:	2101      	movs	r1, #1
1a0031d0:	f000 f898 	bl	1a003304 <Chip_Clock_GetDivRate>
		break;
1a0031d4:	e00d      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0031d6:	2102      	movs	r1, #2
1a0031d8:	f000 f894 	bl	1a003304 <Chip_Clock_GetDivRate>
		break;
1a0031dc:	e009      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0031de:	2103      	movs	r1, #3
1a0031e0:	f000 f890 	bl	1a003304 <Chip_Clock_GetDivRate>
		break;
1a0031e4:	e005      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0031e6:	2104      	movs	r1, #4
1a0031e8:	f000 f88c 	bl	1a003304 <Chip_Clock_GetDivRate>
		break;
1a0031ec:	e001      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a0031ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0031f2:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0031f4:	4803      	ldr	r0, [pc, #12]	; (1a003204 <Chip_Clock_GetClockInputHz+0xa4>)
1a0031f6:	e7fc      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a0031f8:	4806      	ldr	r0, [pc, #24]	; (1a003214 <Chip_Clock_GetClockInputHz+0xb4>)

	default:
		break;
	}

	return rate;
1a0031fa:	e7fa      	b.n	1a0031f2 <Chip_Clock_GetClockInputHz+0x92>
1a0031fc:	00b71b00 	.word	0x00b71b00
1a003200:	40043000 	.word	0x40043000
1a003204:	017d7840 	.word	0x017d7840
1a003208:	1a004fe0 	.word	0x1a004fe0
1a00320c:	1a00500c 	.word	0x1a00500c
1a003210:	10002b00 	.word	0x10002b00
1a003214:	02faf080 	.word	0x02faf080

1a003218 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003218:	b538      	push	{r3, r4, r5, lr}
1a00321a:	4605      	mov	r5, r0
1a00321c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00321e:	7908      	ldrb	r0, [r1, #4]
1a003220:	f7ff ff9e 	bl	1a003160 <Chip_Clock_GetClockInputHz>
1a003224:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a003226:	4b19      	ldr	r3, [pc, #100]	; (1a00328c <Chip_Clock_CalcMainPLLValue+0x74>)
1a003228:	442b      	add	r3, r5
1a00322a:	4a19      	ldr	r2, [pc, #100]	; (1a003290 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00322c:	4293      	cmp	r3, r2
1a00322e:	d821      	bhi.n	1a003274 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003230:	b318      	cbz	r0, 1a00327a <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003232:	2380      	movs	r3, #128	; 0x80
1a003234:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003236:	2300      	movs	r3, #0
1a003238:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00323a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00323c:	fbb5 f3f0 	udiv	r3, r5, r0
1a003240:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003242:	4a14      	ldr	r2, [pc, #80]	; (1a003294 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003244:	4295      	cmp	r5, r2
1a003246:	d903      	bls.n	1a003250 <Chip_Clock_CalcMainPLLValue+0x38>
1a003248:	fb03 f000 	mul.w	r0, r3, r0
1a00324c:	42a8      	cmp	r0, r5
1a00324e:	d007      	beq.n	1a003260 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003250:	4621      	mov	r1, r4
1a003252:	4628      	mov	r0, r5
1a003254:	f7ff fe96 	bl	1a002f84 <pll_get_frac>
		if (!ppll->nsel) {
1a003258:	68a3      	ldr	r3, [r4, #8]
1a00325a:	b18b      	cbz	r3, 1a003280 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a00325c:	3b01      	subs	r3, #1
1a00325e:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a003260:	6923      	ldr	r3, [r4, #16]
1a003262:	b183      	cbz	r3, 1a003286 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a003264:	68e2      	ldr	r2, [r4, #12]
1a003266:	b10a      	cbz	r2, 1a00326c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003268:	3a01      	subs	r2, #1
1a00326a:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a00326c:	3b01      	subs	r3, #1
1a00326e:	6123      	str	r3, [r4, #16]

	return 0;
1a003270:	2000      	movs	r0, #0
}
1a003272:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a003274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003278:	e7fb      	b.n	1a003272 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00327a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00327e:	e7f8      	b.n	1a003272 <Chip_Clock_CalcMainPLLValue+0x5a>
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a003280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003284:	e7f5      	b.n	1a003272 <Chip_Clock_CalcMainPLLValue+0x5a>
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a003286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00328a:	e7f2      	b.n	1a003272 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00328c:	ff6b3a10 	.word	0xff6b3a10
1a003290:	0b940510 	.word	0x0b940510
1a003294:	094c5eff 	.word	0x094c5eff

1a003298 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a003298:	b530      	push	{r4, r5, lr}
1a00329a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00329c:	4d17      	ldr	r5, [pc, #92]	; (1a0032fc <Chip_Clock_GetMainPLLHz+0x64>)
1a00329e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0032a0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0032a4:	f7ff ff5c 	bl	1a003160 <Chip_Clock_GetClockInputHz>
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0032a8:	4b15      	ldr	r3, [pc, #84]	; (1a003300 <Chip_Clock_GetMainPLLHz+0x68>)
1a0032aa:	681b      	ldr	r3, [r3, #0]
1a0032ac:	9301      	str	r3, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0032ae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0032b0:	f013 0f01 	tst.w	r3, #1
1a0032b4:	d01f      	beq.n	1a0032f6 <Chip_Clock_GetMainPLLHz+0x5e>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a0032b6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0032ba:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0032be:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a0032c2:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a0032c6:	3301      	adds	r3, #1
	n = nsel + 1;
1a0032c8:	3201      	adds	r2, #1
	p = ptab[psel];
1a0032ca:	f10d 0c08 	add.w	ip, sp, #8
1a0032ce:	4461      	add	r1, ip
1a0032d0:	f811 1c04 	ldrb.w	r1, [r1, #-4]

	if (direct || fbsel) {
1a0032d4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0032d8:	d108      	bne.n	1a0032ec <Chip_Clock_GetMainPLLHz+0x54>
1a0032da:	b93d      	cbnz	r5, 1a0032ec <Chip_Clock_GetMainPLLHz+0x54>
		return m * (freq / n);
	}

	return (m / (2 * p)) * (freq / n);
1a0032dc:	0049      	lsls	r1, r1, #1
1a0032de:	fbb3 f3f1 	udiv	r3, r3, r1
1a0032e2:	fbb0 f0f2 	udiv	r0, r0, r2
1a0032e6:	fb00 f003 	mul.w	r0, r0, r3
1a0032ea:	e005      	b.n	1a0032f8 <Chip_Clock_GetMainPLLHz+0x60>
	m = msel + 1;
	n = nsel + 1;
	p = ptab[psel];

	if (direct || fbsel) {
		return m * (freq / n);
1a0032ec:	fbb0 f0f2 	udiv	r0, r0, r2
1a0032f0:	fb03 f000 	mul.w	r0, r3, r0
1a0032f4:	e000      	b.n	1a0032f8 <Chip_Clock_GetMainPLLHz+0x60>
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
		return 0;
1a0032f6:	2000      	movs	r0, #0
	if (direct || fbsel) {
		return m * (freq / n);
	}

	return (m / (2 * p)) * (freq / n);
}
1a0032f8:	b003      	add	sp, #12
1a0032fa:	bd30      	pop	{r4, r5, pc}
1a0032fc:	40050000 	.word	0x40050000
1a003300:	1a005098 	.word	0x1a005098

1a003304 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a003304:	b538      	push	{r3, r4, r5, lr}
1a003306:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a003308:	4608      	mov	r0, r1
1a00330a:	f7ff ff0d 	bl	1a003128 <Chip_Clock_GetDividerSource>
1a00330e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003310:	4620      	mov	r0, r4
1a003312:	f7ff ff17 	bl	1a003144 <Chip_Clock_GetDividerDivisor>
1a003316:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003318:	4628      	mov	r0, r5
1a00331a:	f7ff ff21 	bl	1a003160 <Chip_Clock_GetClockInputHz>
1a00331e:	3401      	adds	r4, #1
}
1a003320:	fbb0 f0f4 	udiv	r0, r0, r4
1a003324:	bd38      	pop	{r3, r4, r5, pc}
1a003326:	Address 0x000000001a003326 is out of bounds.


1a003328 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003328:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00332a:	f100 0416 	add.w	r4, r0, #22
1a00332e:	00a4      	lsls	r4, r4, #2
1a003330:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003334:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003338:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00333a:	281b      	cmp	r0, #27
1a00333c:	d813      	bhi.n	1a003366 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00333e:	2911      	cmp	r1, #17
1a003340:	d01a      	beq.n	1a003378 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003342:	4d0e      	ldr	r5, [pc, #56]	; (1a00337c <Chip_Clock_SetBaseClock+0x54>)
1a003344:	4025      	ands	r5, r4

			if (autoblocken) {
1a003346:	b10a      	cbz	r2, 1a00334c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003348:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a00334c:	b10b      	cbz	r3, 1a003352 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00334e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003352:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003356:	3016      	adds	r0, #22
1a003358:	0080      	lsls	r0, r0, #2
1a00335a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00335e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003362:	6045      	str	r5, [r0, #4]
1a003364:	e008      	b.n	1a003378 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003366:	f044 0401 	orr.w	r4, r4, #1
1a00336a:	3016      	adds	r0, #22
1a00336c:	0080      	lsls	r0, r0, #2
1a00336e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003372:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003376:	6044      	str	r4, [r0, #4]
	}
}
1a003378:	bc30      	pop	{r4, r5}
1a00337a:	4770      	bx	lr
1a00337c:	e0fff7fe 	.word	0xe0fff7fe

1a003380 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003380:	281b      	cmp	r0, #27
1a003382:	d80c      	bhi.n	1a00339e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003384:	3016      	adds	r0, #22
1a003386:	0080      	lsls	r0, r0, #2
1a003388:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00338c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003390:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003392:	f010 0f01 	tst.w	r0, #1
1a003396:	d104      	bne.n	1a0033a2 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003398:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00339c:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a00339e:	2011      	movs	r0, #17
1a0033a0:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a0033a2:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0033a4:	4770      	bx	lr

1a0033a6 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a0033a6:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0033a8:	f7ff ffea 	bl	1a003380 <Chip_Clock_GetBaseClock>
1a0033ac:	f7ff fed8 	bl	1a003160 <Chip_Clock_GetClockInputHz>
}
1a0033b0:	bd08      	pop	{r3, pc}
1a0033b2:	Address 0x000000001a0033b2 is out of bounds.


1a0033b4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0033b4:	b969      	cbnz	r1, 1a0033d2 <Chip_Clock_EnableOpts+0x1e>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a0033b6:	2101      	movs	r1, #1

	if (autoen) {
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0033b8:	b10a      	cbz	r2, 1a0033be <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0033ba:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0033be:	2b02      	cmp	r3, #2
1a0033c0:	d009      	beq.n	1a0033d6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0033c2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0033c6:	d209      	bcs.n	1a0033dc <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0033c8:	3020      	adds	r0, #32
1a0033ca:	4b07      	ldr	r3, [pc, #28]	; (1a0033e8 <Chip_Clock_EnableOpts+0x34>)
1a0033cc:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0033d0:	4770      	bx	lr
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
		reg |= (1 << 1);
1a0033d2:	2103      	movs	r1, #3
1a0033d4:	e7f0      	b.n	1a0033b8 <Chip_Clock_EnableOpts+0x4>
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
		reg |= (1 << 5);
1a0033d6:	f041 0120 	orr.w	r1, r1, #32
1a0033da:	e7f2      	b.n	1a0033c2 <Chip_Clock_EnableOpts+0xe>
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0033dc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0033e0:	4b02      	ldr	r3, [pc, #8]	; (1a0033ec <Chip_Clock_EnableOpts+0x38>)
1a0033e2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0033e6:	4770      	bx	lr
1a0033e8:	40051000 	.word	0x40051000
1a0033ec:	40052000 	.word	0x40052000

1a0033f0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0033f0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0033f4:	d208      	bcs.n	1a003408 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0033f6:	4a09      	ldr	r2, [pc, #36]	; (1a00341c <Chip_Clock_Enable+0x2c>)
1a0033f8:	3020      	adds	r0, #32
1a0033fa:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0033fe:	f043 0301 	orr.w	r3, r3, #1
1a003402:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003406:	4770      	bx	lr
/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003408:	4a05      	ldr	r2, [pc, #20]	; (1a003420 <Chip_Clock_Enable+0x30>)
1a00340a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00340e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003412:	f043 0301 	orr.w	r3, r3, #1
1a003416:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00341a:	4770      	bx	lr
1a00341c:	40051000 	.word	0x40051000
1a003420:	40052000 	.word	0x40052000

1a003424 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003424:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003426:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00342a:	d309      	bcc.n	1a003440 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00342c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003430:	4a0d      	ldr	r2, [pc, #52]	; (1a003468 <Chip_Clock_GetRate+0x44>)
1a003432:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003436:	f014 0f01 	tst.w	r4, #1
1a00343a:	d107      	bne.n	1a00344c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00343c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00343e:	bd10      	pop	{r4, pc}
	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003440:	f100 0320 	add.w	r3, r0, #32
1a003444:	4a09      	ldr	r2, [pc, #36]	; (1a00346c <Chip_Clock_GetRate+0x48>)
1a003446:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00344a:	e7f4      	b.n	1a003436 <Chip_Clock_GetRate+0x12>
	}

	/* Is the clock enabled? */
	if (reg & 1) {
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00344c:	f7ff fe20 	bl	1a003090 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003450:	f7ff ffa9 	bl	1a0033a6 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a003454:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003458:	d103      	bne.n	1a003462 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00345a:	2301      	movs	r3, #1
		}
		else {
			div = 2;/* No other dividers supported */

		}
		rate = rate / div;
1a00345c:	fbb0 f0f3 	udiv	r0, r0, r3
1a003460:	e7ed      	b.n	1a00343e <Chip_Clock_GetRate+0x1a>
		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
			div = 1;
		}
		else {
			div = 2;/* No other dividers supported */
1a003462:	2302      	movs	r3, #2
1a003464:	e7fa      	b.n	1a00345c <Chip_Clock_GetRate+0x38>
1a003466:	bf00      	nop
1a003468:	40052000 	.word	0x40052000
1a00346c:	40051000 	.word	0x40051000

1a003470 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003470:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003472:	2069      	movs	r0, #105	; 0x69
1a003474:	f7ff ffd6 	bl	1a003424 <Chip_Clock_GetRate>
1a003478:	4b01      	ldr	r3, [pc, #4]	; (1a003480 <SystemCoreClockUpdate+0x10>)
1a00347a:	6018      	str	r0, [r3, #0]
}
1a00347c:	bd08      	pop	{r3, pc}
1a00347e:	bf00      	nop
1a003480:	10002c50 	.word	0x10002c50

1a003484 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003484:	b570      	push	{r4, r5, r6, lr}
1a003486:	b08a      	sub	sp, #40	; 0x28
1a003488:	4605      	mov	r5, r0
1a00348a:	460e      	mov	r6, r1
1a00348c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00348e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003492:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003494:	2806      	cmp	r0, #6
1a003496:	d018      	beq.n	1a0034ca <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003498:	2300      	movs	r3, #0
1a00349a:	2201      	movs	r2, #1
1a00349c:	4629      	mov	r1, r5
1a00349e:	2004      	movs	r0, #4
1a0034a0:	f7ff ff42 	bl	1a003328 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0034a4:	4a49      	ldr	r2, [pc, #292]	; (1a0035cc <Chip_SetupCoreClock+0x148>)
1a0034a6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0034a8:	f043 0301 	orr.w	r3, r3, #1
1a0034ac:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0034ae:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0034b2:	a901      	add	r1, sp, #4
1a0034b4:	4630      	mov	r0, r6
1a0034b6:	f7ff feaf 	bl	1a003218 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0034ba:	4b45      	ldr	r3, [pc, #276]	; (1a0035d0 <Chip_SetupCoreClock+0x14c>)
1a0034bc:	429e      	cmp	r6, r3
1a0034be:	d916      	bls.n	1a0034ee <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0034c0:	9b01      	ldr	r3, [sp, #4]
1a0034c2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0034c6:	d003      	beq.n	1a0034d0 <Chip_SetupCoreClock+0x4c>
1a0034c8:	e7fe      	b.n	1a0034c8 <Chip_SetupCoreClock+0x44>
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a0034ca:	f7ff fe07 	bl	1a0030dc <Chip_Clock_EnableCrystal>
1a0034ce:	e7e3      	b.n	1a003498 <Chip_SetupCoreClock+0x14>
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0034d0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0034d4:	d005      	beq.n	1a0034e2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0034d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0034da:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a0034dc:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a0034de:	2601      	movs	r6, #1
1a0034e0:	e007      	b.n	1a0034f2 <Chip_SetupCoreClock+0x6e>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a0034e2:	9b04      	ldr	r3, [sp, #16]
1a0034e4:	3301      	adds	r3, #1
1a0034e6:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a0034e8:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a0034ea:	2600      	movs	r6, #0
1a0034ec:	e001      	b.n	1a0034f2 <Chip_SetupCoreClock+0x6e>
1a0034ee:	2500      	movs	r5, #0
1a0034f0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0034f2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0034f6:	9b01      	ldr	r3, [sp, #4]
1a0034f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0034fc:	9a05      	ldr	r2, [sp, #20]
1a0034fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003502:	9a03      	ldr	r2, [sp, #12]
1a003504:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003508:	9a04      	ldr	r2, [sp, #16]
1a00350a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00350e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003512:	4a2e      	ldr	r2, [pc, #184]	; (1a0035cc <Chip_SetupCoreClock+0x148>)
1a003514:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003516:	4b2d      	ldr	r3, [pc, #180]	; (1a0035cc <Chip_SetupCoreClock+0x148>)
1a003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00351a:	f013 0f01 	tst.w	r3, #1
1a00351e:	d0fa      	beq.n	1a003516 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003520:	2300      	movs	r3, #0
1a003522:	2201      	movs	r2, #1
1a003524:	2109      	movs	r1, #9
1a003526:	2004      	movs	r0, #4
1a003528:	f7ff fefe 	bl	1a003328 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00352c:	b1fe      	cbz	r6, 1a00356e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00352e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003532:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003534:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003536:	1e5a      	subs	r2, r3, #1
1a003538:	9209      	str	r2, [sp, #36]	; 0x24
1a00353a:	2b00      	cmp	r3, #0
1a00353c:	d1fa      	bne.n	1a003534 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00353e:	9b01      	ldr	r3, [sp, #4]
1a003540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003544:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003546:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00354a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00354e:	9a05      	ldr	r2, [sp, #20]
1a003550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003554:	9a03      	ldr	r2, [sp, #12]
1a003556:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00355a:	9a04      	ldr	r2, [sp, #16]
1a00355c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003564:	4a19      	ldr	r2, [pc, #100]	; (1a0035cc <Chip_SetupCoreClock+0x148>)
1a003566:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003568:	b36c      	cbz	r4, 1a0035c6 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00356a:	2400      	movs	r4, #0
1a00356c:	e029      	b.n	1a0035c2 <Chip_SetupCoreClock+0x13e>
	if (direct) {
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
		ppll.ctrl |= 1 << 7;
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a00356e:	2d00      	cmp	r5, #0
1a003570:	d0fa      	beq.n	1a003568 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003572:	f242 7310 	movw	r3, #10000	; 0x2710
1a003576:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003578:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00357a:	1e5a      	subs	r2, r3, #1
1a00357c:	9209      	str	r2, [sp, #36]	; 0x24
1a00357e:	2b00      	cmp	r3, #0
1a003580:	d1fa      	bne.n	1a003578 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003582:	9b04      	ldr	r3, [sp, #16]
1a003584:	1e5a      	subs	r2, r3, #1
1a003586:	9204      	str	r2, [sp, #16]
1a003588:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00358c:	9b01      	ldr	r3, [sp, #4]
1a00358e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003592:	9905      	ldr	r1, [sp, #20]
1a003594:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003598:	9903      	ldr	r1, [sp, #12]
1a00359a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00359e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0035a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0035a6:	4a09      	ldr	r2, [pc, #36]	; (1a0035cc <Chip_SetupCoreClock+0x148>)
1a0035a8:	6453      	str	r3, [r2, #68]	; 0x44
1a0035aa:	e7dd      	b.n	1a003568 <Chip_SetupCoreClock+0xe4>
	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0035ac:	4809      	ldr	r0, [pc, #36]	; (1a0035d4 <Chip_SetupCoreClock+0x150>)
1a0035ae:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0035b2:	78cb      	ldrb	r3, [r1, #3]
1a0035b4:	788a      	ldrb	r2, [r1, #2]
1a0035b6:	7849      	ldrb	r1, [r1, #1]
1a0035b8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0035bc:	f7ff feb4 	bl	1a003328 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0035c0:	3401      	adds	r4, #1
1a0035c2:	2c11      	cmp	r4, #17
1a0035c4:	d9f2      	bls.n	1a0035ac <Chip_SetupCoreClock+0x128>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0035c6:	b00a      	add	sp, #40	; 0x28
1a0035c8:	bd70      	pop	{r4, r5, r6, pc}
1a0035ca:	bf00      	nop
1a0035cc:	40050000 	.word	0x40050000
1a0035d0:	068e7780 	.word	0x068e7780
1a0035d4:	1a005110 	.word	0x1a005110

1a0035d8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0035d8:	4770      	bx	lr
1a0035da:	Address 0x000000001a0035da is out of bounds.


1a0035dc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0035dc:	4b03      	ldr	r3, [pc, #12]	; (1a0035ec <Chip_SSP_GetClockIndex+0x10>)
1a0035de:	4298      	cmp	r0, r3
1a0035e0:	d001      	beq.n	1a0035e6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0035e2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0035e4:	4770      	bx	lr
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
		clkSSP = CLK_MX_SSP1;
1a0035e6:	20a5      	movs	r0, #165	; 0xa5
1a0035e8:	4770      	bx	lr
1a0035ea:	bf00      	nop
1a0035ec:	400c5000 	.word	0x400c5000

1a0035f0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0035f0:	4b04      	ldr	r3, [pc, #16]	; (1a003604 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0035f2:	4298      	cmp	r0, r3
1a0035f4:	d002      	beq.n	1a0035fc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0035f6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0035fa:	4770      	bx	lr
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
		clkSSP = CLK_APB2_SSP1;
1a0035fc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003600:	4770      	bx	lr
1a003602:	bf00      	nop
1a003604:	400c5000 	.word	0x400c5000

1a003608 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003608:	6803      	ldr	r3, [r0, #0]
1a00360a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00360e:	0209      	lsls	r1, r1, #8
1a003610:	b289      	uxth	r1, r1
1a003612:	4319      	orrs	r1, r3
1a003614:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003616:	6102      	str	r2, [r0, #16]
}
1a003618:	4770      	bx	lr

1a00361a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00361a:	b570      	push	{r4, r5, r6, lr}
1a00361c:	4606      	mov	r6, r0
1a00361e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003620:	f7ff ffe6 	bl	1a0035f0 <Chip_SSP_GetPeriphClockIndex>
1a003624:	f7ff fefe 	bl	1a003424 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003628:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a00362a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a00362e:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a003630:	e000      	b.n	1a003634 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003632:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a003634:	42ab      	cmp	r3, r5
1a003636:	d90b      	bls.n	1a003650 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003638:	1c4c      	adds	r4, r1, #1
1a00363a:	fb02 f304 	mul.w	r3, r2, r4
1a00363e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003642:	429d      	cmp	r5, r3
1a003644:	d2f6      	bcs.n	1a003634 <Chip_SSP_SetBitRate+0x1a>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a003646:	2cff      	cmp	r4, #255	; 0xff
1a003648:	d9f3      	bls.n	1a003632 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00364a:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a00364c:	2100      	movs	r1, #0
1a00364e:	e7f1      	b.n	1a003634 <Chip_SSP_SetBitRate+0x1a>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003650:	4630      	mov	r0, r6
1a003652:	f7ff ffd9 	bl	1a003608 <Chip_SSP_SetClockRate>
}
1a003656:	bd70      	pop	{r4, r5, r6, pc}

1a003658 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003658:	b510      	push	{r4, lr}
1a00365a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00365c:	f7ff ffbe 	bl	1a0035dc <Chip_SSP_GetClockIndex>
1a003660:	f7ff fec6 	bl	1a0033f0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003664:	4620      	mov	r0, r4
1a003666:	f7ff ffc3 	bl	1a0035f0 <Chip_SSP_GetPeriphClockIndex>
1a00366a:	f7ff fec1 	bl	1a0033f0 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00366e:	6863      	ldr	r3, [r4, #4]
1a003670:	f023 0304 	bic.w	r3, r3, #4
1a003674:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003676:	6823      	ldr	r3, [r4, #0]
1a003678:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00367c:	f043 0307 	orr.w	r3, r3, #7
1a003680:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003682:	4902      	ldr	r1, [pc, #8]	; (1a00368c <Chip_SSP_Init+0x34>)
1a003684:	4620      	mov	r0, r4
1a003686:	f7ff ffc8 	bl	1a00361a <Chip_SSP_SetBitRate>
}
1a00368a:	bd10      	pop	{r4, pc}
1a00368c:	000186a0 	.word	0x000186a0

1a003690 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003690:	2901      	cmp	r1, #1
1a003692:	d000      	beq.n	1a003696 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003694:	4770      	bx	lr
	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
		return;
	}

	stat = &iic->mXfer->status;
1a003696:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00369a:	0082      	lsls	r2, r0, #2
1a00369c:	4b03      	ldr	r3, [pc, #12]	; (1a0036ac <Chip_I2C_EventHandler+0x1c>)
1a00369e:	4413      	add	r3, r2
1a0036a0:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0036a2:	7d13      	ldrb	r3, [r2, #20]
1a0036a4:	b2db      	uxtb	r3, r3
1a0036a6:	2b04      	cmp	r3, #4
1a0036a8:	d0fb      	beq.n	1a0036a2 <Chip_I2C_EventHandler+0x12>
1a0036aa:	e7f3      	b.n	1a003694 <Chip_I2C_EventHandler+0x4>
1a0036ac:	10000014 	.word	0x10000014

1a0036b0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0036b0:	b570      	push	{r4, r5, r6, lr}
1a0036b2:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a0036b4:	4e06      	ldr	r6, [pc, #24]	; (1a0036d0 <Chip_I2C_Init+0x20>)
1a0036b6:	00c4      	lsls	r4, r0, #3
1a0036b8:	1a22      	subs	r2, r4, r0
1a0036ba:	0093      	lsls	r3, r2, #2
1a0036bc:	4433      	add	r3, r6
1a0036be:	8898      	ldrh	r0, [r3, #4]
1a0036c0:	f7ff fe96 	bl	1a0033f0 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0036c4:	1b64      	subs	r4, r4, r5
1a0036c6:	00a3      	lsls	r3, r4, #2
1a0036c8:	58f3      	ldr	r3, [r6, r3]
1a0036ca:	226c      	movs	r2, #108	; 0x6c
1a0036cc:	619a      	str	r2, [r3, #24]
}
1a0036ce:	bd70      	pop	{r4, r5, r6, pc}
1a0036d0:	10000014 	.word	0x10000014

1a0036d4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0036d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0036d8:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a0036da:	4e0b      	ldr	r6, [pc, #44]	; (1a003708 <Chip_I2C_SetClockRate+0x34>)
1a0036dc:	00c5      	lsls	r5, r0, #3
1a0036de:	1a2b      	subs	r3, r5, r0
1a0036e0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0036e4:	eb06 0308 	add.w	r3, r6, r8
1a0036e8:	8898      	ldrh	r0, [r3, #4]
1a0036ea:	f7ff fe9b 	bl	1a003424 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0036ee:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0036f2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0036f6:	0842      	lsrs	r2, r0, #1
1a0036f8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0036fa:	f856 3008 	ldr.w	r3, [r6, r8]
1a0036fe:	691a      	ldr	r2, [r3, #16]
1a003700:	1a80      	subs	r0, r0, r2
1a003702:	6158      	str	r0, [r3, #20]
}
1a003704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003708:	10000014 	.word	0x10000014

1a00370c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00370c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00370e:	4a0b      	ldr	r2, [pc, #44]	; (1a00373c <SystemInit+0x30>)
1a003710:	4b0b      	ldr	r3, [pc, #44]	; (1a003740 <SystemInit+0x34>)
1a003712:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003714:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003718:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00371a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00371e:	2b20      	cmp	r3, #32
1a003720:	d004      	beq.n	1a00372c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003722:	f7ff fa9f 	bl	1a002c64 <Board_SystemInit>
   Board_Init();
1a003726:	f7ff fa27 	bl	1a002b78 <Board_Init>
}
1a00372a:	bd08      	pop	{r3, pc}
{
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00372c:	4a04      	ldr	r2, [pc, #16]	; (1a003740 <SystemInit+0x34>)
1a00372e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003732:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003736:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00373a:	e7f2      	b.n	1a003722 <SystemInit+0x16>
1a00373c:	1a000000 	.word	0x1a000000
1a003740:	e000ed00 	.word	0xe000ed00

1a003744 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003744:	4b04      	ldr	r3, [pc, #16]	; (1a003758 <cyclesCounterInit+0x14>)
1a003746:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003748:	4a04      	ldr	r2, [pc, #16]	; (1a00375c <cyclesCounterInit+0x18>)
1a00374a:	6813      	ldr	r3, [r2, #0]
1a00374c:	f043 0301 	orr.w	r3, r3, #1
1a003750:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003752:	2001      	movs	r0, #1
1a003754:	4770      	bx	lr
1a003756:	bf00      	nop
1a003758:	1000004c 	.word	0x1000004c
1a00375c:	e0001000 	.word	0xe0001000

1a003760 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a003760:	b570      	push	{r4, r5, r6, lr}
1a003762:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003764:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003768:	0093      	lsls	r3, r2, #2
1a00376a:	4a1f      	ldr	r2, [pc, #124]	; (1a0037e8 <uartProcessIRQ+0x88>)
1a00376c:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00376e:	6975      	ldr	r5, [r6, #20]

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a003770:	b2ed      	uxtb	r5, r5
1a003772:	f015 0f01 	tst.w	r5, #1
1a003776:	d009      	beq.n	1a00378c <uartProcessIRQ+0x2c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a003778:	b920      	cbnz	r0, 1a003784 <uartProcessIRQ+0x24>
1a00377a:	4b1c      	ldr	r3, [pc, #112]	; (1a0037ec <uartProcessIRQ+0x8c>)
1a00377c:	681b      	ldr	r3, [r3, #0]
1a00377e:	b10b      	cbz	r3, 1a003784 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a003780:	2000      	movs	r0, #0
1a003782:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003784:	2c03      	cmp	r4, #3
1a003786:	d013      	beq.n	1a0037b0 <uartProcessIRQ+0x50>
         (*rxIsrCallbackUART2)(0);

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003788:	2c05      	cmp	r4, #5
1a00378a:	d018      	beq.n	1a0037be <uartProcessIRQ+0x5e>
         (*rxIsrCallbackUART3)(0);
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a00378c:	f015 0f20 	tst.w	r5, #32
1a003790:	d00d      	beq.n	1a0037ae <uartProcessIRQ+0x4e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a003792:	6873      	ldr	r3, [r6, #4]
1a003794:	f013 0f02 	tst.w	r3, #2
1a003798:	d009      	beq.n	1a0037ae <uartProcessIRQ+0x4e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a00379a:	b924      	cbnz	r4, 1a0037a6 <uartProcessIRQ+0x46>
1a00379c:	4b14      	ldr	r3, [pc, #80]	; (1a0037f0 <uartProcessIRQ+0x90>)
1a00379e:	681b      	ldr	r3, [r3, #0]
1a0037a0:	b10b      	cbz	r3, 1a0037a6 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a0037a2:	2000      	movs	r0, #0
1a0037a4:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0037a6:	2c03      	cmp	r4, #3
1a0037a8:	d010      	beq.n	1a0037cc <uartProcessIRQ+0x6c>
         (*txIsrCallbackUART2)(0);

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0037aa:	2c05      	cmp	r4, #5
1a0037ac:	d015      	beq.n	1a0037da <uartProcessIRQ+0x7a>
         (*txIsrCallbackUART3)(0);
   }
}
1a0037ae:	bd70      	pop	{r4, r5, r6, pc}
   if(status & UART_LSR_RDR) { // uartRxReady
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
         (*rxIsrCallbackUART0)(0);

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0037b0:	4b10      	ldr	r3, [pc, #64]	; (1a0037f4 <uartProcessIRQ+0x94>)
1a0037b2:	681b      	ldr	r3, [r3, #0]
1a0037b4:	2b00      	cmp	r3, #0
1a0037b6:	d0e7      	beq.n	1a003788 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a0037b8:	2000      	movs	r0, #0
1a0037ba:	4798      	blx	r3
1a0037bc:	e7e4      	b.n	1a003788 <uartProcessIRQ+0x28>

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0037be:	4b0e      	ldr	r3, [pc, #56]	; (1a0037f8 <uartProcessIRQ+0x98>)
1a0037c0:	681b      	ldr	r3, [r3, #0]
1a0037c2:	2b00      	cmp	r3, #0
1a0037c4:	d0e2      	beq.n	1a00378c <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a0037c6:	2000      	movs	r0, #0
1a0037c8:	4798      	blx	r3
1a0037ca:	e7df      	b.n	1a00378c <uartProcessIRQ+0x2c>

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
         (*txIsrCallbackUART0)(0);

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0037cc:	4b0b      	ldr	r3, [pc, #44]	; (1a0037fc <uartProcessIRQ+0x9c>)
1a0037ce:	681b      	ldr	r3, [r3, #0]
1a0037d0:	2b00      	cmp	r3, #0
1a0037d2:	d0ea      	beq.n	1a0037aa <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a0037d4:	2000      	movs	r0, #0
1a0037d6:	4798      	blx	r3
1a0037d8:	e7e7      	b.n	1a0037aa <uartProcessIRQ+0x4a>

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0037da:	4b09      	ldr	r3, [pc, #36]	; (1a003800 <uartProcessIRQ+0xa0>)
1a0037dc:	681b      	ldr	r3, [r3, #0]
1a0037de:	2b00      	cmp	r3, #0
1a0037e0:	d0e5      	beq.n	1a0037ae <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a0037e2:	2000      	movs	r0, #0
1a0037e4:	4798      	blx	r3
   }
}
1a0037e6:	e7e2      	b.n	1a0037ae <uartProcessIRQ+0x4e>
1a0037e8:	1a005158 	.word	0x1a005158
1a0037ec:	10002b08 	.word	0x10002b08
1a0037f0:	10002b14 	.word	0x10002b14
1a0037f4:	10002b0c 	.word	0x10002b0c
1a0037f8:	10002b10 	.word	0x10002b10
1a0037fc:	10002b18 	.word	0x10002b18
1a003800:	10002b1c 	.word	0x10002b1c

1a003804 <uartInterrupt>:
#ifdef SAPI_USE_INTERRUPTS

// UART Global Interrupt Enable/Disable
void uartInterrupt( uartMap_t uart, bool_t enable )
{
   if( enable ) {
1a003804:	b341      	cbz	r1, 1a003858 <uartInterrupt+0x54>
      // Interrupt Priority for UART channel
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, ma baja prioridad)
1a003806:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a00380a:	009a      	lsls	r2, r3, #2
1a00380c:	4b1e      	ldr	r3, [pc, #120]	; (1a003888 <uartInterrupt+0x84>)
1a00380e:	4413      	add	r3, r2
1a003810:	f993 300a 	ldrsb.w	r3, [r3, #10]
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
1a003814:	2b00      	cmp	r3, #0
1a003816:	db18      	blt.n	1a00384a <uartInterrupt+0x46>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003818:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a00381c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a003820:	22a0      	movs	r2, #160	; 0xa0
1a003822:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      // Enable Interrupt for UART channel
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a003826:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00382a:	0082      	lsls	r2, r0, #2
1a00382c:	4b16      	ldr	r3, [pc, #88]	; (1a003888 <uartInterrupt+0x84>)
1a00382e:	4413      	add	r3, r2
1a003830:	f993 300a 	ldrsb.w	r3, [r3, #10]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1a003834:	2b00      	cmp	r3, #0
1a003836:	db25      	blt.n	1a003884 <uartInterrupt+0x80>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003838:	f003 011f 	and.w	r1, r3, #31
1a00383c:	095b      	lsrs	r3, r3, #5
1a00383e:	2201      	movs	r2, #1
1a003840:	408a      	lsls	r2, r1
1a003842:	4912      	ldr	r1, [pc, #72]	; (1a00388c <uartInterrupt+0x88>)
1a003844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003848:	4770      	bx	lr
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00384a:	f003 030f 	and.w	r3, r3, #15
1a00384e:	4a10      	ldr	r2, [pc, #64]	; (1a003890 <uartInterrupt+0x8c>)
1a003850:	441a      	add	r2, r3
1a003852:	23a0      	movs	r3, #160	; 0xa0
1a003854:	7613      	strb	r3, [r2, #24]
1a003856:	e7e6      	b.n	1a003826 <uartInterrupt+0x22>
   } else {
      // Disable Interrupt for UART channel
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a003858:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00385c:	0082      	lsls	r2, r0, #2
1a00385e:	4b0a      	ldr	r3, [pc, #40]	; (1a003888 <uartInterrupt+0x84>)
1a003860:	4413      	add	r3, r2
1a003862:	f993 300a 	ldrsb.w	r3, [r3, #10]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1a003866:	2b00      	cmp	r3, #0
1a003868:	db0c      	blt.n	1a003884 <uartInterrupt+0x80>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00386a:	f003 011f 	and.w	r1, r3, #31
1a00386e:	095b      	lsrs	r3, r3, #5
1a003870:	2201      	movs	r2, #1
1a003872:	408a      	lsls	r2, r1
1a003874:	3320      	adds	r3, #32
1a003876:	4905      	ldr	r1, [pc, #20]	; (1a00388c <uartInterrupt+0x88>)
1a003878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a00387c:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
1a003880:	f3bf 8f6f 	isb	sy
   }
}
1a003884:	4770      	bx	lr
1a003886:	bf00      	nop
1a003888:	1a005158 	.word	0x1a005158
1a00388c:	e000e100 	.word	0xe000e100
1a003890:	e000ecfc 	.word	0xe000ecfc

1a003894 <uartCallbackSet>:
void uartCallbackSet( uartMap_t uart, uartEvents_t event, 
                      callBackFuncPtr_t callbackFunc, void* callbackParam )
{   
   uint32_t intMask;

   switch(event){
1a003894:	b111      	cbz	r1, 1a00389c <uartCallbackSet+0x8>
1a003896:	2901      	cmp	r1, #1
1a003898:	d01d      	beq.n	1a0038d6 <uartCallbackSet+0x42>
1a00389a:	4770      	bx	lr
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
         
         if( callbackFunc != 0 ) {
1a00389c:	b182      	cbz	r2, 1a0038c0 <uartCallbackSet+0x2c>
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a00389e:	2801      	cmp	r0, #1
1a0038a0:	d90f      	bls.n	1a0038c2 <uartCallbackSet+0x2e>
               rxIsrCallbackUART0 = callbackFunc;
               rxIsrCallbackUART0Params = callbackParam;
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0038a2:	1ec3      	subs	r3, r0, #3
1a0038a4:	b2db      	uxtb	r3, r3
1a0038a6:	2b01      	cmp	r3, #1
1a0038a8:	d90e      	bls.n	1a0038c8 <uartCallbackSet+0x34>
               rxIsrCallbackUART2 = callbackFunc;
               rxIsrCallbackUART2Params = callbackParam;
            }            
            if( uart == UART_232 ){
1a0038aa:	2805      	cmp	r0, #5
1a0038ac:	d00f      	beq.n	1a0038ce <uartCallbackSet+0x3a>
         // Enable UART Receiver Buffer Register Interrupt
         //intMask = UART_IER_RBRINT;
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0038ae:	2305      	movs	r3, #5
      default:
         return;
   }

   // Enable UART Interrupt
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a0038b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0038b4:	0082      	lsls	r2, r0, #2
1a0038b6:	4913      	ldr	r1, [pc, #76]	; (1a003904 <uartCallbackSet+0x70>)
1a0038b8:	588a      	ldr	r2, [r1, r2]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a0038ba:	6851      	ldr	r1, [r2, #4]
1a0038bc:	430b      	orrs	r3, r1
1a0038be:	6053      	str	r3, [r2, #4]
}
1a0038c0:	4770      	bx	lr
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
         
         if( callbackFunc != 0 ) {
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
               rxIsrCallbackUART0 = callbackFunc;
1a0038c2:	4b11      	ldr	r3, [pc, #68]	; (1a003908 <uartCallbackSet+0x74>)
1a0038c4:	601a      	str	r2, [r3, #0]
1a0038c6:	e7ec      	b.n	1a0038a2 <uartCallbackSet+0xe>
               rxIsrCallbackUART0Params = callbackParam;
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
               rxIsrCallbackUART2 = callbackFunc;
1a0038c8:	4b10      	ldr	r3, [pc, #64]	; (1a00390c <uartCallbackSet+0x78>)
1a0038ca:	601a      	str	r2, [r3, #0]
1a0038cc:	e7ed      	b.n	1a0038aa <uartCallbackSet+0x16>
               rxIsrCallbackUART2Params = callbackParam;
            }            
            if( uart == UART_232 ){
               rxIsrCallbackUART3 = callbackFunc;
1a0038ce:	4b10      	ldr	r3, [pc, #64]	; (1a003910 <uartCallbackSet+0x7c>)
1a0038d0:	601a      	str	r2, [r3, #0]
         // Enable UART Receiver Buffer Register Interrupt
         //intMask = UART_IER_RBRINT;
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0038d2:	2305      	movs	r3, #5
1a0038d4:	e7ec      	b.n	1a0038b0 <uartCallbackSet+0x1c>

      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;

         if( callbackFunc != 0 ) {
1a0038d6:	2a00      	cmp	r2, #0
1a0038d8:	d0f2      	beq.n	1a0038c0 <uartCallbackSet+0x2c>
            
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0038da:	2801      	cmp	r0, #1
1a0038dc:	d907      	bls.n	1a0038ee <uartCallbackSet+0x5a>
               txIsrCallbackUART0 = callbackFunc;
               txIsrCallbackUART0Params = callbackParam;
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0038de:	1ec3      	subs	r3, r0, #3
1a0038e0:	b2db      	uxtb	r3, r3
1a0038e2:	2b01      	cmp	r3, #1
1a0038e4:	d906      	bls.n	1a0038f4 <uartCallbackSet+0x60>
               txIsrCallbackUART2 = callbackFunc;
               txIsrCallbackUART2Params = callbackParam;
            }            
            if( uart == UART_232 ){
1a0038e6:	2805      	cmp	r0, #5
1a0038e8:	d007      	beq.n	1a0038fa <uartCallbackSet+0x66>
         }
      break;

      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;
1a0038ea:	2302      	movs	r3, #2
1a0038ec:	e7e0      	b.n	1a0038b0 <uartCallbackSet+0x1c>

         if( callbackFunc != 0 ) {
            
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
               txIsrCallbackUART0 = callbackFunc;
1a0038ee:	4b09      	ldr	r3, [pc, #36]	; (1a003914 <uartCallbackSet+0x80>)
1a0038f0:	601a      	str	r2, [r3, #0]
1a0038f2:	e7f4      	b.n	1a0038de <uartCallbackSet+0x4a>
               txIsrCallbackUART0Params = callbackParam;
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
               txIsrCallbackUART2 = callbackFunc;
1a0038f4:	4b08      	ldr	r3, [pc, #32]	; (1a003918 <uartCallbackSet+0x84>)
1a0038f6:	601a      	str	r2, [r3, #0]
1a0038f8:	e7f5      	b.n	1a0038e6 <uartCallbackSet+0x52>
               txIsrCallbackUART2Params = callbackParam;
            }            
            if( uart == UART_232 ){
               txIsrCallbackUART3 = callbackFunc;
1a0038fa:	4b08      	ldr	r3, [pc, #32]	; (1a00391c <uartCallbackSet+0x88>)
1a0038fc:	601a      	str	r2, [r3, #0]
         }
      break;

      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;
1a0038fe:	2302      	movs	r3, #2
1a003900:	e7d6      	b.n	1a0038b0 <uartCallbackSet+0x1c>
1a003902:	bf00      	nop
1a003904:	1a005158 	.word	0x1a005158
1a003908:	10002b08 	.word	0x10002b08
1a00390c:	10002b0c 	.word	0x10002b0c
1a003910:	10002b10 	.word	0x10002b10
1a003914:	10002b14 	.word	0x10002b14
1a003918:	10002b18 	.word	0x10002b18
1a00391c:	10002b1c 	.word	0x10002b1c

1a003920 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003920:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003924:	0083      	lsls	r3, r0, #2
1a003926:	4a03      	ldr	r2, [pc, #12]	; (1a003934 <uartTxReady+0x14>)
1a003928:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00392a:	6958      	ldr	r0, [r3, #20]
}
1a00392c:	f000 0020 	and.w	r0, r0, #32
1a003930:	4770      	bx	lr
1a003932:	bf00      	nop
1a003934:	1a005158 	.word	0x1a005158

1a003938 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a003938:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00393c:	0083      	lsls	r3, r0, #2
1a00393e:	4a02      	ldr	r2, [pc, #8]	; (1a003948 <uartRxRead+0x10>)
1a003940:	58d3      	ldr	r3, [r2, r3]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003942:	6818      	ldr	r0, [r3, #0]
}
1a003944:	b2c0      	uxtb	r0, r0
1a003946:	4770      	bx	lr
1a003948:	1a005158 	.word	0x1a005158

1a00394c <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a00394c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003950:	0083      	lsls	r3, r0, #2
1a003952:	4a02      	ldr	r2, [pc, #8]	; (1a00395c <uartTxWrite+0x10>)
1a003954:	58d3      	ldr	r3, [r2, r3]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a003956:	6019      	str	r1, [r3, #0]
}
1a003958:	4770      	bx	lr
1a00395a:	bf00      	nop
1a00395c:	1a005158 	.word	0x1a005158

1a003960 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a003960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003964:	4680      	mov	r8, r0
1a003966:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003968:	4c19      	ldr	r4, [pc, #100]	; (1a0039d0 <uartInit+0x70>)
1a00396a:	0045      	lsls	r5, r0, #1
1a00396c:	182a      	adds	r2, r5, r0
1a00396e:	0093      	lsls	r3, r2, #2
1a003970:	18e6      	adds	r6, r4, r3
1a003972:	58e7      	ldr	r7, [r4, r3]
1a003974:	4638      	mov	r0, r7
1a003976:	f7ff f991 	bl	1a002c9c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00397a:	4649      	mov	r1, r9
1a00397c:	4638      	mov	r0, r7
1a00397e:	f7ff f9b7 	bl	1a002cf0 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a003982:	2307      	movs	r3, #7
1a003984:	60bb      	str	r3, [r7, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003986:	683b      	ldr	r3, [r7, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a003988:	2301      	movs	r3, #1
1a00398a:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00398c:	7930      	ldrb	r0, [r6, #4]
1a00398e:	7973      	ldrb	r3, [r6, #5]
1a003990:	79b2      	ldrb	r2, [r6, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003992:	f042 0218 	orr.w	r2, r2, #24
1a003996:	490f      	ldr	r1, [pc, #60]	; (1a0039d4 <uartInit+0x74>)
1a003998:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00399c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0039a0:	79f0      	ldrb	r0, [r6, #7]
1a0039a2:	7a33      	ldrb	r3, [r6, #8]
1a0039a4:	7a72      	ldrb	r2, [r6, #9]
1a0039a6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0039aa:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0039b2:	f1b8 0f01 	cmp.w	r8, #1
1a0039b6:	d001      	beq.n	1a0039bc <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0039b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0039bc:	4a06      	ldr	r2, [pc, #24]	; (1a0039d8 <uartInit+0x78>)
1a0039be:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0039c0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0039c4:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0039c6:	221a      	movs	r2, #26
1a0039c8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0039cc:	e7f4      	b.n	1a0039b8 <uartInit+0x58>
1a0039ce:	bf00      	nop
1a0039d0:	1a005158 	.word	0x1a005158
1a0039d4:	40086000 	.word	0x40086000
1a0039d8:	40081000 	.word	0x40081000

1a0039dc <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0039dc:	b538      	push	{r3, r4, r5, lr}
1a0039de:	4604      	mov	r4, r0
1a0039e0:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0039e2:	4620      	mov	r0, r4
1a0039e4:	f7ff ff9c 	bl	1a003920 <uartTxReady>
1a0039e8:	2800      	cmp	r0, #0
1a0039ea:	d0fa      	beq.n	1a0039e2 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a0039ec:	4629      	mov	r1, r5
1a0039ee:	4620      	mov	r0, r4
1a0039f0:	f7ff ffac 	bl	1a00394c <uartTxWrite>
}
1a0039f4:	bd38      	pop	{r3, r4, r5, pc}

1a0039f6 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0039f6:	b538      	push	{r3, r4, r5, lr}
1a0039f8:	4605      	mov	r5, r0
1a0039fa:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0039fc:	e003      	b.n	1a003a06 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0039fe:	4628      	mov	r0, r5
1a003a00:	f7ff ffec 	bl	1a0039dc <uartWriteByte>
      str++;
1a003a04:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a003a06:	7821      	ldrb	r1, [r4, #0]
1a003a08:	2900      	cmp	r1, #0
1a003a0a:	d1f8      	bne.n	1a0039fe <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a003a0c:	bd38      	pop	{r3, r4, r5, pc}

1a003a0e <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a003a0e:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a003a10:	2003      	movs	r0, #3
1a003a12:	f7ff fea5 	bl	1a003760 <uartProcessIRQ>
}
1a003a16:	bd08      	pop	{r3, pc}

1a003a18 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a003a18:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a003a1a:	2005      	movs	r0, #5
1a003a1c:	f7ff fea0 	bl	1a003760 <uartProcessIRQ>
}
1a003a20:	bd08      	pop	{r3, pc}
1a003a22:	Address 0x000000001a003a22 is out of bounds.


1a003a24 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a003a24:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a003a28:	4908      	ldr	r1, [pc, #32]	; (1a003a4c <tickerCallback+0x28>)
1a003a2a:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003a2e:	f112 0b01 	adds.w	fp, r2, #1
1a003a32:	f143 0c00 	adc.w	ip, r3, #0
1a003a36:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003a3a:	4b05      	ldr	r3, [pc, #20]	; (1a003a50 <tickerCallback+0x2c>)
1a003a3c:	681b      	ldr	r3, [r3, #0]
1a003a3e:	b113      	cbz	r3, 1a003a46 <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a003a40:	4a04      	ldr	r2, [pc, #16]	; (1a003a54 <tickerCallback+0x30>)
1a003a42:	6810      	ldr	r0, [r2, #0]
1a003a44:	4798      	blx	r3
   }
}
1a003a46:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a003a4a:	bf00      	nop
1a003a4c:	10002b28 	.word	0x10002b28
1a003a50:	10002b30 	.word	0x10002b30
1a003a54:	10002b20 	.word	0x10002b20

1a003a58 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a003a58:	b510      	push	{r4, lr}
1a003a5a:	b082      	sub	sp, #8
      }
      return ret_val;
   #else
      #ifdef USE_FREERTOS
         static StaticTimer_t tickerObject;
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a003a5c:	4b0e      	ldr	r3, [pc, #56]	; (1a003a98 <tickInit+0x40>)
1a003a5e:	9301      	str	r3, [sp, #4]
1a003a60:	4b0e      	ldr	r3, [pc, #56]	; (1a003a9c <tickInit+0x44>)
1a003a62:	9300      	str	r3, [sp, #0]
1a003a64:	2300      	movs	r3, #0
1a003a66:	2201      	movs	r2, #1
1a003a68:	4601      	mov	r1, r0
1a003a6a:	480d      	ldr	r0, [pc, #52]	; (1a003aa0 <tickInit+0x48>)
1a003a6c:	f7fe fc52 	bl	1a002314 <xTimerCreateStatic>
                                               pdTRUE,
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
1a003a70:	b178      	cbz	r0, 1a003a92 <tickInit+0x3a>
1a003a72:	4604      	mov	r4, r0
            return 0;
         return xTimerStart(h, 0) == pdPASS;
1a003a74:	f7fd fece 	bl	1a001814 <xTaskGetTickCount>
1a003a78:	2300      	movs	r3, #0
1a003a7a:	9300      	str	r3, [sp, #0]
1a003a7c:	4602      	mov	r2, r0
1a003a7e:	2101      	movs	r1, #1
1a003a80:	4620      	mov	r0, r4
1a003a82:	f7fe fc6d 	bl	1a002360 <xTimerGenericCommand>
1a003a86:	2801      	cmp	r0, #1
1a003a88:	bf14      	ite	ne
1a003a8a:	2000      	movne	r0, #0
1a003a8c:	2001      	moveq	r0, #1
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a003a8e:	b002      	add	sp, #8
1a003a90:	bd10      	pop	{r4, pc}
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
            return 0;
1a003a92:	2000      	movs	r0, #0
1a003a94:	e7fb      	b.n	1a003a8e <tickInit+0x36>
1a003a96:	bf00      	nop
1a003a98:	10002b34 	.word	0x10002b34
1a003a9c:	1a003a25 	.word	0x1a003a25
1a003aa0:	1a0051a0 	.word	0x1a0051a0

1a003aa4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003aa4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003aa6:	4d0b      	ldr	r5, [pc, #44]	; (1a003ad4 <gpioObtainPinInit+0x30>)
1a003aa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003aac:	182c      	adds	r4, r5, r0
1a003aae:	5628      	ldrsb	r0, [r5, r0]
1a003ab0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003ab2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003ab6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003ab8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003abc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003abe:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003ac2:	9b02      	ldr	r3, [sp, #8]
1a003ac4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003ac6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003aca:	9b03      	ldr	r3, [sp, #12]
1a003acc:	701a      	strb	r2, [r3, #0]
}
1a003ace:	bc30      	pop	{r4, r5}
1a003ad0:	4770      	bx	lr
1a003ad2:	bf00      	nop
1a003ad4:	1a0051ac 	.word	0x1a0051ac

1a003ad8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a003ad8:	b570      	push	{r4, r5, r6, lr}
1a003ada:	b084      	sub	sp, #16
1a003adc:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003ade:	2300      	movs	r3, #0
1a003ae0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003ae4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003ae8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003aec:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003af0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003af4:	f10d 030b 	add.w	r3, sp, #11
1a003af8:	9301      	str	r3, [sp, #4]
1a003afa:	ab03      	add	r3, sp, #12
1a003afc:	9300      	str	r3, [sp, #0]
1a003afe:	f10d 030d 	add.w	r3, sp, #13
1a003b02:	f10d 020e 	add.w	r2, sp, #14
1a003b06:	f10d 010f 	add.w	r1, sp, #15
1a003b0a:	f7ff ffcb 	bl	1a003aa4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003b0e:	2c05      	cmp	r4, #5
1a003b10:	f200 80a5 	bhi.w	1a003c5e <gpioInit+0x186>
1a003b14:	e8df f004 	tbb	[pc, r4]
1a003b18:	45278109 	.word	0x45278109
1a003b1c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003b1e:	4851      	ldr	r0, [pc, #324]	; (1a003c64 <gpioInit+0x18c>)
1a003b20:	f7ff fd5a 	bl	1a0035d8 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a003b24:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003b26:	b004      	add	sp, #16
1a003b28:	bd70      	pop	{r4, r5, r6, pc}
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a003b2a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003b2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003b32:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003b36:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003b3a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003b3e:	494a      	ldr	r1, [pc, #296]	; (1a003c68 <gpioInit+0x190>)
1a003b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003b44:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003b48:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003b4c:	2001      	movs	r0, #1
1a003b4e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003b52:	4c44      	ldr	r4, [pc, #272]	; (1a003c64 <gpioInit+0x18c>)
1a003b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003b58:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003b5c:	ea22 0201 	bic.w	r2, r2, r1
1a003b60:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003b64:	e7df      	b.n	1a003b26 <gpioInit+0x4e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a003b66:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003b6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003b6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003b72:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003b76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003b7a:	493b      	ldr	r1, [pc, #236]	; (1a003c68 <gpioInit+0x190>)
1a003b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003b80:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003b84:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003b88:	2001      	movs	r0, #1
1a003b8a:	fa00 f102 	lsl.w	r1, r0, r2
1a003b8e:	4c35      	ldr	r4, [pc, #212]	; (1a003c64 <gpioInit+0x18c>)
1a003b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003b94:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003b98:	ea22 0201 	bic.w	r2, r2, r1
1a003b9c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003ba0:	e7c1      	b.n	1a003b26 <gpioInit+0x4e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a003ba2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003ba6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003baa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003bae:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003bb2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003bb6:	492c      	ldr	r1, [pc, #176]	; (1a003c68 <gpioInit+0x190>)
1a003bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003bbc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003bc0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003bc4:	2001      	movs	r0, #1
1a003bc6:	fa00 f102 	lsl.w	r1, r0, r2
1a003bca:	4c26      	ldr	r4, [pc, #152]	; (1a003c64 <gpioInit+0x18c>)
1a003bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003bd0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003bd4:	ea22 0201 	bic.w	r2, r2, r1
1a003bd8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003bdc:	e7a3      	b.n	1a003b26 <gpioInit+0x4e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a003bde:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003be2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003be6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003bea:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003bee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003bf2:	491d      	ldr	r1, [pc, #116]	; (1a003c68 <gpioInit+0x190>)
1a003bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003bf8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003bfc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003c00:	2001      	movs	r0, #1
1a003c02:	fa00 f102 	lsl.w	r1, r0, r2
1a003c06:	4c17      	ldr	r4, [pc, #92]	; (1a003c64 <gpioInit+0x18c>)
1a003c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003c0c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003c10:	ea22 0201 	bic.w	r2, r2, r1
1a003c14:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003c18:	e785      	b.n	1a003b26 <gpioInit+0x4e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a003c1a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003c1e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003c22:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003c26:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003c2a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003c2e:	490e      	ldr	r1, [pc, #56]	; (1a003c68 <gpioInit+0x190>)
1a003c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003c34:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003c38:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003c3c:	2001      	movs	r0, #1
1a003c3e:	fa00 f102 	lsl.w	r1, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a003c42:	4b08      	ldr	r3, [pc, #32]	; (1a003c64 <gpioInit+0x18c>)
1a003c44:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003c48:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003c4c:	4331      	orrs	r1, r6
1a003c4e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003c52:	b2d2      	uxtb	r2, r2
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a003c54:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003c58:	2100      	movs	r1, #0
1a003c5a:	5499      	strb	r1, [r3, r2]
1a003c5c:	e763      	b.n	1a003b26 <gpioInit+0x4e>
      break;

   default:
      ret_val = 0;
1a003c5e:	2000      	movs	r0, #0
1a003c60:	e761      	b.n	1a003b26 <gpioInit+0x4e>
1a003c62:	bf00      	nop
1a003c64:	400f4000 	.word	0x400f4000
1a003c68:	40086000 	.word	0x40086000

1a003c6c <gpioWrite>:

}


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003c6c:	b510      	push	{r4, lr}
1a003c6e:	b084      	sub	sp, #16
1a003c70:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003c72:	2300      	movs	r3, #0
1a003c74:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003c78:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003c7c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003c80:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003c84:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003c88:	f10d 030b 	add.w	r3, sp, #11
1a003c8c:	9301      	str	r3, [sp, #4]
1a003c8e:	ab03      	add	r3, sp, #12
1a003c90:	9300      	str	r3, [sp, #0]
1a003c92:	f10d 030d 	add.w	r3, sp, #13
1a003c96:	f10d 020e 	add.w	r2, sp, #14
1a003c9a:	f10d 010f 	add.w	r1, sp, #15
1a003c9e:	f7ff ff01 	bl	1a003aa4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003ca2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003ca6:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003caa:	3400      	adds	r4, #0
1a003cac:	bf18      	it	ne
1a003cae:	2401      	movne	r4, #1
1a003cb0:	015b      	lsls	r3, r3, #5
1a003cb2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003cb6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003cba:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a003cbc:	2001      	movs	r0, #1
1a003cbe:	b004      	add	sp, #16
1a003cc0:	bd10      	pop	{r4, pc}

1a003cc2 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a003cc2:	b500      	push	{lr}
1a003cc4:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a003cc6:	2300      	movs	r3, #0
1a003cc8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003ccc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003cd0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003cd4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003cd8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003cdc:	f10d 030b 	add.w	r3, sp, #11
1a003ce0:	9301      	str	r3, [sp, #4]
1a003ce2:	ab03      	add	r3, sp, #12
1a003ce4:	9300      	str	r3, [sp, #0]
1a003ce6:	f10d 030d 	add.w	r3, sp, #13
1a003cea:	f10d 020e 	add.w	r2, sp, #14
1a003cee:	f10d 010f 	add.w	r1, sp, #15
1a003cf2:	f7ff fed7 	bl	1a003aa4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a003cf6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003cfa:	f89d 200b 	ldrb.w	r2, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a003cfe:	015b      	lsls	r3, r3, #5
1a003d00:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003d04:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003d08:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a003d0a:	3000      	adds	r0, #0
1a003d0c:	bf18      	it	ne
1a003d0e:	2001      	movne	r0, #1
1a003d10:	b005      	add	sp, #20
1a003d12:	f85d fb04 	ldr.w	pc, [sp], #4

1a003d16 <gpioToggle>:
   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin )
{
1a003d16:	b510      	push	{r4, lr}
1a003d18:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a003d1a:	f7ff ffd2 	bl	1a003cc2 <gpioRead>
1a003d1e:	fab0 f180 	clz	r1, r0
1a003d22:	0949      	lsrs	r1, r1, #5
1a003d24:	4620      	mov	r0, r4
1a003d26:	f7ff ffa1 	bl	1a003c6c <gpioWrite>
}
1a003d2a:	bd10      	pop	{r4, pc}

1a003d2c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003d2c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003d2e:	4b04      	ldr	r3, [pc, #16]	; (1a003d40 <USB0_IRQHandler+0x14>)
1a003d30:	681b      	ldr	r3, [r3, #0]
1a003d32:	681b      	ldr	r3, [r3, #0]
1a003d34:	68db      	ldr	r3, [r3, #12]
1a003d36:	4a03      	ldr	r2, [pc, #12]	; (1a003d44 <USB0_IRQHandler+0x18>)
1a003d38:	6810      	ldr	r0, [r2, #0]
1a003d3a:	4798      	blx	r3
}
1a003d3c:	bd08      	pop	{r3, pc}
1a003d3e:	bf00      	nop
1a003d40:	10002c54 	.word	0x10002c54
1a003d44:	10002b64 	.word	0x10002b64

1a003d48 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003d48:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003d4a:	f7ff fb91 	bl	1a003470 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003d4e:	4b3a      	ldr	r3, [pc, #232]	; (1a003e38 <boardInit+0xf0>)
1a003d50:	6818      	ldr	r0, [r3, #0]
1a003d52:	f7ff fcf7 	bl	1a003744 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a003d56:	2001      	movs	r0, #1
1a003d58:	2100      	movs	r1, #0
1a003d5a:	f7ff fe7d 	bl	1a003a58 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a003d5e:	2105      	movs	r1, #5
1a003d60:	2000      	movs	r0, #0
1a003d62:	f7ff feb9 	bl	1a003ad8 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a003d66:	2100      	movs	r1, #0
1a003d68:	2026      	movs	r0, #38	; 0x26
1a003d6a:	f7ff feb5 	bl	1a003ad8 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a003d6e:	2100      	movs	r1, #0
1a003d70:	2027      	movs	r0, #39	; 0x27
1a003d72:	f7ff feb1 	bl	1a003ad8 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a003d76:	2100      	movs	r1, #0
1a003d78:	2028      	movs	r0, #40	; 0x28
1a003d7a:	f7ff fead 	bl	1a003ad8 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a003d7e:	2100      	movs	r1, #0
1a003d80:	2029      	movs	r0, #41	; 0x29
1a003d82:	f7ff fea9 	bl	1a003ad8 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a003d86:	2101      	movs	r1, #1
1a003d88:	202a      	movs	r0, #42	; 0x2a
1a003d8a:	f7ff fea5 	bl	1a003ad8 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a003d8e:	2101      	movs	r1, #1
1a003d90:	202b      	movs	r0, #43	; 0x2b
1a003d92:	f7ff fea1 	bl	1a003ad8 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a003d96:	2101      	movs	r1, #1
1a003d98:	202c      	movs	r0, #44	; 0x2c
1a003d9a:	f7ff fe9d 	bl	1a003ad8 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a003d9e:	2101      	movs	r1, #1
1a003da0:	202d      	movs	r0, #45	; 0x2d
1a003da2:	f7ff fe99 	bl	1a003ad8 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a003da6:	2101      	movs	r1, #1
1a003da8:	202e      	movs	r0, #46	; 0x2e
1a003daa:	f7ff fe95 	bl	1a003ad8 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a003dae:	2101      	movs	r1, #1
1a003db0:	202f      	movs	r0, #47	; 0x2f
1a003db2:	f7ff fe91 	bl	1a003ad8 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a003db6:	2100      	movs	r1, #0
1a003db8:	2030      	movs	r0, #48	; 0x30
1a003dba:	f7ff fe8d 	bl	1a003ad8 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a003dbe:	2100      	movs	r1, #0
1a003dc0:	2031      	movs	r0, #49	; 0x31
1a003dc2:	f7ff fe89 	bl	1a003ad8 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a003dc6:	2100      	movs	r1, #0
1a003dc8:	2032      	movs	r0, #50	; 0x32
1a003dca:	f7ff fe85 	bl	1a003ad8 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a003dce:	2100      	movs	r1, #0
1a003dd0:	2033      	movs	r0, #51	; 0x33
1a003dd2:	f7ff fe81 	bl	1a003ad8 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a003dd6:	2100      	movs	r1, #0
1a003dd8:	2034      	movs	r0, #52	; 0x34
1a003dda:	f7ff fe7d 	bl	1a003ad8 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a003dde:	2100      	movs	r1, #0
1a003de0:	2035      	movs	r0, #53	; 0x35
1a003de2:	f7ff fe79 	bl	1a003ad8 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a003de6:	2100      	movs	r1, #0
1a003de8:	2036      	movs	r0, #54	; 0x36
1a003dea:	f7ff fe75 	bl	1a003ad8 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a003dee:	2100      	movs	r1, #0
1a003df0:	2037      	movs	r0, #55	; 0x37
1a003df2:	f7ff fe71 	bl	1a003ad8 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a003df6:	2101      	movs	r1, #1
1a003df8:	2038      	movs	r0, #56	; 0x38
1a003dfa:	f7ff fe6d 	bl	1a003ad8 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a003dfe:	2101      	movs	r1, #1
1a003e00:	2039      	movs	r0, #57	; 0x39
1a003e02:	f7ff fe69 	bl	1a003ad8 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a003e06:	2101      	movs	r1, #1
1a003e08:	203a      	movs	r0, #58	; 0x3a
1a003e0a:	f7ff fe65 	bl	1a003ad8 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a003e0e:	2101      	movs	r1, #1
1a003e10:	203b      	movs	r0, #59	; 0x3b
1a003e12:	f7ff fe61 	bl	1a003ad8 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a003e16:	2101      	movs	r1, #1
1a003e18:	203c      	movs	r0, #60	; 0x3c
1a003e1a:	f7ff fe5d 	bl	1a003ad8 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a003e1e:	2101      	movs	r1, #1
1a003e20:	203d      	movs	r0, #61	; 0x3d
1a003e22:	f7ff fe59 	bl	1a003ad8 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a003e26:	2101      	movs	r1, #1
1a003e28:	203e      	movs	r0, #62	; 0x3e
1a003e2a:	f7ff fe55 	bl	1a003ad8 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a003e2e:	2101      	movs	r1, #1
1a003e30:	203f      	movs	r0, #63	; 0x3f
1a003e32:	f7ff fe51 	bl	1a003ad8 <gpioInit>

}
1a003e36:	bd08      	pop	{r3, pc}
1a003e38:	10002c50 	.word	0x10002c50

1a003e3c <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a003e3c:	b508      	push	{r3, lr}
1a003e3e:	460b      	mov	r3, r1
   *printer = uart;
1a003e40:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a003e42:	4611      	mov	r1, r2
1a003e44:	4618      	mov	r0, r3
1a003e46:	f7ff fd8b 	bl	1a003960 <uartInit>
}
1a003e4a:	bd08      	pop	{r3, pc}

1a003e4c <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a003e4c:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a003e4e:	f7ff fdd2 	bl	1a0039f6 <uartWriteString>
}
1a003e52:	bd08      	pop	{r3, pc}

1a003e54 <printEnter>:

void printEnter( print_t printer )
{
1a003e54:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a003e56:	4902      	ldr	r1, [pc, #8]	; (1a003e60 <printEnter+0xc>)
1a003e58:	f7ff fdcd 	bl	1a0039f6 <uartWriteString>
}
1a003e5c:	bd08      	pop	{r3, pc}
1a003e5e:	bf00      	nop
1a003e60:	1a004fc4 	.word	0x1a004fc4

1a003e64 <__aeabi_uldivmod>:
1a003e64:	b953      	cbnz	r3, 1a003e7c <__aeabi_uldivmod+0x18>
1a003e66:	b94a      	cbnz	r2, 1a003e7c <__aeabi_uldivmod+0x18>
1a003e68:	2900      	cmp	r1, #0
1a003e6a:	bf08      	it	eq
1a003e6c:	2800      	cmpeq	r0, #0
1a003e6e:	bf1c      	itt	ne
1a003e70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003e74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003e78:	f000 b972 	b.w	1a004160 <__aeabi_idiv0>
1a003e7c:	f1ad 0c08 	sub.w	ip, sp, #8
1a003e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003e84:	f000 f806 	bl	1a003e94 <__udivmoddi4>
1a003e88:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003e90:	b004      	add	sp, #16
1a003e92:	4770      	bx	lr

1a003e94 <__udivmoddi4>:
1a003e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003e98:	9e08      	ldr	r6, [sp, #32]
1a003e9a:	4604      	mov	r4, r0
1a003e9c:	4688      	mov	r8, r1
1a003e9e:	2b00      	cmp	r3, #0
1a003ea0:	d14b      	bne.n	1a003f3a <__udivmoddi4+0xa6>
1a003ea2:	428a      	cmp	r2, r1
1a003ea4:	4615      	mov	r5, r2
1a003ea6:	d967      	bls.n	1a003f78 <__udivmoddi4+0xe4>
1a003ea8:	fab2 f282 	clz	r2, r2
1a003eac:	b14a      	cbz	r2, 1a003ec2 <__udivmoddi4+0x2e>
1a003eae:	f1c2 0720 	rsb	r7, r2, #32
1a003eb2:	fa01 f302 	lsl.w	r3, r1, r2
1a003eb6:	fa20 f707 	lsr.w	r7, r0, r7
1a003eba:	4095      	lsls	r5, r2
1a003ebc:	ea47 0803 	orr.w	r8, r7, r3
1a003ec0:	4094      	lsls	r4, r2
1a003ec2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003ec6:	0c23      	lsrs	r3, r4, #16
1a003ec8:	fbb8 f7fe 	udiv	r7, r8, lr
1a003ecc:	fa1f fc85 	uxth.w	ip, r5
1a003ed0:	fb0e 8817 	mls	r8, lr, r7, r8
1a003ed4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003ed8:	fb07 f10c 	mul.w	r1, r7, ip
1a003edc:	4299      	cmp	r1, r3
1a003ede:	d909      	bls.n	1a003ef4 <__udivmoddi4+0x60>
1a003ee0:	18eb      	adds	r3, r5, r3
1a003ee2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003ee6:	f080 811b 	bcs.w	1a004120 <__udivmoddi4+0x28c>
1a003eea:	4299      	cmp	r1, r3
1a003eec:	f240 8118 	bls.w	1a004120 <__udivmoddi4+0x28c>
1a003ef0:	3f02      	subs	r7, #2
1a003ef2:	442b      	add	r3, r5
1a003ef4:	1a5b      	subs	r3, r3, r1
1a003ef6:	b2a4      	uxth	r4, r4
1a003ef8:	fbb3 f0fe 	udiv	r0, r3, lr
1a003efc:	fb0e 3310 	mls	r3, lr, r0, r3
1a003f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003f04:	fb00 fc0c 	mul.w	ip, r0, ip
1a003f08:	45a4      	cmp	ip, r4
1a003f0a:	d909      	bls.n	1a003f20 <__udivmoddi4+0x8c>
1a003f0c:	192c      	adds	r4, r5, r4
1a003f0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003f12:	f080 8107 	bcs.w	1a004124 <__udivmoddi4+0x290>
1a003f16:	45a4      	cmp	ip, r4
1a003f18:	f240 8104 	bls.w	1a004124 <__udivmoddi4+0x290>
1a003f1c:	3802      	subs	r0, #2
1a003f1e:	442c      	add	r4, r5
1a003f20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003f24:	eba4 040c 	sub.w	r4, r4, ip
1a003f28:	2700      	movs	r7, #0
1a003f2a:	b11e      	cbz	r6, 1a003f34 <__udivmoddi4+0xa0>
1a003f2c:	40d4      	lsrs	r4, r2
1a003f2e:	2300      	movs	r3, #0
1a003f30:	e9c6 4300 	strd	r4, r3, [r6]
1a003f34:	4639      	mov	r1, r7
1a003f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003f3a:	428b      	cmp	r3, r1
1a003f3c:	d909      	bls.n	1a003f52 <__udivmoddi4+0xbe>
1a003f3e:	2e00      	cmp	r6, #0
1a003f40:	f000 80eb 	beq.w	1a00411a <__udivmoddi4+0x286>
1a003f44:	2700      	movs	r7, #0
1a003f46:	e9c6 0100 	strd	r0, r1, [r6]
1a003f4a:	4638      	mov	r0, r7
1a003f4c:	4639      	mov	r1, r7
1a003f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003f52:	fab3 f783 	clz	r7, r3
1a003f56:	2f00      	cmp	r7, #0
1a003f58:	d147      	bne.n	1a003fea <__udivmoddi4+0x156>
1a003f5a:	428b      	cmp	r3, r1
1a003f5c:	d302      	bcc.n	1a003f64 <__udivmoddi4+0xd0>
1a003f5e:	4282      	cmp	r2, r0
1a003f60:	f200 80fa 	bhi.w	1a004158 <__udivmoddi4+0x2c4>
1a003f64:	1a84      	subs	r4, r0, r2
1a003f66:	eb61 0303 	sbc.w	r3, r1, r3
1a003f6a:	2001      	movs	r0, #1
1a003f6c:	4698      	mov	r8, r3
1a003f6e:	2e00      	cmp	r6, #0
1a003f70:	d0e0      	beq.n	1a003f34 <__udivmoddi4+0xa0>
1a003f72:	e9c6 4800 	strd	r4, r8, [r6]
1a003f76:	e7dd      	b.n	1a003f34 <__udivmoddi4+0xa0>
1a003f78:	b902      	cbnz	r2, 1a003f7c <__udivmoddi4+0xe8>
1a003f7a:	deff      	udf	#255	; 0xff
1a003f7c:	fab2 f282 	clz	r2, r2
1a003f80:	2a00      	cmp	r2, #0
1a003f82:	f040 808f 	bne.w	1a0040a4 <__udivmoddi4+0x210>
1a003f86:	1b49      	subs	r1, r1, r5
1a003f88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003f8c:	fa1f f885 	uxth.w	r8, r5
1a003f90:	2701      	movs	r7, #1
1a003f92:	fbb1 fcfe 	udiv	ip, r1, lr
1a003f96:	0c23      	lsrs	r3, r4, #16
1a003f98:	fb0e 111c 	mls	r1, lr, ip, r1
1a003f9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003fa0:	fb08 f10c 	mul.w	r1, r8, ip
1a003fa4:	4299      	cmp	r1, r3
1a003fa6:	d907      	bls.n	1a003fb8 <__udivmoddi4+0x124>
1a003fa8:	18eb      	adds	r3, r5, r3
1a003faa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003fae:	d202      	bcs.n	1a003fb6 <__udivmoddi4+0x122>
1a003fb0:	4299      	cmp	r1, r3
1a003fb2:	f200 80cd 	bhi.w	1a004150 <__udivmoddi4+0x2bc>
1a003fb6:	4684      	mov	ip, r0
1a003fb8:	1a59      	subs	r1, r3, r1
1a003fba:	b2a3      	uxth	r3, r4
1a003fbc:	fbb1 f0fe 	udiv	r0, r1, lr
1a003fc0:	fb0e 1410 	mls	r4, lr, r0, r1
1a003fc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003fc8:	fb08 f800 	mul.w	r8, r8, r0
1a003fcc:	45a0      	cmp	r8, r4
1a003fce:	d907      	bls.n	1a003fe0 <__udivmoddi4+0x14c>
1a003fd0:	192c      	adds	r4, r5, r4
1a003fd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003fd6:	d202      	bcs.n	1a003fde <__udivmoddi4+0x14a>
1a003fd8:	45a0      	cmp	r8, r4
1a003fda:	f200 80b6 	bhi.w	1a00414a <__udivmoddi4+0x2b6>
1a003fde:	4618      	mov	r0, r3
1a003fe0:	eba4 0408 	sub.w	r4, r4, r8
1a003fe4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003fe8:	e79f      	b.n	1a003f2a <__udivmoddi4+0x96>
1a003fea:	f1c7 0c20 	rsb	ip, r7, #32
1a003fee:	40bb      	lsls	r3, r7
1a003ff0:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003ff4:	ea4e 0e03 	orr.w	lr, lr, r3
1a003ff8:	fa01 f407 	lsl.w	r4, r1, r7
1a003ffc:	fa20 f50c 	lsr.w	r5, r0, ip
1a004000:	fa21 f30c 	lsr.w	r3, r1, ip
1a004004:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a004008:	4325      	orrs	r5, r4
1a00400a:	fbb3 f9f8 	udiv	r9, r3, r8
1a00400e:	0c2c      	lsrs	r4, r5, #16
1a004010:	fb08 3319 	mls	r3, r8, r9, r3
1a004014:	fa1f fa8e 	uxth.w	sl, lr
1a004018:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a00401c:	fb09 f40a 	mul.w	r4, r9, sl
1a004020:	429c      	cmp	r4, r3
1a004022:	fa02 f207 	lsl.w	r2, r2, r7
1a004026:	fa00 f107 	lsl.w	r1, r0, r7
1a00402a:	d90b      	bls.n	1a004044 <__udivmoddi4+0x1b0>
1a00402c:	eb1e 0303 	adds.w	r3, lr, r3
1a004030:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004034:	f080 8087 	bcs.w	1a004146 <__udivmoddi4+0x2b2>
1a004038:	429c      	cmp	r4, r3
1a00403a:	f240 8084 	bls.w	1a004146 <__udivmoddi4+0x2b2>
1a00403e:	f1a9 0902 	sub.w	r9, r9, #2
1a004042:	4473      	add	r3, lr
1a004044:	1b1b      	subs	r3, r3, r4
1a004046:	b2ad      	uxth	r5, r5
1a004048:	fbb3 f0f8 	udiv	r0, r3, r8
1a00404c:	fb08 3310 	mls	r3, r8, r0, r3
1a004050:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004054:	fb00 fa0a 	mul.w	sl, r0, sl
1a004058:	45a2      	cmp	sl, r4
1a00405a:	d908      	bls.n	1a00406e <__udivmoddi4+0x1da>
1a00405c:	eb1e 0404 	adds.w	r4, lr, r4
1a004060:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004064:	d26b      	bcs.n	1a00413e <__udivmoddi4+0x2aa>
1a004066:	45a2      	cmp	sl, r4
1a004068:	d969      	bls.n	1a00413e <__udivmoddi4+0x2aa>
1a00406a:	3802      	subs	r0, #2
1a00406c:	4474      	add	r4, lr
1a00406e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004072:	fba0 8902 	umull	r8, r9, r0, r2
1a004076:	eba4 040a 	sub.w	r4, r4, sl
1a00407a:	454c      	cmp	r4, r9
1a00407c:	46c2      	mov	sl, r8
1a00407e:	464b      	mov	r3, r9
1a004080:	d354      	bcc.n	1a00412c <__udivmoddi4+0x298>
1a004082:	d051      	beq.n	1a004128 <__udivmoddi4+0x294>
1a004084:	2e00      	cmp	r6, #0
1a004086:	d069      	beq.n	1a00415c <__udivmoddi4+0x2c8>
1a004088:	ebb1 050a 	subs.w	r5, r1, sl
1a00408c:	eb64 0403 	sbc.w	r4, r4, r3
1a004090:	fa04 fc0c 	lsl.w	ip, r4, ip
1a004094:	40fd      	lsrs	r5, r7
1a004096:	40fc      	lsrs	r4, r7
1a004098:	ea4c 0505 	orr.w	r5, ip, r5
1a00409c:	e9c6 5400 	strd	r5, r4, [r6]
1a0040a0:	2700      	movs	r7, #0
1a0040a2:	e747      	b.n	1a003f34 <__udivmoddi4+0xa0>
1a0040a4:	f1c2 0320 	rsb	r3, r2, #32
1a0040a8:	fa20 f703 	lsr.w	r7, r0, r3
1a0040ac:	4095      	lsls	r5, r2
1a0040ae:	fa01 f002 	lsl.w	r0, r1, r2
1a0040b2:	fa21 f303 	lsr.w	r3, r1, r3
1a0040b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0040ba:	4338      	orrs	r0, r7
1a0040bc:	0c01      	lsrs	r1, r0, #16
1a0040be:	fbb3 f7fe 	udiv	r7, r3, lr
1a0040c2:	fa1f f885 	uxth.w	r8, r5
1a0040c6:	fb0e 3317 	mls	r3, lr, r7, r3
1a0040ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0040ce:	fb07 f308 	mul.w	r3, r7, r8
1a0040d2:	428b      	cmp	r3, r1
1a0040d4:	fa04 f402 	lsl.w	r4, r4, r2
1a0040d8:	d907      	bls.n	1a0040ea <__udivmoddi4+0x256>
1a0040da:	1869      	adds	r1, r5, r1
1a0040dc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0040e0:	d22f      	bcs.n	1a004142 <__udivmoddi4+0x2ae>
1a0040e2:	428b      	cmp	r3, r1
1a0040e4:	d92d      	bls.n	1a004142 <__udivmoddi4+0x2ae>
1a0040e6:	3f02      	subs	r7, #2
1a0040e8:	4429      	add	r1, r5
1a0040ea:	1acb      	subs	r3, r1, r3
1a0040ec:	b281      	uxth	r1, r0
1a0040ee:	fbb3 f0fe 	udiv	r0, r3, lr
1a0040f2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0040f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0040fa:	fb00 f308 	mul.w	r3, r0, r8
1a0040fe:	428b      	cmp	r3, r1
1a004100:	d907      	bls.n	1a004112 <__udivmoddi4+0x27e>
1a004102:	1869      	adds	r1, r5, r1
1a004104:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004108:	d217      	bcs.n	1a00413a <__udivmoddi4+0x2a6>
1a00410a:	428b      	cmp	r3, r1
1a00410c:	d915      	bls.n	1a00413a <__udivmoddi4+0x2a6>
1a00410e:	3802      	subs	r0, #2
1a004110:	4429      	add	r1, r5
1a004112:	1ac9      	subs	r1, r1, r3
1a004114:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004118:	e73b      	b.n	1a003f92 <__udivmoddi4+0xfe>
1a00411a:	4637      	mov	r7, r6
1a00411c:	4630      	mov	r0, r6
1a00411e:	e709      	b.n	1a003f34 <__udivmoddi4+0xa0>
1a004120:	4607      	mov	r7, r0
1a004122:	e6e7      	b.n	1a003ef4 <__udivmoddi4+0x60>
1a004124:	4618      	mov	r0, r3
1a004126:	e6fb      	b.n	1a003f20 <__udivmoddi4+0x8c>
1a004128:	4541      	cmp	r1, r8
1a00412a:	d2ab      	bcs.n	1a004084 <__udivmoddi4+0x1f0>
1a00412c:	ebb8 0a02 	subs.w	sl, r8, r2
1a004130:	eb69 020e 	sbc.w	r2, r9, lr
1a004134:	3801      	subs	r0, #1
1a004136:	4613      	mov	r3, r2
1a004138:	e7a4      	b.n	1a004084 <__udivmoddi4+0x1f0>
1a00413a:	4660      	mov	r0, ip
1a00413c:	e7e9      	b.n	1a004112 <__udivmoddi4+0x27e>
1a00413e:	4618      	mov	r0, r3
1a004140:	e795      	b.n	1a00406e <__udivmoddi4+0x1da>
1a004142:	4667      	mov	r7, ip
1a004144:	e7d1      	b.n	1a0040ea <__udivmoddi4+0x256>
1a004146:	4681      	mov	r9, r0
1a004148:	e77c      	b.n	1a004044 <__udivmoddi4+0x1b0>
1a00414a:	3802      	subs	r0, #2
1a00414c:	442c      	add	r4, r5
1a00414e:	e747      	b.n	1a003fe0 <__udivmoddi4+0x14c>
1a004150:	f1ac 0c02 	sub.w	ip, ip, #2
1a004154:	442b      	add	r3, r5
1a004156:	e72f      	b.n	1a003fb8 <__udivmoddi4+0x124>
1a004158:	4638      	mov	r0, r7
1a00415a:	e708      	b.n	1a003f6e <__udivmoddi4+0xda>
1a00415c:	4637      	mov	r7, r6
1a00415e:	e6e9      	b.n	1a003f34 <__udivmoddi4+0xa0>

1a004160 <__aeabi_idiv0>:
1a004160:	4770      	bx	lr
1a004162:	bf00      	nop

1a004164 <__libc_init_array>:
1a004164:	b570      	push	{r4, r5, r6, lr}
1a004166:	4e0d      	ldr	r6, [pc, #52]	; (1a00419c <__libc_init_array+0x38>)
1a004168:	4c0d      	ldr	r4, [pc, #52]	; (1a0041a0 <__libc_init_array+0x3c>)
1a00416a:	1ba4      	subs	r4, r4, r6
1a00416c:	10a4      	asrs	r4, r4, #2
1a00416e:	2500      	movs	r5, #0
1a004170:	42a5      	cmp	r5, r4
1a004172:	d109      	bne.n	1a004188 <__libc_init_array+0x24>
1a004174:	4e0b      	ldr	r6, [pc, #44]	; (1a0041a4 <__libc_init_array+0x40>)
1a004176:	4c0c      	ldr	r4, [pc, #48]	; (1a0041a8 <__libc_init_array+0x44>)
1a004178:	f7fc fab7 	bl	1a0006ea <_init>
1a00417c:	1ba4      	subs	r4, r4, r6
1a00417e:	10a4      	asrs	r4, r4, #2
1a004180:	2500      	movs	r5, #0
1a004182:	42a5      	cmp	r5, r4
1a004184:	d105      	bne.n	1a004192 <__libc_init_array+0x2e>
1a004186:	bd70      	pop	{r4, r5, r6, pc}
1a004188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00418c:	4798      	blx	r3
1a00418e:	3501      	adds	r5, #1
1a004190:	e7ee      	b.n	1a004170 <__libc_init_array+0xc>
1a004192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004196:	4798      	blx	r3
1a004198:	3501      	adds	r5, #1
1a00419a:	e7f2      	b.n	1a004182 <__libc_init_array+0x1e>
1a00419c:	1a005384 	.word	0x1a005384
1a0041a0:	1a005384 	.word	0x1a005384
1a0041a4:	1a005384 	.word	0x1a005384
1a0041a8:	1a005388 	.word	0x1a005388

1a0041ac <memcpy>:
1a0041ac:	b510      	push	{r4, lr}
1a0041ae:	1e43      	subs	r3, r0, #1
1a0041b0:	440a      	add	r2, r1
1a0041b2:	4291      	cmp	r1, r2
1a0041b4:	d100      	bne.n	1a0041b8 <memcpy+0xc>
1a0041b6:	bd10      	pop	{r4, pc}
1a0041b8:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0041bc:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0041c0:	e7f7      	b.n	1a0041b2 <memcpy+0x6>

1a0041c2 <memset>:
1a0041c2:	4402      	add	r2, r0
1a0041c4:	4603      	mov	r3, r0
1a0041c6:	4293      	cmp	r3, r2
1a0041c8:	d100      	bne.n	1a0041cc <memset+0xa>
1a0041ca:	4770      	bx	lr
1a0041cc:	f803 1b01 	strb.w	r1, [r3], #1
1a0041d0:	e7f9      	b.n	1a0041c6 <memset+0x4>
1a0041d2:	Address 0x000000001a0041d2 is out of bounds.


1a0041d4 <iprintf>:
1a0041d4:	b40f      	push	{r0, r1, r2, r3}
1a0041d6:	4b0a      	ldr	r3, [pc, #40]	; (1a004200 <iprintf+0x2c>)
1a0041d8:	b513      	push	{r0, r1, r4, lr}
1a0041da:	681c      	ldr	r4, [r3, #0]
1a0041dc:	b124      	cbz	r4, 1a0041e8 <iprintf+0x14>
1a0041de:	69a3      	ldr	r3, [r4, #24]
1a0041e0:	b913      	cbnz	r3, 1a0041e8 <iprintf+0x14>
1a0041e2:	4620      	mov	r0, r4
1a0041e4:	f000 f9d4 	bl	1a004590 <__sinit>
1a0041e8:	ab05      	add	r3, sp, #20
1a0041ea:	9a04      	ldr	r2, [sp, #16]
1a0041ec:	68a1      	ldr	r1, [r4, #8]
1a0041ee:	9301      	str	r3, [sp, #4]
1a0041f0:	4620      	mov	r0, r4
1a0041f2:	f000 fb8d 	bl	1a004910 <_vfiprintf_r>
1a0041f6:	b002      	add	sp, #8
1a0041f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0041fc:	b004      	add	sp, #16
1a0041fe:	4770      	bx	lr
1a004200:	10000050 	.word	0x10000050

1a004204 <strchr>:
1a004204:	b2c9      	uxtb	r1, r1
1a004206:	4603      	mov	r3, r0
1a004208:	f810 2b01 	ldrb.w	r2, [r0], #1
1a00420c:	b11a      	cbz	r2, 1a004216 <strchr+0x12>
1a00420e:	428a      	cmp	r2, r1
1a004210:	d1f9      	bne.n	1a004206 <strchr+0x2>
1a004212:	4618      	mov	r0, r3
1a004214:	4770      	bx	lr
1a004216:	2900      	cmp	r1, #0
1a004218:	bf18      	it	ne
1a00421a:	2300      	movne	r3, #0
1a00421c:	e7f9      	b.n	1a004212 <strchr+0xe>

1a00421e <strcpy>:
1a00421e:	4603      	mov	r3, r0
1a004220:	f811 2b01 	ldrb.w	r2, [r1], #1
1a004224:	f803 2b01 	strb.w	r2, [r3], #1
1a004228:	2a00      	cmp	r2, #0
1a00422a:	d1f9      	bne.n	1a004220 <strcpy+0x2>
1a00422c:	4770      	bx	lr
1a00422e:	Address 0x000000001a00422e is out of bounds.


1a004230 <__swbuf_r>:
1a004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004232:	460e      	mov	r6, r1
1a004234:	4614      	mov	r4, r2
1a004236:	4605      	mov	r5, r0
1a004238:	b118      	cbz	r0, 1a004242 <__swbuf_r+0x12>
1a00423a:	6983      	ldr	r3, [r0, #24]
1a00423c:	b90b      	cbnz	r3, 1a004242 <__swbuf_r+0x12>
1a00423e:	f000 f9a7 	bl	1a004590 <__sinit>
1a004242:	4b21      	ldr	r3, [pc, #132]	; (1a0042c8 <__swbuf_r+0x98>)
1a004244:	429c      	cmp	r4, r3
1a004246:	d12a      	bne.n	1a00429e <__swbuf_r+0x6e>
1a004248:	686c      	ldr	r4, [r5, #4]
1a00424a:	69a3      	ldr	r3, [r4, #24]
1a00424c:	60a3      	str	r3, [r4, #8]
1a00424e:	89a3      	ldrh	r3, [r4, #12]
1a004250:	071a      	lsls	r2, r3, #28
1a004252:	d52e      	bpl.n	1a0042b2 <__swbuf_r+0x82>
1a004254:	6923      	ldr	r3, [r4, #16]
1a004256:	b363      	cbz	r3, 1a0042b2 <__swbuf_r+0x82>
1a004258:	6923      	ldr	r3, [r4, #16]
1a00425a:	6820      	ldr	r0, [r4, #0]
1a00425c:	1ac0      	subs	r0, r0, r3
1a00425e:	6963      	ldr	r3, [r4, #20]
1a004260:	b2f6      	uxtb	r6, r6
1a004262:	4283      	cmp	r3, r0
1a004264:	4637      	mov	r7, r6
1a004266:	dc04      	bgt.n	1a004272 <__swbuf_r+0x42>
1a004268:	4621      	mov	r1, r4
1a00426a:	4628      	mov	r0, r5
1a00426c:	f000 f926 	bl	1a0044bc <_fflush_r>
1a004270:	bb28      	cbnz	r0, 1a0042be <__swbuf_r+0x8e>
1a004272:	68a3      	ldr	r3, [r4, #8]
1a004274:	3b01      	subs	r3, #1
1a004276:	60a3      	str	r3, [r4, #8]
1a004278:	6823      	ldr	r3, [r4, #0]
1a00427a:	1c5a      	adds	r2, r3, #1
1a00427c:	6022      	str	r2, [r4, #0]
1a00427e:	701e      	strb	r6, [r3, #0]
1a004280:	6963      	ldr	r3, [r4, #20]
1a004282:	3001      	adds	r0, #1
1a004284:	4283      	cmp	r3, r0
1a004286:	d004      	beq.n	1a004292 <__swbuf_r+0x62>
1a004288:	89a3      	ldrh	r3, [r4, #12]
1a00428a:	07db      	lsls	r3, r3, #31
1a00428c:	d519      	bpl.n	1a0042c2 <__swbuf_r+0x92>
1a00428e:	2e0a      	cmp	r6, #10
1a004290:	d117      	bne.n	1a0042c2 <__swbuf_r+0x92>
1a004292:	4621      	mov	r1, r4
1a004294:	4628      	mov	r0, r5
1a004296:	f000 f911 	bl	1a0044bc <_fflush_r>
1a00429a:	b190      	cbz	r0, 1a0042c2 <__swbuf_r+0x92>
1a00429c:	e00f      	b.n	1a0042be <__swbuf_r+0x8e>
1a00429e:	4b0b      	ldr	r3, [pc, #44]	; (1a0042cc <__swbuf_r+0x9c>)
1a0042a0:	429c      	cmp	r4, r3
1a0042a2:	d101      	bne.n	1a0042a8 <__swbuf_r+0x78>
1a0042a4:	68ac      	ldr	r4, [r5, #8]
1a0042a6:	e7d0      	b.n	1a00424a <__swbuf_r+0x1a>
1a0042a8:	4b09      	ldr	r3, [pc, #36]	; (1a0042d0 <__swbuf_r+0xa0>)
1a0042aa:	429c      	cmp	r4, r3
1a0042ac:	bf08      	it	eq
1a0042ae:	68ec      	ldreq	r4, [r5, #12]
1a0042b0:	e7cb      	b.n	1a00424a <__swbuf_r+0x1a>
1a0042b2:	4621      	mov	r1, r4
1a0042b4:	4628      	mov	r0, r5
1a0042b6:	f000 f80d 	bl	1a0042d4 <__swsetup_r>
1a0042ba:	2800      	cmp	r0, #0
1a0042bc:	d0cc      	beq.n	1a004258 <__swbuf_r+0x28>
1a0042be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0042c2:	4638      	mov	r0, r7
1a0042c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0042c6:	bf00      	nop
1a0042c8:	1a00530c 	.word	0x1a00530c
1a0042cc:	1a00532c 	.word	0x1a00532c
1a0042d0:	1a0052ec 	.word	0x1a0052ec

1a0042d4 <__swsetup_r>:
1a0042d4:	4b32      	ldr	r3, [pc, #200]	; (1a0043a0 <__swsetup_r+0xcc>)
1a0042d6:	b570      	push	{r4, r5, r6, lr}
1a0042d8:	681d      	ldr	r5, [r3, #0]
1a0042da:	4606      	mov	r6, r0
1a0042dc:	460c      	mov	r4, r1
1a0042de:	b125      	cbz	r5, 1a0042ea <__swsetup_r+0x16>
1a0042e0:	69ab      	ldr	r3, [r5, #24]
1a0042e2:	b913      	cbnz	r3, 1a0042ea <__swsetup_r+0x16>
1a0042e4:	4628      	mov	r0, r5
1a0042e6:	f000 f953 	bl	1a004590 <__sinit>
1a0042ea:	4b2e      	ldr	r3, [pc, #184]	; (1a0043a4 <__swsetup_r+0xd0>)
1a0042ec:	429c      	cmp	r4, r3
1a0042ee:	d10f      	bne.n	1a004310 <__swsetup_r+0x3c>
1a0042f0:	686c      	ldr	r4, [r5, #4]
1a0042f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0042f6:	b29a      	uxth	r2, r3
1a0042f8:	0715      	lsls	r5, r2, #28
1a0042fa:	d42c      	bmi.n	1a004356 <__swsetup_r+0x82>
1a0042fc:	06d0      	lsls	r0, r2, #27
1a0042fe:	d411      	bmi.n	1a004324 <__swsetup_r+0x50>
1a004300:	2209      	movs	r2, #9
1a004302:	6032      	str	r2, [r6, #0]
1a004304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004308:	81a3      	strh	r3, [r4, #12]
1a00430a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00430e:	e03e      	b.n	1a00438e <__swsetup_r+0xba>
1a004310:	4b25      	ldr	r3, [pc, #148]	; (1a0043a8 <__swsetup_r+0xd4>)
1a004312:	429c      	cmp	r4, r3
1a004314:	d101      	bne.n	1a00431a <__swsetup_r+0x46>
1a004316:	68ac      	ldr	r4, [r5, #8]
1a004318:	e7eb      	b.n	1a0042f2 <__swsetup_r+0x1e>
1a00431a:	4b24      	ldr	r3, [pc, #144]	; (1a0043ac <__swsetup_r+0xd8>)
1a00431c:	429c      	cmp	r4, r3
1a00431e:	bf08      	it	eq
1a004320:	68ec      	ldreq	r4, [r5, #12]
1a004322:	e7e6      	b.n	1a0042f2 <__swsetup_r+0x1e>
1a004324:	0751      	lsls	r1, r2, #29
1a004326:	d512      	bpl.n	1a00434e <__swsetup_r+0x7a>
1a004328:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00432a:	b141      	cbz	r1, 1a00433e <__swsetup_r+0x6a>
1a00432c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004330:	4299      	cmp	r1, r3
1a004332:	d002      	beq.n	1a00433a <__swsetup_r+0x66>
1a004334:	4630      	mov	r0, r6
1a004336:	f000 fa19 	bl	1a00476c <_free_r>
1a00433a:	2300      	movs	r3, #0
1a00433c:	6363      	str	r3, [r4, #52]	; 0x34
1a00433e:	89a3      	ldrh	r3, [r4, #12]
1a004340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a004344:	81a3      	strh	r3, [r4, #12]
1a004346:	2300      	movs	r3, #0
1a004348:	6063      	str	r3, [r4, #4]
1a00434a:	6923      	ldr	r3, [r4, #16]
1a00434c:	6023      	str	r3, [r4, #0]
1a00434e:	89a3      	ldrh	r3, [r4, #12]
1a004350:	f043 0308 	orr.w	r3, r3, #8
1a004354:	81a3      	strh	r3, [r4, #12]
1a004356:	6923      	ldr	r3, [r4, #16]
1a004358:	b94b      	cbnz	r3, 1a00436e <__swsetup_r+0x9a>
1a00435a:	89a3      	ldrh	r3, [r4, #12]
1a00435c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004364:	d003      	beq.n	1a00436e <__swsetup_r+0x9a>
1a004366:	4621      	mov	r1, r4
1a004368:	4630      	mov	r0, r6
1a00436a:	f000 f9bf 	bl	1a0046ec <__smakebuf_r>
1a00436e:	89a2      	ldrh	r2, [r4, #12]
1a004370:	f012 0301 	ands.w	r3, r2, #1
1a004374:	d00c      	beq.n	1a004390 <__swsetup_r+0xbc>
1a004376:	2300      	movs	r3, #0
1a004378:	60a3      	str	r3, [r4, #8]
1a00437a:	6963      	ldr	r3, [r4, #20]
1a00437c:	425b      	negs	r3, r3
1a00437e:	61a3      	str	r3, [r4, #24]
1a004380:	6923      	ldr	r3, [r4, #16]
1a004382:	b953      	cbnz	r3, 1a00439a <__swsetup_r+0xc6>
1a004384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004388:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a00438c:	d1ba      	bne.n	1a004304 <__swsetup_r+0x30>
1a00438e:	bd70      	pop	{r4, r5, r6, pc}
1a004390:	0792      	lsls	r2, r2, #30
1a004392:	bf58      	it	pl
1a004394:	6963      	ldrpl	r3, [r4, #20]
1a004396:	60a3      	str	r3, [r4, #8]
1a004398:	e7f2      	b.n	1a004380 <__swsetup_r+0xac>
1a00439a:	2000      	movs	r0, #0
1a00439c:	e7f7      	b.n	1a00438e <__swsetup_r+0xba>
1a00439e:	bf00      	nop
1a0043a0:	10000050 	.word	0x10000050
1a0043a4:	1a00530c 	.word	0x1a00530c
1a0043a8:	1a00532c 	.word	0x1a00532c
1a0043ac:	1a0052ec 	.word	0x1a0052ec

1a0043b0 <__sflush_r>:
1a0043b0:	898a      	ldrh	r2, [r1, #12]
1a0043b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0043b6:	4605      	mov	r5, r0
1a0043b8:	0710      	lsls	r0, r2, #28
1a0043ba:	460c      	mov	r4, r1
1a0043bc:	d458      	bmi.n	1a004470 <__sflush_r+0xc0>
1a0043be:	684b      	ldr	r3, [r1, #4]
1a0043c0:	2b00      	cmp	r3, #0
1a0043c2:	dc05      	bgt.n	1a0043d0 <__sflush_r+0x20>
1a0043c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a0043c6:	2b00      	cmp	r3, #0
1a0043c8:	dc02      	bgt.n	1a0043d0 <__sflush_r+0x20>
1a0043ca:	2000      	movs	r0, #0
1a0043cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0043d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0043d2:	2e00      	cmp	r6, #0
1a0043d4:	d0f9      	beq.n	1a0043ca <__sflush_r+0x1a>
1a0043d6:	2300      	movs	r3, #0
1a0043d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0043dc:	682f      	ldr	r7, [r5, #0]
1a0043de:	6a21      	ldr	r1, [r4, #32]
1a0043e0:	602b      	str	r3, [r5, #0]
1a0043e2:	d032      	beq.n	1a00444a <__sflush_r+0x9a>
1a0043e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0043e6:	89a3      	ldrh	r3, [r4, #12]
1a0043e8:	075a      	lsls	r2, r3, #29
1a0043ea:	d505      	bpl.n	1a0043f8 <__sflush_r+0x48>
1a0043ec:	6863      	ldr	r3, [r4, #4]
1a0043ee:	1ac0      	subs	r0, r0, r3
1a0043f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0043f2:	b10b      	cbz	r3, 1a0043f8 <__sflush_r+0x48>
1a0043f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0043f6:	1ac0      	subs	r0, r0, r3
1a0043f8:	2300      	movs	r3, #0
1a0043fa:	4602      	mov	r2, r0
1a0043fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0043fe:	6a21      	ldr	r1, [r4, #32]
1a004400:	4628      	mov	r0, r5
1a004402:	47b0      	blx	r6
1a004404:	1c43      	adds	r3, r0, #1
1a004406:	89a3      	ldrh	r3, [r4, #12]
1a004408:	d106      	bne.n	1a004418 <__sflush_r+0x68>
1a00440a:	6829      	ldr	r1, [r5, #0]
1a00440c:	291d      	cmp	r1, #29
1a00440e:	d848      	bhi.n	1a0044a2 <__sflush_r+0xf2>
1a004410:	4a29      	ldr	r2, [pc, #164]	; (1a0044b8 <__sflush_r+0x108>)
1a004412:	40ca      	lsrs	r2, r1
1a004414:	07d6      	lsls	r6, r2, #31
1a004416:	d544      	bpl.n	1a0044a2 <__sflush_r+0xf2>
1a004418:	2200      	movs	r2, #0
1a00441a:	6062      	str	r2, [r4, #4]
1a00441c:	04d9      	lsls	r1, r3, #19
1a00441e:	6922      	ldr	r2, [r4, #16]
1a004420:	6022      	str	r2, [r4, #0]
1a004422:	d504      	bpl.n	1a00442e <__sflush_r+0x7e>
1a004424:	1c42      	adds	r2, r0, #1
1a004426:	d101      	bne.n	1a00442c <__sflush_r+0x7c>
1a004428:	682b      	ldr	r3, [r5, #0]
1a00442a:	b903      	cbnz	r3, 1a00442e <__sflush_r+0x7e>
1a00442c:	6560      	str	r0, [r4, #84]	; 0x54
1a00442e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004430:	602f      	str	r7, [r5, #0]
1a004432:	2900      	cmp	r1, #0
1a004434:	d0c9      	beq.n	1a0043ca <__sflush_r+0x1a>
1a004436:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00443a:	4299      	cmp	r1, r3
1a00443c:	d002      	beq.n	1a004444 <__sflush_r+0x94>
1a00443e:	4628      	mov	r0, r5
1a004440:	f000 f994 	bl	1a00476c <_free_r>
1a004444:	2000      	movs	r0, #0
1a004446:	6360      	str	r0, [r4, #52]	; 0x34
1a004448:	e7c0      	b.n	1a0043cc <__sflush_r+0x1c>
1a00444a:	2301      	movs	r3, #1
1a00444c:	4628      	mov	r0, r5
1a00444e:	47b0      	blx	r6
1a004450:	1c41      	adds	r1, r0, #1
1a004452:	d1c8      	bne.n	1a0043e6 <__sflush_r+0x36>
1a004454:	682b      	ldr	r3, [r5, #0]
1a004456:	2b00      	cmp	r3, #0
1a004458:	d0c5      	beq.n	1a0043e6 <__sflush_r+0x36>
1a00445a:	2b1d      	cmp	r3, #29
1a00445c:	d001      	beq.n	1a004462 <__sflush_r+0xb2>
1a00445e:	2b16      	cmp	r3, #22
1a004460:	d101      	bne.n	1a004466 <__sflush_r+0xb6>
1a004462:	602f      	str	r7, [r5, #0]
1a004464:	e7b1      	b.n	1a0043ca <__sflush_r+0x1a>
1a004466:	89a3      	ldrh	r3, [r4, #12]
1a004468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00446c:	81a3      	strh	r3, [r4, #12]
1a00446e:	e7ad      	b.n	1a0043cc <__sflush_r+0x1c>
1a004470:	690f      	ldr	r7, [r1, #16]
1a004472:	2f00      	cmp	r7, #0
1a004474:	d0a9      	beq.n	1a0043ca <__sflush_r+0x1a>
1a004476:	0793      	lsls	r3, r2, #30
1a004478:	680e      	ldr	r6, [r1, #0]
1a00447a:	bf08      	it	eq
1a00447c:	694b      	ldreq	r3, [r1, #20]
1a00447e:	600f      	str	r7, [r1, #0]
1a004480:	bf18      	it	ne
1a004482:	2300      	movne	r3, #0
1a004484:	eba6 0807 	sub.w	r8, r6, r7
1a004488:	608b      	str	r3, [r1, #8]
1a00448a:	f1b8 0f00 	cmp.w	r8, #0
1a00448e:	dd9c      	ble.n	1a0043ca <__sflush_r+0x1a>
1a004490:	4643      	mov	r3, r8
1a004492:	463a      	mov	r2, r7
1a004494:	6a21      	ldr	r1, [r4, #32]
1a004496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004498:	4628      	mov	r0, r5
1a00449a:	47b0      	blx	r6
1a00449c:	2800      	cmp	r0, #0
1a00449e:	dc06      	bgt.n	1a0044ae <__sflush_r+0xfe>
1a0044a0:	89a3      	ldrh	r3, [r4, #12]
1a0044a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0044a6:	81a3      	strh	r3, [r4, #12]
1a0044a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0044ac:	e78e      	b.n	1a0043cc <__sflush_r+0x1c>
1a0044ae:	4407      	add	r7, r0
1a0044b0:	eba8 0800 	sub.w	r8, r8, r0
1a0044b4:	e7e9      	b.n	1a00448a <__sflush_r+0xda>
1a0044b6:	bf00      	nop
1a0044b8:	20400001 	.word	0x20400001

1a0044bc <_fflush_r>:
1a0044bc:	b538      	push	{r3, r4, r5, lr}
1a0044be:	690b      	ldr	r3, [r1, #16]
1a0044c0:	4605      	mov	r5, r0
1a0044c2:	460c      	mov	r4, r1
1a0044c4:	b1db      	cbz	r3, 1a0044fe <_fflush_r+0x42>
1a0044c6:	b118      	cbz	r0, 1a0044d0 <_fflush_r+0x14>
1a0044c8:	6983      	ldr	r3, [r0, #24]
1a0044ca:	b90b      	cbnz	r3, 1a0044d0 <_fflush_r+0x14>
1a0044cc:	f000 f860 	bl	1a004590 <__sinit>
1a0044d0:	4b0c      	ldr	r3, [pc, #48]	; (1a004504 <_fflush_r+0x48>)
1a0044d2:	429c      	cmp	r4, r3
1a0044d4:	d109      	bne.n	1a0044ea <_fflush_r+0x2e>
1a0044d6:	686c      	ldr	r4, [r5, #4]
1a0044d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0044dc:	b17b      	cbz	r3, 1a0044fe <_fflush_r+0x42>
1a0044de:	4621      	mov	r1, r4
1a0044e0:	4628      	mov	r0, r5
1a0044e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0044e6:	f7ff bf63 	b.w	1a0043b0 <__sflush_r>
1a0044ea:	4b07      	ldr	r3, [pc, #28]	; (1a004508 <_fflush_r+0x4c>)
1a0044ec:	429c      	cmp	r4, r3
1a0044ee:	d101      	bne.n	1a0044f4 <_fflush_r+0x38>
1a0044f0:	68ac      	ldr	r4, [r5, #8]
1a0044f2:	e7f1      	b.n	1a0044d8 <_fflush_r+0x1c>
1a0044f4:	4b05      	ldr	r3, [pc, #20]	; (1a00450c <_fflush_r+0x50>)
1a0044f6:	429c      	cmp	r4, r3
1a0044f8:	bf08      	it	eq
1a0044fa:	68ec      	ldreq	r4, [r5, #12]
1a0044fc:	e7ec      	b.n	1a0044d8 <_fflush_r+0x1c>
1a0044fe:	2000      	movs	r0, #0
1a004500:	bd38      	pop	{r3, r4, r5, pc}
1a004502:	bf00      	nop
1a004504:	1a00530c 	.word	0x1a00530c
1a004508:	1a00532c 	.word	0x1a00532c
1a00450c:	1a0052ec 	.word	0x1a0052ec

1a004510 <std>:
1a004510:	2300      	movs	r3, #0
1a004512:	b510      	push	{r4, lr}
1a004514:	4604      	mov	r4, r0
1a004516:	e9c0 3300 	strd	r3, r3, [r0]
1a00451a:	6083      	str	r3, [r0, #8]
1a00451c:	8181      	strh	r1, [r0, #12]
1a00451e:	6643      	str	r3, [r0, #100]	; 0x64
1a004520:	81c2      	strh	r2, [r0, #14]
1a004522:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004526:	6183      	str	r3, [r0, #24]
1a004528:	4619      	mov	r1, r3
1a00452a:	2208      	movs	r2, #8
1a00452c:	305c      	adds	r0, #92	; 0x5c
1a00452e:	f7ff fe48 	bl	1a0041c2 <memset>
1a004532:	4b05      	ldr	r3, [pc, #20]	; (1a004548 <std+0x38>)
1a004534:	6263      	str	r3, [r4, #36]	; 0x24
1a004536:	4b05      	ldr	r3, [pc, #20]	; (1a00454c <std+0x3c>)
1a004538:	62a3      	str	r3, [r4, #40]	; 0x28
1a00453a:	4b05      	ldr	r3, [pc, #20]	; (1a004550 <std+0x40>)
1a00453c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00453e:	4b05      	ldr	r3, [pc, #20]	; (1a004554 <std+0x44>)
1a004540:	6224      	str	r4, [r4, #32]
1a004542:	6323      	str	r3, [r4, #48]	; 0x30
1a004544:	bd10      	pop	{r4, pc}
1a004546:	bf00      	nop
1a004548:	1a004e4d 	.word	0x1a004e4d
1a00454c:	1a004e6f 	.word	0x1a004e6f
1a004550:	1a004ea7 	.word	0x1a004ea7
1a004554:	1a004ecb 	.word	0x1a004ecb

1a004558 <_cleanup_r>:
1a004558:	4901      	ldr	r1, [pc, #4]	; (1a004560 <_cleanup_r+0x8>)
1a00455a:	f000 b885 	b.w	1a004668 <_fwalk_reent>
1a00455e:	bf00      	nop
1a004560:	1a0044bd 	.word	0x1a0044bd

1a004564 <__sfmoreglue>:
1a004564:	b570      	push	{r4, r5, r6, lr}
1a004566:	1e4a      	subs	r2, r1, #1
1a004568:	2568      	movs	r5, #104	; 0x68
1a00456a:	4355      	muls	r5, r2
1a00456c:	460e      	mov	r6, r1
1a00456e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004572:	f000 f949 	bl	1a004808 <_malloc_r>
1a004576:	4604      	mov	r4, r0
1a004578:	b140      	cbz	r0, 1a00458c <__sfmoreglue+0x28>
1a00457a:	2100      	movs	r1, #0
1a00457c:	e9c0 1600 	strd	r1, r6, [r0]
1a004580:	300c      	adds	r0, #12
1a004582:	60a0      	str	r0, [r4, #8]
1a004584:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004588:	f7ff fe1b 	bl	1a0041c2 <memset>
1a00458c:	4620      	mov	r0, r4
1a00458e:	bd70      	pop	{r4, r5, r6, pc}

1a004590 <__sinit>:
1a004590:	6983      	ldr	r3, [r0, #24]
1a004592:	b510      	push	{r4, lr}
1a004594:	4604      	mov	r4, r0
1a004596:	bb33      	cbnz	r3, 1a0045e6 <__sinit+0x56>
1a004598:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a00459c:	6503      	str	r3, [r0, #80]	; 0x50
1a00459e:	4b12      	ldr	r3, [pc, #72]	; (1a0045e8 <__sinit+0x58>)
1a0045a0:	4a12      	ldr	r2, [pc, #72]	; (1a0045ec <__sinit+0x5c>)
1a0045a2:	681b      	ldr	r3, [r3, #0]
1a0045a4:	6282      	str	r2, [r0, #40]	; 0x28
1a0045a6:	4298      	cmp	r0, r3
1a0045a8:	bf04      	itt	eq
1a0045aa:	2301      	moveq	r3, #1
1a0045ac:	6183      	streq	r3, [r0, #24]
1a0045ae:	f000 f81f 	bl	1a0045f0 <__sfp>
1a0045b2:	6060      	str	r0, [r4, #4]
1a0045b4:	4620      	mov	r0, r4
1a0045b6:	f000 f81b 	bl	1a0045f0 <__sfp>
1a0045ba:	60a0      	str	r0, [r4, #8]
1a0045bc:	4620      	mov	r0, r4
1a0045be:	f000 f817 	bl	1a0045f0 <__sfp>
1a0045c2:	2200      	movs	r2, #0
1a0045c4:	60e0      	str	r0, [r4, #12]
1a0045c6:	2104      	movs	r1, #4
1a0045c8:	6860      	ldr	r0, [r4, #4]
1a0045ca:	f7ff ffa1 	bl	1a004510 <std>
1a0045ce:	2201      	movs	r2, #1
1a0045d0:	2109      	movs	r1, #9
1a0045d2:	68a0      	ldr	r0, [r4, #8]
1a0045d4:	f7ff ff9c 	bl	1a004510 <std>
1a0045d8:	2202      	movs	r2, #2
1a0045da:	2112      	movs	r1, #18
1a0045dc:	68e0      	ldr	r0, [r4, #12]
1a0045de:	f7ff ff97 	bl	1a004510 <std>
1a0045e2:	2301      	movs	r3, #1
1a0045e4:	61a3      	str	r3, [r4, #24]
1a0045e6:	bd10      	pop	{r4, pc}
1a0045e8:	1a00534c 	.word	0x1a00534c
1a0045ec:	1a004559 	.word	0x1a004559

1a0045f0 <__sfp>:
1a0045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0045f2:	4b1b      	ldr	r3, [pc, #108]	; (1a004660 <__sfp+0x70>)
1a0045f4:	681e      	ldr	r6, [r3, #0]
1a0045f6:	69b3      	ldr	r3, [r6, #24]
1a0045f8:	4607      	mov	r7, r0
1a0045fa:	b913      	cbnz	r3, 1a004602 <__sfp+0x12>
1a0045fc:	4630      	mov	r0, r6
1a0045fe:	f7ff ffc7 	bl	1a004590 <__sinit>
1a004602:	3648      	adds	r6, #72	; 0x48
1a004604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a004608:	3b01      	subs	r3, #1
1a00460a:	d503      	bpl.n	1a004614 <__sfp+0x24>
1a00460c:	6833      	ldr	r3, [r6, #0]
1a00460e:	b133      	cbz	r3, 1a00461e <__sfp+0x2e>
1a004610:	6836      	ldr	r6, [r6, #0]
1a004612:	e7f7      	b.n	1a004604 <__sfp+0x14>
1a004614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a004618:	b16d      	cbz	r5, 1a004636 <__sfp+0x46>
1a00461a:	3468      	adds	r4, #104	; 0x68
1a00461c:	e7f4      	b.n	1a004608 <__sfp+0x18>
1a00461e:	2104      	movs	r1, #4
1a004620:	4638      	mov	r0, r7
1a004622:	f7ff ff9f 	bl	1a004564 <__sfmoreglue>
1a004626:	6030      	str	r0, [r6, #0]
1a004628:	2800      	cmp	r0, #0
1a00462a:	d1f1      	bne.n	1a004610 <__sfp+0x20>
1a00462c:	230c      	movs	r3, #12
1a00462e:	603b      	str	r3, [r7, #0]
1a004630:	4604      	mov	r4, r0
1a004632:	4620      	mov	r0, r4
1a004634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004636:	4b0b      	ldr	r3, [pc, #44]	; (1a004664 <__sfp+0x74>)
1a004638:	6665      	str	r5, [r4, #100]	; 0x64
1a00463a:	e9c4 5500 	strd	r5, r5, [r4]
1a00463e:	60a5      	str	r5, [r4, #8]
1a004640:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a004644:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a004648:	2208      	movs	r2, #8
1a00464a:	4629      	mov	r1, r5
1a00464c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004650:	f7ff fdb7 	bl	1a0041c2 <memset>
1a004654:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004658:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a00465c:	e7e9      	b.n	1a004632 <__sfp+0x42>
1a00465e:	bf00      	nop
1a004660:	1a00534c 	.word	0x1a00534c
1a004664:	ffff0001 	.word	0xffff0001

1a004668 <_fwalk_reent>:
1a004668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00466c:	4680      	mov	r8, r0
1a00466e:	4689      	mov	r9, r1
1a004670:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004674:	2600      	movs	r6, #0
1a004676:	b914      	cbnz	r4, 1a00467e <_fwalk_reent+0x16>
1a004678:	4630      	mov	r0, r6
1a00467a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00467e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004682:	3f01      	subs	r7, #1
1a004684:	d501      	bpl.n	1a00468a <_fwalk_reent+0x22>
1a004686:	6824      	ldr	r4, [r4, #0]
1a004688:	e7f5      	b.n	1a004676 <_fwalk_reent+0xe>
1a00468a:	89ab      	ldrh	r3, [r5, #12]
1a00468c:	2b01      	cmp	r3, #1
1a00468e:	d907      	bls.n	1a0046a0 <_fwalk_reent+0x38>
1a004690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004694:	3301      	adds	r3, #1
1a004696:	d003      	beq.n	1a0046a0 <_fwalk_reent+0x38>
1a004698:	4629      	mov	r1, r5
1a00469a:	4640      	mov	r0, r8
1a00469c:	47c8      	blx	r9
1a00469e:	4306      	orrs	r6, r0
1a0046a0:	3568      	adds	r5, #104	; 0x68
1a0046a2:	e7ee      	b.n	1a004682 <_fwalk_reent+0x1a>

1a0046a4 <__swhatbuf_r>:
1a0046a4:	b570      	push	{r4, r5, r6, lr}
1a0046a6:	460e      	mov	r6, r1
1a0046a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0046ac:	2900      	cmp	r1, #0
1a0046ae:	b096      	sub	sp, #88	; 0x58
1a0046b0:	4614      	mov	r4, r2
1a0046b2:	461d      	mov	r5, r3
1a0046b4:	da07      	bge.n	1a0046c6 <__swhatbuf_r+0x22>
1a0046b6:	2300      	movs	r3, #0
1a0046b8:	602b      	str	r3, [r5, #0]
1a0046ba:	89b3      	ldrh	r3, [r6, #12]
1a0046bc:	061a      	lsls	r2, r3, #24
1a0046be:	d410      	bmi.n	1a0046e2 <__swhatbuf_r+0x3e>
1a0046c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0046c4:	e00e      	b.n	1a0046e4 <__swhatbuf_r+0x40>
1a0046c6:	466a      	mov	r2, sp
1a0046c8:	f7fc f815 	bl	1a0006f6 <_fstat_r>
1a0046cc:	2800      	cmp	r0, #0
1a0046ce:	dbf2      	blt.n	1a0046b6 <__swhatbuf_r+0x12>
1a0046d0:	9a01      	ldr	r2, [sp, #4]
1a0046d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0046d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0046da:	425a      	negs	r2, r3
1a0046dc:	415a      	adcs	r2, r3
1a0046de:	602a      	str	r2, [r5, #0]
1a0046e0:	e7ee      	b.n	1a0046c0 <__swhatbuf_r+0x1c>
1a0046e2:	2340      	movs	r3, #64	; 0x40
1a0046e4:	2000      	movs	r0, #0
1a0046e6:	6023      	str	r3, [r4, #0]
1a0046e8:	b016      	add	sp, #88	; 0x58
1a0046ea:	bd70      	pop	{r4, r5, r6, pc}

1a0046ec <__smakebuf_r>:
1a0046ec:	898b      	ldrh	r3, [r1, #12]
1a0046ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0046f0:	079d      	lsls	r5, r3, #30
1a0046f2:	4606      	mov	r6, r0
1a0046f4:	460c      	mov	r4, r1
1a0046f6:	d507      	bpl.n	1a004708 <__smakebuf_r+0x1c>
1a0046f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a0046fc:	6023      	str	r3, [r4, #0]
1a0046fe:	6123      	str	r3, [r4, #16]
1a004700:	2301      	movs	r3, #1
1a004702:	6163      	str	r3, [r4, #20]
1a004704:	b002      	add	sp, #8
1a004706:	bd70      	pop	{r4, r5, r6, pc}
1a004708:	ab01      	add	r3, sp, #4
1a00470a:	466a      	mov	r2, sp
1a00470c:	f7ff ffca 	bl	1a0046a4 <__swhatbuf_r>
1a004710:	9900      	ldr	r1, [sp, #0]
1a004712:	4605      	mov	r5, r0
1a004714:	4630      	mov	r0, r6
1a004716:	f000 f877 	bl	1a004808 <_malloc_r>
1a00471a:	b948      	cbnz	r0, 1a004730 <__smakebuf_r+0x44>
1a00471c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004720:	059a      	lsls	r2, r3, #22
1a004722:	d4ef      	bmi.n	1a004704 <__smakebuf_r+0x18>
1a004724:	f023 0303 	bic.w	r3, r3, #3
1a004728:	f043 0302 	orr.w	r3, r3, #2
1a00472c:	81a3      	strh	r3, [r4, #12]
1a00472e:	e7e3      	b.n	1a0046f8 <__smakebuf_r+0xc>
1a004730:	4b0d      	ldr	r3, [pc, #52]	; (1a004768 <__smakebuf_r+0x7c>)
1a004732:	62b3      	str	r3, [r6, #40]	; 0x28
1a004734:	89a3      	ldrh	r3, [r4, #12]
1a004736:	6020      	str	r0, [r4, #0]
1a004738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00473c:	81a3      	strh	r3, [r4, #12]
1a00473e:	9b00      	ldr	r3, [sp, #0]
1a004740:	6163      	str	r3, [r4, #20]
1a004742:	9b01      	ldr	r3, [sp, #4]
1a004744:	6120      	str	r0, [r4, #16]
1a004746:	b15b      	cbz	r3, 1a004760 <__smakebuf_r+0x74>
1a004748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00474c:	4630      	mov	r0, r6
1a00474e:	f7fb ffd7 	bl	1a000700 <_isatty_r>
1a004752:	b128      	cbz	r0, 1a004760 <__smakebuf_r+0x74>
1a004754:	89a3      	ldrh	r3, [r4, #12]
1a004756:	f023 0303 	bic.w	r3, r3, #3
1a00475a:	f043 0301 	orr.w	r3, r3, #1
1a00475e:	81a3      	strh	r3, [r4, #12]
1a004760:	89a3      	ldrh	r3, [r4, #12]
1a004762:	431d      	orrs	r5, r3
1a004764:	81a5      	strh	r5, [r4, #12]
1a004766:	e7cd      	b.n	1a004704 <__smakebuf_r+0x18>
1a004768:	1a004559 	.word	0x1a004559

1a00476c <_free_r>:
1a00476c:	b538      	push	{r3, r4, r5, lr}
1a00476e:	4605      	mov	r5, r0
1a004770:	2900      	cmp	r1, #0
1a004772:	d045      	beq.n	1a004800 <_free_r+0x94>
1a004774:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004778:	1f0c      	subs	r4, r1, #4
1a00477a:	2b00      	cmp	r3, #0
1a00477c:	bfb8      	it	lt
1a00477e:	18e4      	addlt	r4, r4, r3
1a004780:	f000 fbfe 	bl	1a004f80 <__malloc_lock>
1a004784:	4a1f      	ldr	r2, [pc, #124]	; (1a004804 <_free_r+0x98>)
1a004786:	6813      	ldr	r3, [r2, #0]
1a004788:	4610      	mov	r0, r2
1a00478a:	b933      	cbnz	r3, 1a00479a <_free_r+0x2e>
1a00478c:	6063      	str	r3, [r4, #4]
1a00478e:	6014      	str	r4, [r2, #0]
1a004790:	4628      	mov	r0, r5
1a004792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004796:	f000 bbf4 	b.w	1a004f82 <__malloc_unlock>
1a00479a:	42a3      	cmp	r3, r4
1a00479c:	d90c      	bls.n	1a0047b8 <_free_r+0x4c>
1a00479e:	6821      	ldr	r1, [r4, #0]
1a0047a0:	1862      	adds	r2, r4, r1
1a0047a2:	4293      	cmp	r3, r2
1a0047a4:	bf04      	itt	eq
1a0047a6:	681a      	ldreq	r2, [r3, #0]
1a0047a8:	685b      	ldreq	r3, [r3, #4]
1a0047aa:	6063      	str	r3, [r4, #4]
1a0047ac:	bf04      	itt	eq
1a0047ae:	1852      	addeq	r2, r2, r1
1a0047b0:	6022      	streq	r2, [r4, #0]
1a0047b2:	6004      	str	r4, [r0, #0]
1a0047b4:	e7ec      	b.n	1a004790 <_free_r+0x24>
1a0047b6:	4613      	mov	r3, r2
1a0047b8:	685a      	ldr	r2, [r3, #4]
1a0047ba:	b10a      	cbz	r2, 1a0047c0 <_free_r+0x54>
1a0047bc:	42a2      	cmp	r2, r4
1a0047be:	d9fa      	bls.n	1a0047b6 <_free_r+0x4a>
1a0047c0:	6819      	ldr	r1, [r3, #0]
1a0047c2:	1858      	adds	r0, r3, r1
1a0047c4:	42a0      	cmp	r0, r4
1a0047c6:	d10b      	bne.n	1a0047e0 <_free_r+0x74>
1a0047c8:	6820      	ldr	r0, [r4, #0]
1a0047ca:	4401      	add	r1, r0
1a0047cc:	1858      	adds	r0, r3, r1
1a0047ce:	4282      	cmp	r2, r0
1a0047d0:	6019      	str	r1, [r3, #0]
1a0047d2:	d1dd      	bne.n	1a004790 <_free_r+0x24>
1a0047d4:	6810      	ldr	r0, [r2, #0]
1a0047d6:	6852      	ldr	r2, [r2, #4]
1a0047d8:	605a      	str	r2, [r3, #4]
1a0047da:	4401      	add	r1, r0
1a0047dc:	6019      	str	r1, [r3, #0]
1a0047de:	e7d7      	b.n	1a004790 <_free_r+0x24>
1a0047e0:	d902      	bls.n	1a0047e8 <_free_r+0x7c>
1a0047e2:	230c      	movs	r3, #12
1a0047e4:	602b      	str	r3, [r5, #0]
1a0047e6:	e7d3      	b.n	1a004790 <_free_r+0x24>
1a0047e8:	6820      	ldr	r0, [r4, #0]
1a0047ea:	1821      	adds	r1, r4, r0
1a0047ec:	428a      	cmp	r2, r1
1a0047ee:	bf04      	itt	eq
1a0047f0:	6811      	ldreq	r1, [r2, #0]
1a0047f2:	6852      	ldreq	r2, [r2, #4]
1a0047f4:	6062      	str	r2, [r4, #4]
1a0047f6:	bf04      	itt	eq
1a0047f8:	1809      	addeq	r1, r1, r0
1a0047fa:	6021      	streq	r1, [r4, #0]
1a0047fc:	605c      	str	r4, [r3, #4]
1a0047fe:	e7c7      	b.n	1a004790 <_free_r+0x24>
1a004800:	bd38      	pop	{r3, r4, r5, pc}
1a004802:	bf00      	nop
1a004804:	10002b68 	.word	0x10002b68

1a004808 <_malloc_r>:
1a004808:	b570      	push	{r4, r5, r6, lr}
1a00480a:	1ccd      	adds	r5, r1, #3
1a00480c:	f025 0503 	bic.w	r5, r5, #3
1a004810:	3508      	adds	r5, #8
1a004812:	2d0c      	cmp	r5, #12
1a004814:	bf38      	it	cc
1a004816:	250c      	movcc	r5, #12
1a004818:	2d00      	cmp	r5, #0
1a00481a:	4606      	mov	r6, r0
1a00481c:	db01      	blt.n	1a004822 <_malloc_r+0x1a>
1a00481e:	42a9      	cmp	r1, r5
1a004820:	d903      	bls.n	1a00482a <_malloc_r+0x22>
1a004822:	230c      	movs	r3, #12
1a004824:	6033      	str	r3, [r6, #0]
1a004826:	2000      	movs	r0, #0
1a004828:	bd70      	pop	{r4, r5, r6, pc}
1a00482a:	f000 fba9 	bl	1a004f80 <__malloc_lock>
1a00482e:	4a21      	ldr	r2, [pc, #132]	; (1a0048b4 <_malloc_r+0xac>)
1a004830:	6814      	ldr	r4, [r2, #0]
1a004832:	4621      	mov	r1, r4
1a004834:	b991      	cbnz	r1, 1a00485c <_malloc_r+0x54>
1a004836:	4c20      	ldr	r4, [pc, #128]	; (1a0048b8 <_malloc_r+0xb0>)
1a004838:	6823      	ldr	r3, [r4, #0]
1a00483a:	b91b      	cbnz	r3, 1a004844 <_malloc_r+0x3c>
1a00483c:	4630      	mov	r0, r6
1a00483e:	f7fb ffa9 	bl	1a000794 <_sbrk_r>
1a004842:	6020      	str	r0, [r4, #0]
1a004844:	4629      	mov	r1, r5
1a004846:	4630      	mov	r0, r6
1a004848:	f7fb ffa4 	bl	1a000794 <_sbrk_r>
1a00484c:	1c43      	adds	r3, r0, #1
1a00484e:	d124      	bne.n	1a00489a <_malloc_r+0x92>
1a004850:	230c      	movs	r3, #12
1a004852:	6033      	str	r3, [r6, #0]
1a004854:	4630      	mov	r0, r6
1a004856:	f000 fb94 	bl	1a004f82 <__malloc_unlock>
1a00485a:	e7e4      	b.n	1a004826 <_malloc_r+0x1e>
1a00485c:	680b      	ldr	r3, [r1, #0]
1a00485e:	1b5b      	subs	r3, r3, r5
1a004860:	d418      	bmi.n	1a004894 <_malloc_r+0x8c>
1a004862:	2b0b      	cmp	r3, #11
1a004864:	d90f      	bls.n	1a004886 <_malloc_r+0x7e>
1a004866:	600b      	str	r3, [r1, #0]
1a004868:	50cd      	str	r5, [r1, r3]
1a00486a:	18cc      	adds	r4, r1, r3
1a00486c:	4630      	mov	r0, r6
1a00486e:	f000 fb88 	bl	1a004f82 <__malloc_unlock>
1a004872:	f104 000b 	add.w	r0, r4, #11
1a004876:	1d23      	adds	r3, r4, #4
1a004878:	f020 0007 	bic.w	r0, r0, #7
1a00487c:	1ac3      	subs	r3, r0, r3
1a00487e:	d0d3      	beq.n	1a004828 <_malloc_r+0x20>
1a004880:	425a      	negs	r2, r3
1a004882:	50e2      	str	r2, [r4, r3]
1a004884:	e7d0      	b.n	1a004828 <_malloc_r+0x20>
1a004886:	428c      	cmp	r4, r1
1a004888:	684b      	ldr	r3, [r1, #4]
1a00488a:	bf16      	itet	ne
1a00488c:	6063      	strne	r3, [r4, #4]
1a00488e:	6013      	streq	r3, [r2, #0]
1a004890:	460c      	movne	r4, r1
1a004892:	e7eb      	b.n	1a00486c <_malloc_r+0x64>
1a004894:	460c      	mov	r4, r1
1a004896:	6849      	ldr	r1, [r1, #4]
1a004898:	e7cc      	b.n	1a004834 <_malloc_r+0x2c>
1a00489a:	1cc4      	adds	r4, r0, #3
1a00489c:	f024 0403 	bic.w	r4, r4, #3
1a0048a0:	42a0      	cmp	r0, r4
1a0048a2:	d005      	beq.n	1a0048b0 <_malloc_r+0xa8>
1a0048a4:	1a21      	subs	r1, r4, r0
1a0048a6:	4630      	mov	r0, r6
1a0048a8:	f7fb ff74 	bl	1a000794 <_sbrk_r>
1a0048ac:	3001      	adds	r0, #1
1a0048ae:	d0cf      	beq.n	1a004850 <_malloc_r+0x48>
1a0048b0:	6025      	str	r5, [r4, #0]
1a0048b2:	e7db      	b.n	1a00486c <_malloc_r+0x64>
1a0048b4:	10002b68 	.word	0x10002b68
1a0048b8:	10002b6c 	.word	0x10002b6c

1a0048bc <__sfputc_r>:
1a0048bc:	6893      	ldr	r3, [r2, #8]
1a0048be:	3b01      	subs	r3, #1
1a0048c0:	2b00      	cmp	r3, #0
1a0048c2:	b410      	push	{r4}
1a0048c4:	6093      	str	r3, [r2, #8]
1a0048c6:	da08      	bge.n	1a0048da <__sfputc_r+0x1e>
1a0048c8:	6994      	ldr	r4, [r2, #24]
1a0048ca:	42a3      	cmp	r3, r4
1a0048cc:	db01      	blt.n	1a0048d2 <__sfputc_r+0x16>
1a0048ce:	290a      	cmp	r1, #10
1a0048d0:	d103      	bne.n	1a0048da <__sfputc_r+0x1e>
1a0048d2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0048d6:	f7ff bcab 	b.w	1a004230 <__swbuf_r>
1a0048da:	6813      	ldr	r3, [r2, #0]
1a0048dc:	1c58      	adds	r0, r3, #1
1a0048de:	6010      	str	r0, [r2, #0]
1a0048e0:	7019      	strb	r1, [r3, #0]
1a0048e2:	4608      	mov	r0, r1
1a0048e4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0048e8:	4770      	bx	lr

1a0048ea <__sfputs_r>:
1a0048ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0048ec:	4606      	mov	r6, r0
1a0048ee:	460f      	mov	r7, r1
1a0048f0:	4614      	mov	r4, r2
1a0048f2:	18d5      	adds	r5, r2, r3
1a0048f4:	42ac      	cmp	r4, r5
1a0048f6:	d101      	bne.n	1a0048fc <__sfputs_r+0x12>
1a0048f8:	2000      	movs	r0, #0
1a0048fa:	e007      	b.n	1a00490c <__sfputs_r+0x22>
1a0048fc:	463a      	mov	r2, r7
1a0048fe:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004902:	4630      	mov	r0, r6
1a004904:	f7ff ffda 	bl	1a0048bc <__sfputc_r>
1a004908:	1c43      	adds	r3, r0, #1
1a00490a:	d1f3      	bne.n	1a0048f4 <__sfputs_r+0xa>
1a00490c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00490e:	Address 0x000000001a00490e is out of bounds.


1a004910 <_vfiprintf_r>:
1a004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004914:	460c      	mov	r4, r1
1a004916:	b09d      	sub	sp, #116	; 0x74
1a004918:	4617      	mov	r7, r2
1a00491a:	461d      	mov	r5, r3
1a00491c:	4606      	mov	r6, r0
1a00491e:	b118      	cbz	r0, 1a004928 <_vfiprintf_r+0x18>
1a004920:	6983      	ldr	r3, [r0, #24]
1a004922:	b90b      	cbnz	r3, 1a004928 <_vfiprintf_r+0x18>
1a004924:	f7ff fe34 	bl	1a004590 <__sinit>
1a004928:	4b7c      	ldr	r3, [pc, #496]	; (1a004b1c <_vfiprintf_r+0x20c>)
1a00492a:	429c      	cmp	r4, r3
1a00492c:	d158      	bne.n	1a0049e0 <_vfiprintf_r+0xd0>
1a00492e:	6874      	ldr	r4, [r6, #4]
1a004930:	89a3      	ldrh	r3, [r4, #12]
1a004932:	0718      	lsls	r0, r3, #28
1a004934:	d55e      	bpl.n	1a0049f4 <_vfiprintf_r+0xe4>
1a004936:	6923      	ldr	r3, [r4, #16]
1a004938:	2b00      	cmp	r3, #0
1a00493a:	d05b      	beq.n	1a0049f4 <_vfiprintf_r+0xe4>
1a00493c:	2300      	movs	r3, #0
1a00493e:	9309      	str	r3, [sp, #36]	; 0x24
1a004940:	2320      	movs	r3, #32
1a004942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004946:	2330      	movs	r3, #48	; 0x30
1a004948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a00494c:	9503      	str	r5, [sp, #12]
1a00494e:	f04f 0b01 	mov.w	fp, #1
1a004952:	46b8      	mov	r8, r7
1a004954:	4645      	mov	r5, r8
1a004956:	f815 3b01 	ldrb.w	r3, [r5], #1
1a00495a:	b10b      	cbz	r3, 1a004960 <_vfiprintf_r+0x50>
1a00495c:	2b25      	cmp	r3, #37	; 0x25
1a00495e:	d154      	bne.n	1a004a0a <_vfiprintf_r+0xfa>
1a004960:	ebb8 0a07 	subs.w	sl, r8, r7
1a004964:	d00b      	beq.n	1a00497e <_vfiprintf_r+0x6e>
1a004966:	4653      	mov	r3, sl
1a004968:	463a      	mov	r2, r7
1a00496a:	4621      	mov	r1, r4
1a00496c:	4630      	mov	r0, r6
1a00496e:	f7ff ffbc 	bl	1a0048ea <__sfputs_r>
1a004972:	3001      	adds	r0, #1
1a004974:	f000 80c2 	beq.w	1a004afc <_vfiprintf_r+0x1ec>
1a004978:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00497a:	4453      	add	r3, sl
1a00497c:	9309      	str	r3, [sp, #36]	; 0x24
1a00497e:	f898 3000 	ldrb.w	r3, [r8]
1a004982:	2b00      	cmp	r3, #0
1a004984:	f000 80ba 	beq.w	1a004afc <_vfiprintf_r+0x1ec>
1a004988:	2300      	movs	r3, #0
1a00498a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00498e:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004992:	9304      	str	r3, [sp, #16]
1a004994:	9307      	str	r3, [sp, #28]
1a004996:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00499a:	931a      	str	r3, [sp, #104]	; 0x68
1a00499c:	46a8      	mov	r8, r5
1a00499e:	2205      	movs	r2, #5
1a0049a0:	f818 1b01 	ldrb.w	r1, [r8], #1
1a0049a4:	485e      	ldr	r0, [pc, #376]	; (1a004b20 <_vfiprintf_r+0x210>)
1a0049a6:	f000 fa9b 	bl	1a004ee0 <memchr>
1a0049aa:	9b04      	ldr	r3, [sp, #16]
1a0049ac:	bb78      	cbnz	r0, 1a004a0e <_vfiprintf_r+0xfe>
1a0049ae:	06d9      	lsls	r1, r3, #27
1a0049b0:	bf44      	itt	mi
1a0049b2:	2220      	movmi	r2, #32
1a0049b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0049b8:	071a      	lsls	r2, r3, #28
1a0049ba:	bf44      	itt	mi
1a0049bc:	222b      	movmi	r2, #43	; 0x2b
1a0049be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0049c2:	782a      	ldrb	r2, [r5, #0]
1a0049c4:	2a2a      	cmp	r2, #42	; 0x2a
1a0049c6:	d02a      	beq.n	1a004a1e <_vfiprintf_r+0x10e>
1a0049c8:	9a07      	ldr	r2, [sp, #28]
1a0049ca:	46a8      	mov	r8, r5
1a0049cc:	2000      	movs	r0, #0
1a0049ce:	250a      	movs	r5, #10
1a0049d0:	4641      	mov	r1, r8
1a0049d2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0049d6:	3b30      	subs	r3, #48	; 0x30
1a0049d8:	2b09      	cmp	r3, #9
1a0049da:	d969      	bls.n	1a004ab0 <_vfiprintf_r+0x1a0>
1a0049dc:	b360      	cbz	r0, 1a004a38 <_vfiprintf_r+0x128>
1a0049de:	e024      	b.n	1a004a2a <_vfiprintf_r+0x11a>
1a0049e0:	4b50      	ldr	r3, [pc, #320]	; (1a004b24 <_vfiprintf_r+0x214>)
1a0049e2:	429c      	cmp	r4, r3
1a0049e4:	d101      	bne.n	1a0049ea <_vfiprintf_r+0xda>
1a0049e6:	68b4      	ldr	r4, [r6, #8]
1a0049e8:	e7a2      	b.n	1a004930 <_vfiprintf_r+0x20>
1a0049ea:	4b4f      	ldr	r3, [pc, #316]	; (1a004b28 <_vfiprintf_r+0x218>)
1a0049ec:	429c      	cmp	r4, r3
1a0049ee:	bf08      	it	eq
1a0049f0:	68f4      	ldreq	r4, [r6, #12]
1a0049f2:	e79d      	b.n	1a004930 <_vfiprintf_r+0x20>
1a0049f4:	4621      	mov	r1, r4
1a0049f6:	4630      	mov	r0, r6
1a0049f8:	f7ff fc6c 	bl	1a0042d4 <__swsetup_r>
1a0049fc:	2800      	cmp	r0, #0
1a0049fe:	d09d      	beq.n	1a00493c <_vfiprintf_r+0x2c>
1a004a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a04:	b01d      	add	sp, #116	; 0x74
1a004a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004a0a:	46a8      	mov	r8, r5
1a004a0c:	e7a2      	b.n	1a004954 <_vfiprintf_r+0x44>
1a004a0e:	4a44      	ldr	r2, [pc, #272]	; (1a004b20 <_vfiprintf_r+0x210>)
1a004a10:	1a80      	subs	r0, r0, r2
1a004a12:	fa0b f000 	lsl.w	r0, fp, r0
1a004a16:	4318      	orrs	r0, r3
1a004a18:	9004      	str	r0, [sp, #16]
1a004a1a:	4645      	mov	r5, r8
1a004a1c:	e7be      	b.n	1a00499c <_vfiprintf_r+0x8c>
1a004a1e:	9a03      	ldr	r2, [sp, #12]
1a004a20:	1d11      	adds	r1, r2, #4
1a004a22:	6812      	ldr	r2, [r2, #0]
1a004a24:	9103      	str	r1, [sp, #12]
1a004a26:	2a00      	cmp	r2, #0
1a004a28:	db01      	blt.n	1a004a2e <_vfiprintf_r+0x11e>
1a004a2a:	9207      	str	r2, [sp, #28]
1a004a2c:	e004      	b.n	1a004a38 <_vfiprintf_r+0x128>
1a004a2e:	4252      	negs	r2, r2
1a004a30:	f043 0302 	orr.w	r3, r3, #2
1a004a34:	9207      	str	r2, [sp, #28]
1a004a36:	9304      	str	r3, [sp, #16]
1a004a38:	f898 3000 	ldrb.w	r3, [r8]
1a004a3c:	2b2e      	cmp	r3, #46	; 0x2e
1a004a3e:	d10e      	bne.n	1a004a5e <_vfiprintf_r+0x14e>
1a004a40:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004a44:	2b2a      	cmp	r3, #42	; 0x2a
1a004a46:	d138      	bne.n	1a004aba <_vfiprintf_r+0x1aa>
1a004a48:	9b03      	ldr	r3, [sp, #12]
1a004a4a:	1d1a      	adds	r2, r3, #4
1a004a4c:	681b      	ldr	r3, [r3, #0]
1a004a4e:	9203      	str	r2, [sp, #12]
1a004a50:	2b00      	cmp	r3, #0
1a004a52:	bfb8      	it	lt
1a004a54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004a58:	f108 0802 	add.w	r8, r8, #2
1a004a5c:	9305      	str	r3, [sp, #20]
1a004a5e:	4d33      	ldr	r5, [pc, #204]	; (1a004b2c <_vfiprintf_r+0x21c>)
1a004a60:	f898 1000 	ldrb.w	r1, [r8]
1a004a64:	2203      	movs	r2, #3
1a004a66:	4628      	mov	r0, r5
1a004a68:	f000 fa3a 	bl	1a004ee0 <memchr>
1a004a6c:	b140      	cbz	r0, 1a004a80 <_vfiprintf_r+0x170>
1a004a6e:	2340      	movs	r3, #64	; 0x40
1a004a70:	1b40      	subs	r0, r0, r5
1a004a72:	fa03 f000 	lsl.w	r0, r3, r0
1a004a76:	9b04      	ldr	r3, [sp, #16]
1a004a78:	4303      	orrs	r3, r0
1a004a7a:	f108 0801 	add.w	r8, r8, #1
1a004a7e:	9304      	str	r3, [sp, #16]
1a004a80:	f898 1000 	ldrb.w	r1, [r8]
1a004a84:	482a      	ldr	r0, [pc, #168]	; (1a004b30 <_vfiprintf_r+0x220>)
1a004a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004a8a:	2206      	movs	r2, #6
1a004a8c:	f108 0701 	add.w	r7, r8, #1
1a004a90:	f000 fa26 	bl	1a004ee0 <memchr>
1a004a94:	2800      	cmp	r0, #0
1a004a96:	d037      	beq.n	1a004b08 <_vfiprintf_r+0x1f8>
1a004a98:	4b26      	ldr	r3, [pc, #152]	; (1a004b34 <_vfiprintf_r+0x224>)
1a004a9a:	bb1b      	cbnz	r3, 1a004ae4 <_vfiprintf_r+0x1d4>
1a004a9c:	9b03      	ldr	r3, [sp, #12]
1a004a9e:	3307      	adds	r3, #7
1a004aa0:	f023 0307 	bic.w	r3, r3, #7
1a004aa4:	3308      	adds	r3, #8
1a004aa6:	9303      	str	r3, [sp, #12]
1a004aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004aaa:	444b      	add	r3, r9
1a004aac:	9309      	str	r3, [sp, #36]	; 0x24
1a004aae:	e750      	b.n	1a004952 <_vfiprintf_r+0x42>
1a004ab0:	fb05 3202 	mla	r2, r5, r2, r3
1a004ab4:	2001      	movs	r0, #1
1a004ab6:	4688      	mov	r8, r1
1a004ab8:	e78a      	b.n	1a0049d0 <_vfiprintf_r+0xc0>
1a004aba:	2300      	movs	r3, #0
1a004abc:	f108 0801 	add.w	r8, r8, #1
1a004ac0:	9305      	str	r3, [sp, #20]
1a004ac2:	4619      	mov	r1, r3
1a004ac4:	250a      	movs	r5, #10
1a004ac6:	4640      	mov	r0, r8
1a004ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004acc:	3a30      	subs	r2, #48	; 0x30
1a004ace:	2a09      	cmp	r2, #9
1a004ad0:	d903      	bls.n	1a004ada <_vfiprintf_r+0x1ca>
1a004ad2:	2b00      	cmp	r3, #0
1a004ad4:	d0c3      	beq.n	1a004a5e <_vfiprintf_r+0x14e>
1a004ad6:	9105      	str	r1, [sp, #20]
1a004ad8:	e7c1      	b.n	1a004a5e <_vfiprintf_r+0x14e>
1a004ada:	fb05 2101 	mla	r1, r5, r1, r2
1a004ade:	2301      	movs	r3, #1
1a004ae0:	4680      	mov	r8, r0
1a004ae2:	e7f0      	b.n	1a004ac6 <_vfiprintf_r+0x1b6>
1a004ae4:	ab03      	add	r3, sp, #12
1a004ae6:	9300      	str	r3, [sp, #0]
1a004ae8:	4622      	mov	r2, r4
1a004aea:	4b13      	ldr	r3, [pc, #76]	; (1a004b38 <_vfiprintf_r+0x228>)
1a004aec:	a904      	add	r1, sp, #16
1a004aee:	4630      	mov	r0, r6
1a004af0:	f3af 8000 	nop.w
1a004af4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004af8:	4681      	mov	r9, r0
1a004afa:	d1d5      	bne.n	1a004aa8 <_vfiprintf_r+0x198>
1a004afc:	89a3      	ldrh	r3, [r4, #12]
1a004afe:	065b      	lsls	r3, r3, #25
1a004b00:	f53f af7e 	bmi.w	1a004a00 <_vfiprintf_r+0xf0>
1a004b04:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004b06:	e77d      	b.n	1a004a04 <_vfiprintf_r+0xf4>
1a004b08:	ab03      	add	r3, sp, #12
1a004b0a:	9300      	str	r3, [sp, #0]
1a004b0c:	4622      	mov	r2, r4
1a004b0e:	4b0a      	ldr	r3, [pc, #40]	; (1a004b38 <_vfiprintf_r+0x228>)
1a004b10:	a904      	add	r1, sp, #16
1a004b12:	4630      	mov	r0, r6
1a004b14:	f000 f888 	bl	1a004c28 <_printf_i>
1a004b18:	e7ec      	b.n	1a004af4 <_vfiprintf_r+0x1e4>
1a004b1a:	bf00      	nop
1a004b1c:	1a00530c 	.word	0x1a00530c
1a004b20:	1a005350 	.word	0x1a005350
1a004b24:	1a00532c 	.word	0x1a00532c
1a004b28:	1a0052ec 	.word	0x1a0052ec
1a004b2c:	1a005356 	.word	0x1a005356
1a004b30:	1a00535a 	.word	0x1a00535a
1a004b34:	00000000 	.word	0x00000000
1a004b38:	1a0048eb 	.word	0x1a0048eb

1a004b3c <_printf_common>:
1a004b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004b40:	4691      	mov	r9, r2
1a004b42:	461f      	mov	r7, r3
1a004b44:	688a      	ldr	r2, [r1, #8]
1a004b46:	690b      	ldr	r3, [r1, #16]
1a004b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004b4c:	4293      	cmp	r3, r2
1a004b4e:	bfb8      	it	lt
1a004b50:	4613      	movlt	r3, r2
1a004b52:	f8c9 3000 	str.w	r3, [r9]
1a004b56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a004b5a:	4606      	mov	r6, r0
1a004b5c:	460c      	mov	r4, r1
1a004b5e:	b112      	cbz	r2, 1a004b66 <_printf_common+0x2a>
1a004b60:	3301      	adds	r3, #1
1a004b62:	f8c9 3000 	str.w	r3, [r9]
1a004b66:	6823      	ldr	r3, [r4, #0]
1a004b68:	0699      	lsls	r1, r3, #26
1a004b6a:	bf42      	ittt	mi
1a004b6c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004b70:	3302      	addmi	r3, #2
1a004b72:	f8c9 3000 	strmi.w	r3, [r9]
1a004b76:	6825      	ldr	r5, [r4, #0]
1a004b78:	f015 0506 	ands.w	r5, r5, #6
1a004b7c:	d107      	bne.n	1a004b8e <_printf_common+0x52>
1a004b7e:	f104 0a19 	add.w	sl, r4, #25
1a004b82:	68e3      	ldr	r3, [r4, #12]
1a004b84:	f8d9 2000 	ldr.w	r2, [r9]
1a004b88:	1a9b      	subs	r3, r3, r2
1a004b8a:	42ab      	cmp	r3, r5
1a004b8c:	dc28      	bgt.n	1a004be0 <_printf_common+0xa4>
1a004b8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004b92:	6822      	ldr	r2, [r4, #0]
1a004b94:	3300      	adds	r3, #0
1a004b96:	bf18      	it	ne
1a004b98:	2301      	movne	r3, #1
1a004b9a:	0692      	lsls	r2, r2, #26
1a004b9c:	d42d      	bmi.n	1a004bfa <_printf_common+0xbe>
1a004b9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004ba2:	4639      	mov	r1, r7
1a004ba4:	4630      	mov	r0, r6
1a004ba6:	47c0      	blx	r8
1a004ba8:	3001      	adds	r0, #1
1a004baa:	d020      	beq.n	1a004bee <_printf_common+0xb2>
1a004bac:	6823      	ldr	r3, [r4, #0]
1a004bae:	68e5      	ldr	r5, [r4, #12]
1a004bb0:	f8d9 2000 	ldr.w	r2, [r9]
1a004bb4:	f003 0306 	and.w	r3, r3, #6
1a004bb8:	2b04      	cmp	r3, #4
1a004bba:	bf08      	it	eq
1a004bbc:	1aad      	subeq	r5, r5, r2
1a004bbe:	68a3      	ldr	r3, [r4, #8]
1a004bc0:	6922      	ldr	r2, [r4, #16]
1a004bc2:	bf0c      	ite	eq
1a004bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004bc8:	2500      	movne	r5, #0
1a004bca:	4293      	cmp	r3, r2
1a004bcc:	bfc4      	itt	gt
1a004bce:	1a9b      	subgt	r3, r3, r2
1a004bd0:	18ed      	addgt	r5, r5, r3
1a004bd2:	f04f 0900 	mov.w	r9, #0
1a004bd6:	341a      	adds	r4, #26
1a004bd8:	454d      	cmp	r5, r9
1a004bda:	d11a      	bne.n	1a004c12 <_printf_common+0xd6>
1a004bdc:	2000      	movs	r0, #0
1a004bde:	e008      	b.n	1a004bf2 <_printf_common+0xb6>
1a004be0:	2301      	movs	r3, #1
1a004be2:	4652      	mov	r2, sl
1a004be4:	4639      	mov	r1, r7
1a004be6:	4630      	mov	r0, r6
1a004be8:	47c0      	blx	r8
1a004bea:	3001      	adds	r0, #1
1a004bec:	d103      	bne.n	1a004bf6 <_printf_common+0xba>
1a004bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004bf6:	3501      	adds	r5, #1
1a004bf8:	e7c3      	b.n	1a004b82 <_printf_common+0x46>
1a004bfa:	18e1      	adds	r1, r4, r3
1a004bfc:	1c5a      	adds	r2, r3, #1
1a004bfe:	2030      	movs	r0, #48	; 0x30
1a004c00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004c04:	4422      	add	r2, r4
1a004c06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a004c0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004c0e:	3302      	adds	r3, #2
1a004c10:	e7c5      	b.n	1a004b9e <_printf_common+0x62>
1a004c12:	2301      	movs	r3, #1
1a004c14:	4622      	mov	r2, r4
1a004c16:	4639      	mov	r1, r7
1a004c18:	4630      	mov	r0, r6
1a004c1a:	47c0      	blx	r8
1a004c1c:	3001      	adds	r0, #1
1a004c1e:	d0e6      	beq.n	1a004bee <_printf_common+0xb2>
1a004c20:	f109 0901 	add.w	r9, r9, #1
1a004c24:	e7d8      	b.n	1a004bd8 <_printf_common+0x9c>
1a004c26:	Address 0x000000001a004c26 is out of bounds.


1a004c28 <_printf_i>:
1a004c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004c2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a004c30:	460c      	mov	r4, r1
1a004c32:	7e09      	ldrb	r1, [r1, #24]
1a004c34:	b085      	sub	sp, #20
1a004c36:	296e      	cmp	r1, #110	; 0x6e
1a004c38:	4617      	mov	r7, r2
1a004c3a:	4606      	mov	r6, r0
1a004c3c:	4698      	mov	r8, r3
1a004c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004c40:	f000 80b3 	beq.w	1a004daa <_printf_i+0x182>
1a004c44:	d822      	bhi.n	1a004c8c <_printf_i+0x64>
1a004c46:	2963      	cmp	r1, #99	; 0x63
1a004c48:	d036      	beq.n	1a004cb8 <_printf_i+0x90>
1a004c4a:	d80a      	bhi.n	1a004c62 <_printf_i+0x3a>
1a004c4c:	2900      	cmp	r1, #0
1a004c4e:	f000 80b9 	beq.w	1a004dc4 <_printf_i+0x19c>
1a004c52:	2958      	cmp	r1, #88	; 0x58
1a004c54:	f000 8083 	beq.w	1a004d5e <_printf_i+0x136>
1a004c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004c5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a004c60:	e032      	b.n	1a004cc8 <_printf_i+0xa0>
1a004c62:	2964      	cmp	r1, #100	; 0x64
1a004c64:	d001      	beq.n	1a004c6a <_printf_i+0x42>
1a004c66:	2969      	cmp	r1, #105	; 0x69
1a004c68:	d1f6      	bne.n	1a004c58 <_printf_i+0x30>
1a004c6a:	6820      	ldr	r0, [r4, #0]
1a004c6c:	6813      	ldr	r3, [r2, #0]
1a004c6e:	0605      	lsls	r5, r0, #24
1a004c70:	f103 0104 	add.w	r1, r3, #4
1a004c74:	d52a      	bpl.n	1a004ccc <_printf_i+0xa4>
1a004c76:	681b      	ldr	r3, [r3, #0]
1a004c78:	6011      	str	r1, [r2, #0]
1a004c7a:	2b00      	cmp	r3, #0
1a004c7c:	da03      	bge.n	1a004c86 <_printf_i+0x5e>
1a004c7e:	222d      	movs	r2, #45	; 0x2d
1a004c80:	425b      	negs	r3, r3
1a004c82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a004c86:	486f      	ldr	r0, [pc, #444]	; (1a004e44 <_printf_i+0x21c>)
1a004c88:	220a      	movs	r2, #10
1a004c8a:	e039      	b.n	1a004d00 <_printf_i+0xd8>
1a004c8c:	2973      	cmp	r1, #115	; 0x73
1a004c8e:	f000 809d 	beq.w	1a004dcc <_printf_i+0x1a4>
1a004c92:	d808      	bhi.n	1a004ca6 <_printf_i+0x7e>
1a004c94:	296f      	cmp	r1, #111	; 0x6f
1a004c96:	d020      	beq.n	1a004cda <_printf_i+0xb2>
1a004c98:	2970      	cmp	r1, #112	; 0x70
1a004c9a:	d1dd      	bne.n	1a004c58 <_printf_i+0x30>
1a004c9c:	6823      	ldr	r3, [r4, #0]
1a004c9e:	f043 0320 	orr.w	r3, r3, #32
1a004ca2:	6023      	str	r3, [r4, #0]
1a004ca4:	e003      	b.n	1a004cae <_printf_i+0x86>
1a004ca6:	2975      	cmp	r1, #117	; 0x75
1a004ca8:	d017      	beq.n	1a004cda <_printf_i+0xb2>
1a004caa:	2978      	cmp	r1, #120	; 0x78
1a004cac:	d1d4      	bne.n	1a004c58 <_printf_i+0x30>
1a004cae:	2378      	movs	r3, #120	; 0x78
1a004cb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004cb4:	4864      	ldr	r0, [pc, #400]	; (1a004e48 <_printf_i+0x220>)
1a004cb6:	e055      	b.n	1a004d64 <_printf_i+0x13c>
1a004cb8:	6813      	ldr	r3, [r2, #0]
1a004cba:	1d19      	adds	r1, r3, #4
1a004cbc:	681b      	ldr	r3, [r3, #0]
1a004cbe:	6011      	str	r1, [r2, #0]
1a004cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004cc8:	2301      	movs	r3, #1
1a004cca:	e08c      	b.n	1a004de6 <_printf_i+0x1be>
1a004ccc:	681b      	ldr	r3, [r3, #0]
1a004cce:	6011      	str	r1, [r2, #0]
1a004cd0:	f010 0f40 	tst.w	r0, #64	; 0x40
1a004cd4:	bf18      	it	ne
1a004cd6:	b21b      	sxthne	r3, r3
1a004cd8:	e7cf      	b.n	1a004c7a <_printf_i+0x52>
1a004cda:	6813      	ldr	r3, [r2, #0]
1a004cdc:	6825      	ldr	r5, [r4, #0]
1a004cde:	1d18      	adds	r0, r3, #4
1a004ce0:	6010      	str	r0, [r2, #0]
1a004ce2:	0628      	lsls	r0, r5, #24
1a004ce4:	d501      	bpl.n	1a004cea <_printf_i+0xc2>
1a004ce6:	681b      	ldr	r3, [r3, #0]
1a004ce8:	e002      	b.n	1a004cf0 <_printf_i+0xc8>
1a004cea:	0668      	lsls	r0, r5, #25
1a004cec:	d5fb      	bpl.n	1a004ce6 <_printf_i+0xbe>
1a004cee:	881b      	ldrh	r3, [r3, #0]
1a004cf0:	4854      	ldr	r0, [pc, #336]	; (1a004e44 <_printf_i+0x21c>)
1a004cf2:	296f      	cmp	r1, #111	; 0x6f
1a004cf4:	bf14      	ite	ne
1a004cf6:	220a      	movne	r2, #10
1a004cf8:	2208      	moveq	r2, #8
1a004cfa:	2100      	movs	r1, #0
1a004cfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a004d00:	6865      	ldr	r5, [r4, #4]
1a004d02:	60a5      	str	r5, [r4, #8]
1a004d04:	2d00      	cmp	r5, #0
1a004d06:	f2c0 8095 	blt.w	1a004e34 <_printf_i+0x20c>
1a004d0a:	6821      	ldr	r1, [r4, #0]
1a004d0c:	f021 0104 	bic.w	r1, r1, #4
1a004d10:	6021      	str	r1, [r4, #0]
1a004d12:	2b00      	cmp	r3, #0
1a004d14:	d13d      	bne.n	1a004d92 <_printf_i+0x16a>
1a004d16:	2d00      	cmp	r5, #0
1a004d18:	f040 808e 	bne.w	1a004e38 <_printf_i+0x210>
1a004d1c:	4665      	mov	r5, ip
1a004d1e:	2a08      	cmp	r2, #8
1a004d20:	d10b      	bne.n	1a004d3a <_printf_i+0x112>
1a004d22:	6823      	ldr	r3, [r4, #0]
1a004d24:	07db      	lsls	r3, r3, #31
1a004d26:	d508      	bpl.n	1a004d3a <_printf_i+0x112>
1a004d28:	6923      	ldr	r3, [r4, #16]
1a004d2a:	6862      	ldr	r2, [r4, #4]
1a004d2c:	429a      	cmp	r2, r3
1a004d2e:	bfde      	ittt	le
1a004d30:	2330      	movle	r3, #48	; 0x30
1a004d32:	f805 3c01 	strble.w	r3, [r5, #-1]
1a004d36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a004d3a:	ebac 0305 	sub.w	r3, ip, r5
1a004d3e:	6123      	str	r3, [r4, #16]
1a004d40:	f8cd 8000 	str.w	r8, [sp]
1a004d44:	463b      	mov	r3, r7
1a004d46:	aa03      	add	r2, sp, #12
1a004d48:	4621      	mov	r1, r4
1a004d4a:	4630      	mov	r0, r6
1a004d4c:	f7ff fef6 	bl	1a004b3c <_printf_common>
1a004d50:	3001      	adds	r0, #1
1a004d52:	d14d      	bne.n	1a004df0 <_printf_i+0x1c8>
1a004d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004d58:	b005      	add	sp, #20
1a004d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004d5e:	4839      	ldr	r0, [pc, #228]	; (1a004e44 <_printf_i+0x21c>)
1a004d60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a004d64:	6813      	ldr	r3, [r2, #0]
1a004d66:	6821      	ldr	r1, [r4, #0]
1a004d68:	1d1d      	adds	r5, r3, #4
1a004d6a:	681b      	ldr	r3, [r3, #0]
1a004d6c:	6015      	str	r5, [r2, #0]
1a004d6e:	060a      	lsls	r2, r1, #24
1a004d70:	d50b      	bpl.n	1a004d8a <_printf_i+0x162>
1a004d72:	07ca      	lsls	r2, r1, #31
1a004d74:	bf44      	itt	mi
1a004d76:	f041 0120 	orrmi.w	r1, r1, #32
1a004d7a:	6021      	strmi	r1, [r4, #0]
1a004d7c:	b91b      	cbnz	r3, 1a004d86 <_printf_i+0x15e>
1a004d7e:	6822      	ldr	r2, [r4, #0]
1a004d80:	f022 0220 	bic.w	r2, r2, #32
1a004d84:	6022      	str	r2, [r4, #0]
1a004d86:	2210      	movs	r2, #16
1a004d88:	e7b7      	b.n	1a004cfa <_printf_i+0xd2>
1a004d8a:	064d      	lsls	r5, r1, #25
1a004d8c:	bf48      	it	mi
1a004d8e:	b29b      	uxthmi	r3, r3
1a004d90:	e7ef      	b.n	1a004d72 <_printf_i+0x14a>
1a004d92:	4665      	mov	r5, ip
1a004d94:	fbb3 f1f2 	udiv	r1, r3, r2
1a004d98:	fb02 3311 	mls	r3, r2, r1, r3
1a004d9c:	5cc3      	ldrb	r3, [r0, r3]
1a004d9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a004da2:	460b      	mov	r3, r1
1a004da4:	2900      	cmp	r1, #0
1a004da6:	d1f5      	bne.n	1a004d94 <_printf_i+0x16c>
1a004da8:	e7b9      	b.n	1a004d1e <_printf_i+0xf6>
1a004daa:	6813      	ldr	r3, [r2, #0]
1a004dac:	6825      	ldr	r5, [r4, #0]
1a004dae:	6961      	ldr	r1, [r4, #20]
1a004db0:	1d18      	adds	r0, r3, #4
1a004db2:	6010      	str	r0, [r2, #0]
1a004db4:	0628      	lsls	r0, r5, #24
1a004db6:	681b      	ldr	r3, [r3, #0]
1a004db8:	d501      	bpl.n	1a004dbe <_printf_i+0x196>
1a004dba:	6019      	str	r1, [r3, #0]
1a004dbc:	e002      	b.n	1a004dc4 <_printf_i+0x19c>
1a004dbe:	066a      	lsls	r2, r5, #25
1a004dc0:	d5fb      	bpl.n	1a004dba <_printf_i+0x192>
1a004dc2:	8019      	strh	r1, [r3, #0]
1a004dc4:	2300      	movs	r3, #0
1a004dc6:	6123      	str	r3, [r4, #16]
1a004dc8:	4665      	mov	r5, ip
1a004dca:	e7b9      	b.n	1a004d40 <_printf_i+0x118>
1a004dcc:	6813      	ldr	r3, [r2, #0]
1a004dce:	1d19      	adds	r1, r3, #4
1a004dd0:	6011      	str	r1, [r2, #0]
1a004dd2:	681d      	ldr	r5, [r3, #0]
1a004dd4:	6862      	ldr	r2, [r4, #4]
1a004dd6:	2100      	movs	r1, #0
1a004dd8:	4628      	mov	r0, r5
1a004dda:	f000 f881 	bl	1a004ee0 <memchr>
1a004dde:	b108      	cbz	r0, 1a004de4 <_printf_i+0x1bc>
1a004de0:	1b40      	subs	r0, r0, r5
1a004de2:	6060      	str	r0, [r4, #4]
1a004de4:	6863      	ldr	r3, [r4, #4]
1a004de6:	6123      	str	r3, [r4, #16]
1a004de8:	2300      	movs	r3, #0
1a004dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004dee:	e7a7      	b.n	1a004d40 <_printf_i+0x118>
1a004df0:	6923      	ldr	r3, [r4, #16]
1a004df2:	462a      	mov	r2, r5
1a004df4:	4639      	mov	r1, r7
1a004df6:	4630      	mov	r0, r6
1a004df8:	47c0      	blx	r8
1a004dfa:	3001      	adds	r0, #1
1a004dfc:	d0aa      	beq.n	1a004d54 <_printf_i+0x12c>
1a004dfe:	6823      	ldr	r3, [r4, #0]
1a004e00:	079b      	lsls	r3, r3, #30
1a004e02:	d413      	bmi.n	1a004e2c <_printf_i+0x204>
1a004e04:	68e0      	ldr	r0, [r4, #12]
1a004e06:	9b03      	ldr	r3, [sp, #12]
1a004e08:	4298      	cmp	r0, r3
1a004e0a:	bfb8      	it	lt
1a004e0c:	4618      	movlt	r0, r3
1a004e0e:	e7a3      	b.n	1a004d58 <_printf_i+0x130>
1a004e10:	2301      	movs	r3, #1
1a004e12:	464a      	mov	r2, r9
1a004e14:	4639      	mov	r1, r7
1a004e16:	4630      	mov	r0, r6
1a004e18:	47c0      	blx	r8
1a004e1a:	3001      	adds	r0, #1
1a004e1c:	d09a      	beq.n	1a004d54 <_printf_i+0x12c>
1a004e1e:	3501      	adds	r5, #1
1a004e20:	68e3      	ldr	r3, [r4, #12]
1a004e22:	9a03      	ldr	r2, [sp, #12]
1a004e24:	1a9b      	subs	r3, r3, r2
1a004e26:	42ab      	cmp	r3, r5
1a004e28:	dcf2      	bgt.n	1a004e10 <_printf_i+0x1e8>
1a004e2a:	e7eb      	b.n	1a004e04 <_printf_i+0x1dc>
1a004e2c:	2500      	movs	r5, #0
1a004e2e:	f104 0919 	add.w	r9, r4, #25
1a004e32:	e7f5      	b.n	1a004e20 <_printf_i+0x1f8>
1a004e34:	2b00      	cmp	r3, #0
1a004e36:	d1ac      	bne.n	1a004d92 <_printf_i+0x16a>
1a004e38:	7803      	ldrb	r3, [r0, #0]
1a004e3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004e3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004e42:	e76c      	b.n	1a004d1e <_printf_i+0xf6>
1a004e44:	1a005361 	.word	0x1a005361
1a004e48:	1a005372 	.word	0x1a005372

1a004e4c <__sread>:
1a004e4c:	b510      	push	{r4, lr}
1a004e4e:	460c      	mov	r4, r1
1a004e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004e54:	f7fb fc62 	bl	1a00071c <_read_r>
1a004e58:	2800      	cmp	r0, #0
1a004e5a:	bfab      	itete	ge
1a004e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a004e5e:	89a3      	ldrhlt	r3, [r4, #12]
1a004e60:	181b      	addge	r3, r3, r0
1a004e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004e66:	bfac      	ite	ge
1a004e68:	6563      	strge	r3, [r4, #84]	; 0x54
1a004e6a:	81a3      	strhlt	r3, [r4, #12]
1a004e6c:	bd10      	pop	{r4, pc}

1a004e6e <__swrite>:
1a004e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004e72:	461f      	mov	r7, r3
1a004e74:	898b      	ldrh	r3, [r1, #12]
1a004e76:	05db      	lsls	r3, r3, #23
1a004e78:	4605      	mov	r5, r0
1a004e7a:	460c      	mov	r4, r1
1a004e7c:	4616      	mov	r6, r2
1a004e7e:	d505      	bpl.n	1a004e8c <__swrite+0x1e>
1a004e80:	2302      	movs	r3, #2
1a004e82:	2200      	movs	r2, #0
1a004e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004e88:	f7fb fc43 	bl	1a000712 <_lseek_r>
1a004e8c:	89a3      	ldrh	r3, [r4, #12]
1a004e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004e96:	81a3      	strh	r3, [r4, #12]
1a004e98:	4632      	mov	r2, r6
1a004e9a:	463b      	mov	r3, r7
1a004e9c:	4628      	mov	r0, r5
1a004e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004ea2:	f7fb bc62 	b.w	1a00076a <_write_r>

1a004ea6 <__sseek>:
1a004ea6:	b510      	push	{r4, lr}
1a004ea8:	460c      	mov	r4, r1
1a004eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004eae:	f7fb fc30 	bl	1a000712 <_lseek_r>
1a004eb2:	1c43      	adds	r3, r0, #1
1a004eb4:	89a3      	ldrh	r3, [r4, #12]
1a004eb6:	bf15      	itete	ne
1a004eb8:	6560      	strne	r0, [r4, #84]	; 0x54
1a004eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004ec2:	81a3      	strheq	r3, [r4, #12]
1a004ec4:	bf18      	it	ne
1a004ec6:	81a3      	strhne	r3, [r4, #12]
1a004ec8:	bd10      	pop	{r4, pc}

1a004eca <__sclose>:
1a004eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004ece:	f7fb bc0d 	b.w	1a0006ec <_close_r>
1a004ed2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a004ed6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a004eda:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a004ede:	Address 0x000000001a004ede is out of bounds.


1a004ee0 <memchr>:
1a004ee0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004ee4:	2a10      	cmp	r2, #16
1a004ee6:	db2b      	blt.n	1a004f40 <memchr+0x60>
1a004ee8:	f010 0f07 	tst.w	r0, #7
1a004eec:	d008      	beq.n	1a004f00 <memchr+0x20>
1a004eee:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004ef2:	3a01      	subs	r2, #1
1a004ef4:	428b      	cmp	r3, r1
1a004ef6:	d02d      	beq.n	1a004f54 <memchr+0x74>
1a004ef8:	f010 0f07 	tst.w	r0, #7
1a004efc:	b342      	cbz	r2, 1a004f50 <memchr+0x70>
1a004efe:	d1f6      	bne.n	1a004eee <memchr+0xe>
1a004f00:	b4f0      	push	{r4, r5, r6, r7}
1a004f02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004f06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004f0a:	f022 0407 	bic.w	r4, r2, #7
1a004f0e:	f07f 0700 	mvns.w	r7, #0
1a004f12:	2300      	movs	r3, #0
1a004f14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004f18:	3c08      	subs	r4, #8
1a004f1a:	ea85 0501 	eor.w	r5, r5, r1
1a004f1e:	ea86 0601 	eor.w	r6, r6, r1
1a004f22:	fa85 f547 	uadd8	r5, r5, r7
1a004f26:	faa3 f587 	sel	r5, r3, r7
1a004f2a:	fa86 f647 	uadd8	r6, r6, r7
1a004f2e:	faa5 f687 	sel	r6, r5, r7
1a004f32:	b98e      	cbnz	r6, 1a004f58 <memchr+0x78>
1a004f34:	d1ee      	bne.n	1a004f14 <memchr+0x34>
1a004f36:	bcf0      	pop	{r4, r5, r6, r7}
1a004f38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004f3c:	f002 0207 	and.w	r2, r2, #7
1a004f40:	b132      	cbz	r2, 1a004f50 <memchr+0x70>
1a004f42:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004f46:	3a01      	subs	r2, #1
1a004f48:	ea83 0301 	eor.w	r3, r3, r1
1a004f4c:	b113      	cbz	r3, 1a004f54 <memchr+0x74>
1a004f4e:	d1f8      	bne.n	1a004f42 <memchr+0x62>
1a004f50:	2000      	movs	r0, #0
1a004f52:	4770      	bx	lr
1a004f54:	3801      	subs	r0, #1
1a004f56:	4770      	bx	lr
1a004f58:	2d00      	cmp	r5, #0
1a004f5a:	bf06      	itte	eq
1a004f5c:	4635      	moveq	r5, r6
1a004f5e:	3803      	subeq	r0, #3
1a004f60:	3807      	subne	r0, #7
1a004f62:	f015 0f01 	tst.w	r5, #1
1a004f66:	d107      	bne.n	1a004f78 <memchr+0x98>
1a004f68:	3001      	adds	r0, #1
1a004f6a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004f6e:	bf02      	ittt	eq
1a004f70:	3001      	addeq	r0, #1
1a004f72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004f76:	3001      	addeq	r0, #1
1a004f78:	bcf0      	pop	{r4, r5, r6, r7}
1a004f7a:	3801      	subs	r0, #1
1a004f7c:	4770      	bx	lr
1a004f7e:	bf00      	nop

1a004f80 <__malloc_lock>:
1a004f80:	4770      	bx	lr

1a004f82 <__malloc_unlock>:
1a004f82:	4770      	bx	lr
1a004f84:	6e696c42 	.word	0x6e696c42
1a004f88:	6320796b 	.word	0x6320796b
1a004f8c:	66206e6f 	.word	0x66206e6f
1a004f90:	52656572 	.word	0x52656572
1a004f94:	20534f54 	.word	0x20534f54
1a004f98:	41732079 	.word	0x41732079
1a004f9c:	002e4950 	.word	0x002e4950
1a004fa0:	6b736154 	.word	0x6b736154
1a004fa4:	61557854 	.word	0x61557854
1a004fa8:	00007472 	.word	0x00007472
1a004fac:	6154796d 	.word	0x6154796d
1a004fb0:	315f6b73 	.word	0x315f6b73
1a004fb4:	ffffff00 	.word	0xffffff00
1a004fb8:	25207872 	.word	0x25207872
1a004fbc:	000a0d73 	.word	0x000a0d73
1a004fc0:	64252054 	.word	0x64252054
1a004fc4:	ff000a0d 	.word	0xff000a0d
1a004fc8:	454c4449 	.word	0x454c4449
1a004fcc:	ffffff00 	.word	0xffffff00
1a004fd0:	51726d54 	.word	0x51726d54
1a004fd4:	ffffff00 	.word	0xffffff00
1a004fd8:	20726d54 	.word	0x20726d54
1a004fdc:	00637653 	.word	0x00637653

1a004fe0 <ExtRateIn>:
1a004fe0:	00000000                                ....

1a004fe4 <GpioButtons>:
1a004fe4:	08000400 09010900                       ........

1a004fec <GpioLeds>:
1a004fec:	01050005 0e000205 0c010b01              ............

1a004ff8 <GpioPorts>:
1a004ff8:	03030003 0f050403 05031005 07030603     ................
1a005008:	ffff0802                                ....

1a00500c <OscRateIn>:
1a00500c:	00b71b00                                ....

1a005010 <InitClkStates>:
1a005010:	01010f01                                ....

1a005014 <pinmuxing>:
1a005014:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005024:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005034:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005044:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005054:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005064:	00d50301 00d50401 00160107 00560207     ..............V.
1a005074:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005084:	00570206                                ..W.

1a005088 <UART_BClock>:
1a005088:	01a201c2 01620182                       ......b.

1a005090 <UART_PClock>:
1a005090:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0050a0:	ffff00ff                                ....

1a0050a4 <periph_to_base>:
1a0050a4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0050b4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0050c4:	000100e0 01000100 01200003 00060120     .......... . ...
1a0050d4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0050e4:	01820013 00120182 01a201a2 01c20011     ................
1a0050f4:	001001c2 01e201e2 0202000f 000e0202     ................
1a005104:	02220222 0223000d 001c0223              "."...#.#...

1a005110 <InitClkStates>:
1a005110:	00010100 00010909 0001090a 01010701     ................
1a005120:	00010902 00010906 0101090c 0001090d     ................
1a005130:	0001090e 0001090f 00010910 00010911     ................
1a005140:	00010912 00010913 00011114 00011119     ................
1a005150:	0001111a 0001111b                       ........

1a005158 <lpcUarts>:
1a005158:	40081000 06020406 00180205 40081000     ...@...........@
1a005168:	09070509 00180706 40082000 00000000     ......... .@....
1a005178:	00190000 400c1000 07060107 001a0602     .......@........
1a005188:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a005198:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0051a8:	0072656d                                mer.

1a0051ac <gpioPinsInit>:
1a0051ac:	00000001 04020204 01040205 07010200     ................
1a0051bc:	0d030005 01000501 00020408 03040202     ................
1a0051cc:	04030200 00020000 03000407 0402030c     ................
1a0051dc:	01030905 02080504 03050403 05040402     ................
1a0051ec:	000c0604 0b060802 06070300 05030009     ................
1a0051fc:	05040706 0004060f 04040303 04040200     ................
1a00520c:	05020005 02000604 04080406 0a040c05     ................
1a00521c:	010e0504 0a000003 00001401 0012010f     ................
1a00522c:	11010d00 010c0000 03000010 03000707     ................
1a00523c:	0001000f 00000100 06000000 0603000a     ................
1a00524c:	05040806 00050610 01060403 04000300     ................
1a00525c:	0d050409 00000401 000f010b 00010200     ................
1a00526c:	01040000 08000001 00000201 00060109     ................
1a00527c:	00020901 02000504 01050401 05040202     ................
1a00528c:	000a0202 0b020e00 020b0100 0c01000c     ................
1a00529c:	02000004 00010400 02040102 04020200     ................
1a0052ac:	03020003 03000307 0004070b 05070c03     ................
1a0052bc:	070d0300 0e030006 05040102 00060401     ................
1a0052cc:	05040602 04050200 04020004 05040804     ................
1a0052dc:	0409040c 0a040d05 010e0504 08010005     ................

1a0052ec <__sf_fake_stderr>:
	...

1a00530c <__sf_fake_stdin>:
	...

1a00532c <__sf_fake_stdout>:
	...

1a00534c <_global_impure_ptr>:
1a00534c:	10000054 2b302d23 6c680020 6665004c     T...#-0+ .hlL.ef
1a00535c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a00536c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a00537c:	64636261 ff006665                       abcdef..
