
RTOS2_prj/JB_RTOS2_mods2505/out/JB_RTOS2_mods2505.elf:     file format elf32-littlearm
RTOS2_prj/JB_RTOS2_mods2505/out/JB_RTOS2_mods2505.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0040e1

Program Header:
0x70000001 off    0x0000d42c vaddr 0x1a00542c paddr 0x1a00542c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x00002f44 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00005434 memsz 0x00005434 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a005434 align 2**15
         filesz 0x00000140 memsz 0x00000140 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000542c  1a000000  1a000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  10000000  1a005434  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00010140  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00010140  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00010140  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00010140  2**2
                  CONTENTS
  6 .bss          00002e04  10000140  10000140  00000140  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00010140  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00010140  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00010140  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00010140  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a00542c  1a00542c  0000d42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00010140  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00010140  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00010140  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00010140  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00010140  2**2
                  CONTENTS
 17 .noinit       00000000  10002f44  10002f44  00010140  2**2
                  CONTENTS
 18 .debug_info   0001fa1d  00000000  00000000  00010140  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00004e2a  00000000  00000000  0002fb5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00001088  00000000  00000000  00034987  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00000f68  00000000  00000000  00035a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  0000f4f6  00000000  00000000  00036977  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00015c9a  00000000  00000000  00045e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00027df3  00000000  00000000  0005bb07  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000070  00000000  00000000  000838fa  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000039  00000000  00000000  0008396a  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00002e94  00000000  00000000  000839a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_loc    0000b78a  00000000  00000000  00086838  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000140 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00542c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002f44 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002eb4 l     F .text	000000ac uartProcessIRQ
10002bc0 l     O .bss	00000004 rxIsrCallbackUART0
10002bc4 l     O .bss	00000004 txIsrCallbackUART0
10002bc8 l     O .bss	00000004 txIsrCallbackUART2
10002bcc l     O .bss	00000004 txIsrCallbackUART3
1a0051a8 l     O .text	00000048 lpcUarts
10002bd0 l     O .bss	00000004 rxIsrCallbackUART2
10002bd4 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
10000140 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 General.c
00000000 l    df *ABS*	00000000 CircularBuffer.c
00000000 l    df *ABS*	00000000 DriverDinamicMemoryRTOS.c
00000000 l    df *ABS*	00000000 Task.c
00000000 l    df *ABS*	00000000 heap_4.c
1a000914 l     F .text	00000064 prvHeapInit
1a000978 l     F .text	00000058 prvInsertBlockIntoFreeList
10000148 l     O .bss	00000004 xFreeBytesRemaining
1000014c l     O .bss	00000004 pxEnd
10000150 l     O .bss	00000008 xStart
10000158 l     O .bss	00002000 ucHeap
10002158 l     O .bss	00000004 xBlockAllocatedBit
1000215c l     O .bss	00000004 xMinimumEverFreeBytesRemaining
00000000 l    df *ABS*	00000000 queue.c
1a000b3c l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000b50 l     F .text	0000001e prvIsQueueFull
1a000b70 l     F .text	0000001a prvIsQueueEmpty
1a000b8c l     F .text	00000076 prvCopyDataToQueue
1a000c04 l     F .text	00000024 prvCopyDataFromQueue
1a000c28 l     F .text	0000006a prvUnlockQueue
1a000d14 l     F .text	00000022 prvInitialiseNewQueue
1a000fc4 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002160 l     O .bss	00000168 uxIdleTaskStack.9314
100022c8 l     O .bss	00000060 xIdleTaskTCB.9313
10002328 l     O .bss	00000060 xTimerTaskTCB.9320
10002388 l     O .bss	000005a0 uxTimerTaskStack.9321
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001500 l     F .text	00000034 prvResetNextTaskUnblockTime
1a001534 l     F .text	00000092 prvInitialiseNewTask
1a0015c8 l     F .text	00000068 prvInitialiseTaskLists
1a001630 l     F .text	000000a8 prvAddNewTaskToReadyList
1a0016d8 l     F .text	0000003a prvDeleteTCB
1a001714 l     F .text	00000044 prvCheckTasksWaitingTermination
1a001758 l     F .text	00000028 prvIdleTask
1a001780 l     F .text	00000094 prvAddCurrentTaskToDelayedList
10002928 l     O .bss	00000004 xNumOfOverflows
1000292c l     O .bss	00000004 pxDelayedTaskList
10002930 l     O .bss	00000004 xSchedulerRunning
10002934 l     O .bss	00000014 xTasksWaitingTermination
10002948 l     O .bss	00000004 pxOverflowDelayedTaskList
1000294c l     O .bss	00000004 uxPendedTicks
10002950 l     O .bss	0000008c pxReadyTasksLists
100029dc l     O .bss	00000004 uxSchedulerSuspended
100029e0 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100029e4 l     O .bss	00000004 uxCurrentNumberOfTasks
100029ec l     O .bss	00000014 xPendingReadyList
10002a00 l     O .bss	00000004 xIdleTaskHandle
10002a04 l     O .bss	00000004 xTickCount
10002a08 l     O .bss	00000004 xNextTaskUnblockTime
10002a0c l     O .bss	00000004 uxTaskNumber
10002a10 l     O .bss	00000014 xDelayedTaskList1
10002a24 l     O .bss	00000014 xDelayedTaskList2
10002a38 l     O .bss	00000014 xSuspendedTaskList
10002a4c l     O .bss	00000004 uxTopReadyPriority
10002a50 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0022b8 l     F .text	00000020 prvGetNextExpireTime
1a0022d8 l     F .text	00000048 prvInsertTimerInActiveList
1a002320 l     F .text	0000006c prvCheckForValidListAndQueue
1a00238c l     F .text	00000040 prvInitialiseNewTimer
1a002740 l     F .text	00000016 prvTimerTask
1a0024f8 l     F .text	0000007c prvSwitchTimerLists
1a002574 l     F .text	0000002c prvSampleTimeNow
1a0025a0 l     F .text	0000005c prvProcessExpiredTimer
1a0025fc l     F .text	00000074 prvProcessTimerOrBlockTask
1a002670 l     F .text	000000d0 prvProcessReceivedCommands
10002a54 l     O .bss	00000004 pxCurrentTimerList
10002a58 l     O .bss	00000014 xActiveTimerList1
10002a6c l     O .bss	00000014 xActiveTimerList2
10002a80 l     O .bss	000000a0 ucStaticTimerQueueStorage.10316
10002b20 l     O .bss	00000004 xLastTime.10265
10002b24 l     O .bss	00000050 xStaticTimerQueue.10315
10002b74 l     O .bss	00000004 xTimerQueue
10002b78 l     O .bss	00000004 pxOverflowTimerList
10002b7c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002758 l     F .text	00000040 prvTaskExitError
1a002798 l     F .text	00000022 prvPortStartFirstTask
1a0027c0 l     F .text	0000000e vPortEnableVFP
1a002820 l       .text	00000000 pxCurrentTCBConst2
1a002900 l       .text	00000000 pxCurrentTCBConst
10002b80 l     O .bss	00000001 ucMaxSysCallPriority
10002b84 l     O .bss	00000004 ulMaxPRIGROUPValue
10000010 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000018 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002b14 l     F .text	00000010 clearInterrupt
1a002b24 l     F .text	00000060 serveInterrupt
1000001c l     O .data	00000048 ultrasonicSensors
1a005060 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002ba8 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10002b8c l     O .bss	00000030 tickerObject.10478
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00318c l     F .text	00000002 errorOcurred
1a003190 l     F .text	00000002 doNothing
10000064 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a003394 l     F .text	00000040 Board_LED_Init
1a0033d4 l     F .text	0000003c Board_TEC_Init
1a003410 l     F .text	0000003c Board_GPIO_Init
1a00344c l     F .text	00000038 Board_SPI_Init
1a003484 l     F .text	00000024 Board_I2C_Init
1a0034a8 l     F .text	00000030 Board_ADC_Init
1a0051f0 l     O .text	00000012 GpioPorts
1a00520c l     O .text	00000008 GpioButtons
1a005214 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 system.c
10002bd8 l     O .bss	00000004 heap_end.10252
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005220 l     O .text	0000000c InitClkStates
1a00522c l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003620 l     F .text	0000002c Chip_UART_GetIndex
1a0052c4 l     O .text	00000008 UART_BClock
1a0052cc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0037c4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0037d8 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00389c l     F .text	000000a8 pll_calc_divs
1a003944 l     F .text	00000104 pll_get_frac
1a003a48 l     F .text	00000048 Chip_Clock_FindBaseClock
1a003cb4 l     F .text	00000022 Chip_Clock_GetDivRate
10002bdc l     O .bss	00000008 audio_usb_pll_freq
1a0052e0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00534c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
100000a4 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004028 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00403c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 impure.c
100000dc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a005434 l       .ARM.exidx	00000000 __exidx_end
1a005434 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a00542c l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a00542c l       .bss_RAM5	00000000 __init_array_end
1a00542c l       .bss_RAM5	00000000 __preinit_array_end
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a00542c l       .bss_RAM5	00000000 __init_array_start
1a00542c l       .bss_RAM5	00000000 __preinit_array_start
1a004fa8 g     F .text	00000014 _malloc_usable_size_r
1a003adc g     F .text	0000001c Chip_Clock_GetDividerSource
1a0047dc g     F .text	00000010 strcpy
1a0041c8 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a003210 g     F .text	00000040 TIMER2_IRQHandler
1a0030d0 g     F .text	00000014 uartRxRead
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a0041fc g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002874 g     F .text	0000002c vPortExitCritical
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a002f60 g     F .text	00000074 uartRxInterruptSet
10002bbc g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a000500 g     F .text	00000020 SelecQueueFromOperation
1a0013e8 g     F .text	0000004c vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a00387c g     F .text	0000000c Chip_ADC_SetResolution
1a0005c4 g     F .text	00000034 PrintUartBuffMutex
1a002910 g     F .text	0000002c SysTick_Handler
1a0036a0 g     F .text	00000040 Chip_UART_SetBaud
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a004f26 g     F .text	00000036 memmove
10002e48 g     O .bss	00000004 SemTxUart
1a0028a0 g     F .text	00000064 PendSV_Handler
1a0006ec g     F .text	000000c8 TaskService
1a000ff4 g     F .text	000000e4 xQueueGenericSendFromISR
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
100029e8 g     O .bss	00000004 pxCurrentTCB
53ff375e g       *ABS*	00000000 __valid_user_code_checksum
1a000520 g     F .text	00000030 packetToLower
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a000678 g     F .text	00000018 ModuleDinamicMemory_initialize
1a001dd8 g     F .text	00000018 vTaskInternalSetTimeOutState
1a003250 g     F .text	00000040 TIMER3_IRQHandler
1a003d40 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a002974 g     F .text	00000128 xPortStartScheduler
1a004750 g     F .text	00000016 memcpy
1a001ce4 g     F .text	00000030 vTaskPlaceOnEventList
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a0049f8 g     F .text	000001e4 _svfprintf_r
1a00293c  w    F .text	00000038 vPortSetupTimerInterrupt
1a004168 g     F .text	00000000 .hidden __aeabi_uldivmod
10002f44 g       .noinit	00000000 _noinit
1a000ac4 g     F .text	00000078 vPortFree
10002f40 g     O .bss	00000004 SystemCoreClock
1a00364c g     F .text	00000054 Chip_UART_Init
1a001230 g     F .text	00000190 xQueueSemaphoreTake
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a002e38 g     F .text	00000030 tickerCallback
1a002a9c g     F .text	0000005c vPortValidateInterruptPriority
10002e4c g     O .bss	00000004 SemRxUart
1a000194  w    F .text	00000002 UsageFault_Handler
1a003dbc g     F .text	0000004c Chip_Clock_GetRate
1a001454 g     F .text	00000018 vListInsertEnd
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
1a003290 g     F .text	0000000e printInitUart
10002f30 g     O .bss	00000008 tickCounter
1a0035a8 g     F .text	0000006c Board_SetupClocking
1a003538 g     F .text	00000020 _sbrk_r
1a005208 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00144c g     F .text	00000006 vListInitialiseItem
1a002b90 g     F .text	0000000a GPIO1_IRQHandler
1a0010d8 g     F .text	00000158 xQueueReceive
10002ef0 g     O .bss	00000040 xQueueRegistry
1a0014e0 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a003048 g     F .text	00000038 uartRxInterruptCallbackSet
1a0002fc g     O .text	00000004 CRP_WORD
1a004f5c g     F .text	0000004c _realloc_r
1a004704 g     F .text	0000004c __libc_init_array
1a004498 g     F .text	0000026a .hidden __udivdi3
1a0005f8 g     F .text	0000000c init_buffer
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a0009d0 g     F .text	000000f4 pvPortMalloc
1a0034fc g     F .text	0000003c Board_Init
1a004164 g     F .text	00000002 _init
1a001434 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
10002bec g     O .bss	0000025a circularBuffer
10002e50 g     O .bss	00000004 xPointerQueue_3
1a0019a8 g     F .text	0000000c xTaskGetTickCount
1a000e34 g     F .text	00000190 xQueueGenericSend
1a0001a8  w    F .text	00000002 RTC_IRQHandler
10002f44 g       .bss	00000000 _ebss
1a003194 g     F .text	0000003c TIMER0_IRQHandler
1a002e68 g     F .text	0000004c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a003ff8 g     F .text	00000030 Chip_I2C_SetClockRate
1a001f60 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a000844 g     F .text	00000020 CallbackRx
1a003a90 g     F .text	0000004c Chip_Clock_EnableCrystal
1a001d4c g     F .text	0000008c xTaskRemoveFromEventList
1a0014fc g     F .text	00000002 vApplicationMallocFailedHook
1a0001ac g     F .text	0000001a data_init
1a0031d0 g     F .text	00000040 TIMER1_IRQHandler
1a0053d4 g     O .text	00000020 __sf_fake_stderr
1a003fd4 g     F .text	00000024 Chip_I2C_Init
1a003174 g     F .text	0000000a UART2_IRQHandler
1a003c4c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a004944 g     F .text	000000b2 __ssputs_r
1a005064 g     O .text	00000136 gpioPinsInit
1a0020e0 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a004054 g     F .text	00000012 Chip_SSP_SetClockRate
1a0007b4 g     F .text	00000048 Task_ToMayusculas_OP0
1a000640 g     F .text	00000038 wr_buffer
1a002e20 g     F .text	00000016 gpioToggle
1a002b9c g     F .text	0000000a GPIO2_IRQHandler
1a004f08 g     F .text	0000001e memchr
00000000  w      *UND*	00000000 _printf_float
1a001df0 g     F .text	00000080 xTaskCheckForTimeOut
1a004810 g     F .text	00000088 _free_r
1a003d1c g     F .text	00000024 Chip_Clock_GetBaseClock
1a001e9c g     F .text	000000c4 xTaskPriorityInherit
10000140 g       .bss	00000000 _bss
1a003848 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000888 g     F .text	0000004c TaskTxUart
1a001998 g     F .text	00000010 vTaskSuspendAll
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a004068 g     F .text	0000003e Chip_SSP_SetBitRate
1a0014a0 g     F .text	00000026 uxListRemove
10002e54 g     O .bss	0000006d Data
1a003fb0 g     F .text	00000002 Chip_GPIO_Init
1a005204 g     O .text	00000004 OscRateIn
1a0030f8 g     F .text	0000007c uartInit
1a001814 g     F .text	0000007c xTaskCreateStatic
10002f44 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0047ec g     F .text	00000024 strncpy
1a001c20 g     F .text	000000c4 vTaskSwitchContext
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000d38 g     F .text	000000aa xQueueGenericCreateStatic
1a001d14 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000580 g     F .text	00000044 print_to_circular
10002ec4 g     O .bss	00000020 ModuleData
1a002bd4 g     F .text	0000019c gpioInit
1a0020fc g     F .text	00000098 xTaskNotifyWait
1a0014c8 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a00248c g     F .text	0000006c xTimerGenericCommand
1a0014f8 g     F .text	00000002 vApplicationStackOverflowHook
1a0041f8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
10000144 g     O .bss	00000004 xTaskHandle_RxNotify
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a005394 g     O .text	00000020 __sf_fake_stdin
1a003af8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004766 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000144 main
1a0006e0 g     F .text	0000000a ModuleDinamicMemory_Free
1a000604 g     F .text	0000003c read_buffer
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a00146c g     F .text	00000034 vListInsert
10002ee4 g     O .bss	00000004 SemMutexUart
1a002800 g     F .text	00000024 SVC_Handler
10000014 g     O .data	00000004 DWT_CTRL
1a0023cc g     F .text	00000070 xTimerCreateTimerTask
1a004898 g     F .text	000000ac _malloc_r
1a0030b8 g     F .text	00000018 uartTxReady
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a003d4c g     F .text	0000003c Chip_Clock_EnableOpts
1a0008d4 g     F .text	00000040 Task_Inicializar
1a000de4 g     F .text	00000050 xQueueGenericCreate
1a003b14 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003f58 g     F .text	00000058 fpuInit
1a003bcc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003558 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a002194 g     F .text	00000124 xTaskGenericNotifyFromISR
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002d70 g     F .text	00000058 gpioWrite
1a001ad8 g     F .text	000000f8 xTaskResumeAll
1a004778 g     F .text	00000048 sprintf
1a0018f8 g     F .text	000000a0 vTaskStartScheduler
1a003808 g     F .text	00000040 Chip_ADC_Init
1a003574 g     F .text	00000034 Board_SetupMuxing
1a0036e0 g     F .text	000000e4 Chip_UART_SetBaudFDR
10002f38 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
1a004bdc g     F .text	000000ea _printf_common
10002b88 g     O .bss	00000004 tickHookFunction
1000013c g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0049f8 g     F .text	000001e4 _svfiprintf_r
1a0030e4 g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001e70 g     F .text	0000000c vTaskMissedYield
10002f44 g       .bss	00000000 _pvHeapStart
10000000 g     O .data	00000010 Frame_parameters
1a000178 g       .text	00000000 __section_table_end
1a0040a8 g     F .text	00000038 Chip_SSP_Init
1a0013c0 g     F .text	00000028 vQueueAddToRegistry
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a000444 g     F .text	000000bc Add_IncommingFrame
1a0019b4 g     F .text	00000124 xTaskIncrementTick
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a0034d8 g     F .text	00000024 Board_Debug_Init
1a000c94 g     F .text	00000080 xQueueGenericReset
10000140 g       .data	00000000 _edata
1a003fb4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a001890 g     F .text	00000066 xTaskCreate
1a003e08 g     F .text	00000150 Chip_SetupCoreClock
1a002b84 g     F .text	0000000a GPIO0_IRQHandler
1a002fd4 g     F .text	00000074 uartTxInterruptSet
1a000000 g     O .text	00000114 g_pfnVectors
1a0040e0 g     F .text	00000084 ResetISR
1a003888 g     F .text	00000014 SystemCoreClockUpdate
1a000550 g     F .text	00000030 packetToUpper
10002ee8 g     O .bss	00000004 xPointerQueue_OP1
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a001bd0 g     F .text	00000050 vTaskDelay
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a0053b4 g     O .text	00000020 __sf_fake_stdout
1a004778 g     F .text	00000048 siprintf
1a001e7c g     F .text	00000020 xTaskGetSchedulerState
1a002014 g     F .text	000000cc vTaskPriorityDisinheritAfterTimeout
1a0041f8  w    F .text	00000002 .hidden __aeabi_idiv0
1a0007fc g     F .text	00000048 Task_ToMinusculas_OP1
1a000190  w    F .text	00000002 BusFault_Handler
1a0027d4 g     F .text	0000002c pxPortInitialiseStack
1a004cc8 g     F .text	00000240 _printf_i
1a003d88 g     F .text	00000034 Chip_Clock_Enable
1a003180 g     F .text	0000000a UART3_IRQHandler
1a000690 g     F .text	0000003c ModuleDinamicMemory_send
10002be4 g     O .bss	00000004 __malloc_sbrk_start
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a00243c g     F .text	0000004e xTimerCreateStatic
1a004198 g     F .text	0000002e .hidden __gnu_ldivmod_helper
10002eec g     O .bss	00000004 xPointerQueue_OP0
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a0047c0 g     F .text	0000001c strchr
1a002dc8 g     F .text	00000058 gpioRead
1a0032a0 g     F .text	000000f4 boardInit
1a002830 g     F .text	00000044 vPortEnterCritical
1a0006cc g     F .text	00000014 ModuleDinamicMemory_receive
10002be8 g     O .bss	00000004 __malloc_free_list
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a000864 g     F .text	00000024 Transmit_UART
1a000fdc g     F .text	00000016 xQueueCreateMutex
1a003cd8 g     F .text	00000044 Chip_Clock_SetBaseClock
1a002af8 g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a003614 g     F .text	0000000c Board_SystemInit
1a003080 g     F .text	00000038 uartTxInterruptCallbackSet



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e1 40 00 1a 85 01 00 1a 89 01 00 1a     .....@..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a 5e 37 ff 53     ............^7.S
	...
1a00002c:	01 28 00 1a 9d 01 00 1a 00 00 00 00 a1 28 00 1a     .(...........(..
1a00003c:	11 29 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .)..............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a 95 31 00 1a d1 31 00 1a 11 32 00 1a     .....1...1...2..
1a00007c:	51 32 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     Q2..............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 75 31 00 1a     ....y.......u1..
1a0000ac:	81 31 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .1..............
1a0000bc:	a9 01 00 1a 85 2b 00 1a 91 2b 00 1a 9d 2b 00 1a     .....+...+...+..
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a005434 	.word	0x1a005434
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000140 	.word	0x00000140
1a000120:	1a005434 	.word	0x1a005434
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005434 	.word	0x1a005434
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005434 	.word	0x1a005434
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005434 	.word	0x1a005434
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000140 	.word	0x10000140
1a000154:	00002e04 	.word	0x00002e04
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f002 fe9a 	bl	1a002eb4 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <UsageFault_Handler+0x4>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <DebugMon_Handler+0x4>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <DebugMon_Handler+0x8>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
#include "sapi_uart.h"


DEBUG_PRINT_ENABLE;

int main(void){
1a000300:	b500      	push	{lr}
1a000302:	b085      	sub	sp, #20

	boardConfig();
1a000304:	f002 ffcc 	bl	1a0032a0 <boardInit>
	debugPrintConfigUart( UART_USB, 115200 );
1a000308:	4836      	ldr	r0, [pc, #216]	; (1a0003e4 <main+0xe4>)
1a00030a:	2103      	movs	r1, #3
1a00030c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000310:	f002 ffbe 	bl	1a003290 <printInitUart>

	/*=======Config Uart===================================*/
	//uartConfig(UART_USB, 115200);
	/*Callback interrupt*/
	//uartCallbackSet(UART_USB, UART_RECEIVE, CallbackRx, NULL);
	uartRxInterruptCallbackSet( UART_USB, CallbackRx );
1a000314:	2003      	movs	r0, #3
1a000316:	4934      	ldr	r1, [pc, #208]	; (1a0003e8 <main+0xe8>)
1a000318:	f002 fe96 	bl	1a003048 <uartRxInterruptCallbackSet>
	/*Habilito todas las interrupciones de UART_USB*/
	//uartInterrupt(UART_USB, true);
	uartRxInterruptSet( UART_USB, true );
1a00031c:	2003      	movs	r0, #3
1a00031e:	2101      	movs	r1, #1
1a000320:	f002 fe1e 	bl	1a002f60 <uartRxInterruptSet>
	//Requerimiento 2.5 – Transmision x buffer vacio
	uartTxInterruptCallbackSet( UART_USB, Transmit_UART );
1a000324:	2003      	movs	r0, #3
1a000326:	4931      	ldr	r1, [pc, #196]	; (1a0003ec <main+0xec>)
1a000328:	f002 feaa 	bl	1a003080 <uartTxInterruptCallbackSet>
	uartTxInterruptSet( UART_USB, true );
1a00032c:	2003      	movs	r0, #3
1a00032e:	2101      	movs	r1, #1
1a000330:	f002 fe50 	bl	1a002fd4 <uartTxInterruptSet>
	
	// Por ahora solo buffer circular
	Task_Inicializar();
1a000334:	f000 face 	bl	1a0008d4 <Task_Inicializar>

	SemTxUart 	 =  xSemaphoreCreateBinary();
1a000338:	2001      	movs	r0, #1
1a00033a:	2100      	movs	r1, #0
1a00033c:	2203      	movs	r2, #3
1a00033e:	f000 fd51 	bl	1a000de4 <xQueueGenericCreate>
1a000342:	4b2b      	ldr	r3, [pc, #172]	; (1a0003f0 <main+0xf0>)
1a000344:	6018      	str	r0, [r3, #0]
	SemMutexUart =	xSemaphoreCreateMutex() ;
1a000346:	2001      	movs	r0, #1
1a000348:	f000 fe48 	bl	1a000fdc <xQueueCreateMutex>
1a00034c:	4b29      	ldr	r3, [pc, #164]	; (1a0003f4 <main+0xf4>)
1a00034e:	6018      	str	r0, [r3, #0]

	xPointerQueue_OP0	= xQueueCreate(1 , sizeof(char *)); /*Create queue OP0*/
1a000350:	2001      	movs	r0, #1
1a000352:	2104      	movs	r1, #4
1a000354:	2200      	movs	r2, #0
1a000356:	f000 fd45 	bl	1a000de4 <xQueueGenericCreate>
1a00035a:	4b27      	ldr	r3, [pc, #156]	; (1a0003f8 <main+0xf8>)
1a00035c:	6018      	str	r0, [r3, #0]
	xPointerQueue_OP1	= xQueueCreate(1 , sizeof(char *)); /*Create queue OP0*/
1a00035e:	2001      	movs	r0, #1
1a000360:	2104      	movs	r1, #4
1a000362:	2200      	movs	r2, #0
1a000364:	f000 fd3e 	bl	1a000de4 <xQueueGenericCreate>
1a000368:	4b24      	ldr	r3, [pc, #144]	; (1a0003fc <main+0xfc>)
1a00036a:	6018      	str	r0, [r3, #0]
	xPointerQueue_3		= xQueueCreate(1 , sizeof(char *)); /*Create queue OP0*/
1a00036c:	2001      	movs	r0, #1
1a00036e:	2104      	movs	r1, #4
1a000370:	2200      	movs	r2, #0
1a000372:	f000 fd37 	bl	1a000de4 <xQueueGenericCreate>
1a000376:	4b22      	ldr	r3, [pc, #136]	; (1a000400 <main+0x100>)
1a000378:	6018      	str	r0, [r3, #0]


	xTaskCreate(TaskTxUart, (const char *)"TaskTxUart",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a00037a:	2501      	movs	r5, #1
1a00037c:	9500      	str	r5, [sp, #0]
1a00037e:	2400      	movs	r4, #0
1a000380:	9401      	str	r4, [sp, #4]
1a000382:	4820      	ldr	r0, [pc, #128]	; (1a000404 <main+0x104>)
1a000384:	4920      	ldr	r1, [pc, #128]	; (1a000408 <main+0x108>)
1a000386:	22b4      	movs	r2, #180	; 0xb4
1a000388:	4623      	mov	r3, r4
1a00038a:	f001 fa81 	bl	1a001890 <xTaskCreate>
	xTaskCreate(TaskService, (const char *)"TaskService",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, &xTaskHandle_RxNotify);
1a00038e:	9500      	str	r5, [sp, #0]
1a000390:	4b1e      	ldr	r3, [pc, #120]	; (1a00040c <main+0x10c>)
1a000392:	9301      	str	r3, [sp, #4]
1a000394:	481e      	ldr	r0, [pc, #120]	; (1a000410 <main+0x110>)
1a000396:	491f      	ldr	r1, [pc, #124]	; (1a000414 <main+0x114>)
1a000398:	22b4      	movs	r2, #180	; 0xb4
1a00039a:	4623      	mov	r3, r4
1a00039c:	f001 fa78 	bl	1a001890 <xTaskCreate>
	xTaskCreate(Task_ToMayusculas_OP0, (const char *)"Task_ToMayusculas_OP0",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a0003a0:	9500      	str	r5, [sp, #0]
1a0003a2:	9401      	str	r4, [sp, #4]
1a0003a4:	481c      	ldr	r0, [pc, #112]	; (1a000418 <main+0x118>)
1a0003a6:	491d      	ldr	r1, [pc, #116]	; (1a00041c <main+0x11c>)
1a0003a8:	22b4      	movs	r2, #180	; 0xb4
1a0003aa:	4623      	mov	r3, r4
1a0003ac:	f001 fa70 	bl	1a001890 <xTaskCreate>
	xTaskCreate(Task_ToMinusculas_OP1, (const char *)"Task_ToMinusculas_OP1",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a0003b0:	9500      	str	r5, [sp, #0]
1a0003b2:	9401      	str	r4, [sp, #4]
1a0003b4:	481a      	ldr	r0, [pc, #104]	; (1a000420 <main+0x120>)
1a0003b6:	491b      	ldr	r1, [pc, #108]	; (1a000424 <main+0x124>)
1a0003b8:	22b4      	movs	r2, #180	; 0xb4
1a0003ba:	4623      	mov	r3, r4
1a0003bc:	f001 fa68 	bl	1a001890 <xTaskCreate>
//	xTaskCreate(Task_ReportStack_OP2, (const char *)"Task_ToMayusculas_OP0",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
//	xTaskCreate(Task_ReportHeap_OP3, (const char *)"Task_ToMinusculas_OP1",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);

	/*Inicializar Driver memoria dinamica*/
	ModuleDinamicMemory_initialize(&ModuleData,50,xQueueGenericSend,xQueueGenericSendFromISR, xQueueReceive,xQueueGenericCreate, pvPortMalloc, vPortFree);
1a0003c0:	4b19      	ldr	r3, [pc, #100]	; (1a000428 <main+0x128>)
1a0003c2:	9300      	str	r3, [sp, #0]
1a0003c4:	4b19      	ldr	r3, [pc, #100]	; (1a00042c <main+0x12c>)
1a0003c6:	9301      	str	r3, [sp, #4]
1a0003c8:	4b19      	ldr	r3, [pc, #100]	; (1a000430 <main+0x130>)
1a0003ca:	9302      	str	r3, [sp, #8]
1a0003cc:	4b19      	ldr	r3, [pc, #100]	; (1a000434 <main+0x134>)
1a0003ce:	9303      	str	r3, [sp, #12]
1a0003d0:	4819      	ldr	r0, [pc, #100]	; (1a000438 <main+0x138>)
1a0003d2:	2132      	movs	r1, #50	; 0x32
1a0003d4:	4a19      	ldr	r2, [pc, #100]	; (1a00043c <main+0x13c>)
1a0003d6:	4b1a      	ldr	r3, [pc, #104]	; (1a000440 <main+0x140>)
1a0003d8:	f000 f94e 	bl	1a000678 <ModuleDinamicMemory_initialize>

	/* Iniciar scheduler*/
	vTaskStartScheduler();
1a0003dc:	f001 fa8c 	bl	1a0018f8 <vTaskStartScheduler>

	while( TRUE ) {
	}
1a0003e0:	e7fe      	b.n	1a0003e0 <main+0xe0>
1a0003e2:	bf00      	nop
1a0003e4:	10000140 	.word	0x10000140
1a0003e8:	1a000845 	.word	0x1a000845
1a0003ec:	1a000865 	.word	0x1a000865
1a0003f0:	10002e48 	.word	0x10002e48
1a0003f4:	10002ee4 	.word	0x10002ee4
1a0003f8:	10002eec 	.word	0x10002eec
1a0003fc:	10002ee8 	.word	0x10002ee8
1a000400:	10002e50 	.word	0x10002e50
1a000404:	1a000889 	.word	0x1a000889
1a000408:	1a004fbc 	.word	0x1a004fbc
1a00040c:	10000144 	.word	0x10000144
1a000410:	1a0006ed 	.word	0x1a0006ed
1a000414:	1a004fc8 	.word	0x1a004fc8
1a000418:	1a0007b5 	.word	0x1a0007b5
1a00041c:	1a004fd4 	.word	0x1a004fd4
1a000420:	1a0007fd 	.word	0x1a0007fd
1a000424:	1a004fec 	.word	0x1a004fec
1a000428:	1a0010d9 	.word	0x1a0010d9
1a00042c:	1a000de5 	.word	0x1a000de5
1a000430:	1a0009d1 	.word	0x1a0009d1
1a000434:	1a000ac5 	.word	0x1a000ac5
1a000438:	10002ec4 	.word	0x10002ec4
1a00043c:	1a000e35 	.word	0x1a000e35
1a000440:	1a000ff5 	.word	0x1a000ff5

1a000444 <Add_IncommingFrame>:


/*=================================================================================
						Almacena en el buffer de la RX ISR
=================================================================================*/
void Add_IncommingFrame(UBaseType_t uxSavedInterruptStatus ,BaseType_t xHigherPriorityTaskWoken, volatile char c){
1a000444:	b530      	push	{r4, r5, lr}
1a000446:	b085      	sub	sp, #20
1a000448:	9103      	str	r1, [sp, #12]
1a00044a:	f88d 200b 	strb.w	r2, [sp, #11]

	/*Verifica Inicio de trama*/
	if( Frame_parameters._SOF == c) Data.StartFrame = 1;
1a00044e:	4b29      	ldr	r3, [pc, #164]	; (1a0004f4 <Add_IncommingFrame+0xb0>)
1a000450:	781b      	ldrb	r3, [r3, #0]
1a000452:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a000456:	b2db      	uxtb	r3, r3
1a000458:	4293      	cmp	r3, r2
1a00045a:	d103      	bne.n	1a000464 <Add_IncommingFrame+0x20>
1a00045c:	2201      	movs	r2, #1
1a00045e:	4b26      	ldr	r3, [pc, #152]	; (1a0004f8 <Add_IncommingFrame+0xb4>)
1a000460:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	if(Data.StartFrame){
1a000464:	4b24      	ldr	r3, [pc, #144]	; (1a0004f8 <Add_IncommingFrame+0xb4>)
1a000466:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
1a00046a:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00046e:	d03e      	beq.n	1a0004ee <Add_IncommingFrame+0xaa>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000470:	f3ef 8311 	mrs	r3, BASEPRI
1a000474:	f04f 02a0 	mov.w	r2, #160	; 0xa0
1a000478:	f382 8811 	msr	BASEPRI, r2
1a00047c:	f3bf 8f6f 	isb	sy
1a000480:	f3bf 8f4f 	dsb	sy

		/*Proteger acceso al buffer*/
		taskENTER_CRITICAL_FROM_ISR();
		Data.Buffer[Data.Index++]= c;
1a000484:	4b1c      	ldr	r3, [pc, #112]	; (1a0004f8 <Add_IncommingFrame+0xb4>)
1a000486:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
1a00048a:	b2d2      	uxtb	r2, r2
1a00048c:	1c51      	adds	r1, r2, #1
1a00048e:	b2c9      	uxtb	r1, r1
1a000490:	f883 106b 	strb.w	r1, [r3, #107]	; 0x6b
1a000494:	f89d 100b 	ldrb.w	r1, [sp, #11]
1a000498:	b2c9      	uxtb	r1, r1
1a00049a:	5499      	strb	r1, [r3, r2]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00049c:	f380 8811 	msr	BASEPRI, r0
		taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
	}
	else return;

	if(Data.Index > sizeof(Data)-1) Data.Index =0;  /*Garantiza no desbordamiento del buffer*/
1a0004a0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
1a0004a4:	b2db      	uxtb	r3, r3
1a0004a6:	2b6c      	cmp	r3, #108	; 0x6c
1a0004a8:	d903      	bls.n	1a0004b2 <Add_IncommingFrame+0x6e>
1a0004aa:	2200      	movs	r2, #0
1a0004ac:	4b12      	ldr	r3, [pc, #72]	; (1a0004f8 <Add_IncommingFrame+0xb4>)
1a0004ae:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

	Data.Buffer[Data.Index] = 0; 					/*char NULL pos siguiente*/
1a0004b2:	4a11      	ldr	r2, [pc, #68]	; (1a0004f8 <Add_IncommingFrame+0xb4>)
1a0004b4:	f892 306b 	ldrb.w	r3, [r2, #107]	; 0x6b
1a0004b8:	b2db      	uxtb	r3, r3
1a0004ba:	2100      	movs	r1, #0
1a0004bc:	54d1      	strb	r1, [r2, r3]

	if(Frame_parameters._EOF == c){
1a0004be:	4b0d      	ldr	r3, [pc, #52]	; (1a0004f4 <Add_IncommingFrame+0xb0>)
1a0004c0:	7b1b      	ldrb	r3, [r3, #12]
1a0004c2:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0004c6:	b2db      	uxtb	r3, r3
1a0004c8:	4293      	cmp	r3, r2
1a0004ca:	d110      	bne.n	1a0004ee <Add_IncommingFrame+0xaa>
		Data.StartFrame = 0;
1a0004cc:	4d0a      	ldr	r5, [pc, #40]	; (1a0004f8 <Add_IncommingFrame+0xb4>)
1a0004ce:	460c      	mov	r4, r1
1a0004d0:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
		Data.Ready = 1;
1a0004d4:	2301      	movs	r3, #1
1a0004d6:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
		/*Frame buena en el buffer*/
		xTaskNotifyFromISR(xTaskHandle_RxNotify,0,eNoAction,&xHigherPriorityTaskWoken);
1a0004da:	4b08      	ldr	r3, [pc, #32]	; (1a0004fc <Add_IncommingFrame+0xb8>)
1a0004dc:	6818      	ldr	r0, [r3, #0]
1a0004de:	ab03      	add	r3, sp, #12
1a0004e0:	9300      	str	r3, [sp, #0]
1a0004e2:	460a      	mov	r2, r1
1a0004e4:	460b      	mov	r3, r1
1a0004e6:	f001 fe55 	bl	1a002194 <xTaskGenericNotifyFromISR>
		Data.Index =0;
1a0004ea:	f885 406b 	strb.w	r4, [r5, #107]	; 0x6b
	} /*Si el paquete no tiene elfin descartara*/

}
1a0004ee:	b005      	add	sp, #20
1a0004f0:	bd30      	pop	{r4, r5, pc}
1a0004f2:	bf00      	nop
1a0004f4:	10000000 	.word	0x10000000
1a0004f8:	10002e54 	.word	0x10002e54
1a0004fc:	10000144 	.word	0x10000144

1a000500 <SelecQueueFromOperation>:
/*=================================================================================
 	 	 	 	 	 	selecionar puntero a cola segun operacion
 =================================================================================*/
void* SelecQueueFromOperation(Enum_Op_t OP){
	void * XpointerSelected = NULL;
	switch(OP){
1a000500:	b110      	cbz	r0, 1a000508 <SelecQueueFromOperation+0x8>
1a000502:	2801      	cmp	r0, #1
1a000504:	d003      	beq.n	1a00050e <SelecQueueFromOperation+0xe>
1a000506:	e005      	b.n	1a000514 <SelecQueueFromOperation+0x14>

	case OP0:
		XpointerSelected = xPointerQueue_OP0;
1a000508:	4b03      	ldr	r3, [pc, #12]	; (1a000518 <SelecQueueFromOperation+0x18>)
1a00050a:	6818      	ldr	r0, [r3, #0]
		break;
1a00050c:	4770      	bx	lr
	case OP1:
		XpointerSelected = xPointerQueue_OP1;
1a00050e:	4b03      	ldr	r3, [pc, #12]	; (1a00051c <SelecQueueFromOperation+0x1c>)
1a000510:	6818      	ldr	r0, [r3, #0]
		break;
1a000512:	4770      	bx	lr

/*=================================================================================
 	 	 	 	 	 	selecionar puntero a cola segun operacion
 =================================================================================*/
void* SelecQueueFromOperation(Enum_Op_t OP){
	void * XpointerSelected = NULL;
1a000514:	2000      	movs	r0, #0
	case OP3:
		break;
	}
	return XpointerSelected;

}
1a000516:	4770      	bx	lr
1a000518:	10002eec 	.word	0x10002eec
1a00051c:	10002ee8 	.word	0x10002ee8

1a000520 <packetToLower>:

/*=================================================================================
 	 	 	 	 	 	 	 	 packetToLower
 =================================================================================*/
void packetToLower(uint8_t *ptrToPacketLower){
1a000520:	b430      	push	{r4, r5}

	uint16_t tSizePacket;
	uint8_t i;
	tSizePacket=*(ptrToPacketLower+3)*256;
1a000522:	78c5      	ldrb	r5, [r0, #3]
	tSizePacket=tSizePacket+*(ptrToPacketLower+2);
1a000524:	7883      	ldrb	r3, [r0, #2]
1a000526:	eb03 2505 	add.w	r5, r3, r5, lsl #8
1a00052a:	b2ad      	uxth	r5, r5
	for(i=0;i<tSizePacket;i++){
1a00052c:	2300      	movs	r3, #0
1a00052e:	e00a      	b.n	1a000546 <packetToLower+0x26>
		if(*(ptrToPacketLower+i+4)>=41 &&  *(ptrToPacketLower+i+4)<=90)
1a000530:	1d1c      	adds	r4, r3, #4
1a000532:	5d01      	ldrb	r1, [r0, r4]
1a000534:	f1a1 0229 	sub.w	r2, r1, #41	; 0x29
1a000538:	b2d2      	uxtb	r2, r2
1a00053a:	2a31      	cmp	r2, #49	; 0x31
1a00053c:	d801      	bhi.n	1a000542 <packetToLower+0x22>
			*(ptrToPacketLower+i+4)=*(ptrToPacketLower+i+4)+32;
1a00053e:	3120      	adds	r1, #32
1a000540:	5501      	strb	r1, [r0, r4]

	uint16_t tSizePacket;
	uint8_t i;
	tSizePacket=*(ptrToPacketLower+3)*256;
	tSizePacket=tSizePacket+*(ptrToPacketLower+2);
	for(i=0;i<tSizePacket;i++){
1a000542:	3301      	adds	r3, #1
1a000544:	b2db      	uxtb	r3, r3
1a000546:	b29a      	uxth	r2, r3
1a000548:	42aa      	cmp	r2, r5
1a00054a:	d3f1      	bcc.n	1a000530 <packetToLower+0x10>
		if(*(ptrToPacketLower+i+4)>=41 &&  *(ptrToPacketLower+i+4)<=90)
			*(ptrToPacketLower+i+4)=*(ptrToPacketLower+i+4)+32;
	}

}
1a00054c:	bc30      	pop	{r4, r5}
1a00054e:	4770      	bx	lr

1a000550 <packetToUpper>:
/*=================================================================================
 	 	 	 	 	 	 	 	 packetToUpper
 =================================================================================*/
void packetToUpper(uint8_t *ptrToPacketUpper){
1a000550:	b430      	push	{r4, r5}
	uint16_t tSizePacket;
	uint8_t i;
	tSizePacket=*(ptrToPacketUpper+3)*256;
1a000552:	78c5      	ldrb	r5, [r0, #3]
	tSizePacket=tSizePacket+*(ptrToPacketUpper+2);
1a000554:	7883      	ldrb	r3, [r0, #2]
1a000556:	eb03 2505 	add.w	r5, r3, r5, lsl #8
1a00055a:	b2ad      	uxth	r5, r5
	for(i=0;i<tSizePacket;i++){
1a00055c:	2300      	movs	r3, #0
1a00055e:	e00a      	b.n	1a000576 <packetToUpper+0x26>
		if(*(ptrToPacketUpper+i+4)>=97 &&  *(ptrToPacketUpper+i+4)<=122)
1a000560:	1d1c      	adds	r4, r3, #4
1a000562:	5d01      	ldrb	r1, [r0, r4]
1a000564:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
1a000568:	b2d2      	uxtb	r2, r2
1a00056a:	2a19      	cmp	r2, #25
1a00056c:	d801      	bhi.n	1a000572 <packetToUpper+0x22>
			*(ptrToPacketUpper+i+4)=*(ptrToPacketUpper+i+4)-32;
1a00056e:	3920      	subs	r1, #32
1a000570:	5501      	strb	r1, [r0, r4]
void packetToUpper(uint8_t *ptrToPacketUpper){
	uint16_t tSizePacket;
	uint8_t i;
	tSizePacket=*(ptrToPacketUpper+3)*256;
	tSizePacket=tSizePacket+*(ptrToPacketUpper+2);
	for(i=0;i<tSizePacket;i++){
1a000572:	3301      	adds	r3, #1
1a000574:	b2db      	uxtb	r3, r3
1a000576:	b29a      	uxth	r2, r3
1a000578:	42aa      	cmp	r2, r5
1a00057a:	d3f1      	bcc.n	1a000560 <packetToUpper+0x10>
		if(*(ptrToPacketUpper+i+4)>=97 &&  *(ptrToPacketUpper+i+4)<=122)
			*(ptrToPacketUpper+i+4)=*(ptrToPacketUpper+i+4)-32;
	}
}
1a00057c:	bc30      	pop	{r4, r5}
1a00057e:	4770      	bx	lr

1a000580 <print_to_circular>:
		i++;
	}
}
 =================================================================================*/

void print_to_circular(char * Msg){
1a000580:	b570      	push	{r4, r5, r6, lr}
1a000582:	4604      	mov	r4, r0
	        #define MAX_SECURE_LEN 150
			wr_buffer( &circularBuffer, '{' );
1a000584:	480e      	ldr	r0, [pc, #56]	; (1a0005c0 <print_to_circular+0x40>)
1a000586:	217b      	movs	r1, #123	; 0x7b
1a000588:	f000 f85a 	bl	1a000640 <wr_buffer>
			char *ptrloc = Msg;
			int i = 0;
1a00058c:	2500      	movs	r5, #0
			do { //(i = 0; i < queue_operaciones.longDatos; i++)
				wr_buffer( &circularBuffer, *ptrloc++ );
1a00058e:	1c66      	adds	r6, r4, #1
1a000590:	480b      	ldr	r0, [pc, #44]	; (1a0005c0 <print_to_circular+0x40>)
1a000592:	7821      	ldrb	r1, [r4, #0]
1a000594:	f000 f854 	bl	1a000640 <wr_buffer>
				i++;
1a000598:	3501      	adds	r5, #1
			}
			while ((*ptrloc != 0) && (i< MAX_SECURE_LEN));
1a00059a:	7863      	ldrb	r3, [r4, #1]
1a00059c:	b113      	cbz	r3, 1a0005a4 <print_to_circular+0x24>
	        #define MAX_SECURE_LEN 150
			wr_buffer( &circularBuffer, '{' );
			char *ptrloc = Msg;
			int i = 0;
			do { //(i = 0; i < queue_operaciones.longDatos; i++)
				wr_buffer( &circularBuffer, *ptrloc++ );
1a00059e:	4634      	mov	r4, r6
				i++;
			}
			while ((*ptrloc != 0) && (i< MAX_SECURE_LEN));
1a0005a0:	2d95      	cmp	r5, #149	; 0x95
1a0005a2:	ddf4      	ble.n	1a00058e <print_to_circular+0xe>
			wr_buffer( &circularBuffer, '}' );
1a0005a4:	4c06      	ldr	r4, [pc, #24]	; (1a0005c0 <print_to_circular+0x40>)
1a0005a6:	4620      	mov	r0, r4
1a0005a8:	217d      	movs	r1, #125	; 0x7d
1a0005aa:	f000 f849 	bl	1a000640 <wr_buffer>
			wr_buffer( &circularBuffer, '\r' );
1a0005ae:	4620      	mov	r0, r4
1a0005b0:	210d      	movs	r1, #13
1a0005b2:	f000 f845 	bl	1a000640 <wr_buffer>
			wr_buffer( &circularBuffer, '\n' );
1a0005b6:	4620      	mov	r0, r4
1a0005b8:	210a      	movs	r1, #10
1a0005ba:	f000 f841 	bl	1a000640 <wr_buffer>
1a0005be:	bd70      	pop	{r4, r5, r6, pc}
1a0005c0:	10002bec 	.word	0x10002bec

1a0005c4 <PrintUartBuffMutex>:
	}
}
/*=================================================================================
 	 	 	 	 	 	 	 	 Print string buffer + message con mutex
 =================================================================================*/
void PrintUartBuffMutex(char * Message,char *Buf, SemaphoreHandle_t SemMutexUart){
1a0005c4:	b570      	push	{r4, r5, r6, lr}
1a0005c6:	b0a6      	sub	sp, #152	; 0x98
1a0005c8:	4605      	mov	r5, r0
1a0005ca:	460e      	mov	r6, r1
1a0005cc:	4614      	mov	r4, r2
	char BuffMsg[150];
	xSemaphoreTake(SemMutexUart,portMAX_DELAY);
1a0005ce:	4610      	mov	r0, r2
1a0005d0:	f04f 31ff 	mov.w	r1, #4294967295
1a0005d4:	f000 fe2c 	bl	1a001230 <xQueueSemaphoreTake>
	sprintf(BuffMsg, Message, Buf );
1a0005d8:	4668      	mov	r0, sp
1a0005da:	4629      	mov	r1, r5
1a0005dc:	4632      	mov	r2, r6
1a0005de:	f004 f8cb 	bl	1a004778 <siprintf>
	print_to_circular(Message);
1a0005e2:	4628      	mov	r0, r5
1a0005e4:	f7ff ffcc 	bl	1a000580 <print_to_circular>
	xSemaphoreGive(SemMutexUart);
1a0005e8:	4620      	mov	r0, r4
1a0005ea:	2100      	movs	r1, #0
1a0005ec:	460a      	mov	r2, r1
1a0005ee:	460b      	mov	r3, r1
1a0005f0:	f000 fc20 	bl	1a000e34 <xQueueGenericSend>
}
1a0005f4:	b026      	add	sp, #152	; 0x98
1a0005f6:	bd70      	pop	{r4, r5, r6, pc}

1a0005f8 <init_buffer>:
/*==================[functions]=====================*/


void init_buffer( circularBuffer_t * circBuffer )
{
	circBuffer->writebuf = 0;
1a0005f8:	2300      	movs	r3, #0
1a0005fa:	f880 3259 	strb.w	r3, [r0, #601]	; 0x259
	circBuffer->readbuf   = 0;
1a0005fe:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
1a000602:	4770      	bx	lr

1a000604 <read_buffer>:
}

bool_t read_buffer(circularBuffer_t * circBuffer, uint8_t * data)
{
	if ( circBuffer->readbuf == circBuffer->writebuf )
1a000604:	f890 3258 	ldrb.w	r3, [r0, #600]	; 0x258
1a000608:	f890 2259 	ldrb.w	r2, [r0, #601]	; 0x259
1a00060c:	4293      	cmp	r3, r2
1a00060e:	d012      	beq.n	1a000636 <read_buffer+0x32>
		return false;
	else {
		*data = circBuffer-> buffer[circBuffer->readbuf ];
1a000610:	5cc3      	ldrb	r3, [r0, r3]
1a000612:	700b      	strb	r3, [r1, #0]
		circBuffer->readbuf	= ( circBuffer->readbuf + 1 ) % LEN_BUFFER;
1a000614:	f890 2258 	ldrb.w	r2, [r0, #600]	; 0x258
1a000618:	3201      	adds	r2, #1
1a00061a:	4b08      	ldr	r3, [pc, #32]	; (1a00063c <read_buffer+0x38>)
1a00061c:	fb83 3102 	smull	r3, r1, r3, r2
1a000620:	17d3      	asrs	r3, r2, #31
1a000622:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a000626:	f44f 7116 	mov.w	r1, #600	; 0x258
1a00062a:	fb01 2313 	mls	r3, r1, r3, r2
1a00062e:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
		return true;
1a000632:	2001      	movs	r0, #1
1a000634:	4770      	bx	lr
}

bool_t read_buffer(circularBuffer_t * circBuffer, uint8_t * data)
{
	if ( circBuffer->readbuf == circBuffer->writebuf )
		return false;
1a000636:	2000      	movs	r0, #0
	else {
		*data = circBuffer-> buffer[circBuffer->readbuf ];
		circBuffer->readbuf	= ( circBuffer->readbuf + 1 ) % LEN_BUFFER;
		return true;
	}
}
1a000638:	4770      	bx	lr
1a00063a:	bf00      	nop
1a00063c:	1b4e81b5 	.word	0x1b4e81b5

1a000640 <wr_buffer>:

uint8_t wr_buffer(circularBuffer_t * circBuffer, uint8_t data)
{
1a000640:	b430      	push	{r4, r5}
	if ( (circBuffer->writebuf + 1) % LEN_BUFFER == circBuffer->readbuf )
1a000642:	f890 5259 	ldrb.w	r5, [r0, #601]	; 0x259
1a000646:	1c6a      	adds	r2, r5, #1
1a000648:	4b0a      	ldr	r3, [pc, #40]	; (1a000674 <wr_buffer+0x34>)
1a00064a:	fb83 3402 	smull	r3, r4, r3, r2
1a00064e:	17d3      	asrs	r3, r2, #31
1a000650:	ebc3 13a4 	rsb	r3, r3, r4, asr #6
1a000654:	f44f 7416 	mov.w	r4, #600	; 0x258
1a000658:	fb04 2313 	mls	r3, r4, r3, r2
1a00065c:	f890 2258 	ldrb.w	r2, [r0, #600]	; 0x258
1a000660:	4293      	cmp	r3, r2
1a000662:	d004      	beq.n	1a00066e <wr_buffer+0x2e>
		return 0;											// Write buffer is full
	else {
		circBuffer->buffer[ circBuffer->writebuf ] = data;
1a000664:	5541      	strb	r1, [r0, r5]
		circBuffer->writebuf = (circBuffer->writebuf + 1) % LEN_BUFFER;
1a000666:	f880 3259 	strb.w	r3, [r0, #601]	; 0x259
		return 1;
1a00066a:	2001      	movs	r0, #1
1a00066c:	e000      	b.n	1a000670 <wr_buffer+0x30>
}

uint8_t wr_buffer(circularBuffer_t * circBuffer, uint8_t data)
{
	if ( (circBuffer->writebuf + 1) % LEN_BUFFER == circBuffer->readbuf )
		return 0;											// Write buffer is full
1a00066e:	2000      	movs	r0, #0
	else {
		circBuffer->buffer[ circBuffer->writebuf ] = data;
		circBuffer->writebuf = (circBuffer->writebuf + 1) % LEN_BUFFER;
		return 1;
	}
}
1a000670:	bc30      	pop	{r4, r5}
1a000672:	4770      	bx	lr
1a000674:	1b4e81b5 	.word	0x1b4e81b5

1a000678 <ModuleDinamicMemory_initialize>:

#include "DriverDinamicMemoryRTOS.h"
#include "Task.h"

void ModuleDinamicMemory_initialize( Module_Data_t *obj , uint32_t MaxLength, xQueueSendFCN xQueueSendFCN,xQueueSendFromISRFCN xQueueSendFromISRFCN, xQueueReceiveFCN xQueueReceiveFCN, xQueueCreateFCN xQueueCreateFCN, pvPortMallocFCN pvPortMallocFCN,vPortFreeFCN vPortFreeFCN){
	obj->xMaxStringLength = MaxLength;
1a000678:	7101      	strb	r1, [r0, #4]
	obj->xQueueCreateFunction =xQueueCreateFCN;
1a00067a:	9901      	ldr	r1, [sp, #4]
1a00067c:	61c1      	str	r1, [r0, #28]
	obj->xQueueSendFunction = xQueueSendFCN;
1a00067e:	6082      	str	r2, [r0, #8]
	obj->xQueueSendFromISRFunction = xQueueSendFromISRFCN;
1a000680:	60c3      	str	r3, [r0, #12]
	obj->xQueueReceiveFunction = xQueueReceiveFCN;
1a000682:	9b00      	ldr	r3, [sp, #0]
1a000684:	6103      	str	r3, [r0, #16]
	obj->pvPortMallocFunction = pvPortMallocFCN;
1a000686:	9b02      	ldr	r3, [sp, #8]
1a000688:	6143      	str	r3, [r0, #20]
	obj->vPortFreeFunction = vPortFreeFCN;
1a00068a:	9b03      	ldr	r3, [sp, #12]
1a00068c:	6183      	str	r3, [r0, #24]
1a00068e:	4770      	bx	lr

1a000690 <ModuleDinamicMemory_send>:
}

void ModuleDinamicMemory_send( Module_Data_t *obj ,uint8_t Isr, long * const xHigherPriorityTaskWoken, char* pbuf ,char * XpointerQueue, uint32_t portMaxDelay){
1a000690:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000692:	b083      	sub	sp, #12
1a000694:	4604      	mov	r4, r0
1a000696:	460d      	mov	r5, r1
1a000698:	4617      	mov	r7, r2
1a00069a:	461e      	mov	r6, r3
	char* PcStringToSend = obj->pvPortMallocFunction( obj->xMaxStringLength );
1a00069c:	6943      	ldr	r3, [r0, #20]
1a00069e:	7920      	ldrb	r0, [r4, #4]
1a0006a0:	2100      	movs	r1, #0
1a0006a2:	4798      	blx	r3
1a0006a4:	9001      	str	r0, [sp, #4]
	strcpy(PcStringToSend ,pbuf);
1a0006a6:	4631      	mov	r1, r6
1a0006a8:	f004 f898 	bl	1a0047dc <strcpy>

	/*Si uso el enviar en una isr*/
	if(Isr) obj->xQueueSendFromISRFunction(XpointerQueue ,&PcStringToSend,xHigherPriorityTaskWoken, 0);
1a0006ac:	b135      	cbz	r5, 1a0006bc <ModuleDinamicMemory_send+0x2c>
1a0006ae:	68e4      	ldr	r4, [r4, #12]
1a0006b0:	9808      	ldr	r0, [sp, #32]
1a0006b2:	a901      	add	r1, sp, #4
1a0006b4:	463a      	mov	r2, r7
1a0006b6:	2300      	movs	r3, #0
1a0006b8:	47a0      	blx	r4
1a0006ba:	e005      	b.n	1a0006c8 <ModuleDinamicMemory_send+0x38>
	else  obj->xQueueSendFunction(XpointerQueue ,&PcStringToSend,portMaxDelay, 0);
1a0006bc:	68a4      	ldr	r4, [r4, #8]
1a0006be:	9808      	ldr	r0, [sp, #32]
1a0006c0:	a901      	add	r1, sp, #4
1a0006c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0006c4:	2300      	movs	r3, #0
1a0006c6:	47a0      	blx	r4
}
1a0006c8:	b003      	add	sp, #12
1a0006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a0006cc <ModuleDinamicMemory_receive>:

char* ModuleDinamicMemory_receive(Module_Data_t *obj ,char * XpointerQueue, uint32_t portMaxDelay){
1a0006cc:	b500      	push	{lr}
1a0006ce:	b083      	sub	sp, #12

	char* pbuffer; /*Dato recibido*/
	obj->xQueueReceiveFunction(XpointerQueue , &pbuffer, portMaxDelay );
1a0006d0:	6903      	ldr	r3, [r0, #16]
1a0006d2:	4608      	mov	r0, r1
1a0006d4:	a901      	add	r1, sp, #4
1a0006d6:	4798      	blx	r3
	return pbuffer;
}
1a0006d8:	9801      	ldr	r0, [sp, #4]
1a0006da:	b003      	add	sp, #12
1a0006dc:	f85d fb04 	ldr.w	pc, [sp], #4

1a0006e0 <ModuleDinamicMemory_Free>:

void ModuleDinamicMemory_Free(Module_Data_t *obj , char *ultimo_mensaje){
1a0006e0:	b508      	push	{r3, lr}
	obj->vPortFreeFunction(ultimo_mensaje);
1a0006e2:	6983      	ldr	r3, [r0, #24]
1a0006e4:	4608      	mov	r0, r1
1a0006e6:	4798      	blx	r3
1a0006e8:	bd08      	pop	{r3, pc}
1a0006ea:	bf00      	nop

1a0006ec <TaskService>:
/*=================================================================================
 	 	 	 	 	 	 	 	 | Tarea  |
 =================================================================================*/

void TaskService( void* taskParmPtr )
{
1a0006ec:	b510      	push	{r4, lr}
1a0006ee:	b082      	sub	sp, #8
	char *PtrSOF = NULL;
	char *PtrEOF = NULL;
	void* XPointerQueUe = NULL; /*Puntero auxiliar  a cola*/

	gpioWrite( LED1, ON );
1a0006f0:	202b      	movs	r0, #43	; 0x2b
1a0006f2:	2101      	movs	r1, #1
1a0006f4:	f002 fb3c 	bl	1a002d70 <gpioWrite>
	vTaskDelay( 1000 / portTICK_RATE_MS );
1a0006f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0006fc:	f001 fa68 	bl	1a001bd0 <vTaskDelay>
	gpioWrite( LED1, OFF );
1a000700:	202b      	movs	r0, #43	; 0x2b
1a000702:	2100      	movs	r1, #0
1a000704:	f002 fb34 	bl	1a002d70 <gpioWrite>

	while(TRUE) {
		/*Notifica que llego trama Buena*/
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
1a000708:	2000      	movs	r0, #0
1a00070a:	4601      	mov	r1, r0
1a00070c:	4602      	mov	r2, r0
1a00070e:	f04f 33ff 	mov.w	r3, #4294967295
1a000712:	f001 fcf3 	bl	1a0020fc <xTaskNotifyWait>

		/*Proteger datos para hacer copia local*/
		taskENTER_CRITICAL();
1a000716:	f002 f88b 	bl	1a002830 <vPortEnterCritical>
		Frame_parameters.BufferAux = ModuleData.pvPortMallocFunction(sizeof(Data.Buffer));
1a00071a:	4b22      	ldr	r3, [pc, #136]	; (1a0007a4 <TaskService+0xb8>)
1a00071c:	695b      	ldr	r3, [r3, #20]
1a00071e:	206a      	movs	r0, #106	; 0x6a
1a000720:	2100      	movs	r1, #0
1a000722:	4798      	blx	r3
1a000724:	4c20      	ldr	r4, [pc, #128]	; (1a0007a8 <TaskService+0xbc>)
1a000726:	60a0      	str	r0, [r4, #8]
		strcpy((char*)Frame_parameters.BufferAux,(const char*)Data.Buffer);
1a000728:	68a0      	ldr	r0, [r4, #8]
1a00072a:	4920      	ldr	r1, [pc, #128]	; (1a0007ac <TaskService+0xc0>)
1a00072c:	f004 f856 	bl	1a0047dc <strcpy>
		taskEXIT_CRITICAL();
1a000730:	f002 f8a0 	bl	1a002874 <vPortExitCritical>

		/*Buscar posición del inicio de la trama*/
		PtrSOF = strchr((const char*)Frame_parameters.BufferAux, Frame_parameters._SOF);
1a000734:	68a0      	ldr	r0, [r4, #8]
1a000736:	7821      	ldrb	r1, [r4, #0]
1a000738:	f004 f842 	bl	1a0047c0 <strchr>

		if( PtrSOF != NULL ){
1a00073c:	4601      	mov	r1, r0
1a00073e:	b188      	cbz	r0, 1a000764 <TaskService+0x78>
			/** Decodificar T :  T[0] -'0' *10 + T[1] - '0'*/
			Frame_parameters.T[0] =  ( *(PtrSOF +  OFFSET_TAMANO)-'0' )*10 + (*(PtrSOF +  OFFSET_TAMANO + 1)-'0' ) ;
1a000740:	7882      	ldrb	r2, [r0, #2]
1a000742:	3a30      	subs	r2, #48	; 0x30
1a000744:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000748:	0050      	lsls	r0, r2, #1
1a00074a:	78cb      	ldrb	r3, [r1, #3]
1a00074c:	4403      	add	r3, r0
1a00074e:	3b30      	subs	r3, #48	; 0x30
1a000750:	b2db      	uxtb	r3, r3
1a000752:	70a3      	strb	r3, [r4, #2]

			/** Decodificar OP */
			Frame_parameters.Operation = *(PtrSOF +  OFFSET_OP)-'0';
1a000754:	784b      	ldrb	r3, [r1, #1]
1a000756:	3b30      	subs	r3, #48	; 0x30
1a000758:	b2db      	uxtb	r3, r3
1a00075a:	7063      	strb	r3, [r4, #1]

			/* Cantidad de memoria a reservar*/
			ModuleData.xMaxStringLength = Frame_parameters.T[0] + NUM_ELEMENTOS_REST_FRAME;
1a00075c:	78a3      	ldrb	r3, [r4, #2]
1a00075e:	3306      	adds	r3, #6
1a000760:	4a10      	ldr	r2, [pc, #64]	; (1a0007a4 <TaskService+0xb8>)
1a000762:	7113      	strb	r3, [r2, #4]

			//printf( "T %d\r\n",Frame_parameters.T[0]); // QUITAR
		}

		/*Selecionar operaacion*/
		XPointerQueUe = SelecQueueFromOperation(Frame_parameters.Operation);
1a000764:	4b10      	ldr	r3, [pc, #64]	; (1a0007a8 <TaskService+0xbc>)
1a000766:	7858      	ldrb	r0, [r3, #1]
1a000768:	f7ff feca 	bl	1a000500 <SelecQueueFromOperation>

		if(XPointerQueUe != NULL){
1a00076c:	b150      	cbz	r0, 1a000784 <TaskService+0x98>
			/*Envía el puntero al buffer con la trama a la cola*/
			ModuleDinamicMemory_send(&ModuleData,0,NULL,(char*)Frame_parameters.BufferAux,XPointerQueUe ,portMAX_DELAY);
1a00076e:	4b0e      	ldr	r3, [pc, #56]	; (1a0007a8 <TaskService+0xbc>)
1a000770:	689b      	ldr	r3, [r3, #8]
1a000772:	9000      	str	r0, [sp, #0]
1a000774:	f04f 32ff 	mov.w	r2, #4294967295
1a000778:	9201      	str	r2, [sp, #4]
1a00077a:	480a      	ldr	r0, [pc, #40]	; (1a0007a4 <TaskService+0xb8>)
1a00077c:	2100      	movs	r1, #0
1a00077e:	460a      	mov	r2, r1
1a000780:	f7ff ff86 	bl	1a000690 <ModuleDinamicMemory_send>
		}
		/*Libero memoria del buffer aux*/
		ModuleData.vPortFreeFunction(Frame_parameters.BufferAux );
1a000784:	4b07      	ldr	r3, [pc, #28]	; (1a0007a4 <TaskService+0xb8>)
1a000786:	699b      	ldr	r3, [r3, #24]
1a000788:	4a07      	ldr	r2, [pc, #28]	; (1a0007a8 <TaskService+0xbc>)
1a00078a:	6890      	ldr	r0, [r2, #8]
1a00078c:	4798      	blx	r3
		gpioToggle( LEDB );
1a00078e:	202a      	movs	r0, #42	; 0x2a
1a000790:	f002 fb46 	bl	1a002e20 <gpioToggle>

		/*sincronizar-Permite transmitir por uart lo que se recibe por la cola*/
		xSemaphoreGive(SemTxUart);
1a000794:	4b06      	ldr	r3, [pc, #24]	; (1a0007b0 <TaskService+0xc4>)
1a000796:	6818      	ldr	r0, [r3, #0]
1a000798:	2100      	movs	r1, #0
1a00079a:	460a      	mov	r2, r1
1a00079c:	460b      	mov	r3, r1
1a00079e:	f000 fb49 	bl	1a000e34 <xQueueGenericSend>
	}
1a0007a2:	e7b1      	b.n	1a000708 <TaskService+0x1c>
1a0007a4:	10002ec4 	.word	0x10002ec4
1a0007a8:	10000000 	.word	0x10000000
1a0007ac:	10002e54 	.word	0x10002e54
1a0007b0:	10002e48 	.word	0x10002e48

1a0007b4 <Task_ToMayusculas_OP0>:
}

/*=================================================================================
 	 	 	 	 | Tarea Mayusculizar - 24.5.19 R.O. |
 =================================================================================*/
void Task_ToMayusculas_OP0( void* taskParmPtr ){
1a0007b4:	b530      	push	{r4, r5, lr}
1a0007b6:	b083      	sub	sp, #12
	char * rx;
	while(1){

		rx = ModuleDinamicMemory_receive(&ModuleData,xPointerQueue_OP0,  portMAX_DELAY);
1a0007b8:	4c0d      	ldr	r4, [pc, #52]	; (1a0007f0 <Task_ToMayusculas_OP0+0x3c>)
1a0007ba:	4620      	mov	r0, r4
1a0007bc:	4b0d      	ldr	r3, [pc, #52]	; (1a0007f4 <Task_ToMayusculas_OP0+0x40>)
1a0007be:	6819      	ldr	r1, [r3, #0]
1a0007c0:	f04f 32ff 	mov.w	r2, #4294967295
1a0007c4:	f7ff ff82 	bl	1a0006cc <ModuleDinamicMemory_receive>
1a0007c8:	4605      	mov	r5, r0
		//PrintUartMessageMutex("Task_ToMayusculas_OP0", SemMutexUart);
		//PrintUartBuffMutex( "mayus %s\r\n",rx,SemMutexUart);
        // pasar string a mayusculas  
        packetToUpper(rx);
1a0007ca:	f7ff fec1 	bl	1a000550 <packetToUpper>
        // Enviar a cola de TaskTxUARt
        ModuleDinamicMemory_send(&ModuleData,0,NULL,rx, xPointerQueue_3,portMAX_DELAY);
1a0007ce:	4b0a      	ldr	r3, [pc, #40]	; (1a0007f8 <Task_ToMayusculas_OP0+0x44>)
1a0007d0:	681b      	ldr	r3, [r3, #0]
1a0007d2:	9300      	str	r3, [sp, #0]
1a0007d4:	f04f 33ff 	mov.w	r3, #4294967295
1a0007d8:	9301      	str	r3, [sp, #4]
1a0007da:	4620      	mov	r0, r4
1a0007dc:	2100      	movs	r1, #0
1a0007de:	460a      	mov	r2, r1
1a0007e0:	462b      	mov	r3, r5
1a0007e2:	f7ff ff55 	bl	1a000690 <ModuleDinamicMemory_send>
		/*Libera memoria dinamica*/
		ModuleDinamicMemory_Free(&ModuleData, rx);
1a0007e6:	4620      	mov	r0, r4
1a0007e8:	4629      	mov	r1, r5
1a0007ea:	f7ff ff79 	bl	1a0006e0 <ModuleDinamicMemory_Free>
	}
1a0007ee:	e7e3      	b.n	1a0007b8 <Task_ToMayusculas_OP0+0x4>
1a0007f0:	10002ec4 	.word	0x10002ec4
1a0007f4:	10002eec 	.word	0x10002eec
1a0007f8:	10002e50 	.word	0x10002e50

1a0007fc <Task_ToMinusculas_OP1>:

/*=================================================================================
 	 	 	 	 | Tarea Minusculizar - 24.5.19 R.O. |
 ================================================================================= */
 
void Task_ToMinusculas_OP1( void* taskParmPtr ){
1a0007fc:	b530      	push	{r4, r5, lr}
1a0007fe:	b083      	sub	sp, #12
	char * rx;
	while(1){

		rx = ModuleDinamicMemory_receive(&ModuleData,xPointerQueue_OP1,  portMAX_DELAY);
1a000800:	4c0d      	ldr	r4, [pc, #52]	; (1a000838 <Task_ToMinusculas_OP1+0x3c>)
1a000802:	4620      	mov	r0, r4
1a000804:	4b0d      	ldr	r3, [pc, #52]	; (1a00083c <Task_ToMinusculas_OP1+0x40>)
1a000806:	6819      	ldr	r1, [r3, #0]
1a000808:	f04f 32ff 	mov.w	r2, #4294967295
1a00080c:	f7ff ff5e 	bl	1a0006cc <ModuleDinamicMemory_receive>
1a000810:	4605      	mov	r5, r0
		//PrintUartMessageMutex("Task_ToMinusculas_OP1", SemMutexUart);
		//PrintUartBuffMutex( "Minus %s\r\n",rx,SemMutexUart);
        packetToLower(rx);
1a000812:	f7ff fe85 	bl	1a000520 <packetToLower>
        // Enviar a cola de TaskTxUARt
        ModuleDinamicMemory_send(&ModuleData,0,NULL,rx, xPointerQueue_3,portMAX_DELAY);
1a000816:	4b0a      	ldr	r3, [pc, #40]	; (1a000840 <Task_ToMinusculas_OP1+0x44>)
1a000818:	681b      	ldr	r3, [r3, #0]
1a00081a:	9300      	str	r3, [sp, #0]
1a00081c:	f04f 33ff 	mov.w	r3, #4294967295
1a000820:	9301      	str	r3, [sp, #4]
1a000822:	4620      	mov	r0, r4
1a000824:	2100      	movs	r1, #0
1a000826:	460a      	mov	r2, r1
1a000828:	462b      	mov	r3, r5
1a00082a:	f7ff ff31 	bl	1a000690 <ModuleDinamicMemory_send>
		/*Libera memoria dinamica*/
		ModuleDinamicMemory_Free(&ModuleData, rx);
1a00082e:	4620      	mov	r0, r4
1a000830:	4629      	mov	r1, r5
1a000832:	f7ff ff55 	bl	1a0006e0 <ModuleDinamicMemory_Free>
	}
1a000836:	e7e3      	b.n	1a000800 <Task_ToMinusculas_OP1+0x4>
1a000838:	10002ec4 	.word	0x10002ec4
1a00083c:	10002ee8 	.word	0x10002ee8
1a000840:	10002e50 	.word	0x10002e50

1a000844 <CallbackRx>:
		}

/*=================================================================================
 	 	 	 	 	 	 	 	 | Callback IT RX |
 =================================================================================*/
void CallbackRx( void *noUsado ){
1a000844:	b500      	push	{lr}
1a000846:	b083      	sub	sp, #12

	UBaseType_t uxSavedInterruptStatus;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	volatile char c = uartRxRead( UART_USB );  /*Char received*/
1a000848:	2003      	movs	r0, #3
1a00084a:	f002 fc41 	bl	1a0030d0 <uartRxRead>
1a00084e:	f88d 0007 	strb.w	r0, [sp, #7]

	Add_IncommingFrame(uxSavedInterruptStatus ,xHigherPriorityTaskWoken,c);
1a000852:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000856:	2000      	movs	r0, #0
1a000858:	4601      	mov	r1, r0
1a00085a:	f7ff fdf3 	bl	1a000444 <Add_IncommingFrame>

	if(xHigherPriorityTaskWoken) portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}
1a00085e:	b003      	add	sp, #12
1a000860:	f85d fb04 	ldr.w	pc, [sp], #4

1a000864 <Transmit_UART>:
 | Callback IT TX | - 25.5.2019 RO
  // Definidas en circularBuffer.h/.c
  //  	if( read_buffer( &circularBuffer, &Txbyte ) ){
 =================================================================================*/
void Transmit_UART ( void* noUsado )
{
1a000864:	b500      	push	{lr}
1a000866:	b083      	sub	sp, #12
	static int start_detected = 0;
	char Txbyte;
	if(read_buffer( &circularBuffer, &Txbyte ) ){
1a000868:	4806      	ldr	r0, [pc, #24]	; (1a000884 <Transmit_UART+0x20>)
1a00086a:	f10d 0107 	add.w	r1, sp, #7
1a00086e:	f7ff fec9 	bl	1a000604 <read_buffer>
1a000872:	b120      	cbz	r0, 1a00087e <Transmit_UART+0x1a>
		uartTxWrite( UART_USB, Txbyte );
1a000874:	2003      	movs	r0, #3
1a000876:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00087a:	f002 fc33 	bl	1a0030e4 <uartTxWrite>
	}

}
1a00087e:	b003      	add	sp, #12
1a000880:	f85d fb04 	ldr.w	pc, [sp], #4
1a000884:	10002bec 	.word	0x10002bec

1a000888 <TaskTxUart>:
 char* ModuleDinamicMemory_receive(Module_Data_t *obj ,char * XpointerQueue, uint32_t portMaxDelay){
 char* pbuffer;  //
 obj->xQueueReceiveFunction(XpointerQueue , &pbuffer, portMaxDelay );
 return pbuffer;
=================================================================================*/
void TaskTxUart( void* taskParmPtr ){
1a000888:	b538      	push	{r3, r4, r5, lr}
	char * rx;
	while(true){
			/*Recibe por la cola*/
			rx = ModuleDinamicMemory_receive(&ModuleData, xPointerQueue_3, portMAX_DELAY);
1a00088a:	4d0e      	ldr	r5, [pc, #56]	; (1a0008c4 <TaskTxUart+0x3c>)
1a00088c:	4628      	mov	r0, r5
1a00088e:	4b0e      	ldr	r3, [pc, #56]	; (1a0008c8 <TaskTxUart+0x40>)
1a000890:	6819      	ldr	r1, [r3, #0]
1a000892:	f04f 32ff 	mov.w	r2, #4294967295
1a000896:	f7ff ff19 	bl	1a0006cc <ModuleDinamicMemory_receive>
1a00089a:	4604      	mov	r4, r0
            PrintUartBuffMutex( "rxTsk: %s\r\n",rx,SemMutexUart);           
1a00089c:	480b      	ldr	r0, [pc, #44]	; (1a0008cc <TaskTxUart+0x44>)
1a00089e:	4621      	mov	r1, r4
1a0008a0:	4b0b      	ldr	r3, [pc, #44]	; (1a0008d0 <TaskTxUart+0x48>)
1a0008a2:	681a      	ldr	r2, [r3, #0]
1a0008a4:	f7ff fe8e 	bl	1a0005c4 <PrintUartBuffMutex>
			/*Libera memoria dinamica*/
			ModuleDinamicMemory_Free(&ModuleData, rx);
1a0008a8:	4628      	mov	r0, r5
1a0008aa:	4621      	mov	r1, r4
1a0008ac:	f7ff ff18 	bl	1a0006e0 <ModuleDinamicMemory_Free>
            if( uartTxReady( UART_USB ) ){
1a0008b0:	2003      	movs	r0, #3
1a0008b2:	f002 fc01 	bl	1a0030b8 <uartTxReady>
1a0008b6:	2800      	cmp	r0, #0
1a0008b8:	d0e7      	beq.n	1a00088a <TaskTxUart+0x2>
				// La primera vez – con esto arranca
				Transmit_UART( 0 );
1a0008ba:	2000      	movs	r0, #0
1a0008bc:	f7ff ffd2 	bl	1a000864 <Transmit_UART>
1a0008c0:	e7e3      	b.n	1a00088a <TaskTxUart+0x2>
1a0008c2:	bf00      	nop
1a0008c4:	10002ec4 	.word	0x10002ec4
1a0008c8:	10002e50 	.word	0x10002e50
1a0008cc:	1a005004 	.word	0x1a005004
1a0008d0:	10002ee4 	.word	0x10002ee4

1a0008d4 <Task_Inicializar>:

/*=================================================================================
 	 	 	 	 	 	 	 	 |Inicializador por ahora BufCirc - 25.05.19 |
 =================================================================================*/
void Task_Inicializar(void)
		{
1a0008d4:	b500      	push	{lr}
1a0008d6:	b09b      	sub	sp, #108	; 0x6c
	    char mensaje[100];

	    // 25.5.2019 Reemplazo printf()
		 init_buffer( &circularBuffer );
1a0008d8:	480b      	ldr	r0, [pc, #44]	; (1a000908 <Task_Inicializar+0x34>)
1a0008da:	f7ff fe8d 	bl	1a0005f8 <init_buffer>
		 strncpy(mensaje,"Gustavo- Jacobo - Julian -Rafael",99);
1a0008de:	a801      	add	r0, sp, #4
1a0008e0:	490a      	ldr	r1, [pc, #40]	; (1a00090c <Task_Inicializar+0x38>)
1a0008e2:	2263      	movs	r2, #99	; 0x63
1a0008e4:	f003 ff82 	bl	1a0047ec <strncpy>
		 //write_bufferString(mensaje);
		 print_to_circular("TP1_Final freeRTOS");
1a0008e8:	4809      	ldr	r0, [pc, #36]	; (1a000910 <Task_Inicializar+0x3c>)
1a0008ea:	f7ff fe49 	bl	1a000580 <print_to_circular>
		 print_to_circular(mensaje);
1a0008ee:	a801      	add	r0, sp, #4
1a0008f0:	f7ff fe46 	bl	1a000580 <print_to_circular>
		 if( uartTxReady( UART_USB ) ){
1a0008f4:	2003      	movs	r0, #3
1a0008f6:	f002 fbdf 	bl	1a0030b8 <uartTxReady>
1a0008fa:	b110      	cbz	r0, 1a000902 <Task_Inicializar+0x2e>
		 	// La primera vez hay que llamar a la función para que empiece a escribir
		 			Transmit_UART( 0 );
1a0008fc:	2000      	movs	r0, #0
1a0008fe:	f7ff ffb1 	bl	1a000864 <Transmit_UART>
		 			}

		}
1a000902:	b01b      	add	sp, #108	; 0x6c
1a000904:	f85d fb04 	ldr.w	pc, [sp], #4
1a000908:	10002bec 	.word	0x10002bec
1a00090c:	1a005010 	.word	0x1a005010
1a000910:	1a005034 	.word	0x1a005034

1a000914 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000914:	4a12      	ldr	r2, [pc, #72]	; (1a000960 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000916:	f012 0f07 	tst.w	r2, #7
1a00091a:	d007      	beq.n	1a00092c <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a00091c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00091e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000922:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000926:	4413      	add	r3, r2
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000928:	460a      	mov	r2, r1
1a00092a:	e001      	b.n	1a000930 <prvHeapInit+0x1c>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a00092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000930:	480c      	ldr	r0, [pc, #48]	; (1a000964 <prvHeapInit+0x50>)
1a000932:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000934:	2100      	movs	r1, #0
1a000936:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000938:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a00093a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00093c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000940:	4809      	ldr	r0, [pc, #36]	; (1a000968 <prvHeapInit+0x54>)
1a000942:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000944:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000946:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000948:	1a99      	subs	r1, r3, r2
1a00094a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a00094c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00094e:	4b07      	ldr	r3, [pc, #28]	; (1a00096c <prvHeapInit+0x58>)
1a000950:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000952:	4b07      	ldr	r3, [pc, #28]	; (1a000970 <prvHeapInit+0x5c>)
1a000954:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000956:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a00095a:	4b06      	ldr	r3, [pc, #24]	; (1a000974 <prvHeapInit+0x60>)
1a00095c:	601a      	str	r2, [r3, #0]
1a00095e:	4770      	bx	lr
1a000960:	10000158 	.word	0x10000158
1a000964:	10000150 	.word	0x10000150
1a000968:	1000014c 	.word	0x1000014c
1a00096c:	1000215c 	.word	0x1000215c
1a000970:	10000148 	.word	0x10000148
1a000974:	10002158 	.word	0x10002158

1a000978 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000978:	4a13      	ldr	r2, [pc, #76]	; (1a0009c8 <prvInsertBlockIntoFreeList+0x50>)
1a00097a:	e000      	b.n	1a00097e <prvInsertBlockIntoFreeList+0x6>
1a00097c:	461a      	mov	r2, r3
1a00097e:	6813      	ldr	r3, [r2, #0]
1a000980:	4283      	cmp	r3, r0
1a000982:	d3fb      	bcc.n	1a00097c <prvInsertBlockIntoFreeList+0x4>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000984:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000986:	6851      	ldr	r1, [r2, #4]
1a000988:	1854      	adds	r4, r2, r1
1a00098a:	4284      	cmp	r4, r0
1a00098c:	d103      	bne.n	1a000996 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a00098e:	6840      	ldr	r0, [r0, #4]
1a000990:	4401      	add	r1, r0
1a000992:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
1a000994:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000996:	6841      	ldr	r1, [r0, #4]
1a000998:	1844      	adds	r4, r0, r1
1a00099a:	429c      	cmp	r4, r3
1a00099c:	d10c      	bne.n	1a0009b8 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00099e:	4c0b      	ldr	r4, [pc, #44]	; (1a0009cc <prvInsertBlockIntoFreeList+0x54>)
1a0009a0:	6824      	ldr	r4, [r4, #0]
1a0009a2:	42a3      	cmp	r3, r4
1a0009a4:	d006      	beq.n	1a0009b4 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a0009a6:	685b      	ldr	r3, [r3, #4]
1a0009a8:	4419      	add	r1, r3
1a0009aa:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0009ac:	6813      	ldr	r3, [r2, #0]
1a0009ae:	681b      	ldr	r3, [r3, #0]
1a0009b0:	6003      	str	r3, [r0, #0]
1a0009b2:	e002      	b.n	1a0009ba <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0009b4:	6004      	str	r4, [r0, #0]
1a0009b6:	e000      	b.n	1a0009ba <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0009b8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0009ba:	4282      	cmp	r2, r0
1a0009bc:	d000      	beq.n	1a0009c0 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0009be:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0009c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0009c4:	4770      	bx	lr
1a0009c6:	bf00      	nop
1a0009c8:	10000150 	.word	0x10000150
1a0009cc:	1000014c 	.word	0x1000014c

1a0009d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0009d0:	b570      	push	{r4, r5, r6, lr}
1a0009d2:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
1a0009d4:	f000 ffe0 	bl	1a001998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
1a0009d8:	4b35      	ldr	r3, [pc, #212]	; (1a000ab0 <pvPortMalloc+0xe0>)
1a0009da:	681b      	ldr	r3, [r3, #0]
1a0009dc:	b90b      	cbnz	r3, 1a0009e2 <pvPortMalloc+0x12>
		{
			prvHeapInit();
1a0009de:	f7ff ff99 	bl	1a000914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0009e2:	4b34      	ldr	r3, [pc, #208]	; (1a000ab4 <pvPortMalloc+0xe4>)
1a0009e4:	681b      	ldr	r3, [r3, #0]
1a0009e6:	421c      	tst	r4, r3
1a0009e8:	d147      	bne.n	1a000a7a <pvPortMalloc+0xaa>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
1a0009ea:	b134      	cbz	r4, 1a0009fa <pvPortMalloc+0x2a>
			{
				xWantedSize += xHeapStructSize;
1a0009ec:	3408      	adds	r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a0009ee:	f014 0f07 	tst.w	r4, #7
1a0009f2:	d002      	beq.n	1a0009fa <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0009f4:	f024 0407 	bic.w	r4, r4, #7
1a0009f8:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a0009fa:	2c00      	cmp	r4, #0
1a0009fc:	d03f      	beq.n	1a000a7e <pvPortMalloc+0xae>
1a0009fe:	4b2e      	ldr	r3, [pc, #184]	; (1a000ab8 <pvPortMalloc+0xe8>)
1a000a00:	681b      	ldr	r3, [r3, #0]
1a000a02:	429c      	cmp	r4, r3
1a000a04:	d83d      	bhi.n	1a000a82 <pvPortMalloc+0xb2>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
1a000a06:	4b2d      	ldr	r3, [pc, #180]	; (1a000abc <pvPortMalloc+0xec>)
1a000a08:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000a0a:	e001      	b.n	1a000a10 <pvPortMalloc+0x40>
				{
					pxPreviousBlock = pxBlock;
1a000a0c:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000a0e:	4615      	mov	r5, r2
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000a10:	686a      	ldr	r2, [r5, #4]
1a000a12:	42a2      	cmp	r2, r4
1a000a14:	d202      	bcs.n	1a000a1c <pvPortMalloc+0x4c>
1a000a16:	682a      	ldr	r2, [r5, #0]
1a000a18:	2a00      	cmp	r2, #0
1a000a1a:	d1f7      	bne.n	1a000a0c <pvPortMalloc+0x3c>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
1a000a1c:	4a24      	ldr	r2, [pc, #144]	; (1a000ab0 <pvPortMalloc+0xe0>)
1a000a1e:	6812      	ldr	r2, [r2, #0]
1a000a20:	4295      	cmp	r5, r2
1a000a22:	d030      	beq.n	1a000a86 <pvPortMalloc+0xb6>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000a24:	681e      	ldr	r6, [r3, #0]
1a000a26:	3608      	adds	r6, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000a28:	682a      	ldr	r2, [r5, #0]
1a000a2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000a2c:	686b      	ldr	r3, [r5, #4]
1a000a2e:	1b1b      	subs	r3, r3, r4
1a000a30:	2b10      	cmp	r3, #16
1a000a32:	d910      	bls.n	1a000a56 <pvPortMalloc+0x86>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000a34:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000a36:	f010 0f07 	tst.w	r0, #7
1a000a3a:	d008      	beq.n	1a000a4e <pvPortMalloc+0x7e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000a3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a40:	f383 8811 	msr	BASEPRI, r3
1a000a44:	f3bf 8f6f 	isb	sy
1a000a48:	f3bf 8f4f 	dsb	sy
1a000a4c:	e7fe      	b.n	1a000a4c <pvPortMalloc+0x7c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000a4e:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000a50:	606c      	str	r4, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000a52:	f7ff ff91 	bl	1a000978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000a56:	686a      	ldr	r2, [r5, #4]
1a000a58:	4917      	ldr	r1, [pc, #92]	; (1a000ab8 <pvPortMalloc+0xe8>)
1a000a5a:	680b      	ldr	r3, [r1, #0]
1a000a5c:	1a9b      	subs	r3, r3, r2
1a000a5e:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000a60:	4917      	ldr	r1, [pc, #92]	; (1a000ac0 <pvPortMalloc+0xf0>)
1a000a62:	6809      	ldr	r1, [r1, #0]
1a000a64:	428b      	cmp	r3, r1
1a000a66:	d201      	bcs.n	1a000a6c <pvPortMalloc+0x9c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000a68:	4915      	ldr	r1, [pc, #84]	; (1a000ac0 <pvPortMalloc+0xf0>)
1a000a6a:	600b      	str	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000a6c:	4b11      	ldr	r3, [pc, #68]	; (1a000ab4 <pvPortMalloc+0xe4>)
1a000a6e:	681b      	ldr	r3, [r3, #0]
1a000a70:	4313      	orrs	r3, r2
1a000a72:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000a74:	2300      	movs	r3, #0
1a000a76:	602b      	str	r3, [r5, #0]
1a000a78:	e006      	b.n	1a000a88 <pvPortMalloc+0xb8>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
1a000a7a:	2600      	movs	r6, #0
1a000a7c:	e004      	b.n	1a000a88 <pvPortMalloc+0xb8>
1a000a7e:	2600      	movs	r6, #0
1a000a80:	e002      	b.n	1a000a88 <pvPortMalloc+0xb8>
1a000a82:	2600      	movs	r6, #0
1a000a84:	e000      	b.n	1a000a88 <pvPortMalloc+0xb8>
1a000a86:	2600      	movs	r6, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000a88:	f001 f826 	bl	1a001ad8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1a000a8c:	b90e      	cbnz	r6, 1a000a92 <pvPortMalloc+0xc2>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000a8e:	f000 fd35 	bl	1a0014fc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000a92:	f016 0f07 	tst.w	r6, #7
1a000a96:	d008      	beq.n	1a000aaa <pvPortMalloc+0xda>
1a000a98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a9c:	f383 8811 	msr	BASEPRI, r3
1a000aa0:	f3bf 8f6f 	isb	sy
1a000aa4:	f3bf 8f4f 	dsb	sy
1a000aa8:	e7fe      	b.n	1a000aa8 <pvPortMalloc+0xd8>
	return pvReturn;
}
1a000aaa:	4630      	mov	r0, r6
1a000aac:	bd70      	pop	{r4, r5, r6, pc}
1a000aae:	bf00      	nop
1a000ab0:	1000014c 	.word	0x1000014c
1a000ab4:	10002158 	.word	0x10002158
1a000ab8:	10000148 	.word	0x10000148
1a000abc:	10000150 	.word	0x10000150
1a000ac0:	1000215c 	.word	0x1000215c

1a000ac4 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
1a000ac4:	b3a0      	cbz	r0, 1a000b30 <vPortFree+0x6c>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
1a000ac6:	b538      	push	{r3, r4, r5, lr}
1a000ac8:	4603      	mov	r3, r0

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
1a000aca:	f1a0 0508 	sub.w	r5, r0, #8

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000ace:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000ad2:	4918      	ldr	r1, [pc, #96]	; (1a000b34 <vPortFree+0x70>)
1a000ad4:	6809      	ldr	r1, [r1, #0]
1a000ad6:	ea12 0401 	ands.w	r4, r2, r1
1a000ada:	d108      	bne.n	1a000aee <vPortFree+0x2a>
1a000adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ae0:	f383 8811 	msr	BASEPRI, r3
1a000ae4:	f3bf 8f6f 	isb	sy
1a000ae8:	f3bf 8f4f 	dsb	sy
1a000aec:	e7fe      	b.n	1a000aec <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000aee:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000af2:	b140      	cbz	r0, 1a000b06 <vPortFree+0x42>
1a000af4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000af8:	f383 8811 	msr	BASEPRI, r3
1a000afc:	f3bf 8f6f 	isb	sy
1a000b00:	f3bf 8f4f 	dsb	sy
1a000b04:	e7fe      	b.n	1a000b04 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
1a000b06:	b194      	cbz	r4, 1a000b2e <vPortFree+0x6a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
1a000b08:	b988      	cbnz	r0, 1a000b2e <vPortFree+0x6a>
1a000b0a:	461c      	mov	r4, r3
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000b0c:	ea22 0201 	bic.w	r2, r2, r1
1a000b10:	f843 2c04 	str.w	r2, [r3, #-4]

				vTaskSuspendAll();
1a000b14:	f000 ff40 	bl	1a001998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000b18:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000b1c:	4a06      	ldr	r2, [pc, #24]	; (1a000b38 <vPortFree+0x74>)
1a000b1e:	6813      	ldr	r3, [r2, #0]
1a000b20:	440b      	add	r3, r1
1a000b22:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000b24:	4628      	mov	r0, r5
1a000b26:	f7ff ff27 	bl	1a000978 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
1a000b2a:	f000 ffd5 	bl	1a001ad8 <xTaskResumeAll>
1a000b2e:	bd38      	pop	{r3, r4, r5, pc}
1a000b30:	4770      	bx	lr
1a000b32:	bf00      	nop
1a000b34:	10002158 	.word	0x10002158
1a000b38:	10000148 	.word	0x10000148

1a000b3c <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000b3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000b3e:	b123      	cbz	r3, 1a000b4a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000b40:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000b42:	6818      	ldr	r0, [r3, #0]
1a000b44:	f1c0 0007 	rsb	r0, r0, #7
1a000b48:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000b4a:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000b4c:	4770      	bx	lr
1a000b4e:	bf00      	nop

1a000b50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000b50:	b510      	push	{r4, lr}
1a000b52:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000b54:	f001 fe6c 	bl	1a002830 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000b58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000b5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000b5c:	429a      	cmp	r2, r3
1a000b5e:	d101      	bne.n	1a000b64 <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
1a000b60:	2401      	movs	r4, #1
1a000b62:	e000      	b.n	1a000b66 <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
1a000b64:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000b66:	f001 fe85 	bl	1a002874 <vPortExitCritical>

	return xReturn;
}
1a000b6a:	4620      	mov	r0, r4
1a000b6c:	bd10      	pop	{r4, pc}
1a000b6e:	bf00      	nop

1a000b70 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
1a000b70:	b510      	push	{r4, lr}
1a000b72:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000b74:	f001 fe5c 	bl	1a002830 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000b7a:	b90b      	cbnz	r3, 1a000b80 <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
1a000b7c:	2401      	movs	r4, #1
1a000b7e:	e000      	b.n	1a000b82 <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
1a000b80:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000b82:	f001 fe77 	bl	1a002874 <vPortExitCritical>

	return xReturn;
}
1a000b86:	4620      	mov	r0, r4
1a000b88:	bd10      	pop	{r4, pc}
1a000b8a:	bf00      	nop

1a000b8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
1a000b8c:	b570      	push	{r4, r5, r6, lr}
1a000b8e:	4604      	mov	r4, r0
1a000b90:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000b92:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000b94:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000b96:	b93a      	cbnz	r2, 1a000ba8 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000b98:	6803      	ldr	r3, [r0, #0]
1a000b9a:	bb43      	cbnz	r3, 1a000bee <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000b9c:	6840      	ldr	r0, [r0, #4]
1a000b9e:	f001 f9df 	bl	1a001f60 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000ba2:	2300      	movs	r3, #0
1a000ba4:	6063      	str	r3, [r4, #4]
1a000ba6:	e029      	b.n	1a000bfc <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
1a000ba8:	b96e      	cbnz	r6, 1a000bc6 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000baa:	6880      	ldr	r0, [r0, #8]
1a000bac:	f003 fdd0 	bl	1a004750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000bb0:	68a2      	ldr	r2, [r4, #8]
1a000bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000bb4:	4413      	add	r3, r2
1a000bb6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000bb8:	6862      	ldr	r2, [r4, #4]
1a000bba:	4293      	cmp	r3, r2
1a000bbc:	d319      	bcc.n	1a000bf2 <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000bbe:	6823      	ldr	r3, [r4, #0]
1a000bc0:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000bc2:	2000      	movs	r0, #0
1a000bc4:	e01a      	b.n	1a000bfc <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000bc6:	68c0      	ldr	r0, [r0, #12]
1a000bc8:	f003 fdc2 	bl	1a004750 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000bcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000bce:	425b      	negs	r3, r3
1a000bd0:	68e2      	ldr	r2, [r4, #12]
1a000bd2:	441a      	add	r2, r3
1a000bd4:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000bd6:	6821      	ldr	r1, [r4, #0]
1a000bd8:	428a      	cmp	r2, r1
1a000bda:	d202      	bcs.n	1a000be2 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000bdc:	6862      	ldr	r2, [r4, #4]
1a000bde:	4413      	add	r3, r2
1a000be0:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
1a000be2:	2e02      	cmp	r6, #2
1a000be4:	d107      	bne.n	1a000bf6 <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000be6:	b145      	cbz	r5, 1a000bfa <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1a000be8:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000bea:	2000      	movs	r0, #0
1a000bec:	e006      	b.n	1a000bfc <prvCopyDataToQueue+0x70>
1a000bee:	2000      	movs	r0, #0
1a000bf0:	e004      	b.n	1a000bfc <prvCopyDataToQueue+0x70>
1a000bf2:	2000      	movs	r0, #0
1a000bf4:	e002      	b.n	1a000bfc <prvCopyDataToQueue+0x70>
1a000bf6:	2000      	movs	r0, #0
1a000bf8:	e000      	b.n	1a000bfc <prvCopyDataToQueue+0x70>
1a000bfa:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000bfc:	3501      	adds	r5, #1
1a000bfe:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
1a000c00:	bd70      	pop	{r4, r5, r6, pc}
1a000c02:	bf00      	nop

1a000c04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000c04:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000c06:	b172      	cbz	r2, 1a000c26 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
1a000c08:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000c0a:	68c3      	ldr	r3, [r0, #12]
1a000c0c:	4413      	add	r3, r2
1a000c0e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000c10:	6844      	ldr	r4, [r0, #4]
1a000c12:	42a3      	cmp	r3, r4
1a000c14:	d301      	bcc.n	1a000c1a <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000c16:	6803      	ldr	r3, [r0, #0]
1a000c18:	60c3      	str	r3, [r0, #12]
1a000c1a:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000c1c:	4608      	mov	r0, r1
1a000c1e:	68d9      	ldr	r1, [r3, #12]
1a000c20:	f003 fd96 	bl	1a004750 <memcpy>
1a000c24:	bd10      	pop	{r4, pc}
1a000c26:	4770      	bx	lr

1a000c28 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
1a000c28:	b538      	push	{r3, r4, r5, lr}
1a000c2a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
1a000c2c:	f001 fe00 	bl	1a002830 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
1a000c30:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000c34:	b2e4      	uxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000c36:	e00a      	b.n	1a000c4e <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000c38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000c3a:	b15b      	cbz	r3, 1a000c54 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000c3c:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000c40:	f001 f884 	bl	1a001d4c <xTaskRemoveFromEventList>
1a000c44:	b108      	cbz	r0, 1a000c4a <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
1a000c46:	f001 f913 	bl	1a001e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1a000c4a:	3c01      	subs	r4, #1
1a000c4c:	b2e4      	uxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000c4e:	b263      	sxtb	r3, r4
1a000c50:	2b00      	cmp	r3, #0
1a000c52:	dcf1      	bgt.n	1a000c38 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
1a000c54:	23ff      	movs	r3, #255	; 0xff
1a000c56:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
1a000c5a:	f001 fe0b 	bl	1a002874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1a000c5e:	f001 fde7 	bl	1a002830 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
1a000c62:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000c66:	b2e4      	uxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000c68:	e00a      	b.n	1a000c80 <prvUnlockQueue+0x58>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000c6a:	692b      	ldr	r3, [r5, #16]
1a000c6c:	b15b      	cbz	r3, 1a000c86 <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000c6e:	f105 0010 	add.w	r0, r5, #16
1a000c72:	f001 f86b 	bl	1a001d4c <xTaskRemoveFromEventList>
1a000c76:	b108      	cbz	r0, 1a000c7c <prvUnlockQueue+0x54>
				{
					vTaskMissedYield();
1a000c78:	f001 f8fa 	bl	1a001e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1a000c7c:	3c01      	subs	r4, #1
1a000c7e:	b2e4      	uxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000c80:	b263      	sxtb	r3, r4
1a000c82:	2b00      	cmp	r3, #0
1a000c84:	dcf1      	bgt.n	1a000c6a <prvUnlockQueue+0x42>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
1a000c86:	23ff      	movs	r3, #255	; 0xff
1a000c88:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
1a000c8c:	f001 fdf2 	bl	1a002874 <vPortExitCritical>
1a000c90:	bd38      	pop	{r3, r4, r5, pc}
1a000c92:	bf00      	nop

1a000c94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1a000c94:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000c96:	b940      	cbnz	r0, 1a000caa <xQueueGenericReset+0x16>
1a000c98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c9c:	f383 8811 	msr	BASEPRI, r3
1a000ca0:	f3bf 8f6f 	isb	sy
1a000ca4:	f3bf 8f4f 	dsb	sy
1a000ca8:	e7fe      	b.n	1a000ca8 <xQueueGenericReset+0x14>
1a000caa:	4604      	mov	r4, r0
1a000cac:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
1a000cae:	f001 fdbf 	bl	1a002830 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000cb2:	6821      	ldr	r1, [r4, #0]
1a000cb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000cb8:	fb03 1002 	mla	r0, r3, r2, r1
1a000cbc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000cbe:	2000      	movs	r0, #0
1a000cc0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000cc2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000cc4:	3a01      	subs	r2, #1
1a000cc6:	fb02 1303 	mla	r3, r2, r3, r1
1a000cca:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000ccc:	23ff      	movs	r3, #255	; 0xff
1a000cce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
1a000cd6:	b97d      	cbnz	r5, 1a000cf8 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000cd8:	6923      	ldr	r3, [r4, #16]
1a000cda:	b1ab      	cbz	r3, 1a000d08 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000cdc:	f104 0010 	add.w	r0, r4, #16
1a000ce0:	f001 f834 	bl	1a001d4c <xTaskRemoveFromEventList>
1a000ce4:	b180      	cbz	r0, 1a000d08 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
1a000ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000cea:	4b09      	ldr	r3, [pc, #36]	; (1a000d10 <xQueueGenericReset+0x7c>)
1a000cec:	601a      	str	r2, [r3, #0]
1a000cee:	f3bf 8f4f 	dsb	sy
1a000cf2:	f3bf 8f6f 	isb	sy
1a000cf6:	e007      	b.n	1a000d08 <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000cf8:	f104 0010 	add.w	r0, r4, #16
1a000cfc:	f000 fb9a 	bl	1a001434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000d00:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000d04:	f000 fb96 	bl	1a001434 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
1a000d08:	f001 fdb4 	bl	1a002874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
1a000d0c:	2001      	movs	r0, #1
1a000d0e:	bd38      	pop	{r3, r4, r5, pc}
1a000d10:	e000ed04 	.word	0xe000ed04

1a000d14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1a000d14:	b538      	push	{r3, r4, r5, lr}
1a000d16:	461d      	mov	r5, r3
1a000d18:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1a000d1a:	460b      	mov	r3, r1
1a000d1c:	b909      	cbnz	r1, 1a000d22 <prvInitialiseNewQueue+0xe>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000d1e:	6024      	str	r4, [r4, #0]
1a000d20:	e000      	b.n	1a000d24 <prvInitialiseNewQueue+0x10>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000d22:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1a000d24:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000d26:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000d28:	4620      	mov	r0, r4
1a000d2a:	2101      	movs	r1, #1
1a000d2c:	f7ff ffb2 	bl	1a000c94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
1a000d30:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a000d34:	bd38      	pop	{r3, r4, r5, pc}
1a000d36:	bf00      	nop

1a000d38 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000d38:	b940      	cbnz	r0, 1a000d4c <xQueueGenericCreateStatic+0x14>
1a000d3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d3e:	f383 8811 	msr	BASEPRI, r3
1a000d42:	f3bf 8f6f 	isb	sy
1a000d46:	f3bf 8f4f 	dsb	sy
1a000d4a:	e7fe      	b.n	1a000d4a <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
1a000d4c:	b510      	push	{r4, lr}
1a000d4e:	b084      	sub	sp, #16
1a000d50:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
1a000d52:	b943      	cbnz	r3, 1a000d66 <xQueueGenericCreateStatic+0x2e>
1a000d54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d58:	f383 8811 	msr	BASEPRI, r3
1a000d5c:	f3bf 8f6f 	isb	sy
1a000d60:	f3bf 8f4f 	dsb	sy
1a000d64:	e7fe      	b.n	1a000d64 <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000d66:	b112      	cbz	r2, 1a000d6e <xQueueGenericCreateStatic+0x36>
1a000d68:	b119      	cbz	r1, 1a000d72 <xQueueGenericCreateStatic+0x3a>
1a000d6a:	2001      	movs	r0, #1
1a000d6c:	e002      	b.n	1a000d74 <xQueueGenericCreateStatic+0x3c>
1a000d6e:	2001      	movs	r0, #1
1a000d70:	e000      	b.n	1a000d74 <xQueueGenericCreateStatic+0x3c>
1a000d72:	2000      	movs	r0, #0
1a000d74:	b940      	cbnz	r0, 1a000d88 <xQueueGenericCreateStatic+0x50>
1a000d76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d7a:	f383 8811 	msr	BASEPRI, r3
1a000d7e:	f3bf 8f6f 	isb	sy
1a000d82:	f3bf 8f4f 	dsb	sy
1a000d86:	e7fe      	b.n	1a000d86 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000d88:	b912      	cbnz	r2, 1a000d90 <xQueueGenericCreateStatic+0x58>
1a000d8a:	b919      	cbnz	r1, 1a000d94 <xQueueGenericCreateStatic+0x5c>
1a000d8c:	2001      	movs	r0, #1
1a000d8e:	e002      	b.n	1a000d96 <xQueueGenericCreateStatic+0x5e>
1a000d90:	2001      	movs	r0, #1
1a000d92:	e000      	b.n	1a000d96 <xQueueGenericCreateStatic+0x5e>
1a000d94:	2000      	movs	r0, #0
1a000d96:	b940      	cbnz	r0, 1a000daa <xQueueGenericCreateStatic+0x72>
1a000d98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d9c:	f383 8811 	msr	BASEPRI, r3
1a000da0:	f3bf 8f6f 	isb	sy
1a000da4:	f3bf 8f4f 	dsb	sy
1a000da8:	e7fe      	b.n	1a000da8 <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000daa:	2050      	movs	r0, #80	; 0x50
1a000dac:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000dae:	9803      	ldr	r0, [sp, #12]
1a000db0:	2850      	cmp	r0, #80	; 0x50
1a000db2:	d008      	beq.n	1a000dc6 <xQueueGenericCreateStatic+0x8e>
1a000db4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000db8:	f383 8811 	msr	BASEPRI, r3
1a000dbc:	f3bf 8f6f 	isb	sy
1a000dc0:	f3bf 8f4f 	dsb	sy
1a000dc4:	e7fe      	b.n	1a000dc4 <xQueueGenericCreateStatic+0x8c>
1a000dc6:	4620      	mov	r0, r4
1a000dc8:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
1a000dca:	b13b      	cbz	r3, 1a000ddc <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000dcc:	2301      	movs	r3, #1
1a000dce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000dd2:	9400      	str	r4, [sp, #0]
1a000dd4:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000dd8:	f7ff ff9c 	bl	1a000d14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000ddc:	4620      	mov	r0, r4
1a000dde:	b004      	add	sp, #16
1a000de0:	bd10      	pop	{r4, pc}
1a000de2:	bf00      	nop

1a000de4 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000de4:	b940      	cbnz	r0, 1a000df8 <xQueueGenericCreate+0x14>
1a000de6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dea:	f383 8811 	msr	BASEPRI, r3
1a000dee:	f3bf 8f6f 	isb	sy
1a000df2:	f3bf 8f4f 	dsb	sy
1a000df6:	e7fe      	b.n	1a000df6 <xQueueGenericCreate+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
1a000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000dfa:	b083      	sub	sp, #12
1a000dfc:	4603      	mov	r3, r0
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
1a000dfe:	b111      	cbz	r1, 1a000e06 <xQueueGenericCreate+0x22>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000e00:	fb01 f000 	mul.w	r0, r1, r0
1a000e04:	e000      	b.n	1a000e08 <xQueueGenericCreate+0x24>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
1a000e06:	2000      	movs	r0, #0
1a000e08:	461e      	mov	r6, r3
1a000e0a:	4617      	mov	r7, r2
1a000e0c:	460c      	mov	r4, r1
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000e0e:	3050      	adds	r0, #80	; 0x50
1a000e10:	f7ff fdde 	bl	1a0009d0 <pvPortMalloc>

		if( pxNewQueue != NULL )
1a000e14:	4605      	mov	r5, r0
1a000e16:	b150      	cbz	r0, 1a000e2e <xQueueGenericCreate+0x4a>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000e18:	2300      	movs	r3, #0
1a000e1a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000e1e:	9000      	str	r0, [sp, #0]
1a000e20:	4630      	mov	r0, r6
1a000e22:	4621      	mov	r1, r4
1a000e24:	f105 0250 	add.w	r2, r5, #80	; 0x50
1a000e28:	463b      	mov	r3, r7
1a000e2a:	f7ff ff73 	bl	1a000d14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000e2e:	4628      	mov	r0, r5
1a000e30:	b003      	add	sp, #12
1a000e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000e34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
1a000e34:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000e36:	b085      	sub	sp, #20
1a000e38:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000e3a:	b940      	cbnz	r0, 1a000e4e <xQueueGenericSend+0x1a>
1a000e3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e40:	f383 8811 	msr	BASEPRI, r3
1a000e44:	f3bf 8f6f 	isb	sy
1a000e48:	f3bf 8f4f 	dsb	sy
1a000e4c:	e7fe      	b.n	1a000e4c <xQueueGenericSend+0x18>
1a000e4e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000e50:	b919      	cbnz	r1, 1a000e5a <xQueueGenericSend+0x26>
1a000e52:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000e54:	b91a      	cbnz	r2, 1a000e5e <xQueueGenericSend+0x2a>
1a000e56:	2201      	movs	r2, #1
1a000e58:	e002      	b.n	1a000e60 <xQueueGenericSend+0x2c>
1a000e5a:	2201      	movs	r2, #1
1a000e5c:	e000      	b.n	1a000e60 <xQueueGenericSend+0x2c>
1a000e5e:	2200      	movs	r2, #0
1a000e60:	b942      	cbnz	r2, 1a000e74 <xQueueGenericSend+0x40>
1a000e62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e66:	f383 8811 	msr	BASEPRI, r3
1a000e6a:	f3bf 8f6f 	isb	sy
1a000e6e:	f3bf 8f4f 	dsb	sy
1a000e72:	e7fe      	b.n	1a000e72 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000e74:	2b02      	cmp	r3, #2
1a000e76:	d103      	bne.n	1a000e80 <xQueueGenericSend+0x4c>
1a000e78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000e7a:	2a01      	cmp	r2, #1
1a000e7c:	d102      	bne.n	1a000e84 <xQueueGenericSend+0x50>
1a000e7e:	e002      	b.n	1a000e86 <xQueueGenericSend+0x52>
1a000e80:	2201      	movs	r2, #1
1a000e82:	e000      	b.n	1a000e86 <xQueueGenericSend+0x52>
1a000e84:	2200      	movs	r2, #0
1a000e86:	b942      	cbnz	r2, 1a000e9a <xQueueGenericSend+0x66>
1a000e88:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e8c:	f383 8811 	msr	BASEPRI, r3
1a000e90:	f3bf 8f6f 	isb	sy
1a000e94:	f3bf 8f4f 	dsb	sy
1a000e98:	e7fe      	b.n	1a000e98 <xQueueGenericSend+0x64>
1a000e9a:	461d      	mov	r5, r3
1a000e9c:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000e9e:	f000 ffed 	bl	1a001e7c <xTaskGetSchedulerState>
1a000ea2:	b918      	cbnz	r0, 1a000eac <xQueueGenericSend+0x78>
1a000ea4:	9b01      	ldr	r3, [sp, #4]
1a000ea6:	b91b      	cbnz	r3, 1a000eb0 <xQueueGenericSend+0x7c>
1a000ea8:	2301      	movs	r3, #1
1a000eaa:	e002      	b.n	1a000eb2 <xQueueGenericSend+0x7e>
1a000eac:	2301      	movs	r3, #1
1a000eae:	e000      	b.n	1a000eb2 <xQueueGenericSend+0x7e>
1a000eb0:	2300      	movs	r3, #0
1a000eb2:	b943      	cbnz	r3, 1a000ec6 <xQueueGenericSend+0x92>
1a000eb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eb8:	f383 8811 	msr	BASEPRI, r3
1a000ebc:	f3bf 8f6f 	isb	sy
1a000ec0:	f3bf 8f4f 	dsb	sy
1a000ec4:	e7fe      	b.n	1a000ec4 <xQueueGenericSend+0x90>
1a000ec6:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
1a000ec8:	f001 fcb2 	bl	1a002830 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000ecc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000ece:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000ed0:	429a      	cmp	r2, r3
1a000ed2:	d301      	bcc.n	1a000ed8 <xQueueGenericSend+0xa4>
1a000ed4:	2d02      	cmp	r5, #2
1a000ed6:	d121      	bne.n	1a000f1c <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000ed8:	4620      	mov	r0, r4
1a000eda:	4631      	mov	r1, r6
1a000edc:	462a      	mov	r2, r5
1a000ede:	f7ff fe55 	bl	1a000b8c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000ee4:	b16b      	cbz	r3, 1a000f02 <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000ee6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000eea:	f000 ff2f 	bl	1a001d4c <xTaskRemoveFromEventList>
1a000eee:	b188      	cbz	r0, 1a000f14 <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
1a000ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ef4:	4b32      	ldr	r3, [pc, #200]	; (1a000fc0 <xQueueGenericSend+0x18c>)
1a000ef6:	601a      	str	r2, [r3, #0]
1a000ef8:	f3bf 8f4f 	dsb	sy
1a000efc:	f3bf 8f6f 	isb	sy
1a000f00:	e008      	b.n	1a000f14 <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
1a000f02:	b138      	cbz	r0, 1a000f14 <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
1a000f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f08:	4b2d      	ldr	r3, [pc, #180]	; (1a000fc0 <xQueueGenericSend+0x18c>)
1a000f0a:	601a      	str	r2, [r3, #0]
1a000f0c:	f3bf 8f4f 	dsb	sy
1a000f10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
1a000f14:	f001 fcae 	bl	1a002874 <vPortExitCritical>
				return pdPASS;
1a000f18:	2001      	movs	r0, #1
1a000f1a:	e04e      	b.n	1a000fba <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a000f1c:	9b01      	ldr	r3, [sp, #4]
1a000f1e:	b91b      	cbnz	r3, 1a000f28 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a000f20:	f001 fca8 	bl	1a002874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
1a000f24:	2000      	movs	r0, #0
1a000f26:	e048      	b.n	1a000fba <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
1a000f28:	b91f      	cbnz	r7, 1a000f32 <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000f2a:	a802      	add	r0, sp, #8
1a000f2c:	f000 ff54 	bl	1a001dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000f30:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a000f32:	f001 fc9f 	bl	1a002874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a000f36:	f000 fd2f 	bl	1a001998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000f3a:	f001 fc79 	bl	1a002830 <vPortEnterCritical>
1a000f3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000f42:	b25b      	sxtb	r3, r3
1a000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000f48:	d102      	bne.n	1a000f50 <xQueueGenericSend+0x11c>
1a000f4a:	2300      	movs	r3, #0
1a000f4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000f50:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f54:	b25b      	sxtb	r3, r3
1a000f56:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000f5a:	d102      	bne.n	1a000f62 <xQueueGenericSend+0x12e>
1a000f5c:	2300      	movs	r3, #0
1a000f5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000f62:	f001 fc87 	bl	1a002874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000f66:	a802      	add	r0, sp, #8
1a000f68:	a901      	add	r1, sp, #4
1a000f6a:	f000 ff41 	bl	1a001df0 <xTaskCheckForTimeOut>
1a000f6e:	b9f0      	cbnz	r0, 1a000fae <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000f70:	4620      	mov	r0, r4
1a000f72:	f7ff fded 	bl	1a000b50 <prvIsQueueFull>
1a000f76:	b1a0      	cbz	r0, 1a000fa2 <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000f78:	f104 0010 	add.w	r0, r4, #16
1a000f7c:	9901      	ldr	r1, [sp, #4]
1a000f7e:	f000 feb1 	bl	1a001ce4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
1a000f82:	4620      	mov	r0, r4
1a000f84:	f7ff fe50 	bl	1a000c28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
1a000f88:	f000 fda6 	bl	1a001ad8 <xTaskResumeAll>
1a000f8c:	2800      	cmp	r0, #0
1a000f8e:	d19b      	bne.n	1a000ec8 <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
1a000f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f94:	4b0a      	ldr	r3, [pc, #40]	; (1a000fc0 <xQueueGenericSend+0x18c>)
1a000f96:	601a      	str	r2, [r3, #0]
1a000f98:	f3bf 8f4f 	dsb	sy
1a000f9c:	f3bf 8f6f 	isb	sy
1a000fa0:	e792      	b.n	1a000ec8 <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
1a000fa2:	4620      	mov	r0, r4
1a000fa4:	f7ff fe40 	bl	1a000c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000fa8:	f000 fd96 	bl	1a001ad8 <xTaskResumeAll>
1a000fac:	e78c      	b.n	1a000ec8 <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
1a000fae:	4620      	mov	r0, r4
1a000fb0:	f7ff fe3a 	bl	1a000c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000fb4:	f000 fd90 	bl	1a001ad8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
1a000fb8:	2000      	movs	r0, #0
		}
	}
}
1a000fba:	b005      	add	sp, #20
1a000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000fbe:	bf00      	nop
1a000fc0:	e000ed04 	.word	0xe000ed04

1a000fc4 <prvInitialiseMutex>:

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
		if( pxNewQueue != NULL )
1a000fc4:	b148      	cbz	r0, 1a000fda <prvInitialiseMutex+0x16>
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
1a000fc6:	b508      	push	{r3, lr}
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
1a000fc8:	2300      	movs	r3, #0
1a000fca:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a000fcc:	6003      	str	r3, [r0, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a000fce:	60c3      	str	r3, [r0, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a000fd0:	4619      	mov	r1, r3
1a000fd2:	461a      	mov	r2, r3
1a000fd4:	f7ff ff2e 	bl	1a000e34 <xQueueGenericSend>
1a000fd8:	bd08      	pop	{r3, pc}
1a000fda:	4770      	bx	lr

1a000fdc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
1a000fdc:	b510      	push	{r4, lr}
1a000fde:	4602      	mov	r2, r0
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a000fe0:	2001      	movs	r0, #1
1a000fe2:	2100      	movs	r1, #0
1a000fe4:	f7ff fefe 	bl	1a000de4 <xQueueGenericCreate>
1a000fe8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a000fea:	f7ff ffeb 	bl	1a000fc4 <prvInitialiseMutex>

		return pxNewQueue;
	}
1a000fee:	4620      	mov	r0, r4
1a000ff0:	bd10      	pop	{r4, pc}
1a000ff2:	bf00      	nop

1a000ff4 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
1a000ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000ff8:	b940      	cbnz	r0, 1a00100c <xQueueGenericSendFromISR+0x18>
1a000ffa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ffe:	f383 8811 	msr	BASEPRI, r3
1a001002:	f3bf 8f6f 	isb	sy
1a001006:	f3bf 8f4f 	dsb	sy
1a00100a:	e7fe      	b.n	1a00100a <xQueueGenericSendFromISR+0x16>
1a00100c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00100e:	b919      	cbnz	r1, 1a001018 <xQueueGenericSendFromISR+0x24>
1a001010:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001012:	b918      	cbnz	r0, 1a00101c <xQueueGenericSendFromISR+0x28>
1a001014:	2001      	movs	r0, #1
1a001016:	e002      	b.n	1a00101e <xQueueGenericSendFromISR+0x2a>
1a001018:	2001      	movs	r0, #1
1a00101a:	e000      	b.n	1a00101e <xQueueGenericSendFromISR+0x2a>
1a00101c:	2000      	movs	r0, #0
1a00101e:	b940      	cbnz	r0, 1a001032 <xQueueGenericSendFromISR+0x3e>
1a001020:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001024:	f383 8811 	msr	BASEPRI, r3
1a001028:	f3bf 8f6f 	isb	sy
1a00102c:	f3bf 8f4f 	dsb	sy
1a001030:	e7fe      	b.n	1a001030 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001032:	2b02      	cmp	r3, #2
1a001034:	d103      	bne.n	1a00103e <xQueueGenericSendFromISR+0x4a>
1a001036:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001038:	2801      	cmp	r0, #1
1a00103a:	d102      	bne.n	1a001042 <xQueueGenericSendFromISR+0x4e>
1a00103c:	e002      	b.n	1a001044 <xQueueGenericSendFromISR+0x50>
1a00103e:	2001      	movs	r0, #1
1a001040:	e000      	b.n	1a001044 <xQueueGenericSendFromISR+0x50>
1a001042:	2000      	movs	r0, #0
1a001044:	b940      	cbnz	r0, 1a001058 <xQueueGenericSendFromISR+0x64>
1a001046:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00104a:	f383 8811 	msr	BASEPRI, r3
1a00104e:	f3bf 8f6f 	isb	sy
1a001052:	f3bf 8f4f 	dsb	sy
1a001056:	e7fe      	b.n	1a001056 <xQueueGenericSendFromISR+0x62>
1a001058:	461f      	mov	r7, r3
1a00105a:	4690      	mov	r8, r2
1a00105c:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00105e:	f001 fd1d 	bl	1a002a9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001062:	f3ef 8611 	mrs	r6, BASEPRI
1a001066:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00106a:	f383 8811 	msr	BASEPRI, r3
1a00106e:	f3bf 8f6f 	isb	sy
1a001072:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001076:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00107a:	429a      	cmp	r2, r3
1a00107c:	d301      	bcc.n	1a001082 <xQueueGenericSendFromISR+0x8e>
1a00107e:	2f02      	cmp	r7, #2
1a001080:	d11f      	bne.n	1a0010c2 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1a001082:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001086:	b2ed      	uxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001088:	4620      	mov	r0, r4
1a00108a:	4649      	mov	r1, r9
1a00108c:	463a      	mov	r2, r7
1a00108e:	f7ff fd7d 	bl	1a000b8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1a001092:	b26b      	sxtb	r3, r5
1a001094:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001098:	d10d      	bne.n	1a0010b6 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00109a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00109c:	b19b      	cbz	r3, 1a0010c6 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00109e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010a2:	f000 fe53 	bl	1a001d4c <xTaskRemoveFromEventList>
1a0010a6:	b180      	cbz	r0, 1a0010ca <xQueueGenericSendFromISR+0xd6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1a0010a8:	f1b8 0f00 	cmp.w	r8, #0
1a0010ac:	d00f      	beq.n	1a0010ce <xQueueGenericSendFromISR+0xda>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0010ae:	2001      	movs	r0, #1
1a0010b0:	f8c8 0000 	str.w	r0, [r8]
1a0010b4:	e00c      	b.n	1a0010d0 <xQueueGenericSendFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0010b6:	1c6b      	adds	r3, r5, #1
1a0010b8:	b2db      	uxtb	r3, r3
1a0010ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
1a0010be:	2001      	movs	r0, #1
1a0010c0:	e006      	b.n	1a0010d0 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1a0010c2:	2000      	movs	r0, #0
1a0010c4:	e004      	b.n	1a0010d0 <xQueueGenericSendFromISR+0xdc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
1a0010c6:	2001      	movs	r0, #1
1a0010c8:	e002      	b.n	1a0010d0 <xQueueGenericSendFromISR+0xdc>
1a0010ca:	2001      	movs	r0, #1
1a0010cc:	e000      	b.n	1a0010d0 <xQueueGenericSendFromISR+0xdc>
1a0010ce:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0010d0:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a0010d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0010d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
1a0010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0010da:	b085      	sub	sp, #20
1a0010dc:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a0010de:	b940      	cbnz	r0, 1a0010f2 <xQueueReceive+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0010e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010e4:	f383 8811 	msr	BASEPRI, r3
1a0010e8:	f3bf 8f6f 	isb	sy
1a0010ec:	f3bf 8f4f 	dsb	sy
1a0010f0:	e7fe      	b.n	1a0010f0 <xQueueReceive+0x18>
1a0010f2:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0010f4:	b919      	cbnz	r1, 1a0010fe <xQueueReceive+0x26>
1a0010f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0010f8:	b91b      	cbnz	r3, 1a001102 <xQueueReceive+0x2a>
1a0010fa:	2301      	movs	r3, #1
1a0010fc:	e002      	b.n	1a001104 <xQueueReceive+0x2c>
1a0010fe:	2301      	movs	r3, #1
1a001100:	e000      	b.n	1a001104 <xQueueReceive+0x2c>
1a001102:	2300      	movs	r3, #0
1a001104:	b943      	cbnz	r3, 1a001118 <xQueueReceive+0x40>
1a001106:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00110a:	f383 8811 	msr	BASEPRI, r3
1a00110e:	f3bf 8f6f 	isb	sy
1a001112:	f3bf 8f4f 	dsb	sy
1a001116:	e7fe      	b.n	1a001116 <xQueueReceive+0x3e>
1a001118:	460e      	mov	r6, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00111a:	f000 feaf 	bl	1a001e7c <xTaskGetSchedulerState>
1a00111e:	b918      	cbnz	r0, 1a001128 <xQueueReceive+0x50>
1a001120:	9b01      	ldr	r3, [sp, #4]
1a001122:	b91b      	cbnz	r3, 1a00112c <xQueueReceive+0x54>
1a001124:	2301      	movs	r3, #1
1a001126:	e002      	b.n	1a00112e <xQueueReceive+0x56>
1a001128:	2301      	movs	r3, #1
1a00112a:	e000      	b.n	1a00112e <xQueueReceive+0x56>
1a00112c:	2300      	movs	r3, #0
1a00112e:	b943      	cbnz	r3, 1a001142 <xQueueReceive+0x6a>
1a001130:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001134:	f383 8811 	msr	BASEPRI, r3
1a001138:	f3bf 8f6f 	isb	sy
1a00113c:	f3bf 8f4f 	dsb	sy
1a001140:	e7fe      	b.n	1a001140 <xQueueReceive+0x68>
1a001142:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a001144:	f001 fb74 	bl	1a002830 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001148:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00114a:	b1c5      	cbz	r5, 1a00117e <xQueueReceive+0xa6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00114c:	4620      	mov	r0, r4
1a00114e:	4631      	mov	r1, r6
1a001150:	f7ff fd58 	bl	1a000c04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001154:	3d01      	subs	r5, #1
1a001156:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001158:	6923      	ldr	r3, [r4, #16]
1a00115a:	b163      	cbz	r3, 1a001176 <xQueueReceive+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00115c:	f104 0010 	add.w	r0, r4, #16
1a001160:	f000 fdf4 	bl	1a001d4c <xTaskRemoveFromEventList>
1a001164:	b138      	cbz	r0, 1a001176 <xQueueReceive+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a001166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00116a:	4b30      	ldr	r3, [pc, #192]	; (1a00122c <xQueueReceive+0x154>)
1a00116c:	601a      	str	r2, [r3, #0]
1a00116e:	f3bf 8f4f 	dsb	sy
1a001172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a001176:	f001 fb7d 	bl	1a002874 <vPortExitCritical>
				return pdPASS;
1a00117a:	2001      	movs	r0, #1
1a00117c:	e053      	b.n	1a001226 <xQueueReceive+0x14e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a00117e:	9b01      	ldr	r3, [sp, #4]
1a001180:	b91b      	cbnz	r3, 1a00118a <xQueueReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a001182:	f001 fb77 	bl	1a002874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a001186:	2000      	movs	r0, #0
1a001188:	e04d      	b.n	1a001226 <xQueueReceive+0x14e>
				}
				else if( xEntryTimeSet == pdFALSE )
1a00118a:	b91f      	cbnz	r7, 1a001194 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00118c:	a802      	add	r0, sp, #8
1a00118e:	f000 fe23 	bl	1a001dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001192:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a001194:	f001 fb6e 	bl	1a002874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a001198:	f000 fbfe 	bl	1a001998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00119c:	f001 fb48 	bl	1a002830 <vPortEnterCritical>
1a0011a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0011a4:	b25b      	sxtb	r3, r3
1a0011a6:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0011aa:	d102      	bne.n	1a0011b2 <xQueueReceive+0xda>
1a0011ac:	2300      	movs	r3, #0
1a0011ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0011b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0011b6:	b25b      	sxtb	r3, r3
1a0011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0011bc:	d102      	bne.n	1a0011c4 <xQueueReceive+0xec>
1a0011be:	2300      	movs	r3, #0
1a0011c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0011c4:	f001 fb56 	bl	1a002874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0011c8:	a802      	add	r0, sp, #8
1a0011ca:	a901      	add	r1, sp, #4
1a0011cc:	f000 fe10 	bl	1a001df0 <xTaskCheckForTimeOut>
1a0011d0:	b9f0      	cbnz	r0, 1a001210 <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0011d2:	4620      	mov	r0, r4
1a0011d4:	f7ff fccc 	bl	1a000b70 <prvIsQueueEmpty>
1a0011d8:	b1a0      	cbz	r0, 1a001204 <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0011da:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0011de:	9901      	ldr	r1, [sp, #4]
1a0011e0:	f000 fd80 	bl	1a001ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0011e4:	4620      	mov	r0, r4
1a0011e6:	f7ff fd1f 	bl	1a000c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0011ea:	f000 fc75 	bl	1a001ad8 <xTaskResumeAll>
1a0011ee:	2800      	cmp	r0, #0
1a0011f0:	d1a8      	bne.n	1a001144 <xQueueReceive+0x6c>
				{
					portYIELD_WITHIN_API();
1a0011f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011f6:	4b0d      	ldr	r3, [pc, #52]	; (1a00122c <xQueueReceive+0x154>)
1a0011f8:	601a      	str	r2, [r3, #0]
1a0011fa:	f3bf 8f4f 	dsb	sy
1a0011fe:	f3bf 8f6f 	isb	sy
1a001202:	e79f      	b.n	1a001144 <xQueueReceive+0x6c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
1a001204:	4620      	mov	r0, r4
1a001206:	f7ff fd0f 	bl	1a000c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00120a:	f000 fc65 	bl	1a001ad8 <xTaskResumeAll>
1a00120e:	e799      	b.n	1a001144 <xQueueReceive+0x6c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
1a001210:	4620      	mov	r0, r4
1a001212:	f7ff fd09 	bl	1a000c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001216:	f000 fc5f 	bl	1a001ad8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00121a:	4620      	mov	r0, r4
1a00121c:	f7ff fca8 	bl	1a000b70 <prvIsQueueEmpty>
1a001220:	2800      	cmp	r0, #0
1a001222:	d08f      	beq.n	1a001144 <xQueueReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a001224:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a001226:	b005      	add	sp, #20
1a001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00122a:	bf00      	nop
1a00122c:	e000ed04 	.word	0xe000ed04

1a001230 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
1a001230:	b570      	push	{r4, r5, r6, lr}
1a001232:	b084      	sub	sp, #16
1a001234:	9101      	str	r1, [sp, #4]
#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a001236:	b940      	cbnz	r0, 1a00124a <xQueueSemaphoreTake+0x1a>
1a001238:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00123c:	f383 8811 	msr	BASEPRI, r3
1a001240:	f3bf 8f6f 	isb	sy
1a001244:	f3bf 8f4f 	dsb	sy
1a001248:	e7fe      	b.n	1a001248 <xQueueSemaphoreTake+0x18>
1a00124a:	4604      	mov	r4, r0

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
1a00124c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00124e:	b143      	cbz	r3, 1a001262 <xQueueSemaphoreTake+0x32>
1a001250:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001254:	f383 8811 	msr	BASEPRI, r3
1a001258:	f3bf 8f6f 	isb	sy
1a00125c:	f3bf 8f4f 	dsb	sy
1a001260:	e7fe      	b.n	1a001260 <xQueueSemaphoreTake+0x30>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001262:	f000 fe0b 	bl	1a001e7c <xTaskGetSchedulerState>
1a001266:	b918      	cbnz	r0, 1a001270 <xQueueSemaphoreTake+0x40>
1a001268:	9b01      	ldr	r3, [sp, #4]
1a00126a:	b91b      	cbnz	r3, 1a001274 <xQueueSemaphoreTake+0x44>
1a00126c:	2301      	movs	r3, #1
1a00126e:	e002      	b.n	1a001276 <xQueueSemaphoreTake+0x46>
1a001270:	2301      	movs	r3, #1
1a001272:	e000      	b.n	1a001276 <xQueueSemaphoreTake+0x46>
1a001274:	2300      	movs	r3, #0
1a001276:	b943      	cbnz	r3, 1a00128a <xQueueSemaphoreTake+0x5a>
1a001278:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00127c:	f383 8811 	msr	BASEPRI, r3
1a001280:	f3bf 8f6f 	isb	sy
1a001284:	f3bf 8f4f 	dsb	sy
1a001288:	e7fe      	b.n	1a001288 <xQueueSemaphoreTake+0x58>
1a00128a:	2500      	movs	r5, #0
1a00128c:	462e      	mov	r6, r5
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a00128e:	f001 facf 	bl	1a002830 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001292:	6ba3      	ldr	r3, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001294:	b1cb      	cbz	r3, 1a0012ca <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a001296:	3b01      	subs	r3, #1
1a001298:	63a3      	str	r3, [r4, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00129a:	6823      	ldr	r3, [r4, #0]
1a00129c:	b913      	cbnz	r3, 1a0012a4 <xQueueSemaphoreTake+0x74>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a00129e:	f000 ff1f 	bl	1a0020e0 <pvTaskIncrementMutexHeldCount>
1a0012a2:	6060      	str	r0, [r4, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0012a4:	6923      	ldr	r3, [r4, #16]
1a0012a6:	b163      	cbz	r3, 1a0012c2 <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0012a8:	f104 0010 	add.w	r0, r4, #16
1a0012ac:	f000 fd4e 	bl	1a001d4c <xTaskRemoveFromEventList>
1a0012b0:	b138      	cbz	r0, 1a0012c2 <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a0012b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012b6:	4b41      	ldr	r3, [pc, #260]	; (1a0013bc <xQueueSemaphoreTake+0x18c>)
1a0012b8:	601a      	str	r2, [r3, #0]
1a0012ba:	f3bf 8f4f 	dsb	sy
1a0012be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a0012c2:	f001 fad7 	bl	1a002874 <vPortExitCritical>
				return pdPASS;
1a0012c6:	2001      	movs	r0, #1
1a0012c8:	e076      	b.n	1a0013b8 <xQueueSemaphoreTake+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a0012ca:	9b01      	ldr	r3, [sp, #4]
1a0012cc:	b96b      	cbnz	r3, 1a0012ea <xQueueSemaphoreTake+0xba>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
1a0012ce:	b145      	cbz	r5, 1a0012e2 <xQueueSemaphoreTake+0xb2>
1a0012d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012d4:	f383 8811 	msr	BASEPRI, r3
1a0012d8:	f3bf 8f6f 	isb	sy
1a0012dc:	f3bf 8f4f 	dsb	sy
1a0012e0:	e7fe      	b.n	1a0012e0 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
1a0012e2:	f001 fac7 	bl	1a002874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a0012e6:	2000      	movs	r0, #0
1a0012e8:	e066      	b.n	1a0013b8 <xQueueSemaphoreTake+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
1a0012ea:	b91e      	cbnz	r6, 1a0012f4 <xQueueSemaphoreTake+0xc4>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0012ec:	a802      	add	r0, sp, #8
1a0012ee:	f000 fd73 	bl	1a001dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0012f2:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a0012f4:	f001 fabe 	bl	1a002874 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
1a0012f8:	f000 fb4e 	bl	1a001998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0012fc:	f001 fa98 	bl	1a002830 <vPortEnterCritical>
1a001300:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001304:	b25b      	sxtb	r3, r3
1a001306:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00130a:	d102      	bne.n	1a001312 <xQueueSemaphoreTake+0xe2>
1a00130c:	2300      	movs	r3, #0
1a00130e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001312:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001316:	b25b      	sxtb	r3, r3
1a001318:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00131c:	d102      	bne.n	1a001324 <xQueueSemaphoreTake+0xf4>
1a00131e:	2300      	movs	r3, #0
1a001320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001324:	f001 faa6 	bl	1a002874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001328:	a802      	add	r0, sp, #8
1a00132a:	a901      	add	r1, sp, #4
1a00132c:	f000 fd60 	bl	1a001df0 <xTaskCheckForTimeOut>
1a001330:	bb40      	cbnz	r0, 1a001384 <xQueueSemaphoreTake+0x154>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001332:	4620      	mov	r0, r4
1a001334:	f7ff fc1c 	bl	1a000b70 <prvIsQueueEmpty>
1a001338:	b1f0      	cbz	r0, 1a001378 <xQueueSemaphoreTake+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00133a:	6823      	ldr	r3, [r4, #0]
1a00133c:	b93b      	cbnz	r3, 1a00134e <xQueueSemaphoreTake+0x11e>
					{
						taskENTER_CRITICAL();
1a00133e:	f001 fa77 	bl	1a002830 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a001342:	6860      	ldr	r0, [r4, #4]
1a001344:	f000 fdaa 	bl	1a001e9c <xTaskPriorityInherit>
1a001348:	4605      	mov	r5, r0
						}
						taskEXIT_CRITICAL();
1a00134a:	f001 fa93 	bl	1a002874 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00134e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001352:	9901      	ldr	r1, [sp, #4]
1a001354:	f000 fcc6 	bl	1a001ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001358:	4620      	mov	r0, r4
1a00135a:	f7ff fc65 	bl	1a000c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00135e:	f000 fbbb 	bl	1a001ad8 <xTaskResumeAll>
1a001362:	2800      	cmp	r0, #0
1a001364:	d193      	bne.n	1a00128e <xQueueSemaphoreTake+0x5e>
				{
					portYIELD_WITHIN_API();
1a001366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00136a:	4b14      	ldr	r3, [pc, #80]	; (1a0013bc <xQueueSemaphoreTake+0x18c>)
1a00136c:	601a      	str	r2, [r3, #0]
1a00136e:	f3bf 8f4f 	dsb	sy
1a001372:	f3bf 8f6f 	isb	sy
1a001376:	e78a      	b.n	1a00128e <xQueueSemaphoreTake+0x5e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
1a001378:	4620      	mov	r0, r4
1a00137a:	f7ff fc55 	bl	1a000c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00137e:	f000 fbab 	bl	1a001ad8 <xTaskResumeAll>
1a001382:	e784      	b.n	1a00128e <xQueueSemaphoreTake+0x5e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
1a001384:	4620      	mov	r0, r4
1a001386:	f7ff fc4f 	bl	1a000c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00138a:	f000 fba5 	bl	1a001ad8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00138e:	4620      	mov	r0, r4
1a001390:	f7ff fbee 	bl	1a000b70 <prvIsQueueEmpty>
1a001394:	2800      	cmp	r0, #0
1a001396:	f43f af7a 	beq.w	1a00128e <xQueueSemaphoreTake+0x5e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
1a00139a:	b165      	cbz	r5, 1a0013b6 <xQueueSemaphoreTake+0x186>
					{
						taskENTER_CRITICAL();
1a00139c:	f001 fa48 	bl	1a002830 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a0013a0:	4620      	mov	r0, r4
1a0013a2:	f7ff fbcb 	bl	1a000b3c <prvGetDisinheritPriorityAfterTimeout>
1a0013a6:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a0013a8:	6860      	ldr	r0, [r4, #4]
1a0013aa:	f000 fe33 	bl	1a002014 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
1a0013ae:	f001 fa61 	bl	1a002874 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a0013b2:	2000      	movs	r0, #0
1a0013b4:	e000      	b.n	1a0013b8 <xQueueSemaphoreTake+0x188>
1a0013b6:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a0013b8:	b004      	add	sp, #16
1a0013ba:	bd70      	pop	{r4, r5, r6, pc}
1a0013bc:	e000ed04 	.word	0xe000ed04

1a0013c0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0013c0:	2300      	movs	r3, #0
1a0013c2:	e00b      	b.n	1a0013dc <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0013c4:	4a07      	ldr	r2, [pc, #28]	; (1a0013e4 <vQueueAddToRegistry+0x24>)
1a0013c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0013ca:	b932      	cbnz	r2, 1a0013da <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0013cc:	4a05      	ldr	r2, [pc, #20]	; (1a0013e4 <vQueueAddToRegistry+0x24>)
1a0013ce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0013d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0013d6:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0013d8:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0013da:	3301      	adds	r3, #1
1a0013dc:	2b07      	cmp	r3, #7
1a0013de:	d9f1      	bls.n	1a0013c4 <vQueueAddToRegistry+0x4>
1a0013e0:	4770      	bx	lr
1a0013e2:	bf00      	nop
1a0013e4:	10002ef0 	.word	0x10002ef0

1a0013e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0013e8:	b570      	push	{r4, r5, r6, lr}
1a0013ea:	4604      	mov	r4, r0
1a0013ec:	460e      	mov	r6, r1
1a0013ee:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0013f0:	f001 fa1e 	bl	1a002830 <vPortEnterCritical>
1a0013f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0013f8:	b25b      	sxtb	r3, r3
1a0013fa:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0013fe:	d102      	bne.n	1a001406 <vQueueWaitForMessageRestricted+0x1e>
1a001400:	2300      	movs	r3, #0
1a001402:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001406:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00140a:	b25b      	sxtb	r3, r3
1a00140c:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001410:	d102      	bne.n	1a001418 <vQueueWaitForMessageRestricted+0x30>
1a001412:	2300      	movs	r3, #0
1a001414:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001418:	f001 fa2c 	bl	1a002874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a00141c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00141e:	b92b      	cbnz	r3, 1a00142c <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001420:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001424:	4631      	mov	r1, r6
1a001426:	462a      	mov	r2, r5
1a001428:	f000 fc74 	bl	1a001d14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a00142c:	4620      	mov	r0, r4
1a00142e:	f7ff fbfb 	bl	1a000c28 <prvUnlockQueue>
1a001432:	bd70      	pop	{r4, r5, r6, pc}

1a001434 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001434:	f100 0308 	add.w	r3, r0, #8
1a001438:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00143a:	f04f 32ff 	mov.w	r2, #4294967295
1a00143e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001440:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001442:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001444:	2300      	movs	r3, #0
1a001446:	6003      	str	r3, [r0, #0]
1a001448:	4770      	bx	lr
1a00144a:	bf00      	nop

1a00144c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00144c:	2300      	movs	r3, #0
1a00144e:	6103      	str	r3, [r0, #16]
1a001450:	4770      	bx	lr
1a001452:	bf00      	nop

1a001454 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001454:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001456:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001458:	689a      	ldr	r2, [r3, #8]
1a00145a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00145c:	689a      	ldr	r2, [r3, #8]
1a00145e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001460:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001462:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001464:	6803      	ldr	r3, [r0, #0]
1a001466:	3301      	adds	r3, #1
1a001468:	6003      	str	r3, [r0, #0]
1a00146a:	4770      	bx	lr

1a00146c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00146c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a00146e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001470:	f1b5 3fff 	cmp.w	r5, #4294967295
1a001474:	d101      	bne.n	1a00147a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1a001476:	6902      	ldr	r2, [r0, #16]
1a001478:	e007      	b.n	1a00148a <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00147a:	f100 0208 	add.w	r2, r0, #8
1a00147e:	e000      	b.n	1a001482 <vListInsert+0x16>
1a001480:	461a      	mov	r2, r3
1a001482:	6853      	ldr	r3, [r2, #4]
1a001484:	681c      	ldr	r4, [r3, #0]
1a001486:	42ac      	cmp	r4, r5
1a001488:	d9fa      	bls.n	1a001480 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00148a:	6853      	ldr	r3, [r2, #4]
1a00148c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a00148e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001490:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001492:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001494:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001496:	6803      	ldr	r3, [r0, #0]
1a001498:	3301      	adds	r3, #1
1a00149a:	6003      	str	r3, [r0, #0]
}
1a00149c:	bc30      	pop	{r4, r5}
1a00149e:	4770      	bx	lr

1a0014a0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0014a0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0014a2:	6842      	ldr	r2, [r0, #4]
1a0014a4:	6881      	ldr	r1, [r0, #8]
1a0014a6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0014a8:	6882      	ldr	r2, [r0, #8]
1a0014aa:	6841      	ldr	r1, [r0, #4]
1a0014ac:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0014ae:	685a      	ldr	r2, [r3, #4]
1a0014b0:	4282      	cmp	r2, r0
1a0014b2:	d101      	bne.n	1a0014b8 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0014b4:	6882      	ldr	r2, [r0, #8]
1a0014b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0014b8:	2200      	movs	r2, #0
1a0014ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0014bc:	681a      	ldr	r2, [r3, #0]
1a0014be:	3a01      	subs	r2, #1
1a0014c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0014c2:	6818      	ldr	r0, [r3, #0]
}
1a0014c4:	4770      	bx	lr
1a0014c6:	bf00      	nop

1a0014c8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0014c8:	4b03      	ldr	r3, [pc, #12]	; (1a0014d8 <vApplicationGetIdleTaskMemory+0x10>)
1a0014ca:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0014cc:	4b03      	ldr	r3, [pc, #12]	; (1a0014dc <vApplicationGetIdleTaskMemory+0x14>)
1a0014ce:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0014d0:	235a      	movs	r3, #90	; 0x5a
1a0014d2:	6013      	str	r3, [r2, #0]
1a0014d4:	4770      	bx	lr
1a0014d6:	bf00      	nop
1a0014d8:	100022c8 	.word	0x100022c8
1a0014dc:	10002160 	.word	0x10002160

1a0014e0 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0014e0:	4b03      	ldr	r3, [pc, #12]	; (1a0014f0 <vApplicationGetTimerTaskMemory+0x10>)
1a0014e2:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0014e4:	4b03      	ldr	r3, [pc, #12]	; (1a0014f4 <vApplicationGetTimerTaskMemory+0x14>)
1a0014e6:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0014e8:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0014ec:	6013      	str	r3, [r2, #0]
1a0014ee:	4770      	bx	lr
1a0014f0:	10002328 	.word	0x10002328
1a0014f4:	10002388 	.word	0x10002388

1a0014f8 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
    while(1)
        ;
1a0014f8:	e7fe      	b.n	1a0014f8 <vApplicationStackOverflowHook>
1a0014fa:	bf00      	nop

1a0014fc <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
    while(1)
        ;
1a0014fc:	e7fe      	b.n	1a0014fc <vApplicationMallocFailedHook>
1a0014fe:	bf00      	nop

1a001500 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001500:	4b0a      	ldr	r3, [pc, #40]	; (1a00152c <prvResetNextTaskUnblockTime+0x2c>)
1a001502:	681b      	ldr	r3, [r3, #0]
1a001504:	681b      	ldr	r3, [r3, #0]
1a001506:	b90b      	cbnz	r3, 1a00150c <prvResetNextTaskUnblockTime+0xc>
1a001508:	2301      	movs	r3, #1
1a00150a:	e000      	b.n	1a00150e <prvResetNextTaskUnblockTime+0xe>
1a00150c:	2300      	movs	r3, #0
1a00150e:	b123      	cbz	r3, 1a00151a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001510:	f04f 32ff 	mov.w	r2, #4294967295
1a001514:	4b06      	ldr	r3, [pc, #24]	; (1a001530 <prvResetNextTaskUnblockTime+0x30>)
1a001516:	601a      	str	r2, [r3, #0]
1a001518:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00151a:	4b04      	ldr	r3, [pc, #16]	; (1a00152c <prvResetNextTaskUnblockTime+0x2c>)
1a00151c:	681b      	ldr	r3, [r3, #0]
1a00151e:	68db      	ldr	r3, [r3, #12]
1a001520:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001522:	685a      	ldr	r2, [r3, #4]
1a001524:	4b02      	ldr	r3, [pc, #8]	; (1a001530 <prvResetNextTaskUnblockTime+0x30>)
1a001526:	601a      	str	r2, [r3, #0]
1a001528:	4770      	bx	lr
1a00152a:	bf00      	nop
1a00152c:	1000292c 	.word	0x1000292c
1a001530:	10002a08 	.word	0x10002a08

1a001534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
1a001534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001538:	4682      	mov	sl, r0
1a00153a:	460d      	mov	r5, r1
1a00153c:	4617      	mov	r7, r2
1a00153e:	4699      	mov	r9, r3
1a001540:	9e08      	ldr	r6, [sp, #32]
1a001542:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001546:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001548:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00154a:	21a5      	movs	r1, #165	; 0xa5
1a00154c:	0092      	lsls	r2, r2, #2
1a00154e:	f003 f90a 	bl	1a004766 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001552:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001554:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001558:	3a01      	subs	r2, #1
1a00155a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00155e:	f027 0707 	bic.w	r7, r7, #7

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001562:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001564:	2300      	movs	r3, #0
1a001566:	e006      	b.n	1a001576 <prvInitialiseNewTask+0x42>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001568:	5ce9      	ldrb	r1, [r5, r3]
1a00156a:	18e2      	adds	r2, r4, r3
1a00156c:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
1a001570:	5cea      	ldrb	r2, [r5, r3]
1a001572:	b112      	cbz	r2, 1a00157a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001574:	3301      	adds	r3, #1
1a001576:	2b0f      	cmp	r3, #15
1a001578:	d9f6      	bls.n	1a001568 <prvInitialiseNewTask+0x34>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a00157a:	2300      	movs	r3, #0
1a00157c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001580:	2e06      	cmp	r6, #6
1a001582:	d900      	bls.n	1a001586 <prvInitialiseNewTask+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001584:	2606      	movs	r6, #6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
1a001586:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
1a001588:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a00158a:	2500      	movs	r5, #0
1a00158c:	6565      	str	r5, [r4, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00158e:	1d20      	adds	r0, r4, #4
1a001590:	f7ff ff5c 	bl	1a00144c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001594:	f104 0018 	add.w	r0, r4, #24
1a001598:	f7ff ff58 	bl	1a00144c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a00159c:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00159e:	f1c6 0607 	rsb	r6, r6, #7
1a0015a2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0015a4:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
1a0015a6:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0015a8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0015ac:	4638      	mov	r0, r7
1a0015ae:	4651      	mov	r1, sl
1a0015b0:	464a      	mov	r2, r9
1a0015b2:	f001 f90f 	bl	1a0027d4 <pxPortInitialiseStack>
1a0015b6:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
1a0015b8:	f1b8 0f00 	cmp.w	r8, #0
1a0015bc:	d001      	beq.n	1a0015c2 <prvInitialiseNewTask+0x8e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a0015be:	f8c8 4000 	str.w	r4, [r8]
1a0015c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0015c6:	bf00      	nop

1a0015c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
1a0015c8:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0015ca:	2400      	movs	r4, #0
1a0015cc:	e007      	b.n	1a0015de <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0015ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0015d2:	009b      	lsls	r3, r3, #2
1a0015d4:	480e      	ldr	r0, [pc, #56]	; (1a001610 <prvInitialiseTaskLists+0x48>)
1a0015d6:	4418      	add	r0, r3
1a0015d8:	f7ff ff2c 	bl	1a001434 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0015dc:	3401      	adds	r4, #1
1a0015de:	2c06      	cmp	r4, #6
1a0015e0:	d9f5      	bls.n	1a0015ce <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
1a0015e2:	4d0c      	ldr	r5, [pc, #48]	; (1a001614 <prvInitialiseTaskLists+0x4c>)
1a0015e4:	4628      	mov	r0, r5
1a0015e6:	f7ff ff25 	bl	1a001434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0015ea:	4c0b      	ldr	r4, [pc, #44]	; (1a001618 <prvInitialiseTaskLists+0x50>)
1a0015ec:	4620      	mov	r0, r4
1a0015ee:	f7ff ff21 	bl	1a001434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0015f2:	480a      	ldr	r0, [pc, #40]	; (1a00161c <prvInitialiseTaskLists+0x54>)
1a0015f4:	f7ff ff1e 	bl	1a001434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
1a0015f8:	4809      	ldr	r0, [pc, #36]	; (1a001620 <prvInitialiseTaskLists+0x58>)
1a0015fa:	f7ff ff1b 	bl	1a001434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
1a0015fe:	4809      	ldr	r0, [pc, #36]	; (1a001624 <prvInitialiseTaskLists+0x5c>)
1a001600:	f7ff ff18 	bl	1a001434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
1a001604:	4b08      	ldr	r3, [pc, #32]	; (1a001628 <prvInitialiseTaskLists+0x60>)
1a001606:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001608:	4b08      	ldr	r3, [pc, #32]	; (1a00162c <prvInitialiseTaskLists+0x64>)
1a00160a:	601c      	str	r4, [r3, #0]
1a00160c:	bd38      	pop	{r3, r4, r5, pc}
1a00160e:	bf00      	nop
1a001610:	10002950 	.word	0x10002950
1a001614:	10002a10 	.word	0x10002a10
1a001618:	10002a24 	.word	0x10002a24
1a00161c:	100029ec 	.word	0x100029ec
1a001620:	10002934 	.word	0x10002934
1a001624:	10002a38 	.word	0x10002a38
1a001628:	1000292c 	.word	0x1000292c
1a00162c:	10002948 	.word	0x10002948

1a001630 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
1a001630:	b510      	push	{r4, lr}
1a001632:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
1a001634:	f001 f8fc 	bl	1a002830 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
1a001638:	4a20      	ldr	r2, [pc, #128]	; (1a0016bc <prvAddNewTaskToReadyList+0x8c>)
1a00163a:	6813      	ldr	r3, [r2, #0]
1a00163c:	3301      	adds	r3, #1
1a00163e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001640:	4b1f      	ldr	r3, [pc, #124]	; (1a0016c0 <prvAddNewTaskToReadyList+0x90>)
1a001642:	681b      	ldr	r3, [r3, #0]
1a001644:	b93b      	cbnz	r3, 1a001656 <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
1a001646:	4b1e      	ldr	r3, [pc, #120]	; (1a0016c0 <prvAddNewTaskToReadyList+0x90>)
1a001648:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00164a:	6813      	ldr	r3, [r2, #0]
1a00164c:	2b01      	cmp	r3, #1
1a00164e:	d10d      	bne.n	1a00166c <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
1a001650:	f7ff ffba 	bl	1a0015c8 <prvInitialiseTaskLists>
1a001654:	e00a      	b.n	1a00166c <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
1a001656:	4b1b      	ldr	r3, [pc, #108]	; (1a0016c4 <prvAddNewTaskToReadyList+0x94>)
1a001658:	681b      	ldr	r3, [r3, #0]
1a00165a:	b93b      	cbnz	r3, 1a00166c <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a00165c:	4b18      	ldr	r3, [pc, #96]	; (1a0016c0 <prvAddNewTaskToReadyList+0x90>)
1a00165e:	681b      	ldr	r3, [r3, #0]
1a001660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001664:	429a      	cmp	r2, r3
1a001666:	d801      	bhi.n	1a00166c <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
1a001668:	4b15      	ldr	r3, [pc, #84]	; (1a0016c0 <prvAddNewTaskToReadyList+0x90>)
1a00166a:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
1a00166c:	4a16      	ldr	r2, [pc, #88]	; (1a0016c8 <prvAddNewTaskToReadyList+0x98>)
1a00166e:	6813      	ldr	r3, [r2, #0]
1a001670:	3301      	adds	r3, #1
1a001672:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001674:	64a3      	str	r3, [r4, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
1a001676:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a001678:	2301      	movs	r3, #1
1a00167a:	4083      	lsls	r3, r0
1a00167c:	4913      	ldr	r1, [pc, #76]	; (1a0016cc <prvAddNewTaskToReadyList+0x9c>)
1a00167e:	680a      	ldr	r2, [r1, #0]
1a001680:	4313      	orrs	r3, r2
1a001682:	600b      	str	r3, [r1, #0]
1a001684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001688:	0080      	lsls	r0, r0, #2
1a00168a:	4b11      	ldr	r3, [pc, #68]	; (1a0016d0 <prvAddNewTaskToReadyList+0xa0>)
1a00168c:	4418      	add	r0, r3
1a00168e:	1d21      	adds	r1, r4, #4
1a001690:	f7ff fee0 	bl	1a001454 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
1a001694:	f001 f8ee 	bl	1a002874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
1a001698:	4b0a      	ldr	r3, [pc, #40]	; (1a0016c4 <prvAddNewTaskToReadyList+0x94>)
1a00169a:	681b      	ldr	r3, [r3, #0]
1a00169c:	b16b      	cbz	r3, 1a0016ba <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a00169e:	4b08      	ldr	r3, [pc, #32]	; (1a0016c0 <prvAddNewTaskToReadyList+0x90>)
1a0016a0:	681b      	ldr	r3, [r3, #0]
1a0016a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0016a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0016a6:	429a      	cmp	r2, r3
1a0016a8:	d207      	bcs.n	1a0016ba <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
1a0016aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016ae:	4b09      	ldr	r3, [pc, #36]	; (1a0016d4 <prvAddNewTaskToReadyList+0xa4>)
1a0016b0:	601a      	str	r2, [r3, #0]
1a0016b2:	f3bf 8f4f 	dsb	sy
1a0016b6:	f3bf 8f6f 	isb	sy
1a0016ba:	bd10      	pop	{r4, pc}
1a0016bc:	100029e4 	.word	0x100029e4
1a0016c0:	100029e8 	.word	0x100029e8
1a0016c4:	10002930 	.word	0x10002930
1a0016c8:	10002a0c 	.word	0x10002a0c
1a0016cc:	10002a4c 	.word	0x10002a4c
1a0016d0:	10002950 	.word	0x10002950
1a0016d4:	e000ed04 	.word	0xe000ed04

1a0016d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
1a0016d8:	b510      	push	{r4, lr}
1a0016da:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0016dc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0016e0:	b933      	cbnz	r3, 1a0016f0 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
1a0016e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0016e4:	f7ff f9ee 	bl	1a000ac4 <vPortFree>
				vPortFree( pxTCB );
1a0016e8:	4620      	mov	r0, r4
1a0016ea:	f7ff f9eb 	bl	1a000ac4 <vPortFree>
1a0016ee:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0016f0:	2b01      	cmp	r3, #1
1a0016f2:	d102      	bne.n	1a0016fa <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
1a0016f4:	f7ff f9e6 	bl	1a000ac4 <vPortFree>
1a0016f8:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0016fa:	2b02      	cmp	r3, #2
1a0016fc:	d008      	beq.n	1a001710 <prvDeleteTCB+0x38>
1a0016fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001702:	f383 8811 	msr	BASEPRI, r3
1a001706:	f3bf 8f6f 	isb	sy
1a00170a:	f3bf 8f4f 	dsb	sy
1a00170e:	e7fe      	b.n	1a00170e <prvDeleteTCB+0x36>
1a001710:	bd10      	pop	{r4, pc}
1a001712:	bf00      	nop

1a001714 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
1a001714:	b510      	push	{r4, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001716:	e014      	b.n	1a001742 <prvCheckTasksWaitingTermination+0x2e>
		{
			taskENTER_CRITICAL();
1a001718:	f001 f88a 	bl	1a002830 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00171c:	4b0b      	ldr	r3, [pc, #44]	; (1a00174c <prvCheckTasksWaitingTermination+0x38>)
1a00171e:	68db      	ldr	r3, [r3, #12]
1a001720:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001722:	1d20      	adds	r0, r4, #4
1a001724:	f7ff febc 	bl	1a0014a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001728:	4a09      	ldr	r2, [pc, #36]	; (1a001750 <prvCheckTasksWaitingTermination+0x3c>)
1a00172a:	6813      	ldr	r3, [r2, #0]
1a00172c:	3b01      	subs	r3, #1
1a00172e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001730:	4a08      	ldr	r2, [pc, #32]	; (1a001754 <prvCheckTasksWaitingTermination+0x40>)
1a001732:	6813      	ldr	r3, [r2, #0]
1a001734:	3b01      	subs	r3, #1
1a001736:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
1a001738:	f001 f89c 	bl	1a002874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
1a00173c:	4620      	mov	r0, r4
1a00173e:	f7ff ffcb 	bl	1a0016d8 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001742:	4b04      	ldr	r3, [pc, #16]	; (1a001754 <prvCheckTasksWaitingTermination+0x40>)
1a001744:	681b      	ldr	r3, [r3, #0]
1a001746:	2b00      	cmp	r3, #0
1a001748:	d1e6      	bne.n	1a001718 <prvCheckTasksWaitingTermination+0x4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
1a00174a:	bd10      	pop	{r4, pc}
1a00174c:	10002934 	.word	0x10002934
1a001750:	100029e4 	.word	0x100029e4
1a001754:	100029e0 	.word	0x100029e0

1a001758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
1a001758:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
1a00175a:	f7ff ffdb 	bl	1a001714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00175e:	4b06      	ldr	r3, [pc, #24]	; (1a001778 <prvIdleTask+0x20>)
1a001760:	681b      	ldr	r3, [r3, #0]
1a001762:	2b01      	cmp	r3, #1
1a001764:	d9f9      	bls.n	1a00175a <prvIdleTask+0x2>
			{
				taskYIELD();
1a001766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00176a:	4b04      	ldr	r3, [pc, #16]	; (1a00177c <prvIdleTask+0x24>)
1a00176c:	601a      	str	r2, [r3, #0]
1a00176e:	f3bf 8f4f 	dsb	sy
1a001772:	f3bf 8f6f 	isb	sy
1a001776:	e7f0      	b.n	1a00175a <prvIdleTask+0x2>
1a001778:	10002950 	.word	0x10002950
1a00177c:	e000ed04 	.word	0xe000ed04

1a001780 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001780:	b570      	push	{r4, r5, r6, lr}
1a001782:	4604      	mov	r4, r0
1a001784:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001786:	4b1c      	ldr	r3, [pc, #112]	; (1a0017f8 <prvAddCurrentTaskToDelayedList+0x78>)
1a001788:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00178a:	4b1c      	ldr	r3, [pc, #112]	; (1a0017fc <prvAddCurrentTaskToDelayedList+0x7c>)
1a00178c:	6818      	ldr	r0, [r3, #0]
1a00178e:	3004      	adds	r0, #4
1a001790:	f7ff fe86 	bl	1a0014a0 <uxListRemove>
1a001794:	b948      	cbnz	r0, 1a0017aa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001796:	4b19      	ldr	r3, [pc, #100]	; (1a0017fc <prvAddCurrentTaskToDelayedList+0x7c>)
1a001798:	681b      	ldr	r3, [r3, #0]
1a00179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00179c:	2301      	movs	r3, #1
1a00179e:	4093      	lsls	r3, r2
1a0017a0:	4917      	ldr	r1, [pc, #92]	; (1a001800 <prvAddCurrentTaskToDelayedList+0x80>)
1a0017a2:	680a      	ldr	r2, [r1, #0]
1a0017a4:	ea22 0303 	bic.w	r3, r2, r3
1a0017a8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0017aa:	f1b4 3fff 	cmp.w	r4, #4294967295
1a0017ae:	d107      	bne.n	1a0017c0 <prvAddCurrentTaskToDelayedList+0x40>
1a0017b0:	b136      	cbz	r6, 1a0017c0 <prvAddCurrentTaskToDelayedList+0x40>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0017b2:	4b12      	ldr	r3, [pc, #72]	; (1a0017fc <prvAddCurrentTaskToDelayedList+0x7c>)
1a0017b4:	6819      	ldr	r1, [r3, #0]
1a0017b6:	4813      	ldr	r0, [pc, #76]	; (1a001804 <prvAddCurrentTaskToDelayedList+0x84>)
1a0017b8:	3104      	adds	r1, #4
1a0017ba:	f7ff fe4b 	bl	1a001454 <vListInsertEnd>
1a0017be:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0017c0:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0017c2:	4b0e      	ldr	r3, [pc, #56]	; (1a0017fc <prvAddCurrentTaskToDelayedList+0x7c>)
1a0017c4:	681b      	ldr	r3, [r3, #0]
1a0017c6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0017c8:	42ac      	cmp	r4, r5
1a0017ca:	d207      	bcs.n	1a0017dc <prvAddCurrentTaskToDelayedList+0x5c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0017cc:	4b0e      	ldr	r3, [pc, #56]	; (1a001808 <prvAddCurrentTaskToDelayedList+0x88>)
1a0017ce:	6818      	ldr	r0, [r3, #0]
1a0017d0:	4b0a      	ldr	r3, [pc, #40]	; (1a0017fc <prvAddCurrentTaskToDelayedList+0x7c>)
1a0017d2:	6819      	ldr	r1, [r3, #0]
1a0017d4:	3104      	adds	r1, #4
1a0017d6:	f7ff fe49 	bl	1a00146c <vListInsert>
1a0017da:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0017dc:	4b0b      	ldr	r3, [pc, #44]	; (1a00180c <prvAddCurrentTaskToDelayedList+0x8c>)
1a0017de:	6818      	ldr	r0, [r3, #0]
1a0017e0:	4b06      	ldr	r3, [pc, #24]	; (1a0017fc <prvAddCurrentTaskToDelayedList+0x7c>)
1a0017e2:	6819      	ldr	r1, [r3, #0]
1a0017e4:	3104      	adds	r1, #4
1a0017e6:	f7ff fe41 	bl	1a00146c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0017ea:	4b09      	ldr	r3, [pc, #36]	; (1a001810 <prvAddCurrentTaskToDelayedList+0x90>)
1a0017ec:	681b      	ldr	r3, [r3, #0]
1a0017ee:	429c      	cmp	r4, r3
1a0017f0:	d201      	bcs.n	1a0017f6 <prvAddCurrentTaskToDelayedList+0x76>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0017f2:	4b07      	ldr	r3, [pc, #28]	; (1a001810 <prvAddCurrentTaskToDelayedList+0x90>)
1a0017f4:	601c      	str	r4, [r3, #0]
1a0017f6:	bd70      	pop	{r4, r5, r6, pc}
1a0017f8:	10002a04 	.word	0x10002a04
1a0017fc:	100029e8 	.word	0x100029e8
1a001800:	10002a4c 	.word	0x10002a4c
1a001804:	10002a38 	.word	0x10002a38
1a001808:	10002948 	.word	0x10002948
1a00180c:	1000292c 	.word	0x1000292c
1a001810:	10002a08 	.word	0x10002a08

1a001814 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
1a001814:	b570      	push	{r4, r5, r6, lr}
1a001816:	b086      	sub	sp, #24
1a001818:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00181a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
1a00181c:	b945      	cbnz	r5, 1a001830 <xTaskCreateStatic+0x1c>
1a00181e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001822:	f383 8811 	msr	BASEPRI, r3
1a001826:	f3bf 8f6f 	isb	sy
1a00182a:	f3bf 8f4f 	dsb	sy
1a00182e:	e7fe      	b.n	1a00182e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001830:	b944      	cbnz	r4, 1a001844 <xTaskCreateStatic+0x30>
1a001832:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001836:	f383 8811 	msr	BASEPRI, r3
1a00183a:	f3bf 8f6f 	isb	sy
1a00183e:	f3bf 8f4f 	dsb	sy
1a001842:	e7fe      	b.n	1a001842 <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
1a001844:	2660      	movs	r6, #96	; 0x60
1a001846:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001848:	9e04      	ldr	r6, [sp, #16]
1a00184a:	2e60      	cmp	r6, #96	; 0x60
1a00184c:	d008      	beq.n	1a001860 <xTaskCreateStatic+0x4c>
1a00184e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001852:	f383 8811 	msr	BASEPRI, r3
1a001856:	f3bf 8f6f 	isb	sy
1a00185a:	f3bf 8f4f 	dsb	sy
1a00185e:	e7fe      	b.n	1a00185e <xTaskCreateStatic+0x4a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
1a001860:	b18c      	cbz	r4, 1a001886 <xTaskCreateStatic+0x72>
1a001862:	b185      	cbz	r5, 1a001886 <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001864:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001866:	2502      	movs	r5, #2
1a001868:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a00186c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00186e:	9500      	str	r5, [sp, #0]
1a001870:	ad05      	add	r5, sp, #20
1a001872:	9501      	str	r5, [sp, #4]
1a001874:	9402      	str	r4, [sp, #8]
1a001876:	2500      	movs	r5, #0
1a001878:	9503      	str	r5, [sp, #12]
1a00187a:	f7ff fe5b 	bl	1a001534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00187e:	4620      	mov	r0, r4
1a001880:	f7ff fed6 	bl	1a001630 <prvAddNewTaskToReadyList>
1a001884:	e001      	b.n	1a00188a <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
1a001886:	2300      	movs	r3, #0
1a001888:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
1a00188a:	9805      	ldr	r0, [sp, #20]
1a00188c:	b006      	add	sp, #24
1a00188e:	bd70      	pop	{r4, r5, r6, pc}

1a001890 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
1a001890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001894:	b085      	sub	sp, #20
1a001896:	4680      	mov	r8, r0
1a001898:	460f      	mov	r7, r1
1a00189a:	4615      	mov	r5, r2
1a00189c:	461e      	mov	r6, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00189e:	0090      	lsls	r0, r2, #2
1a0018a0:	f7ff f896 	bl	1a0009d0 <pvPortMalloc>

			if( pxStack != NULL )
1a0018a4:	b160      	cbz	r0, 1a0018c0 <xTaskCreate+0x30>
1a0018a6:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0018a8:	2060      	movs	r0, #96	; 0x60
1a0018aa:	f7ff f891 	bl	1a0009d0 <pvPortMalloc>

				if( pxNewTCB != NULL )
1a0018ae:	4604      	mov	r4, r0
1a0018b0:	b110      	cbz	r0, 1a0018b8 <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
1a0018b2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
1a0018b6:	e004      	b.n	1a0018c2 <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
1a0018b8:	4648      	mov	r0, r9
1a0018ba:	f7ff f903 	bl	1a000ac4 <vPortFree>
1a0018be:	e000      	b.n	1a0018c2 <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
1a0018c0:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
1a0018c2:	b19c      	cbz	r4, 1a0018ec <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0018c4:	2300      	movs	r3, #0
1a0018c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0018ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0018cc:	9200      	str	r2, [sp, #0]
1a0018ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a0018d0:	9201      	str	r2, [sp, #4]
1a0018d2:	9402      	str	r4, [sp, #8]
1a0018d4:	9303      	str	r3, [sp, #12]
1a0018d6:	4640      	mov	r0, r8
1a0018d8:	4639      	mov	r1, r7
1a0018da:	462a      	mov	r2, r5
1a0018dc:	4633      	mov	r3, r6
1a0018de:	f7ff fe29 	bl	1a001534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0018e2:	4620      	mov	r0, r4
1a0018e4:	f7ff fea4 	bl	1a001630 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0018e8:	2001      	movs	r0, #1
1a0018ea:	e001      	b.n	1a0018f0 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0018ec:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
1a0018f0:	b005      	add	sp, #20
1a0018f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0018f6:	bf00      	nop

1a0018f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
1a0018f8:	b510      	push	{r4, lr}
1a0018fa:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0018fc:	2400      	movs	r4, #0
1a0018fe:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001900:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001902:	a805      	add	r0, sp, #20
1a001904:	a906      	add	r1, sp, #24
1a001906:	aa07      	add	r2, sp, #28
1a001908:	f7ff fdde 	bl	1a0014c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a00190c:	9400      	str	r4, [sp, #0]
1a00190e:	9b06      	ldr	r3, [sp, #24]
1a001910:	9301      	str	r3, [sp, #4]
1a001912:	9b05      	ldr	r3, [sp, #20]
1a001914:	9302      	str	r3, [sp, #8]
1a001916:	481a      	ldr	r0, [pc, #104]	; (1a001980 <vTaskStartScheduler+0x88>)
1a001918:	491a      	ldr	r1, [pc, #104]	; (1a001984 <vTaskStartScheduler+0x8c>)
1a00191a:	9a07      	ldr	r2, [sp, #28]
1a00191c:	4623      	mov	r3, r4
1a00191e:	f7ff ff79 	bl	1a001814 <xTaskCreateStatic>
1a001922:	4b19      	ldr	r3, [pc, #100]	; (1a001988 <vTaskStartScheduler+0x90>)
1a001924:	6018      	str	r0, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
1a001926:	b108      	cbz	r0, 1a00192c <vTaskStartScheduler+0x34>
		{
			xReturn = pdPASS;
1a001928:	2001      	movs	r0, #1
1a00192a:	e000      	b.n	1a00192e <vTaskStartScheduler+0x36>
		}
		else
		{
			xReturn = pdFAIL;
1a00192c:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
1a00192e:	2801      	cmp	r0, #1
1a001930:	d101      	bne.n	1a001936 <vTaskStartScheduler+0x3e>
		{
			xReturn = xTimerCreateTimerTask();
1a001932:	f000 fd4b 	bl	1a0023cc <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
1a001936:	2801      	cmp	r0, #1
1a001938:	d114      	bne.n	1a001964 <vTaskStartScheduler+0x6c>
1a00193a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00193e:	f383 8811 	msr	BASEPRI, r3
1a001942:	f3bf 8f6f 	isb	sy
1a001946:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
1a00194a:	f04f 32ff 	mov.w	r2, #4294967295
1a00194e:	4b0f      	ldr	r3, [pc, #60]	; (1a00198c <vTaskStartScheduler+0x94>)
1a001950:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001952:	2201      	movs	r2, #1
1a001954:	4b0e      	ldr	r3, [pc, #56]	; (1a001990 <vTaskStartScheduler+0x98>)
1a001956:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001958:	2200      	movs	r2, #0
1a00195a:	4b0e      	ldr	r3, [pc, #56]	; (1a001994 <vTaskStartScheduler+0x9c>)
1a00195c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
1a00195e:	f001 f809 	bl	1a002974 <xPortStartScheduler>
1a001962:	e00b      	b.n	1a00197c <vTaskStartScheduler+0x84>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001964:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001968:	d108      	bne.n	1a00197c <vTaskStartScheduler+0x84>
1a00196a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00196e:	f383 8811 	msr	BASEPRI, r3
1a001972:	f3bf 8f6f 	isb	sy
1a001976:	f3bf 8f4f 	dsb	sy
1a00197a:	e7fe      	b.n	1a00197a <vTaskStartScheduler+0x82>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
1a00197c:	b008      	add	sp, #32
1a00197e:	bd10      	pop	{r4, pc}
1a001980:	1a001759 	.word	0x1a001759
1a001984:	1a005048 	.word	0x1a005048
1a001988:	10002a00 	.word	0x10002a00
1a00198c:	10002a08 	.word	0x10002a08
1a001990:	10002930 	.word	0x10002930
1a001994:	10002a04 	.word	0x10002a04

1a001998 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
1a001998:	4a02      	ldr	r2, [pc, #8]	; (1a0019a4 <vTaskSuspendAll+0xc>)
1a00199a:	6813      	ldr	r3, [r2, #0]
1a00199c:	3301      	adds	r3, #1
1a00199e:	6013      	str	r3, [r2, #0]
1a0019a0:	4770      	bx	lr
1a0019a2:	bf00      	nop
1a0019a4:	100029dc 	.word	0x100029dc

1a0019a8 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
1a0019a8:	4b01      	ldr	r3, [pc, #4]	; (1a0019b0 <xTaskGetTickCount+0x8>)
1a0019aa:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
1a0019ac:	4770      	bx	lr
1a0019ae:	bf00      	nop
1a0019b0:	10002a04 	.word	0x10002a04

1a0019b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
1a0019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0019b6:	4b3d      	ldr	r3, [pc, #244]	; (1a001aac <xTaskIncrementTick+0xf8>)
1a0019b8:	681b      	ldr	r3, [r3, #0]
1a0019ba:	2b00      	cmp	r3, #0
1a0019bc:	d169      	bne.n	1a001a92 <xTaskIncrementTick+0xde>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0019be:	4b3c      	ldr	r3, [pc, #240]	; (1a001ab0 <xTaskIncrementTick+0xfc>)
1a0019c0:	681d      	ldr	r5, [r3, #0]
1a0019c2:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
1a0019c4:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0019c6:	b9c5      	cbnz	r5, 1a0019fa <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
1a0019c8:	4b3a      	ldr	r3, [pc, #232]	; (1a001ab4 <xTaskIncrementTick+0x100>)
1a0019ca:	681b      	ldr	r3, [r3, #0]
1a0019cc:	681b      	ldr	r3, [r3, #0]
1a0019ce:	b143      	cbz	r3, 1a0019e2 <xTaskIncrementTick+0x2e>
1a0019d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019d4:	f383 8811 	msr	BASEPRI, r3
1a0019d8:	f3bf 8f6f 	isb	sy
1a0019dc:	f3bf 8f4f 	dsb	sy
1a0019e0:	e7fe      	b.n	1a0019e0 <xTaskIncrementTick+0x2c>
1a0019e2:	4a34      	ldr	r2, [pc, #208]	; (1a001ab4 <xTaskIncrementTick+0x100>)
1a0019e4:	6811      	ldr	r1, [r2, #0]
1a0019e6:	4b34      	ldr	r3, [pc, #208]	; (1a001ab8 <xTaskIncrementTick+0x104>)
1a0019e8:	6818      	ldr	r0, [r3, #0]
1a0019ea:	6010      	str	r0, [r2, #0]
1a0019ec:	6019      	str	r1, [r3, #0]
1a0019ee:	4a33      	ldr	r2, [pc, #204]	; (1a001abc <xTaskIncrementTick+0x108>)
1a0019f0:	6813      	ldr	r3, [r2, #0]
1a0019f2:	3301      	adds	r3, #1
1a0019f4:	6013      	str	r3, [r2, #0]
1a0019f6:	f7ff fd83 	bl	1a001500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0019fa:	4b31      	ldr	r3, [pc, #196]	; (1a001ac0 <xTaskIncrementTick+0x10c>)
1a0019fc:	681b      	ldr	r3, [r3, #0]
1a0019fe:	429d      	cmp	r5, r3
1a001a00:	d203      	bcs.n	1a001a0a <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a001a02:	2400      	movs	r4, #0
1a001a04:	e03a      	b.n	1a001a7c <xTaskIncrementTick+0xc8>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
1a001a06:	2401      	movs	r4, #1
1a001a08:	e000      	b.n	1a001a0c <xTaskIncrementTick+0x58>
1a001a0a:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001a0c:	4b29      	ldr	r3, [pc, #164]	; (1a001ab4 <xTaskIncrementTick+0x100>)
1a001a0e:	681b      	ldr	r3, [r3, #0]
1a001a10:	681b      	ldr	r3, [r3, #0]
1a001a12:	b90b      	cbnz	r3, 1a001a18 <xTaskIncrementTick+0x64>
1a001a14:	2301      	movs	r3, #1
1a001a16:	e000      	b.n	1a001a1a <xTaskIncrementTick+0x66>
1a001a18:	2300      	movs	r3, #0
1a001a1a:	b123      	cbz	r3, 1a001a26 <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a1c:	f04f 32ff 	mov.w	r2, #4294967295
1a001a20:	4b27      	ldr	r3, [pc, #156]	; (1a001ac0 <xTaskIncrementTick+0x10c>)
1a001a22:	601a      	str	r2, [r3, #0]
					break;
1a001a24:	e02a      	b.n	1a001a7c <xTaskIncrementTick+0xc8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001a26:	4b23      	ldr	r3, [pc, #140]	; (1a001ab4 <xTaskIncrementTick+0x100>)
1a001a28:	681b      	ldr	r3, [r3, #0]
1a001a2a:	68db      	ldr	r3, [r3, #12]
1a001a2c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001a2e:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
1a001a30:	429d      	cmp	r5, r3
1a001a32:	d202      	bcs.n	1a001a3a <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
1a001a34:	4a22      	ldr	r2, [pc, #136]	; (1a001ac0 <xTaskIncrementTick+0x10c>)
1a001a36:	6013      	str	r3, [r2, #0]
						break;
1a001a38:	e020      	b.n	1a001a7c <xTaskIncrementTick+0xc8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001a3a:	1d37      	adds	r7, r6, #4
1a001a3c:	4638      	mov	r0, r7
1a001a3e:	f7ff fd2f 	bl	1a0014a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001a42:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001a44:	b11b      	cbz	r3, 1a001a4e <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001a46:	f106 0018 	add.w	r0, r6, #24
1a001a4a:	f7ff fd29 	bl	1a0014a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
1a001a4e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001a50:	2201      	movs	r2, #1
1a001a52:	fa02 f103 	lsl.w	r1, r2, r3
1a001a56:	481b      	ldr	r0, [pc, #108]	; (1a001ac4 <xTaskIncrementTick+0x110>)
1a001a58:	6802      	ldr	r2, [r0, #0]
1a001a5a:	430a      	orrs	r2, r1
1a001a5c:	6002      	str	r2, [r0, #0]
1a001a5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a62:	009b      	lsls	r3, r3, #2
1a001a64:	4818      	ldr	r0, [pc, #96]	; (1a001ac8 <xTaskIncrementTick+0x114>)
1a001a66:	4418      	add	r0, r3
1a001a68:	4639      	mov	r1, r7
1a001a6a:	f7ff fcf3 	bl	1a001454 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001a6e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001a70:	4b16      	ldr	r3, [pc, #88]	; (1a001acc <xTaskIncrementTick+0x118>)
1a001a72:	681b      	ldr	r3, [r3, #0]
1a001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a76:	429a      	cmp	r2, r3
1a001a78:	d2c5      	bcs.n	1a001a06 <xTaskIncrementTick+0x52>
1a001a7a:	e7c7      	b.n	1a001a0c <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001a7c:	4b13      	ldr	r3, [pc, #76]	; (1a001acc <xTaskIncrementTick+0x118>)
1a001a7e:	681b      	ldr	r3, [r3, #0]
1a001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a86:	009b      	lsls	r3, r3, #2
1a001a88:	4a0f      	ldr	r2, [pc, #60]	; (1a001ac8 <xTaskIncrementTick+0x114>)
1a001a8a:	58d3      	ldr	r3, [r2, r3]
1a001a8c:	2b01      	cmp	r3, #1
1a001a8e:	d806      	bhi.n	1a001a9e <xTaskIncrementTick+0xea>
1a001a90:	e006      	b.n	1a001aa0 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
1a001a92:	4a0f      	ldr	r2, [pc, #60]	; (1a001ad0 <xTaskIncrementTick+0x11c>)
1a001a94:	6813      	ldr	r3, [r2, #0]
1a001a96:	3301      	adds	r3, #1
1a001a98:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a001a9a:	2400      	movs	r4, #0
1a001a9c:	e000      	b.n	1a001aa0 <xTaskIncrementTick+0xec>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
1a001a9e:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
1a001aa0:	4b0c      	ldr	r3, [pc, #48]	; (1a001ad4 <xTaskIncrementTick+0x120>)
1a001aa2:	681b      	ldr	r3, [r3, #0]
1a001aa4:	b103      	cbz	r3, 1a001aa8 <xTaskIncrementTick+0xf4>
		{
			xSwitchRequired = pdTRUE;
1a001aa6:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
1a001aa8:	4620      	mov	r0, r4
1a001aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001aac:	100029dc 	.word	0x100029dc
1a001ab0:	10002a04 	.word	0x10002a04
1a001ab4:	1000292c 	.word	0x1000292c
1a001ab8:	10002948 	.word	0x10002948
1a001abc:	10002928 	.word	0x10002928
1a001ac0:	10002a08 	.word	0x10002a08
1a001ac4:	10002a4c 	.word	0x10002a4c
1a001ac8:	10002950 	.word	0x10002950
1a001acc:	100029e8 	.word	0x100029e8
1a001ad0:	1000294c 	.word	0x1000294c
1a001ad4:	10002a50 	.word	0x10002a50

1a001ad8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
1a001ad8:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
1a001ada:	4b34      	ldr	r3, [pc, #208]	; (1a001bac <xTaskResumeAll+0xd4>)
1a001adc:	681b      	ldr	r3, [r3, #0]
1a001ade:	b943      	cbnz	r3, 1a001af2 <xTaskResumeAll+0x1a>
1a001ae0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ae4:	f383 8811 	msr	BASEPRI, r3
1a001ae8:	f3bf 8f6f 	isb	sy
1a001aec:	f3bf 8f4f 	dsb	sy
1a001af0:	e7fe      	b.n	1a001af0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
1a001af2:	f000 fe9d 	bl	1a002830 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
1a001af6:	4b2d      	ldr	r3, [pc, #180]	; (1a001bac <xTaskResumeAll+0xd4>)
1a001af8:	681a      	ldr	r2, [r3, #0]
1a001afa:	3a01      	subs	r2, #1
1a001afc:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001afe:	681b      	ldr	r3, [r3, #0]
1a001b00:	2b00      	cmp	r3, #0
1a001b02:	d14c      	bne.n	1a001b9e <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001b04:	4b2a      	ldr	r3, [pc, #168]	; (1a001bb0 <xTaskResumeAll+0xd8>)
1a001b06:	681b      	ldr	r3, [r3, #0]
1a001b08:	bb33      	cbnz	r3, 1a001b58 <xTaskResumeAll+0x80>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001b0a:	2400      	movs	r4, #0
1a001b0c:	e04a      	b.n	1a001ba4 <xTaskResumeAll+0xcc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001b0e:	4b29      	ldr	r3, [pc, #164]	; (1a001bb4 <xTaskResumeAll+0xdc>)
1a001b10:	68db      	ldr	r3, [r3, #12]
1a001b12:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001b14:	f104 0018 	add.w	r0, r4, #24
1a001b18:	f7ff fcc2 	bl	1a0014a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001b1c:	1d25      	adds	r5, r4, #4
1a001b1e:	4628      	mov	r0, r5
1a001b20:	f7ff fcbe 	bl	1a0014a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b26:	2201      	movs	r2, #1
1a001b28:	fa02 f103 	lsl.w	r1, r2, r3
1a001b2c:	4822      	ldr	r0, [pc, #136]	; (1a001bb8 <xTaskResumeAll+0xe0>)
1a001b2e:	6802      	ldr	r2, [r0, #0]
1a001b30:	430a      	orrs	r2, r1
1a001b32:	6002      	str	r2, [r0, #0]
1a001b34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b38:	009b      	lsls	r3, r3, #2
1a001b3a:	4820      	ldr	r0, [pc, #128]	; (1a001bbc <xTaskResumeAll+0xe4>)
1a001b3c:	4418      	add	r0, r3
1a001b3e:	4629      	mov	r1, r5
1a001b40:	f7ff fc88 	bl	1a001454 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001b44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b46:	4b1e      	ldr	r3, [pc, #120]	; (1a001bc0 <xTaskResumeAll+0xe8>)
1a001b48:	681b      	ldr	r3, [r3, #0]
1a001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b4c:	429a      	cmp	r2, r3
1a001b4e:	d304      	bcc.n	1a001b5a <xTaskResumeAll+0x82>
					{
						xYieldPending = pdTRUE;
1a001b50:	2201      	movs	r2, #1
1a001b52:	4b1c      	ldr	r3, [pc, #112]	; (1a001bc4 <xTaskResumeAll+0xec>)
1a001b54:	601a      	str	r2, [r3, #0]
1a001b56:	e000      	b.n	1a001b5a <xTaskResumeAll+0x82>
1a001b58:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001b5a:	4b16      	ldr	r3, [pc, #88]	; (1a001bb4 <xTaskResumeAll+0xdc>)
1a001b5c:	681b      	ldr	r3, [r3, #0]
1a001b5e:	2b00      	cmp	r3, #0
1a001b60:	d1d5      	bne.n	1a001b0e <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1a001b62:	b10c      	cbz	r4, 1a001b68 <xTaskResumeAll+0x90>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
1a001b64:	f7ff fccc 	bl	1a001500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001b68:	4b17      	ldr	r3, [pc, #92]	; (1a001bc8 <xTaskResumeAll+0xf0>)
1a001b6a:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001b6c:	b154      	cbz	r4, 1a001b84 <xTaskResumeAll+0xac>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
1a001b6e:	f7ff ff21 	bl	1a0019b4 <xTaskIncrementTick>
1a001b72:	b110      	cbz	r0, 1a001b7a <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
1a001b74:	2201      	movs	r2, #1
1a001b76:	4b13      	ldr	r3, [pc, #76]	; (1a001bc4 <xTaskResumeAll+0xec>)
1a001b78:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001b7a:	3c01      	subs	r4, #1
1a001b7c:	d1f7      	bne.n	1a001b6e <xTaskResumeAll+0x96>

						uxPendedTicks = 0;
1a001b7e:	2200      	movs	r2, #0
1a001b80:	4b11      	ldr	r3, [pc, #68]	; (1a001bc8 <xTaskResumeAll+0xf0>)
1a001b82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
1a001b84:	4b0f      	ldr	r3, [pc, #60]	; (1a001bc4 <xTaskResumeAll+0xec>)
1a001b86:	681b      	ldr	r3, [r3, #0]
1a001b88:	b15b      	cbz	r3, 1a001ba2 <xTaskResumeAll+0xca>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
1a001b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b8e:	4b0f      	ldr	r3, [pc, #60]	; (1a001bcc <xTaskResumeAll+0xf4>)
1a001b90:	601a      	str	r2, [r3, #0]
1a001b92:	f3bf 8f4f 	dsb	sy
1a001b96:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
1a001b9a:	2401      	movs	r4, #1
1a001b9c:	e002      	b.n	1a001ba4 <xTaskResumeAll+0xcc>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001b9e:	2400      	movs	r4, #0
1a001ba0:	e000      	b.n	1a001ba4 <xTaskResumeAll+0xcc>
1a001ba2:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001ba4:	f000 fe66 	bl	1a002874 <vPortExitCritical>

	return xAlreadyYielded;
}
1a001ba8:	4620      	mov	r0, r4
1a001baa:	bd38      	pop	{r3, r4, r5, pc}
1a001bac:	100029dc 	.word	0x100029dc
1a001bb0:	100029e4 	.word	0x100029e4
1a001bb4:	100029ec 	.word	0x100029ec
1a001bb8:	10002a4c 	.word	0x10002a4c
1a001bbc:	10002950 	.word	0x10002950
1a001bc0:	100029e8 	.word	0x100029e8
1a001bc4:	10002a50 	.word	0x10002a50
1a001bc8:	1000294c 	.word	0x1000294c
1a001bcc:	e000ed04 	.word	0xe000ed04

1a001bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
1a001bd0:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001bd2:	b1a8      	cbz	r0, 1a001c00 <vTaskDelay+0x30>
1a001bd4:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
1a001bd6:	4b10      	ldr	r3, [pc, #64]	; (1a001c18 <vTaskDelay+0x48>)
1a001bd8:	681b      	ldr	r3, [r3, #0]
1a001bda:	b143      	cbz	r3, 1a001bee <vTaskDelay+0x1e>
1a001bdc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001be0:	f383 8811 	msr	BASEPRI, r3
1a001be4:	f3bf 8f6f 	isb	sy
1a001be8:	f3bf 8f4f 	dsb	sy
1a001bec:	e7fe      	b.n	1a001bec <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001bee:	f7ff fed3 	bl	1a001998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001bf2:	4620      	mov	r0, r4
1a001bf4:	2100      	movs	r1, #0
1a001bf6:	f7ff fdc3 	bl	1a001780 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
1a001bfa:	f7ff ff6d 	bl	1a001ad8 <xTaskResumeAll>
1a001bfe:	e000      	b.n	1a001c02 <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
1a001c00:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a001c02:	b938      	cbnz	r0, 1a001c14 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
1a001c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c08:	4b04      	ldr	r3, [pc, #16]	; (1a001c1c <vTaskDelay+0x4c>)
1a001c0a:	601a      	str	r2, [r3, #0]
1a001c0c:	f3bf 8f4f 	dsb	sy
1a001c10:	f3bf 8f6f 	isb	sy
1a001c14:	bd10      	pop	{r4, pc}
1a001c16:	bf00      	nop
1a001c18:	100029dc 	.word	0x100029dc
1a001c1c:	e000ed04 	.word	0xe000ed04

1a001c20 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001c20:	4b2b      	ldr	r3, [pc, #172]	; (1a001cd0 <vTaskSwitchContext+0xb0>)
1a001c22:	681b      	ldr	r3, [r3, #0]
1a001c24:	b11b      	cbz	r3, 1a001c2e <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
1a001c26:	2201      	movs	r2, #1
1a001c28:	4b2a      	ldr	r3, [pc, #168]	; (1a001cd4 <vTaskSwitchContext+0xb4>)
1a001c2a:	601a      	str	r2, [r3, #0]
1a001c2c:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
1a001c2e:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
1a001c30:	2200      	movs	r2, #0
1a001c32:	4b28      	ldr	r3, [pc, #160]	; (1a001cd4 <vTaskSwitchContext+0xb4>)
1a001c34:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
1a001c36:	4b28      	ldr	r3, [pc, #160]	; (1a001cd8 <vTaskSwitchContext+0xb8>)
1a001c38:	681b      	ldr	r3, [r3, #0]
1a001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001c3c:	681a      	ldr	r2, [r3, #0]
1a001c3e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001c42:	d10b      	bne.n	1a001c5c <vTaskSwitchContext+0x3c>
1a001c44:	685a      	ldr	r2, [r3, #4]
1a001c46:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001c4a:	d107      	bne.n	1a001c5c <vTaskSwitchContext+0x3c>
1a001c4c:	689a      	ldr	r2, [r3, #8]
1a001c4e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001c52:	d103      	bne.n	1a001c5c <vTaskSwitchContext+0x3c>
1a001c54:	68db      	ldr	r3, [r3, #12]
1a001c56:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001c5a:	d005      	beq.n	1a001c68 <vTaskSwitchContext+0x48>
1a001c5c:	4b1e      	ldr	r3, [pc, #120]	; (1a001cd8 <vTaskSwitchContext+0xb8>)
1a001c5e:	6818      	ldr	r0, [r3, #0]
1a001c60:	6819      	ldr	r1, [r3, #0]
1a001c62:	3134      	adds	r1, #52	; 0x34
1a001c64:	f7ff fc48 	bl	1a0014f8 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001c68:	4b1c      	ldr	r3, [pc, #112]	; (1a001cdc <vTaskSwitchContext+0xbc>)
1a001c6a:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001c6c:	fab3 f383 	clz	r3, r3
1a001c70:	b2db      	uxtb	r3, r3
1a001c72:	f1c3 031f 	rsb	r3, r3, #31
1a001c76:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001c7a:	0092      	lsls	r2, r2, #2
1a001c7c:	4918      	ldr	r1, [pc, #96]	; (1a001ce0 <vTaskSwitchContext+0xc0>)
1a001c7e:	588a      	ldr	r2, [r1, r2]
1a001c80:	b942      	cbnz	r2, 1a001c94 <vTaskSwitchContext+0x74>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001c82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c86:	f383 8811 	msr	BASEPRI, r3
1a001c8a:	f3bf 8f6f 	isb	sy
1a001c8e:	f3bf 8f4f 	dsb	sy
1a001c92:	e7fe      	b.n	1a001c92 <vTaskSwitchContext+0x72>
1a001c94:	4c12      	ldr	r4, [pc, #72]	; (1a001ce0 <vTaskSwitchContext+0xc0>)
1a001c96:	009a      	lsls	r2, r3, #2
1a001c98:	18d1      	adds	r1, r2, r3
1a001c9a:	0089      	lsls	r1, r1, #2
1a001c9c:	4421      	add	r1, r4
1a001c9e:	6848      	ldr	r0, [r1, #4]
1a001ca0:	6840      	ldr	r0, [r0, #4]
1a001ca2:	6048      	str	r0, [r1, #4]
1a001ca4:	441a      	add	r2, r3
1a001ca6:	0092      	lsls	r2, r2, #2
1a001ca8:	3208      	adds	r2, #8
1a001caa:	4422      	add	r2, r4
1a001cac:	4290      	cmp	r0, r2
1a001cae:	d105      	bne.n	1a001cbc <vTaskSwitchContext+0x9c>
1a001cb0:	6841      	ldr	r1, [r0, #4]
1a001cb2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001cb6:	0092      	lsls	r2, r2, #2
1a001cb8:	4422      	add	r2, r4
1a001cba:	6051      	str	r1, [r2, #4]
1a001cbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001cc0:	009b      	lsls	r3, r3, #2
1a001cc2:	4a07      	ldr	r2, [pc, #28]	; (1a001ce0 <vTaskSwitchContext+0xc0>)
1a001cc4:	4413      	add	r3, r2
1a001cc6:	685b      	ldr	r3, [r3, #4]
1a001cc8:	68da      	ldr	r2, [r3, #12]
1a001cca:	4b03      	ldr	r3, [pc, #12]	; (1a001cd8 <vTaskSwitchContext+0xb8>)
1a001ccc:	601a      	str	r2, [r3, #0]
1a001cce:	bd10      	pop	{r4, pc}
1a001cd0:	100029dc 	.word	0x100029dc
1a001cd4:	10002a50 	.word	0x10002a50
1a001cd8:	100029e8 	.word	0x100029e8
1a001cdc:	10002a4c 	.word	0x10002a4c
1a001ce0:	10002950 	.word	0x10002950

1a001ce4 <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
1a001ce4:	b940      	cbnz	r0, 1a001cf8 <vTaskPlaceOnEventList+0x14>
1a001ce6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cea:	f383 8811 	msr	BASEPRI, r3
1a001cee:	f3bf 8f6f 	isb	sy
1a001cf2:	f3bf 8f4f 	dsb	sy
1a001cf6:	e7fe      	b.n	1a001cf6 <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
1a001cf8:	b510      	push	{r4, lr}
1a001cfa:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001cfc:	4b04      	ldr	r3, [pc, #16]	; (1a001d10 <vTaskPlaceOnEventList+0x2c>)
1a001cfe:	6819      	ldr	r1, [r3, #0]
1a001d00:	3118      	adds	r1, #24
1a001d02:	f7ff fbb3 	bl	1a00146c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001d06:	4620      	mov	r0, r4
1a001d08:	2101      	movs	r1, #1
1a001d0a:	f7ff fd39 	bl	1a001780 <prvAddCurrentTaskToDelayedList>
1a001d0e:	bd10      	pop	{r4, pc}
1a001d10:	100029e8 	.word	0x100029e8

1a001d14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001d14:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001d16:	b940      	cbnz	r0, 1a001d2a <vTaskPlaceOnEventListRestricted+0x16>
1a001d18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d1c:	f383 8811 	msr	BASEPRI, r3
1a001d20:	f3bf 8f6f 	isb	sy
1a001d24:	f3bf 8f4f 	dsb	sy
1a001d28:	e7fe      	b.n	1a001d28 <vTaskPlaceOnEventListRestricted+0x14>
1a001d2a:	460d      	mov	r5, r1
1a001d2c:	4614      	mov	r4, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001d2e:	4a06      	ldr	r2, [pc, #24]	; (1a001d48 <vTaskPlaceOnEventListRestricted+0x34>)
1a001d30:	6811      	ldr	r1, [r2, #0]
1a001d32:	3118      	adds	r1, #24
1a001d34:	f7ff fb8e 	bl	1a001454 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
1a001d38:	b10c      	cbz	r4, 1a001d3e <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
1a001d3a:	f04f 35ff 	mov.w	r5, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001d3e:	4628      	mov	r0, r5
1a001d40:	4621      	mov	r1, r4
1a001d42:	f7ff fd1d 	bl	1a001780 <prvAddCurrentTaskToDelayedList>
1a001d46:	bd38      	pop	{r3, r4, r5, pc}
1a001d48:	100029e8 	.word	0x100029e8

1a001d4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
1a001d4c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001d4e:	68c3      	ldr	r3, [r0, #12]
1a001d50:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001d52:	b944      	cbnz	r4, 1a001d66 <xTaskRemoveFromEventList+0x1a>
1a001d54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d58:	f383 8811 	msr	BASEPRI, r3
1a001d5c:	f3bf 8f6f 	isb	sy
1a001d60:	f3bf 8f4f 	dsb	sy
1a001d64:	e7fe      	b.n	1a001d64 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001d66:	f104 0518 	add.w	r5, r4, #24
1a001d6a:	4628      	mov	r0, r5
1a001d6c:	f7ff fb98 	bl	1a0014a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001d70:	4b13      	ldr	r3, [pc, #76]	; (1a001dc0 <xTaskRemoveFromEventList+0x74>)
1a001d72:	681b      	ldr	r3, [r3, #0]
1a001d74:	b9a3      	cbnz	r3, 1a001da0 <xTaskRemoveFromEventList+0x54>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001d76:	1d25      	adds	r5, r4, #4
1a001d78:	4628      	mov	r0, r5
1a001d7a:	f7ff fb91 	bl	1a0014a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001d80:	2201      	movs	r2, #1
1a001d82:	fa02 f103 	lsl.w	r1, r2, r3
1a001d86:	480f      	ldr	r0, [pc, #60]	; (1a001dc4 <xTaskRemoveFromEventList+0x78>)
1a001d88:	6802      	ldr	r2, [r0, #0]
1a001d8a:	430a      	orrs	r2, r1
1a001d8c:	6002      	str	r2, [r0, #0]
1a001d8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d92:	009b      	lsls	r3, r3, #2
1a001d94:	480c      	ldr	r0, [pc, #48]	; (1a001dc8 <xTaskRemoveFromEventList+0x7c>)
1a001d96:	4418      	add	r0, r3
1a001d98:	4629      	mov	r1, r5
1a001d9a:	f7ff fb5b 	bl	1a001454 <vListInsertEnd>
1a001d9e:	e003      	b.n	1a001da8 <xTaskRemoveFromEventList+0x5c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001da0:	480a      	ldr	r0, [pc, #40]	; (1a001dcc <xTaskRemoveFromEventList+0x80>)
1a001da2:	4629      	mov	r1, r5
1a001da4:	f7ff fb56 	bl	1a001454 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001da8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001daa:	4b09      	ldr	r3, [pc, #36]	; (1a001dd0 <xTaskRemoveFromEventList+0x84>)
1a001dac:	681b      	ldr	r3, [r3, #0]
1a001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001db0:	429a      	cmp	r2, r3
1a001db2:	d903      	bls.n	1a001dbc <xTaskRemoveFromEventList+0x70>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
1a001db4:	2001      	movs	r0, #1
1a001db6:	4b07      	ldr	r3, [pc, #28]	; (1a001dd4 <xTaskRemoveFromEventList+0x88>)
1a001db8:	6018      	str	r0, [r3, #0]
1a001dba:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
1a001dbc:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
1a001dbe:	bd38      	pop	{r3, r4, r5, pc}
1a001dc0:	100029dc 	.word	0x100029dc
1a001dc4:	10002a4c 	.word	0x10002a4c
1a001dc8:	10002950 	.word	0x10002950
1a001dcc:	100029ec 	.word	0x100029ec
1a001dd0:	100029e8 	.word	0x100029e8
1a001dd4:	10002a50 	.word	0x10002a50

1a001dd8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001dd8:	4b03      	ldr	r3, [pc, #12]	; (1a001de8 <vTaskInternalSetTimeOutState+0x10>)
1a001dda:	681b      	ldr	r3, [r3, #0]
1a001ddc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001dde:	4b03      	ldr	r3, [pc, #12]	; (1a001dec <vTaskInternalSetTimeOutState+0x14>)
1a001de0:	681b      	ldr	r3, [r3, #0]
1a001de2:	6043      	str	r3, [r0, #4]
1a001de4:	4770      	bx	lr
1a001de6:	bf00      	nop
1a001de8:	10002928 	.word	0x10002928
1a001dec:	10002a04 	.word	0x10002a04

1a001df0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
1a001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1a001df2:	b940      	cbnz	r0, 1a001e06 <xTaskCheckForTimeOut+0x16>
1a001df4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001df8:	f383 8811 	msr	BASEPRI, r3
1a001dfc:	f3bf 8f6f 	isb	sy
1a001e00:	f3bf 8f4f 	dsb	sy
1a001e04:	e7fe      	b.n	1a001e04 <xTaskCheckForTimeOut+0x14>
1a001e06:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001e08:	b941      	cbnz	r1, 1a001e1c <xTaskCheckForTimeOut+0x2c>
1a001e0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e0e:	f383 8811 	msr	BASEPRI, r3
1a001e12:	f3bf 8f6f 	isb	sy
1a001e16:	f3bf 8f4f 	dsb	sy
1a001e1a:	e7fe      	b.n	1a001e1a <xTaskCheckForTimeOut+0x2a>
1a001e1c:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
1a001e1e:	f000 fd07 	bl	1a002830 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
1a001e22:	4b11      	ldr	r3, [pc, #68]	; (1a001e68 <xTaskCheckForTimeOut+0x78>)
1a001e24:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001e26:	6869      	ldr	r1, [r5, #4]
1a001e28:	1a42      	subs	r2, r0, r1
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
1a001e2a:	6823      	ldr	r3, [r4, #0]
1a001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001e30:	d013      	beq.n	1a001e5a <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001e32:	682f      	ldr	r7, [r5, #0]
1a001e34:	4e0d      	ldr	r6, [pc, #52]	; (1a001e6c <xTaskCheckForTimeOut+0x7c>)
1a001e36:	6836      	ldr	r6, [r6, #0]
1a001e38:	42b7      	cmp	r7, r6
1a001e3a:	d001      	beq.n	1a001e40 <xTaskCheckForTimeOut+0x50>
1a001e3c:	4288      	cmp	r0, r1
1a001e3e:	d20e      	bcs.n	1a001e5e <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001e40:	429a      	cmp	r2, r3
1a001e42:	d206      	bcs.n	1a001e52 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
1a001e44:	1a9b      	subs	r3, r3, r2
1a001e46:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001e48:	4628      	mov	r0, r5
1a001e4a:	f7ff ffc5 	bl	1a001dd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001e4e:	2400      	movs	r4, #0
1a001e50:	e006      	b.n	1a001e60 <xTaskCheckForTimeOut+0x70>
		}
		else
		{
			*pxTicksToWait = 0;
1a001e52:	2300      	movs	r3, #0
1a001e54:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001e56:	2401      	movs	r4, #1
1a001e58:	e002      	b.n	1a001e60 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
1a001e5a:	2400      	movs	r4, #0
1a001e5c:	e000      	b.n	1a001e60 <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
1a001e5e:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
1a001e60:	f000 fd08 	bl	1a002874 <vPortExitCritical>

	return xReturn;
}
1a001e64:	4620      	mov	r0, r4
1a001e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001e68:	10002a04 	.word	0x10002a04
1a001e6c:	10002928 	.word	0x10002928

1a001e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
1a001e70:	2201      	movs	r2, #1
1a001e72:	4b01      	ldr	r3, [pc, #4]	; (1a001e78 <vTaskMissedYield+0x8>)
1a001e74:	601a      	str	r2, [r3, #0]
1a001e76:	4770      	bx	lr
1a001e78:	10002a50 	.word	0x10002a50

1a001e7c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
1a001e7c:	4b05      	ldr	r3, [pc, #20]	; (1a001e94 <xTaskGetSchedulerState+0x18>)
1a001e7e:	681b      	ldr	r3, [r3, #0]
1a001e80:	b123      	cbz	r3, 1a001e8c <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001e82:	4b05      	ldr	r3, [pc, #20]	; (1a001e98 <xTaskGetSchedulerState+0x1c>)
1a001e84:	681b      	ldr	r3, [r3, #0]
1a001e86:	b91b      	cbnz	r3, 1a001e90 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
1a001e88:	2002      	movs	r0, #2
1a001e8a:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001e8c:	2001      	movs	r0, #1
1a001e8e:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
1a001e90:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
1a001e92:	4770      	bx	lr
1a001e94:	10002930 	.word	0x10002930
1a001e98:	100029dc 	.word	0x100029dc

1a001e9c <xTaskPriorityInherit>:
	BaseType_t xReturn = pdFALSE;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
1a001e9c:	2800      	cmp	r0, #0
1a001e9e:	d054      	beq.n	1a001f4a <xTaskPriorityInherit+0xae>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
1a001ea0:	b538      	push	{r3, r4, r5, lr}
1a001ea2:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001ea4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
1a001ea6:	4a2b      	ldr	r2, [pc, #172]	; (1a001f54 <xTaskPriorityInherit+0xb8>)
1a001ea8:	6812      	ldr	r2, [r2, #0]
1a001eaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001eac:	4291      	cmp	r1, r2
1a001eae:	d244      	bcs.n	1a001f3a <xTaskPriorityInherit+0x9e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001eb0:	6982      	ldr	r2, [r0, #24]
1a001eb2:	2a00      	cmp	r2, #0
1a001eb4:	db05      	blt.n	1a001ec2 <xTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001eb6:	4a27      	ldr	r2, [pc, #156]	; (1a001f54 <xTaskPriorityInherit+0xb8>)
1a001eb8:	6812      	ldr	r2, [r2, #0]
1a001eba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001ebc:	f1c2 0207 	rsb	r2, r2, #7
1a001ec0:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001ec2:	6959      	ldr	r1, [r3, #20]
1a001ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ec6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001eca:	0092      	lsls	r2, r2, #2
1a001ecc:	4822      	ldr	r0, [pc, #136]	; (1a001f58 <xTaskPriorityInherit+0xbc>)
1a001ece:	4402      	add	r2, r0
1a001ed0:	4291      	cmp	r1, r2
1a001ed2:	d101      	bne.n	1a001ed8 <xTaskPriorityInherit+0x3c>
1a001ed4:	2201      	movs	r2, #1
1a001ed6:	e000      	b.n	1a001eda <xTaskPriorityInherit+0x3e>
1a001ed8:	2200      	movs	r2, #0
1a001eda:	b342      	cbz	r2, 1a001f2e <xTaskPriorityInherit+0x92>
1a001edc:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001ede:	1d1d      	adds	r5, r3, #4
1a001ee0:	4628      	mov	r0, r5
1a001ee2:	f7ff fadd 	bl	1a0014a0 <uxListRemove>
1a001ee6:	b968      	cbnz	r0, 1a001f04 <xTaskPriorityInherit+0x68>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001ee8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001eea:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a001eee:	009b      	lsls	r3, r3, #2
1a001ef0:	4919      	ldr	r1, [pc, #100]	; (1a001f58 <xTaskPriorityInherit+0xbc>)
1a001ef2:	58cb      	ldr	r3, [r1, r3]
1a001ef4:	b933      	cbnz	r3, 1a001f04 <xTaskPriorityInherit+0x68>
1a001ef6:	2301      	movs	r3, #1
1a001ef8:	4093      	lsls	r3, r2
1a001efa:	4918      	ldr	r1, [pc, #96]	; (1a001f5c <xTaskPriorityInherit+0xc0>)
1a001efc:	680a      	ldr	r2, [r1, #0]
1a001efe:	ea22 0303 	bic.w	r3, r2, r3
1a001f02:	600b      	str	r3, [r1, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001f04:	4b13      	ldr	r3, [pc, #76]	; (1a001f54 <xTaskPriorityInherit+0xb8>)
1a001f06:	681b      	ldr	r3, [r3, #0]
1a001f08:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
1a001f0a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001f0c:	2401      	movs	r4, #1
1a001f0e:	fa04 f100 	lsl.w	r1, r4, r0
1a001f12:	4a12      	ldr	r2, [pc, #72]	; (1a001f5c <xTaskPriorityInherit+0xc0>)
1a001f14:	6813      	ldr	r3, [r2, #0]
1a001f16:	430b      	orrs	r3, r1
1a001f18:	6013      	str	r3, [r2, #0]
1a001f1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001f1e:	0080      	lsls	r0, r0, #2
1a001f20:	4b0d      	ldr	r3, [pc, #52]	; (1a001f58 <xTaskPriorityInherit+0xbc>)
1a001f22:	4418      	add	r0, r3
1a001f24:	4629      	mov	r1, r5
1a001f26:	f7ff fa95 	bl	1a001454 <vListInsertEnd>
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
1a001f2a:	4620      	mov	r0, r4
1a001f2c:	bd38      	pop	{r3, r4, r5, pc}
					prvAddTaskToReadyList( pxMutexHolderTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001f2e:	4a09      	ldr	r2, [pc, #36]	; (1a001f54 <xTaskPriorityInherit+0xb8>)
1a001f30:	6812      	ldr	r2, [r2, #0]
1a001f32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001f34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
1a001f36:	2001      	movs	r0, #1
1a001f38:	bd38      	pop	{r3, r4, r5, pc}
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001f3a:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001f3c:	4b05      	ldr	r3, [pc, #20]	; (1a001f54 <xTaskPriorityInherit+0xb8>)
1a001f3e:	681b      	ldr	r3, [r3, #0]
1a001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f42:	429a      	cmp	r2, r3
1a001f44:	d303      	bcc.n	1a001f4e <xTaskPriorityInherit+0xb2>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a001f46:	2000      	movs	r0, #0
1a001f48:	bd38      	pop	{r3, r4, r5, pc}
1a001f4a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001f4c:	4770      	bx	lr
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
1a001f4e:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001f50:	bd38      	pop	{r3, r4, r5, pc}
1a001f52:	bf00      	nop
1a001f54:	100029e8 	.word	0x100029e8
1a001f58:	10002950 	.word	0x10002950
1a001f5c:	10002a4c 	.word	0x10002a4c

1a001f60 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
1a001f60:	2800      	cmp	r0, #0
1a001f62:	d04b      	beq.n	1a001ffc <xTaskPriorityDisinherit+0x9c>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
1a001f64:	b538      	push	{r3, r4, r5, lr}
1a001f66:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1a001f68:	4a27      	ldr	r2, [pc, #156]	; (1a002008 <xTaskPriorityDisinherit+0xa8>)
1a001f6a:	6812      	ldr	r2, [r2, #0]
1a001f6c:	4290      	cmp	r0, r2
1a001f6e:	d008      	beq.n	1a001f82 <xTaskPriorityDisinherit+0x22>
1a001f70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f74:	f383 8811 	msr	BASEPRI, r3
1a001f78:	f3bf 8f6f 	isb	sy
1a001f7c:	f3bf 8f4f 	dsb	sy
1a001f80:	e7fe      	b.n	1a001f80 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001f82:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001f84:	b942      	cbnz	r2, 1a001f98 <xTaskPriorityDisinherit+0x38>
1a001f86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f8a:	f383 8811 	msr	BASEPRI, r3
1a001f8e:	f3bf 8f6f 	isb	sy
1a001f92:	f3bf 8f4f 	dsb	sy
1a001f96:	e7fe      	b.n	1a001f96 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001f98:	3a01      	subs	r2, #1
1a001f9a:	6542      	str	r2, [r0, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001f9c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001f9e:	6d19      	ldr	r1, [r3, #80]	; 0x50
1a001fa0:	4288      	cmp	r0, r1
1a001fa2:	d02d      	beq.n	1a002000 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001fa4:	bb72      	cbnz	r2, 1a002004 <xTaskPriorityDisinherit+0xa4>
1a001fa6:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001fa8:	1d1d      	adds	r5, r3, #4
1a001faa:	4628      	mov	r0, r5
1a001fac:	f7ff fa78 	bl	1a0014a0 <uxListRemove>
1a001fb0:	b970      	cbnz	r0, 1a001fd0 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001fb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001fb4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a001fb8:	009b      	lsls	r3, r3, #2
1a001fba:	4914      	ldr	r1, [pc, #80]	; (1a00200c <xTaskPriorityDisinherit+0xac>)
1a001fbc:	58cb      	ldr	r3, [r1, r3]
1a001fbe:	b93b      	cbnz	r3, 1a001fd0 <xTaskPriorityDisinherit+0x70>
1a001fc0:	2301      	movs	r3, #1
1a001fc2:	fa03 f202 	lsl.w	r2, r3, r2
1a001fc6:	4912      	ldr	r1, [pc, #72]	; (1a002010 <xTaskPriorityDisinherit+0xb0>)
1a001fc8:	680b      	ldr	r3, [r1, #0]
1a001fca:	ea23 0302 	bic.w	r3, r3, r2
1a001fce:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001fd0:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a001fd2:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001fd4:	f1c0 0307 	rsb	r3, r0, #7
1a001fd8:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001fda:	2401      	movs	r4, #1
1a001fdc:	fa04 f100 	lsl.w	r1, r4, r0
1a001fe0:	4a0b      	ldr	r2, [pc, #44]	; (1a002010 <xTaskPriorityDisinherit+0xb0>)
1a001fe2:	6813      	ldr	r3, [r2, #0]
1a001fe4:	430b      	orrs	r3, r1
1a001fe6:	6013      	str	r3, [r2, #0]
1a001fe8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001fec:	0080      	lsls	r0, r0, #2
1a001fee:	4b07      	ldr	r3, [pc, #28]	; (1a00200c <xTaskPriorityDisinherit+0xac>)
1a001ff0:	4418      	add	r0, r3
1a001ff2:	4629      	mov	r1, r5
1a001ff4:	f7ff fa2e 	bl	1a001454 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
1a001ff8:	4620      	mov	r0, r4
1a001ffa:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a001ffc:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001ffe:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a002000:	2000      	movs	r0, #0
1a002002:	bd38      	pop	{r3, r4, r5, pc}
1a002004:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a002006:	bd38      	pop	{r3, r4, r5, pc}
1a002008:	100029e8 	.word	0x100029e8
1a00200c:	10002950 	.word	0x10002950
1a002010:	10002a4c 	.word	0x10002a4c

1a002014 <vTaskPriorityDisinheritAfterTimeout>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;

		if( pxMutexHolder != NULL )
1a002014:	2800      	cmp	r0, #0
1a002016:	d05b      	beq.n	1a0020d0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
1a002018:	b538      	push	{r3, r4, r5, lr}
1a00201a:	4603      	mov	r3, r0

		if( pxMutexHolder != NULL )
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
1a00201c:	6d44      	ldr	r4, [r0, #84]	; 0x54
1a00201e:	b944      	cbnz	r4, 1a002032 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002020:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002024:	f383 8811 	msr	BASEPRI, r3
1a002028:	f3bf 8f6f 	isb	sy
1a00202c:	f3bf 8f4f 	dsb	sy
1a002030:	e7fe      	b.n	1a002030 <vTaskPriorityDisinheritAfterTimeout+0x1c>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002032:	6d00      	ldr	r0, [r0, #80]	; 0x50
1a002034:	4288      	cmp	r0, r1
1a002036:	d200      	bcs.n	1a00203a <vTaskPriorityDisinheritAfterTimeout+0x26>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a002038:	4608      	mov	r0, r1
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
1a00203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00203c:	4282      	cmp	r2, r0
1a00203e:	d046      	beq.n	1a0020ce <vTaskPriorityDisinheritAfterTimeout+0xba>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002040:	2c01      	cmp	r4, #1
1a002042:	d144      	bne.n	1a0020ce <vTaskPriorityDisinheritAfterTimeout+0xba>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
1a002044:	4923      	ldr	r1, [pc, #140]	; (1a0020d4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
1a002046:	6809      	ldr	r1, [r1, #0]
1a002048:	428b      	cmp	r3, r1
1a00204a:	d108      	bne.n	1a00205e <vTaskPriorityDisinheritAfterTimeout+0x4a>
1a00204c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002050:	f383 8811 	msr	BASEPRI, r3
1a002054:	f3bf 8f6f 	isb	sy
1a002058:	f3bf 8f4f 	dsb	sy
1a00205c:	e7fe      	b.n	1a00205c <vTaskPriorityDisinheritAfterTimeout+0x48>
					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
					pxTCB->uxPriority = uxPriorityToUse;
1a00205e:	62d8      	str	r0, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002060:	6999      	ldr	r1, [r3, #24]
1a002062:	2900      	cmp	r1, #0
1a002064:	db02      	blt.n	1a00206c <vTaskPriorityDisinheritAfterTimeout+0x58>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002066:	f1c0 0007 	rsb	r0, r0, #7
1a00206a:	6198      	str	r0, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a00206c:	6959      	ldr	r1, [r3, #20]
1a00206e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a002072:	0092      	lsls	r2, r2, #2
1a002074:	4818      	ldr	r0, [pc, #96]	; (1a0020d8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a002076:	4402      	add	r2, r0
1a002078:	4291      	cmp	r1, r2
1a00207a:	d101      	bne.n	1a002080 <vTaskPriorityDisinheritAfterTimeout+0x6c>
1a00207c:	2201      	movs	r2, #1
1a00207e:	e000      	b.n	1a002082 <vTaskPriorityDisinheritAfterTimeout+0x6e>
1a002080:	2200      	movs	r2, #0
1a002082:	b322      	cbz	r2, 1a0020ce <vTaskPriorityDisinheritAfterTimeout+0xba>
1a002084:	461c      	mov	r4, r3
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002086:	1d1d      	adds	r5, r3, #4
1a002088:	4628      	mov	r0, r5
1a00208a:	f7ff fa09 	bl	1a0014a0 <uxListRemove>
1a00208e:	b970      	cbnz	r0, 1a0020ae <vTaskPriorityDisinheritAfterTimeout+0x9a>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002090:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002092:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a002096:	009b      	lsls	r3, r3, #2
1a002098:	490f      	ldr	r1, [pc, #60]	; (1a0020d8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a00209a:	58cb      	ldr	r3, [r1, r3]
1a00209c:	b93b      	cbnz	r3, 1a0020ae <vTaskPriorityDisinheritAfterTimeout+0x9a>
1a00209e:	2301      	movs	r3, #1
1a0020a0:	fa03 f202 	lsl.w	r2, r3, r2
1a0020a4:	490d      	ldr	r1, [pc, #52]	; (1a0020dc <vTaskPriorityDisinheritAfterTimeout+0xc8>)
1a0020a6:	680b      	ldr	r3, [r1, #0]
1a0020a8:	ea23 0302 	bic.w	r3, r3, r2
1a0020ac:	600b      	str	r3, [r1, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
1a0020ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0020b0:	2201      	movs	r2, #1
1a0020b2:	fa02 f103 	lsl.w	r1, r2, r3
1a0020b6:	4809      	ldr	r0, [pc, #36]	; (1a0020dc <vTaskPriorityDisinheritAfterTimeout+0xc8>)
1a0020b8:	6802      	ldr	r2, [r0, #0]
1a0020ba:	430a      	orrs	r2, r1
1a0020bc:	6002      	str	r2, [r0, #0]
1a0020be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0020c2:	009b      	lsls	r3, r3, #2
1a0020c4:	4804      	ldr	r0, [pc, #16]	; (1a0020d8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a0020c6:	4418      	add	r0, r3
1a0020c8:	4629      	mov	r1, r5
1a0020ca:	f7ff f9c3 	bl	1a001454 <vListInsertEnd>
1a0020ce:	bd38      	pop	{r3, r4, r5, pc}
1a0020d0:	4770      	bx	lr
1a0020d2:	bf00      	nop
1a0020d4:	100029e8 	.word	0x100029e8
1a0020d8:	10002950 	.word	0x10002950
1a0020dc:	10002a4c 	.word	0x10002a4c

1a0020e0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
1a0020e0:	4b05      	ldr	r3, [pc, #20]	; (1a0020f8 <pvTaskIncrementMutexHeldCount+0x18>)
1a0020e2:	681b      	ldr	r3, [r3, #0]
1a0020e4:	b123      	cbz	r3, 1a0020f0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
1a0020e6:	4b04      	ldr	r3, [pc, #16]	; (1a0020f8 <pvTaskIncrementMutexHeldCount+0x18>)
1a0020e8:	681a      	ldr	r2, [r3, #0]
1a0020ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a0020ec:	3301      	adds	r3, #1
1a0020ee:	6553      	str	r3, [r2, #84]	; 0x54
		}

		return pxCurrentTCB;
1a0020f0:	4b01      	ldr	r3, [pc, #4]	; (1a0020f8 <pvTaskIncrementMutexHeldCount+0x18>)
1a0020f2:	6818      	ldr	r0, [r3, #0]
	}
1a0020f4:	4770      	bx	lr
1a0020f6:	bf00      	nop
1a0020f8:	100029e8 	.word	0x100029e8

1a0020fc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
1a0020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0020fe:	4607      	mov	r7, r0
1a002100:	460d      	mov	r5, r1
1a002102:	4614      	mov	r4, r2
1a002104:	461e      	mov	r6, r3
	BaseType_t xReturn;

		taskENTER_CRITICAL();
1a002106:	f000 fb93 	bl	1a002830 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
1a00210a:	4b20      	ldr	r3, [pc, #128]	; (1a00218c <xTaskNotifyWait+0x90>)
1a00210c:	681b      	ldr	r3, [r3, #0]
1a00210e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
1a002112:	b2db      	uxtb	r3, r3
1a002114:	2b02      	cmp	r3, #2
1a002116:	d016      	beq.n	1a002146 <xTaskNotifyWait+0x4a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
1a002118:	4b1c      	ldr	r3, [pc, #112]	; (1a00218c <xTaskNotifyWait+0x90>)
1a00211a:	681a      	ldr	r2, [r3, #0]
1a00211c:	6d90      	ldr	r0, [r2, #88]	; 0x58
1a00211e:	ea20 0007 	bic.w	r0, r0, r7
1a002122:	6590      	str	r0, [r2, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
1a002124:	681b      	ldr	r3, [r3, #0]
1a002126:	2201      	movs	r2, #1
1a002128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
1a00212c:	b15e      	cbz	r6, 1a002146 <xTaskNotifyWait+0x4a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00212e:	4630      	mov	r0, r6
1a002130:	4611      	mov	r1, r2
1a002132:	f7ff fb25 	bl	1a001780 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
1a002136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00213a:	4b15      	ldr	r3, [pc, #84]	; (1a002190 <xTaskNotifyWait+0x94>)
1a00213c:	601a      	str	r2, [r3, #0]
1a00213e:	f3bf 8f4f 	dsb	sy
1a002142:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
1a002146:	f000 fb95 	bl	1a002874 <vPortExitCritical>

		taskENTER_CRITICAL();
1a00214a:	f000 fb71 	bl	1a002830 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
1a00214e:	b11c      	cbz	r4, 1a002158 <xTaskNotifyWait+0x5c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
1a002150:	4b0e      	ldr	r3, [pc, #56]	; (1a00218c <xTaskNotifyWait+0x90>)
1a002152:	681b      	ldr	r3, [r3, #0]
1a002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1a002156:	6023      	str	r3, [r4, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
1a002158:	4b0c      	ldr	r3, [pc, #48]	; (1a00218c <xTaskNotifyWait+0x90>)
1a00215a:	681b      	ldr	r3, [r3, #0]
1a00215c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
1a002160:	b2db      	uxtb	r3, r3
1a002162:	2b02      	cmp	r3, #2
1a002164:	d107      	bne.n	1a002176 <xTaskNotifyWait+0x7a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
1a002166:	4b09      	ldr	r3, [pc, #36]	; (1a00218c <xTaskNotifyWait+0x90>)
1a002168:	681a      	ldr	r2, [r3, #0]
1a00216a:	6d93      	ldr	r3, [r2, #88]	; 0x58
1a00216c:	ea23 0505 	bic.w	r5, r3, r5
1a002170:	6595      	str	r5, [r2, #88]	; 0x58
				xReturn = pdTRUE;
1a002172:	2401      	movs	r4, #1
1a002174:	e000      	b.n	1a002178 <xTaskNotifyWait+0x7c>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
1a002176:	2400      	movs	r4, #0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a002178:	4b04      	ldr	r3, [pc, #16]	; (1a00218c <xTaskNotifyWait+0x90>)
1a00217a:	681b      	ldr	r3, [r3, #0]
1a00217c:	2200      	movs	r2, #0
1a00217e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
1a002182:	f000 fb77 	bl	1a002874 <vPortExitCritical>

		return xReturn;
	}
1a002186:	4620      	mov	r0, r4
1a002188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00218a:	bf00      	nop
1a00218c:	100029e8 	.word	0x100029e8
1a002190:	e000ed04 	.word	0xe000ed04

1a002194 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
1a002194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002198:	9e08      	ldr	r6, [sp, #32]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
1a00219a:	b940      	cbnz	r0, 1a0021ae <xTaskGenericNotifyFromISR+0x1a>
1a00219c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021a0:	f383 8811 	msr	BASEPRI, r3
1a0021a4:	f3bf 8f6f 	isb	sy
1a0021a8:	f3bf 8f4f 	dsb	sy
1a0021ac:	e7fe      	b.n	1a0021ac <xTaskGenericNotifyFromISR+0x18>
1a0021ae:	4604      	mov	r4, r0
1a0021b0:	4699      	mov	r9, r3
1a0021b2:	4615      	mov	r5, r2
1a0021b4:	4688      	mov	r8, r1
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0021b6:	f000 fc71 	bl	1a002a9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0021ba:	f3ef 8711 	mrs	r7, BASEPRI
1a0021be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021c2:	f383 8811 	msr	BASEPRI, r3
1a0021c6:	f3bf 8f6f 	isb	sy
1a0021ca:	f3bf 8f4f 	dsb	sy

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
1a0021ce:	f1b9 0f00 	cmp.w	r9, #0
1a0021d2:	d002      	beq.n	1a0021da <xTaskGenericNotifyFromISR+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
1a0021d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
1a0021d6:	f8c9 3000 	str.w	r3, [r9]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
1a0021da:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
1a0021de:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
1a0021e0:	2202      	movs	r2, #2
1a0021e2:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

			switch( eAction )
1a0021e6:	1e6a      	subs	r2, r5, #1
1a0021e8:	2a03      	cmp	r2, #3
1a0021ea:	d818      	bhi.n	1a00221e <xTaskGenericNotifyFromISR+0x8a>
1a0021ec:	e8df f002 	tbb	[pc, r2]
1a0021f0:	110d0802 	.word	0x110d0802
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
1a0021f4:	6da2      	ldr	r2, [r4, #88]	; 0x58
1a0021f6:	ea42 0208 	orr.w	r2, r2, r8
1a0021fa:	65a2      	str	r2, [r4, #88]	; 0x58

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
1a0021fc:	2501      	movs	r5, #1

			switch( eAction )
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;
1a0021fe:	e011      	b.n	1a002224 <xTaskGenericNotifyFromISR+0x90>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
1a002200:	6da2      	ldr	r2, [r4, #88]	; 0x58
1a002202:	3201      	adds	r2, #1
1a002204:	65a2      	str	r2, [r4, #88]	; 0x58

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
1a002206:	2501      	movs	r5, #1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
1a002208:	e00c      	b.n	1a002224 <xTaskGenericNotifyFromISR+0x90>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
1a00220a:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
1a00220e:	2501      	movs	r5, #1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
1a002210:	e008      	b.n	1a002224 <xTaskGenericNotifyFromISR+0x90>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
1a002212:	2b02      	cmp	r3, #2
1a002214:	d005      	beq.n	1a002222 <xTaskGenericNotifyFromISR+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
1a002216:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
1a00221a:	2501      	movs	r5, #1
1a00221c:	e002      	b.n	1a002224 <xTaskGenericNotifyFromISR+0x90>
1a00221e:	2501      	movs	r5, #1
1a002220:	e000      	b.n	1a002224 <xTaskGenericNotifyFromISR+0x90>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
1a002222:	2500      	movs	r5, #0

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
1a002224:	2b01      	cmp	r3, #1
1a002226:	d135      	bne.n	1a002294 <xTaskGenericNotifyFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
1a002228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a00222a:	b143      	cbz	r3, 1a00223e <xTaskGenericNotifyFromISR+0xaa>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00222c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002230:	f383 8811 	msr	BASEPRI, r3
1a002234:	f3bf 8f6f 	isb	sy
1a002238:	f3bf 8f4f 	dsb	sy
1a00223c:	e7fe      	b.n	1a00223c <xTaskGenericNotifyFromISR+0xa8>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00223e:	4b18      	ldr	r3, [pc, #96]	; (1a0022a0 <xTaskGenericNotifyFromISR+0x10c>)
1a002240:	681b      	ldr	r3, [r3, #0]
1a002242:	b9ab      	cbnz	r3, 1a002270 <xTaskGenericNotifyFromISR+0xdc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002244:	f104 0804 	add.w	r8, r4, #4
1a002248:	4640      	mov	r0, r8
1a00224a:	f7ff f929 	bl	1a0014a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00224e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002250:	2201      	movs	r2, #1
1a002252:	fa02 f103 	lsl.w	r1, r2, r3
1a002256:	4813      	ldr	r0, [pc, #76]	; (1a0022a4 <xTaskGenericNotifyFromISR+0x110>)
1a002258:	6802      	ldr	r2, [r0, #0]
1a00225a:	430a      	orrs	r2, r1
1a00225c:	6002      	str	r2, [r0, #0]
1a00225e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002262:	009b      	lsls	r3, r3, #2
1a002264:	4810      	ldr	r0, [pc, #64]	; (1a0022a8 <xTaskGenericNotifyFromISR+0x114>)
1a002266:	4418      	add	r0, r3
1a002268:	4641      	mov	r1, r8
1a00226a:	f7ff f8f3 	bl	1a001454 <vListInsertEnd>
1a00226e:	e004      	b.n	1a00227a <xTaskGenericNotifyFromISR+0xe6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1a002270:	480e      	ldr	r0, [pc, #56]	; (1a0022ac <xTaskGenericNotifyFromISR+0x118>)
1a002272:	f104 0118 	add.w	r1, r4, #24
1a002276:	f7ff f8ed 	bl	1a001454 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00227a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00227c:	4b0c      	ldr	r3, [pc, #48]	; (1a0022b0 <xTaskGenericNotifyFromISR+0x11c>)
1a00227e:	681b      	ldr	r3, [r3, #0]
1a002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002282:	429a      	cmp	r2, r3
1a002284:	d906      	bls.n	1a002294 <xTaskGenericNotifyFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
1a002286:	b116      	cbz	r6, 1a00228e <xTaskGenericNotifyFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
1a002288:	2301      	movs	r3, #1
1a00228a:	6033      	str	r3, [r6, #0]
1a00228c:	e002      	b.n	1a002294 <xTaskGenericNotifyFromISR+0x100>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
1a00228e:	2201      	movs	r2, #1
1a002290:	4b08      	ldr	r3, [pc, #32]	; (1a0022b4 <xTaskGenericNotifyFromISR+0x120>)
1a002292:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a002294:	f387 8811 	msr	BASEPRI, r7
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
1a002298:	4628      	mov	r0, r5
1a00229a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00229e:	bf00      	nop
1a0022a0:	100029dc 	.word	0x100029dc
1a0022a4:	10002a4c 	.word	0x10002a4c
1a0022a8:	10002950 	.word	0x10002950
1a0022ac:	100029ec 	.word	0x100029ec
1a0022b0:	100029e8 	.word	0x100029e8
1a0022b4:	10002a50 	.word	0x10002a50

1a0022b8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0022b8:	4b06      	ldr	r3, [pc, #24]	; (1a0022d4 <prvGetNextExpireTime+0x1c>)
1a0022ba:	681a      	ldr	r2, [r3, #0]
1a0022bc:	6813      	ldr	r3, [r2, #0]
1a0022be:	fab3 f383 	clz	r3, r3
1a0022c2:	095b      	lsrs	r3, r3, #5
1a0022c4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0022c6:	b913      	cbnz	r3, 1a0022ce <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0022c8:	68d3      	ldr	r3, [r2, #12]
1a0022ca:	6818      	ldr	r0, [r3, #0]
1a0022cc:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0022ce:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0022d0:	4770      	bx	lr
1a0022d2:	bf00      	nop
1a0022d4:	10002a54 	.word	0x10002a54

1a0022d8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0022d8:	b510      	push	{r4, lr}
1a0022da:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0022dc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0022de:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0022e0:	4291      	cmp	r1, r2
1a0022e2:	d80a      	bhi.n	1a0022fa <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022e4:	1ad2      	subs	r2, r2, r3
1a0022e6:	6983      	ldr	r3, [r0, #24]
1a0022e8:	429a      	cmp	r2, r3
1a0022ea:	d211      	bcs.n	1a002310 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a0022ec:	4b0a      	ldr	r3, [pc, #40]	; (1a002318 <prvInsertTimerInActiveList+0x40>)
1a0022ee:	6818      	ldr	r0, [r3, #0]
1a0022f0:	1d21      	adds	r1, r4, #4
1a0022f2:	f7ff f8bb 	bl	1a00146c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a0022f6:	2000      	movs	r0, #0
1a0022f8:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0022fa:	429a      	cmp	r2, r3
1a0022fc:	d201      	bcs.n	1a002302 <prvInsertTimerInActiveList+0x2a>
1a0022fe:	4299      	cmp	r1, r3
1a002300:	d208      	bcs.n	1a002314 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002302:	4b06      	ldr	r3, [pc, #24]	; (1a00231c <prvInsertTimerInActiveList+0x44>)
1a002304:	6818      	ldr	r0, [r3, #0]
1a002306:	1d21      	adds	r1, r4, #4
1a002308:	f7ff f8b0 	bl	1a00146c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a00230c:	2000      	movs	r0, #0
1a00230e:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002310:	2001      	movs	r0, #1
1a002312:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
1a002314:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a002316:	bd10      	pop	{r4, pc}
1a002318:	10002b78 	.word	0x10002b78
1a00231c:	10002a54 	.word	0x10002a54

1a002320 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002320:	b530      	push	{r4, r5, lr}
1a002322:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002324:	f000 fa84 	bl	1a002830 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002328:	4b10      	ldr	r3, [pc, #64]	; (1a00236c <prvCheckForValidListAndQueue+0x4c>)
1a00232a:	681b      	ldr	r3, [r3, #0]
1a00232c:	b9cb      	cbnz	r3, 1a002362 <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
1a00232e:	4d10      	ldr	r5, [pc, #64]	; (1a002370 <prvCheckForValidListAndQueue+0x50>)
1a002330:	4628      	mov	r0, r5
1a002332:	f7ff f87f 	bl	1a001434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002336:	4c0f      	ldr	r4, [pc, #60]	; (1a002374 <prvCheckForValidListAndQueue+0x54>)
1a002338:	4620      	mov	r0, r4
1a00233a:	f7ff f87b 	bl	1a001434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00233e:	4b0e      	ldr	r3, [pc, #56]	; (1a002378 <prvCheckForValidListAndQueue+0x58>)
1a002340:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002342:	4b0e      	ldr	r3, [pc, #56]	; (1a00237c <prvCheckForValidListAndQueue+0x5c>)
1a002344:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002346:	2300      	movs	r3, #0
1a002348:	9300      	str	r3, [sp, #0]
1a00234a:	200a      	movs	r0, #10
1a00234c:	2110      	movs	r1, #16
1a00234e:	4a0c      	ldr	r2, [pc, #48]	; (1a002380 <prvCheckForValidListAndQueue+0x60>)
1a002350:	4b0c      	ldr	r3, [pc, #48]	; (1a002384 <prvCheckForValidListAndQueue+0x64>)
1a002352:	f7fe fcf1 	bl	1a000d38 <xQueueGenericCreateStatic>
1a002356:	4b05      	ldr	r3, [pc, #20]	; (1a00236c <prvCheckForValidListAndQueue+0x4c>)
1a002358:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
1a00235a:	b110      	cbz	r0, 1a002362 <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00235c:	490a      	ldr	r1, [pc, #40]	; (1a002388 <prvCheckForValidListAndQueue+0x68>)
1a00235e:	f7ff f82f 	bl	1a0013c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002362:	f000 fa87 	bl	1a002874 <vPortExitCritical>
}
1a002366:	b003      	add	sp, #12
1a002368:	bd30      	pop	{r4, r5, pc}
1a00236a:	bf00      	nop
1a00236c:	10002b74 	.word	0x10002b74
1a002370:	10002a58 	.word	0x10002a58
1a002374:	10002a6c 	.word	0x10002a6c
1a002378:	10002a54 	.word	0x10002a54
1a00237c:	10002b78 	.word	0x10002b78
1a002380:	10002a80 	.word	0x10002a80
1a002384:	10002b24 	.word	0x10002b24
1a002388:	1a005050 	.word	0x1a005050

1a00238c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
1a00238c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002390:	9c07      	ldr	r4, [sp, #28]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a002392:	b941      	cbnz	r1, 1a0023a6 <prvInitialiseNewTimer+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a002394:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002398:	f383 8811 	msr	BASEPRI, r3
1a00239c:	f3bf 8f6f 	isb	sy
1a0023a0:	f3bf 8f4f 	dsb	sy
1a0023a4:	e7fe      	b.n	1a0023a4 <prvInitialiseNewTimer+0x18>
1a0023a6:	460f      	mov	r7, r1

	if( pxNewTimer != NULL )
1a0023a8:	b174      	cbz	r4, 1a0023c8 <prvInitialiseNewTimer+0x3c>
1a0023aa:	461d      	mov	r5, r3
1a0023ac:	4616      	mov	r6, r2
1a0023ae:	4680      	mov	r8, r0
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
1a0023b0:	f7ff ffb6 	bl	1a002320 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
1a0023b4:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0023b8:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0023ba:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0023bc:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0023be:	9b06      	ldr	r3, [sp, #24]
1a0023c0:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0023c2:	1d20      	adds	r0, r4, #4
1a0023c4:	f7ff f842 	bl	1a00144c <vListInitialiseItem>
1a0023c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0023cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
1a0023cc:	b510      	push	{r4, lr}
1a0023ce:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
1a0023d0:	f7ff ffa6 	bl	1a002320 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
1a0023d4:	4b15      	ldr	r3, [pc, #84]	; (1a00242c <xTimerCreateTimerTask+0x60>)
1a0023d6:	681b      	ldr	r3, [r3, #0]
1a0023d8:	b1d3      	cbz	r3, 1a002410 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0023da:	2400      	movs	r4, #0
1a0023dc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0023de:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a0023e0:	a805      	add	r0, sp, #20
1a0023e2:	a906      	add	r1, sp, #24
1a0023e4:	aa07      	add	r2, sp, #28
1a0023e6:	f7ff f87b 	bl	1a0014e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a0023ea:	2304      	movs	r3, #4
1a0023ec:	9300      	str	r3, [sp, #0]
1a0023ee:	9b06      	ldr	r3, [sp, #24]
1a0023f0:	9301      	str	r3, [sp, #4]
1a0023f2:	9b05      	ldr	r3, [sp, #20]
1a0023f4:	9302      	str	r3, [sp, #8]
1a0023f6:	480e      	ldr	r0, [pc, #56]	; (1a002430 <xTimerCreateTimerTask+0x64>)
1a0023f8:	490e      	ldr	r1, [pc, #56]	; (1a002434 <xTimerCreateTimerTask+0x68>)
1a0023fa:	9a07      	ldr	r2, [sp, #28]
1a0023fc:	4623      	mov	r3, r4
1a0023fe:	f7ff fa09 	bl	1a001814 <xTaskCreateStatic>
1a002402:	4b0d      	ldr	r3, [pc, #52]	; (1a002438 <xTimerCreateTimerTask+0x6c>)
1a002404:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
1a002406:	b908      	cbnz	r0, 1a00240c <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a002408:	4620      	mov	r0, r4
1a00240a:	e002      	b.n	1a002412 <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
1a00240c:	2001      	movs	r0, #1
1a00240e:	e000      	b.n	1a002412 <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a002410:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
1a002412:	b940      	cbnz	r0, 1a002426 <xTimerCreateTimerTask+0x5a>
1a002414:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002418:	f383 8811 	msr	BASEPRI, r3
1a00241c:	f3bf 8f6f 	isb	sy
1a002420:	f3bf 8f4f 	dsb	sy
1a002424:	e7fe      	b.n	1a002424 <xTimerCreateTimerTask+0x58>
	return xReturn;
}
1a002426:	b008      	add	sp, #32
1a002428:	bd10      	pop	{r4, pc}
1a00242a:	bf00      	nop
1a00242c:	10002b74 	.word	0x10002b74
1a002430:	1a002741 	.word	0x1a002741
1a002434:	1a005058 	.word	0x1a005058
1a002438:	10002b7c 	.word	0x10002b7c

1a00243c <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
1a00243c:	b530      	push	{r4, r5, lr}
1a00243e:	b085      	sub	sp, #20
1a002440:	9c09      	ldr	r4, [sp, #36]	; 0x24
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002442:	2530      	movs	r5, #48	; 0x30
1a002444:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a002446:	9d03      	ldr	r5, [sp, #12]
1a002448:	2d30      	cmp	r5, #48	; 0x30
1a00244a:	d008      	beq.n	1a00245e <xTimerCreateStatic+0x22>
1a00244c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002450:	f383 8811 	msr	BASEPRI, r3
1a002454:	f3bf 8f6f 	isb	sy
1a002458:	f3bf 8f4f 	dsb	sy
1a00245c:	e7fe      	b.n	1a00245c <xTimerCreateStatic+0x20>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
1a00245e:	b944      	cbnz	r4, 1a002472 <xTimerCreateStatic+0x36>
1a002460:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002464:	f383 8811 	msr	BASEPRI, r3
1a002468:	f3bf 8f6f 	isb	sy
1a00246c:	f3bf 8f4f 	dsb	sy
1a002470:	e7fe      	b.n	1a002470 <xTimerCreateStatic+0x34>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewTimer != NULL )
1a002472:	b13c      	cbz	r4, 1a002484 <xTimerCreateStatic+0x48>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002474:	9d08      	ldr	r5, [sp, #32]
1a002476:	9500      	str	r5, [sp, #0]
1a002478:	9401      	str	r4, [sp, #4]
1a00247a:	f7ff ff87 	bl	1a00238c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a00247e:	2301      	movs	r3, #1
1a002480:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
	}
1a002484:	4620      	mov	r0, r4
1a002486:	b005      	add	sp, #20
1a002488:	bd30      	pop	{r4, r5, pc}
1a00248a:	bf00      	nop

1a00248c <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
1a00248c:	b940      	cbnz	r0, 1a0024a0 <xTimerGenericCommand+0x14>
1a00248e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002492:	f383 8811 	msr	BASEPRI, r3
1a002496:	f3bf 8f6f 	isb	sy
1a00249a:	f3bf 8f4f 	dsb	sy
1a00249e:	e7fe      	b.n	1a00249e <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
1a0024a0:	b530      	push	{r4, r5, lr}
1a0024a2:	b085      	sub	sp, #20
1a0024a4:	4615      	mov	r5, r2
1a0024a6:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
1a0024a8:	4a12      	ldr	r2, [pc, #72]	; (1a0024f4 <xTimerGenericCommand+0x68>)
1a0024aa:	6810      	ldr	r0, [r2, #0]
1a0024ac:	b1f0      	cbz	r0, 1a0024ec <xTimerGenericCommand+0x60>
1a0024ae:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
1a0024b0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0024b2:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0024b4:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0024b6:	2905      	cmp	r1, #5
1a0024b8:	dc13      	bgt.n	1a0024e2 <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0024ba:	f7ff fcdf 	bl	1a001e7c <xTaskGetSchedulerState>
1a0024be:	2802      	cmp	r0, #2
1a0024c0:	d107      	bne.n	1a0024d2 <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0024c2:	4b0c      	ldr	r3, [pc, #48]	; (1a0024f4 <xTimerGenericCommand+0x68>)
1a0024c4:	6818      	ldr	r0, [r3, #0]
1a0024c6:	4669      	mov	r1, sp
1a0024c8:	9a08      	ldr	r2, [sp, #32]
1a0024ca:	2300      	movs	r3, #0
1a0024cc:	f7fe fcb2 	bl	1a000e34 <xQueueGenericSend>
1a0024d0:	e00d      	b.n	1a0024ee <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0024d2:	4b08      	ldr	r3, [pc, #32]	; (1a0024f4 <xTimerGenericCommand+0x68>)
1a0024d4:	6818      	ldr	r0, [r3, #0]
1a0024d6:	4669      	mov	r1, sp
1a0024d8:	2200      	movs	r2, #0
1a0024da:	4613      	mov	r3, r2
1a0024dc:	f7fe fcaa 	bl	1a000e34 <xQueueGenericSend>
1a0024e0:	e005      	b.n	1a0024ee <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0024e2:	4669      	mov	r1, sp
1a0024e4:	2300      	movs	r3, #0
1a0024e6:	f7fe fd85 	bl	1a000ff4 <xQueueGenericSendFromISR>
1a0024ea:	e000      	b.n	1a0024ee <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
1a0024ec:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
1a0024ee:	b005      	add	sp, #20
1a0024f0:	bd30      	pop	{r4, r5, pc}
1a0024f2:	bf00      	nop
1a0024f4:	10002b74 	.word	0x10002b74

1a0024f8 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
1a0024f8:	b570      	push	{r4, r5, r6, lr}
1a0024fa:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0024fc:	e029      	b.n	1a002552 <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0024fe:	68db      	ldr	r3, [r3, #12]
1a002500:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002502:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002504:	1d25      	adds	r5, r4, #4
1a002506:	4628      	mov	r0, r5
1a002508:	f7fe ffca 	bl	1a0014a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00250c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00250e:	4620      	mov	r0, r4
1a002510:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002512:	69e3      	ldr	r3, [r4, #28]
1a002514:	2b01      	cmp	r3, #1
1a002516:	d11c      	bne.n	1a002552 <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002518:	69a3      	ldr	r3, [r4, #24]
1a00251a:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00251c:	42b3      	cmp	r3, r6
1a00251e:	d907      	bls.n	1a002530 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002520:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002522:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002524:	4b11      	ldr	r3, [pc, #68]	; (1a00256c <prvSwitchTimerLists+0x74>)
1a002526:	6818      	ldr	r0, [r3, #0]
1a002528:	4629      	mov	r1, r5
1a00252a:	f7fe ff9f 	bl	1a00146c <vListInsert>
1a00252e:	e010      	b.n	1a002552 <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002530:	2300      	movs	r3, #0
1a002532:	9300      	str	r3, [sp, #0]
1a002534:	4620      	mov	r0, r4
1a002536:	4619      	mov	r1, r3
1a002538:	4632      	mov	r2, r6
1a00253a:	f7ff ffa7 	bl	1a00248c <xTimerGenericCommand>
				configASSERT( xResult );
1a00253e:	b940      	cbnz	r0, 1a002552 <prvSwitchTimerLists+0x5a>
1a002540:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002544:	f383 8811 	msr	BASEPRI, r3
1a002548:	f3bf 8f6f 	isb	sy
1a00254c:	f3bf 8f4f 	dsb	sy
1a002550:	e7fe      	b.n	1a002550 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002552:	4b06      	ldr	r3, [pc, #24]	; (1a00256c <prvSwitchTimerLists+0x74>)
1a002554:	681b      	ldr	r3, [r3, #0]
1a002556:	681a      	ldr	r2, [r3, #0]
1a002558:	2a00      	cmp	r2, #0
1a00255a:	d1d0      	bne.n	1a0024fe <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
1a00255c:	4a04      	ldr	r2, [pc, #16]	; (1a002570 <prvSwitchTimerLists+0x78>)
1a00255e:	6810      	ldr	r0, [r2, #0]
1a002560:	4902      	ldr	r1, [pc, #8]	; (1a00256c <prvSwitchTimerLists+0x74>)
1a002562:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002564:	6013      	str	r3, [r2, #0]
}
1a002566:	b002      	add	sp, #8
1a002568:	bd70      	pop	{r4, r5, r6, pc}
1a00256a:	bf00      	nop
1a00256c:	10002a54 	.word	0x10002a54
1a002570:	10002b78 	.word	0x10002b78

1a002574 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
1a002574:	b538      	push	{r3, r4, r5, lr}
1a002576:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
1a002578:	f7ff fa16 	bl	1a0019a8 <xTaskGetTickCount>
1a00257c:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
1a00257e:	4b07      	ldr	r3, [pc, #28]	; (1a00259c <prvSampleTimeNow+0x28>)
1a002580:	681b      	ldr	r3, [r3, #0]
1a002582:	4298      	cmp	r0, r3
1a002584:	d204      	bcs.n	1a002590 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
1a002586:	f7ff ffb7 	bl	1a0024f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00258a:	2301      	movs	r3, #1
1a00258c:	602b      	str	r3, [r5, #0]
1a00258e:	e001      	b.n	1a002594 <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
1a002590:	2300      	movs	r3, #0
1a002592:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
1a002594:	4b01      	ldr	r3, [pc, #4]	; (1a00259c <prvSampleTimeNow+0x28>)
1a002596:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
1a002598:	4620      	mov	r0, r4
1a00259a:	bd38      	pop	{r3, r4, r5, pc}
1a00259c:	10002b20 	.word	0x10002b20

1a0025a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
1a0025a0:	b570      	push	{r4, r5, r6, lr}
1a0025a2:	b082      	sub	sp, #8
1a0025a4:	4605      	mov	r5, r0
1a0025a6:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0025a8:	4b13      	ldr	r3, [pc, #76]	; (1a0025f8 <prvProcessExpiredTimer+0x58>)
1a0025aa:	681b      	ldr	r3, [r3, #0]
1a0025ac:	68db      	ldr	r3, [r3, #12]
1a0025ae:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0025b0:	1d20      	adds	r0, r4, #4
1a0025b2:	f7fe ff75 	bl	1a0014a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0025b6:	69e3      	ldr	r3, [r4, #28]
1a0025b8:	2b01      	cmp	r3, #1
1a0025ba:	d118      	bne.n	1a0025ee <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0025bc:	69a1      	ldr	r1, [r4, #24]
1a0025be:	4620      	mov	r0, r4
1a0025c0:	4429      	add	r1, r5
1a0025c2:	4632      	mov	r2, r6
1a0025c4:	462b      	mov	r3, r5
1a0025c6:	f7ff fe87 	bl	1a0022d8 <prvInsertTimerInActiveList>
1a0025ca:	b180      	cbz	r0, 1a0025ee <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0025cc:	2300      	movs	r3, #0
1a0025ce:	9300      	str	r3, [sp, #0]
1a0025d0:	4620      	mov	r0, r4
1a0025d2:	4619      	mov	r1, r3
1a0025d4:	462a      	mov	r2, r5
1a0025d6:	f7ff ff59 	bl	1a00248c <xTimerGenericCommand>
			configASSERT( xResult );
1a0025da:	b940      	cbnz	r0, 1a0025ee <prvProcessExpiredTimer+0x4e>
1a0025dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025e0:	f383 8811 	msr	BASEPRI, r3
1a0025e4:	f3bf 8f6f 	isb	sy
1a0025e8:	f3bf 8f4f 	dsb	sy
1a0025ec:	e7fe      	b.n	1a0025ec <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0025ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0025f0:	4620      	mov	r0, r4
1a0025f2:	4798      	blx	r3
}
1a0025f4:	b002      	add	sp, #8
1a0025f6:	bd70      	pop	{r4, r5, r6, pc}
1a0025f8:	10002a54 	.word	0x10002a54

1a0025fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
1a0025fc:	b570      	push	{r4, r5, r6, lr}
1a0025fe:	b082      	sub	sp, #8
1a002600:	4606      	mov	r6, r0
1a002602:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
1a002604:	f7ff f9c8 	bl	1a001998 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002608:	a801      	add	r0, sp, #4
1a00260a:	f7ff ffb3 	bl	1a002574 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00260e:	9b01      	ldr	r3, [sp, #4]
1a002610:	bb1b      	cbnz	r3, 1a00265a <prvProcessTimerOrBlockTask+0x5e>
1a002612:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002614:	b944      	cbnz	r4, 1a002628 <prvProcessTimerOrBlockTask+0x2c>
1a002616:	4286      	cmp	r6, r0
1a002618:	d806      	bhi.n	1a002628 <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
1a00261a:	f7ff fa5d 	bl	1a001ad8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a00261e:	4630      	mov	r0, r6
1a002620:	4629      	mov	r1, r5
1a002622:	f7ff ffbd 	bl	1a0025a0 <prvProcessExpiredTimer>
1a002626:	e01a      	b.n	1a00265e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
1a002628:	b12c      	cbz	r4, 1a002636 <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a00262a:	4b0e      	ldr	r3, [pc, #56]	; (1a002664 <prvProcessTimerOrBlockTask+0x68>)
1a00262c:	681b      	ldr	r3, [r3, #0]
1a00262e:	681c      	ldr	r4, [r3, #0]
1a002630:	fab4 f484 	clz	r4, r4
1a002634:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002636:	4b0c      	ldr	r3, [pc, #48]	; (1a002668 <prvProcessTimerOrBlockTask+0x6c>)
1a002638:	6818      	ldr	r0, [r3, #0]
1a00263a:	1b71      	subs	r1, r6, r5
1a00263c:	4622      	mov	r2, r4
1a00263e:	f7fe fed3 	bl	1a0013e8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
1a002642:	f7ff fa49 	bl	1a001ad8 <xTaskResumeAll>
1a002646:	b950      	cbnz	r0, 1a00265e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
1a002648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00264c:	4b07      	ldr	r3, [pc, #28]	; (1a00266c <prvProcessTimerOrBlockTask+0x70>)
1a00264e:	601a      	str	r2, [r3, #0]
1a002650:	f3bf 8f4f 	dsb	sy
1a002654:	f3bf 8f6f 	isb	sy
1a002658:	e001      	b.n	1a00265e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
1a00265a:	f7ff fa3d 	bl	1a001ad8 <xTaskResumeAll>
		}
	}
}
1a00265e:	b002      	add	sp, #8
1a002660:	bd70      	pop	{r4, r5, r6, pc}
1a002662:	bf00      	nop
1a002664:	10002b78 	.word	0x10002b78
1a002668:	10002b74 	.word	0x10002b74
1a00266c:	e000ed04 	.word	0xe000ed04

1a002670 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
1a002670:	b530      	push	{r4, r5, lr}
1a002672:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002674:	e057      	b.n	1a002726 <prvProcessReceivedCommands+0xb6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002676:	9b04      	ldr	r3, [sp, #16]
1a002678:	2b00      	cmp	r3, #0
1a00267a:	da03      	bge.n	1a002684 <prvProcessReceivedCommands+0x14>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00267c:	9806      	ldr	r0, [sp, #24]
1a00267e:	9907      	ldr	r1, [sp, #28]
1a002680:	9b05      	ldr	r3, [sp, #20]
1a002682:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002684:	9b04      	ldr	r3, [sp, #16]
1a002686:	2b00      	cmp	r3, #0
1a002688:	db4d      	blt.n	1a002726 <prvProcessReceivedCommands+0xb6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a00268a:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00268c:	6963      	ldr	r3, [r4, #20]
1a00268e:	b113      	cbz	r3, 1a002696 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002690:	1d20      	adds	r0, r4, #4
1a002692:	f7fe ff05 	bl	1a0014a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002696:	a803      	add	r0, sp, #12
1a002698:	f7ff ff6c 	bl	1a002574 <prvSampleTimeNow>
1a00269c:	4603      	mov	r3, r0

			switch( xMessage.xMessageID )
1a00269e:	9a04      	ldr	r2, [sp, #16]
1a0026a0:	2a09      	cmp	r2, #9
1a0026a2:	d840      	bhi.n	1a002726 <prvProcessReceivedCommands+0xb6>
1a0026a4:	e8df f002 	tbb	[pc, r2]
1a0026a8:	3f050505 	.word	0x3f050505
1a0026ac:	05053927 	.word	0x05053927
1a0026b0:	273f      	.short	0x273f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0026b2:	9d05      	ldr	r5, [sp, #20]
1a0026b4:	69a1      	ldr	r1, [r4, #24]
1a0026b6:	4620      	mov	r0, r4
1a0026b8:	4429      	add	r1, r5
1a0026ba:	461a      	mov	r2, r3
1a0026bc:	462b      	mov	r3, r5
1a0026be:	f7ff fe0b 	bl	1a0022d8 <prvInsertTimerInActiveList>
1a0026c2:	b380      	cbz	r0, 1a002726 <prvProcessReceivedCommands+0xb6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0026c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0026c6:	4620      	mov	r0, r4
1a0026c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0026ca:	69e3      	ldr	r3, [r4, #28]
1a0026cc:	2b01      	cmp	r3, #1
1a0026ce:	d12a      	bne.n	1a002726 <prvProcessReceivedCommands+0xb6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0026d0:	69a2      	ldr	r2, [r4, #24]
1a0026d2:	2300      	movs	r3, #0
1a0026d4:	9300      	str	r3, [sp, #0]
1a0026d6:	4620      	mov	r0, r4
1a0026d8:	4619      	mov	r1, r3
1a0026da:	9c05      	ldr	r4, [sp, #20]
1a0026dc:	4422      	add	r2, r4
1a0026de:	f7ff fed5 	bl	1a00248c <xTimerGenericCommand>
							configASSERT( xResult );
1a0026e2:	bb00      	cbnz	r0, 1a002726 <prvProcessReceivedCommands+0xb6>
1a0026e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026e8:	f383 8811 	msr	BASEPRI, r3
1a0026ec:	f3bf 8f6f 	isb	sy
1a0026f0:	f3bf 8f4f 	dsb	sy
1a0026f4:	e7fe      	b.n	1a0026f4 <prvProcessReceivedCommands+0x84>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a0026f6:	9905      	ldr	r1, [sp, #20]
1a0026f8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a0026fa:	b941      	cbnz	r1, 1a00270e <prvProcessReceivedCommands+0x9e>
1a0026fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002700:	f383 8811 	msr	BASEPRI, r3
1a002704:	f3bf 8f6f 	isb	sy
1a002708:	f3bf 8f4f 	dsb	sy
1a00270c:	e7fe      	b.n	1a00270c <prvProcessReceivedCommands+0x9c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00270e:	4620      	mov	r0, r4
1a002710:	4419      	add	r1, r3
1a002712:	461a      	mov	r2, r3
1a002714:	f7ff fde0 	bl	1a0022d8 <prvInsertTimerInActiveList>
					break;
1a002718:	e005      	b.n	1a002726 <prvProcessReceivedCommands+0xb6>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00271a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00271e:	b913      	cbnz	r3, 1a002726 <prvProcessReceivedCommands+0xb6>
						{
							vPortFree( pxTimer );
1a002720:	4620      	mov	r0, r4
1a002722:	f7fe f9cf 	bl	1a000ac4 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002726:	4b05      	ldr	r3, [pc, #20]	; (1a00273c <prvProcessReceivedCommands+0xcc>)
1a002728:	6818      	ldr	r0, [r3, #0]
1a00272a:	a904      	add	r1, sp, #16
1a00272c:	2200      	movs	r2, #0
1a00272e:	f7fe fcd3 	bl	1a0010d8 <xQueueReceive>
1a002732:	2800      	cmp	r0, #0
1a002734:	d19f      	bne.n	1a002676 <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
1a002736:	b009      	add	sp, #36	; 0x24
1a002738:	bd30      	pop	{r4, r5, pc}
1a00273a:	bf00      	nop
1a00273c:	10002b74 	.word	0x10002b74

1a002740 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
1a002740:	b500      	push	{lr}
1a002742:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002744:	a801      	add	r0, sp, #4
1a002746:	f7ff fdb7 	bl	1a0022b8 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00274a:	9901      	ldr	r1, [sp, #4]
1a00274c:	f7ff ff56 	bl	1a0025fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
1a002750:	f7ff ff8e 	bl	1a002670 <prvProcessReceivedCommands>
	}
1a002754:	e7f6      	b.n	1a002744 <prvTimerTask+0x4>
1a002756:	bf00      	nop

1a002758 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002758:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00275a:	2300      	movs	r3, #0
1a00275c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a00275e:	4b0d      	ldr	r3, [pc, #52]	; (1a002794 <prvTaskExitError+0x3c>)
1a002760:	681b      	ldr	r3, [r3, #0]
1a002762:	f1b3 3fff 	cmp.w	r3, #4294967295
1a002766:	d008      	beq.n	1a00277a <prvTaskExitError+0x22>
1a002768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00276c:	f383 8811 	msr	BASEPRI, r3
1a002770:	f3bf 8f6f 	isb	sy
1a002774:	f3bf 8f4f 	dsb	sy
1a002778:	e7fe      	b.n	1a002778 <prvTaskExitError+0x20>
1a00277a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00277e:	f383 8811 	msr	BASEPRI, r3
1a002782:	f3bf 8f6f 	isb	sy
1a002786:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a00278a:	9b01      	ldr	r3, [sp, #4]
1a00278c:	2b00      	cmp	r3, #0
1a00278e:	d0fc      	beq.n	1a00278a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002790:	b002      	add	sp, #8
1a002792:	4770      	bx	lr
1a002794:	10000010 	.word	0x10000010

1a002798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002798:	4808      	ldr	r0, [pc, #32]	; (1a0027bc <prvPortStartFirstTask+0x24>)
1a00279a:	6800      	ldr	r0, [r0, #0]
1a00279c:	6800      	ldr	r0, [r0, #0]
1a00279e:	f380 8808 	msr	MSP, r0
1a0027a2:	f04f 0000 	mov.w	r0, #0
1a0027a6:	f380 8814 	msr	CONTROL, r0
1a0027aa:	b662      	cpsie	i
1a0027ac:	b661      	cpsie	f
1a0027ae:	f3bf 8f4f 	dsb	sy
1a0027b2:	f3bf 8f6f 	isb	sy
1a0027b6:	df00      	svc	0
1a0027b8:	bf00      	nop
1a0027ba:	0000      	.short	0x0000
1a0027bc:	e000ed08 	.word	0xe000ed08

1a0027c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0027c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0027d0 <vPortEnableVFP+0x10>
1a0027c4:	6801      	ldr	r1, [r0, #0]
1a0027c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0027ca:	6001      	str	r1, [r0, #0]
1a0027cc:	4770      	bx	lr
1a0027ce:	0000      	.short	0x0000
1a0027d0:	e000ed88 	.word	0xe000ed88

1a0027d4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0027d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a0027d8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0027dc:	f021 0101 	bic.w	r1, r1, #1
1a0027e0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0027e4:	4b05      	ldr	r3, [pc, #20]	; (1a0027fc <pxPortInitialiseStack+0x28>)
1a0027e6:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0027ea:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0027ee:	f06f 0302 	mvn.w	r3, #2
1a0027f2:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
1a0027f6:	3844      	subs	r0, #68	; 0x44
1a0027f8:	4770      	bx	lr
1a0027fa:	bf00      	nop
1a0027fc:	1a002759 	.word	0x1a002759

1a002800 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
1a002800:	4b07      	ldr	r3, [pc, #28]	; (1a002820 <pxCurrentTCBConst2>)
1a002802:	6819      	ldr	r1, [r3, #0]
1a002804:	6808      	ldr	r0, [r1, #0]
1a002806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00280a:	f380 8809 	msr	PSP, r0
1a00280e:	f3bf 8f6f 	isb	sy
1a002812:	f04f 0000 	mov.w	r0, #0
1a002816:	f380 8811 	msr	BASEPRI, r0
1a00281a:	4770      	bx	lr
1a00281c:	f3af 8000 	nop.w

1a002820 <pxCurrentTCBConst2>:
1a002820:	100029e8 	.word	0x100029e8
1a002824:	f3af 8000 	nop.w
1a002828:	f3af 8000 	nop.w
1a00282c:	f3af 8000 	nop.w

1a002830 <vPortEnterCritical>:
1a002830:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002834:	f383 8811 	msr	BASEPRI, r3
1a002838:	f3bf 8f6f 	isb	sy
1a00283c:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
1a002840:	4a0a      	ldr	r2, [pc, #40]	; (1a00286c <vPortEnterCritical+0x3c>)
1a002842:	6813      	ldr	r3, [r2, #0]
1a002844:	3301      	adds	r3, #1
1a002846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
1a002848:	2b01      	cmp	r3, #1
1a00284a:	d10d      	bne.n	1a002868 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a00284c:	4b08      	ldr	r3, [pc, #32]	; (1a002870 <vPortEnterCritical+0x40>)
1a00284e:	681b      	ldr	r3, [r3, #0]
1a002850:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002854:	d008      	beq.n	1a002868 <vPortEnterCritical+0x38>
1a002856:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00285a:	f383 8811 	msr	BASEPRI, r3
1a00285e:	f3bf 8f6f 	isb	sy
1a002862:	f3bf 8f4f 	dsb	sy
1a002866:	e7fe      	b.n	1a002866 <vPortEnterCritical+0x36>
1a002868:	4770      	bx	lr
1a00286a:	bf00      	nop
1a00286c:	10000010 	.word	0x10000010
1a002870:	e000ed04 	.word	0xe000ed04

1a002874 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
1a002874:	4b09      	ldr	r3, [pc, #36]	; (1a00289c <vPortExitCritical+0x28>)
1a002876:	681b      	ldr	r3, [r3, #0]
1a002878:	b943      	cbnz	r3, 1a00288c <vPortExitCritical+0x18>
1a00287a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00287e:	f383 8811 	msr	BASEPRI, r3
1a002882:	f3bf 8f6f 	isb	sy
1a002886:	f3bf 8f4f 	dsb	sy
1a00288a:	e7fe      	b.n	1a00288a <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a00288c:	3b01      	subs	r3, #1
1a00288e:	4a03      	ldr	r2, [pc, #12]	; (1a00289c <vPortExitCritical+0x28>)
1a002890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002892:	b90b      	cbnz	r3, 1a002898 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a002894:	f383 8811 	msr	BASEPRI, r3
1a002898:	4770      	bx	lr
1a00289a:	bf00      	nop
1a00289c:	10000010 	.word	0x10000010

1a0028a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
1a0028a0:	f3ef 8009 	mrs	r0, PSP
1a0028a4:	f3bf 8f6f 	isb	sy
1a0028a8:	4b15      	ldr	r3, [pc, #84]	; (1a002900 <pxCurrentTCBConst>)
1a0028aa:	681a      	ldr	r2, [r3, #0]
1a0028ac:	f01e 0f10 	tst.w	lr, #16
1a0028b0:	bf08      	it	eq
1a0028b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0028b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0028ba:	6010      	str	r0, [r2, #0]
1a0028bc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0028c0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0028c4:	f380 8811 	msr	BASEPRI, r0
1a0028c8:	f3bf 8f4f 	dsb	sy
1a0028cc:	f3bf 8f6f 	isb	sy
1a0028d0:	f7ff f9a6 	bl	1a001c20 <vTaskSwitchContext>
1a0028d4:	f04f 0000 	mov.w	r0, #0
1a0028d8:	f380 8811 	msr	BASEPRI, r0
1a0028dc:	bc09      	pop	{r0, r3}
1a0028de:	6819      	ldr	r1, [r3, #0]
1a0028e0:	6808      	ldr	r0, [r1, #0]
1a0028e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0028e6:	f01e 0f10 	tst.w	lr, #16
1a0028ea:	bf08      	it	eq
1a0028ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0028f0:	f380 8809 	msr	PSP, r0
1a0028f4:	f3bf 8f6f 	isb	sy
1a0028f8:	4770      	bx	lr
1a0028fa:	bf00      	nop
1a0028fc:	f3af 8000 	nop.w

1a002900 <pxCurrentTCBConst>:
1a002900:	100029e8 	.word	0x100029e8
1a002904:	f3af 8000 	nop.w
1a002908:	f3af 8000 	nop.w
1a00290c:	f3af 8000 	nop.w

1a002910 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
1a002910:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a002912:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002916:	f383 8811 	msr	BASEPRI, r3
1a00291a:	f3bf 8f6f 	isb	sy
1a00291e:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
1a002922:	f7ff f847 	bl	1a0019b4 <xTaskIncrementTick>
1a002926:	b118      	cbz	r0, 1a002930 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00292c:	4b02      	ldr	r3, [pc, #8]	; (1a002938 <SysTick_Handler+0x28>)
1a00292e:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a002930:	2300      	movs	r3, #0
1a002932:	f383 8811 	msr	BASEPRI, r3
1a002936:	bd08      	pop	{r3, pc}
1a002938:	e000ed04 	.word	0xe000ed04

1a00293c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a00293c:	4a08      	ldr	r2, [pc, #32]	; (1a002960 <vPortSetupTimerInterrupt+0x24>)
1a00293e:	2300      	movs	r3, #0
1a002940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002942:	4908      	ldr	r1, [pc, #32]	; (1a002964 <vPortSetupTimerInterrupt+0x28>)
1a002944:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002946:	4b08      	ldr	r3, [pc, #32]	; (1a002968 <vPortSetupTimerInterrupt+0x2c>)
1a002948:	681b      	ldr	r3, [r3, #0]
1a00294a:	4908      	ldr	r1, [pc, #32]	; (1a00296c <vPortSetupTimerInterrupt+0x30>)
1a00294c:	fba1 1303 	umull	r1, r3, r1, r3
1a002950:	099b      	lsrs	r3, r3, #6
1a002952:	3b01      	subs	r3, #1
1a002954:	4906      	ldr	r1, [pc, #24]	; (1a002970 <vPortSetupTimerInterrupt+0x34>)
1a002956:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002958:	2307      	movs	r3, #7
1a00295a:	6013      	str	r3, [r2, #0]
1a00295c:	4770      	bx	lr
1a00295e:	bf00      	nop
1a002960:	e000e010 	.word	0xe000e010
1a002964:	e000e018 	.word	0xe000e018
1a002968:	10002f40 	.word	0x10002f40
1a00296c:	10624dd3 	.word	0x10624dd3
1a002970:	e000e014 	.word	0xe000e014

1a002974 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002974:	4b40      	ldr	r3, [pc, #256]	; (1a002a78 <xPortStartScheduler+0x104>)
1a002976:	681a      	ldr	r2, [r3, #0]
1a002978:	4b40      	ldr	r3, [pc, #256]	; (1a002a7c <xPortStartScheduler+0x108>)
1a00297a:	429a      	cmp	r2, r3
1a00297c:	d108      	bne.n	1a002990 <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00297e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002982:	f383 8811 	msr	BASEPRI, r3
1a002986:	f3bf 8f6f 	isb	sy
1a00298a:	f3bf 8f4f 	dsb	sy
1a00298e:	e7fe      	b.n	1a00298e <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002990:	4b39      	ldr	r3, [pc, #228]	; (1a002a78 <xPortStartScheduler+0x104>)
1a002992:	681a      	ldr	r2, [r3, #0]
1a002994:	4b3a      	ldr	r3, [pc, #232]	; (1a002a80 <xPortStartScheduler+0x10c>)
1a002996:	429a      	cmp	r2, r3
1a002998:	d108      	bne.n	1a0029ac <xPortStartScheduler+0x38>
1a00299a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00299e:	f383 8811 	msr	BASEPRI, r3
1a0029a2:	f3bf 8f6f 	isb	sy
1a0029a6:	f3bf 8f4f 	dsb	sy
1a0029aa:	e7fe      	b.n	1a0029aa <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
1a0029ac:	b510      	push	{r4, lr}
1a0029ae:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0029b0:	4b34      	ldr	r3, [pc, #208]	; (1a002a84 <xPortStartScheduler+0x110>)
1a0029b2:	781a      	ldrb	r2, [r3, #0]
1a0029b4:	b2d2      	uxtb	r2, r2
1a0029b6:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0029b8:	22ff      	movs	r2, #255	; 0xff
1a0029ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0029bc:	781b      	ldrb	r3, [r3, #0]
1a0029be:	b2db      	uxtb	r3, r3
1a0029c0:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0029c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0029c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0029cc:	4a2e      	ldr	r2, [pc, #184]	; (1a002a88 <xPortStartScheduler+0x114>)
1a0029ce:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0029d0:	2207      	movs	r2, #7
1a0029d2:	4b2e      	ldr	r3, [pc, #184]	; (1a002a8c <xPortStartScheduler+0x118>)
1a0029d4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0029d6:	e009      	b.n	1a0029ec <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
1a0029d8:	4a2c      	ldr	r2, [pc, #176]	; (1a002a8c <xPortStartScheduler+0x118>)
1a0029da:	6813      	ldr	r3, [r2, #0]
1a0029dc:	3b01      	subs	r3, #1
1a0029de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0029e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0029e4:	005b      	lsls	r3, r3, #1
1a0029e6:	b2db      	uxtb	r3, r3
1a0029e8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0029ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0029f0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0029f4:	d1f0      	bne.n	1a0029d8 <xPortStartScheduler+0x64>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0029f6:	4b25      	ldr	r3, [pc, #148]	; (1a002a8c <xPortStartScheduler+0x118>)
1a0029f8:	681b      	ldr	r3, [r3, #0]
1a0029fa:	f1c3 0207 	rsb	r2, r3, #7
1a0029fe:	2a03      	cmp	r2, #3
1a002a00:	d008      	beq.n	1a002a14 <xPortStartScheduler+0xa0>
1a002a02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a06:	f383 8811 	msr	BASEPRI, r3
1a002a0a:	f3bf 8f6f 	isb	sy
1a002a0e:	f3bf 8f4f 	dsb	sy
1a002a12:	e7fe      	b.n	1a002a12 <xPortStartScheduler+0x9e>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
1a002a14:	2a03      	cmp	r2, #3
1a002a16:	d008      	beq.n	1a002a2a <xPortStartScheduler+0xb6>
1a002a18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a1c:	f383 8811 	msr	BASEPRI, r3
1a002a20:	f3bf 8f6f 	isb	sy
1a002a24:	f3bf 8f4f 	dsb	sy
1a002a28:	e7fe      	b.n	1a002a28 <xPortStartScheduler+0xb4>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002a2a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002a30:	4a16      	ldr	r2, [pc, #88]	; (1a002a8c <xPortStartScheduler+0x118>)
1a002a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002a34:	9b01      	ldr	r3, [sp, #4]
1a002a36:	b2db      	uxtb	r3, r3
1a002a38:	4a12      	ldr	r2, [pc, #72]	; (1a002a84 <xPortStartScheduler+0x110>)
1a002a3a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002a3c:	4b14      	ldr	r3, [pc, #80]	; (1a002a90 <xPortStartScheduler+0x11c>)
1a002a3e:	681a      	ldr	r2, [r3, #0]
1a002a40:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002a46:	681a      	ldr	r2, [r3, #0]
1a002a48:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002a4c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
1a002a4e:	f7ff ff75 	bl	1a00293c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
1a002a52:	2400      	movs	r4, #0
1a002a54:	4b0f      	ldr	r3, [pc, #60]	; (1a002a94 <xPortStartScheduler+0x120>)
1a002a56:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
1a002a58:	f7ff feb2 	bl	1a0027c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002a5c:	4a0e      	ldr	r2, [pc, #56]	; (1a002a98 <xPortStartScheduler+0x124>)
1a002a5e:	6813      	ldr	r3, [r2, #0]
1a002a60:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002a64:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
1a002a66:	f7ff fe97 	bl	1a002798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
1a002a6a:	f7ff f8d9 	bl	1a001c20 <vTaskSwitchContext>
	prvTaskExitError();
1a002a6e:	f7ff fe73 	bl	1a002758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
1a002a72:	4620      	mov	r0, r4
1a002a74:	b002      	add	sp, #8
1a002a76:	bd10      	pop	{r4, pc}
1a002a78:	e000ed00 	.word	0xe000ed00
1a002a7c:	410fc271 	.word	0x410fc271
1a002a80:	410fc270 	.word	0x410fc270
1a002a84:	e000e400 	.word	0xe000e400
1a002a88:	10002b80 	.word	0x10002b80
1a002a8c:	10002b84 	.word	0x10002b84
1a002a90:	e000ed20 	.word	0xe000ed20
1a002a94:	10000010 	.word	0x10000010
1a002a98:	e000ef34 	.word	0xe000ef34

1a002a9c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002a9c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002aa0:	2b0f      	cmp	r3, #15
1a002aa2:	d90f      	bls.n	1a002ac4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002aa4:	4a10      	ldr	r2, [pc, #64]	; (1a002ae8 <vPortValidateInterruptPriority+0x4c>)
1a002aa6:	5c9b      	ldrb	r3, [r3, r2]
1a002aa8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002aaa:	4a10      	ldr	r2, [pc, #64]	; (1a002aec <vPortValidateInterruptPriority+0x50>)
1a002aac:	7812      	ldrb	r2, [r2, #0]
1a002aae:	4293      	cmp	r3, r2
1a002ab0:	d208      	bcs.n	1a002ac4 <vPortValidateInterruptPriority+0x28>
1a002ab2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ab6:	f383 8811 	msr	BASEPRI, r3
1a002aba:	f3bf 8f6f 	isb	sy
1a002abe:	f3bf 8f4f 	dsb	sy
1a002ac2:	e7fe      	b.n	1a002ac2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002ac4:	4b0a      	ldr	r3, [pc, #40]	; (1a002af0 <vPortValidateInterruptPriority+0x54>)
1a002ac6:	681b      	ldr	r3, [r3, #0]
1a002ac8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002acc:	4a09      	ldr	r2, [pc, #36]	; (1a002af4 <vPortValidateInterruptPriority+0x58>)
1a002ace:	6812      	ldr	r2, [r2, #0]
1a002ad0:	4293      	cmp	r3, r2
1a002ad2:	d908      	bls.n	1a002ae6 <vPortValidateInterruptPriority+0x4a>
1a002ad4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ad8:	f383 8811 	msr	BASEPRI, r3
1a002adc:	f3bf 8f6f 	isb	sy
1a002ae0:	f3bf 8f4f 	dsb	sy
1a002ae4:	e7fe      	b.n	1a002ae4 <vPortValidateInterruptPriority+0x48>
1a002ae6:	4770      	bx	lr
1a002ae8:	e000e3f0 	.word	0xe000e3f0
1a002aec:	10002b80 	.word	0x10002b80
1a002af0:	e000ed0c 	.word	0xe000ed0c
1a002af4:	10002b84 	.word	0x10002b84

1a002af8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002af8:	4b04      	ldr	r3, [pc, #16]	; (1a002b0c <cyclesCounterInit+0x14>)
1a002afa:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a002afc:	4b04      	ldr	r3, [pc, #16]	; (1a002b10 <cyclesCounterInit+0x18>)
1a002afe:	681a      	ldr	r2, [r3, #0]
1a002b00:	6813      	ldr	r3, [r2, #0]
1a002b02:	f043 0301 	orr.w	r3, r3, #1
1a002b06:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002b08:	2001      	movs	r0, #1
1a002b0a:	4770      	bx	lr
1a002b0c:	10000018 	.word	0x10000018
1a002b10:	10000014 	.word	0x10000014

1a002b14 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002b14:	2301      	movs	r3, #1
1a002b16:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a002b18:	4a01      	ldr	r2, [pc, #4]	; (1a002b20 <clearInterrupt+0xc>)
1a002b1a:	6253      	str	r3, [r2, #36]	; 0x24
1a002b1c:	4770      	bx	lr
1a002b1e:	bf00      	nop
1a002b20:	40087000 	.word	0x40087000

1a002b24 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a002b24:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002b26:	4b13      	ldr	r3, [pc, #76]	; (1a002b74 <serveInterrupt+0x50>)
1a002b28:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a002b2a:	4a13      	ldr	r2, [pc, #76]	; (1a002b78 <serveInterrupt+0x54>)
1a002b2c:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a002b2e:	2401      	movs	r4, #1
1a002b30:	4084      	lsls	r4, r0
1a002b32:	4214      	tst	r4, r2
1a002b34:	d00a      	beq.n	1a002b4c <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a002b36:	4a11      	ldr	r2, [pc, #68]	; (1a002b7c <serveInterrupt+0x58>)
1a002b38:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002b3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a002b3e:	00db      	lsls	r3, r3, #3
1a002b40:	490f      	ldr	r1, [pc, #60]	; (1a002b80 <serveInterrupt+0x5c>)
1a002b42:	440b      	add	r3, r1
1a002b44:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a002b46:	4b0c      	ldr	r3, [pc, #48]	; (1a002b78 <serveInterrupt+0x54>)
1a002b48:	61dc      	str	r4, [r3, #28]
1a002b4a:	e00f      	b.n	1a002b6c <serveInterrupt+0x48>
1a002b4c:	4a0b      	ldr	r2, [pc, #44]	; (1a002b7c <serveInterrupt+0x58>)
1a002b4e:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002b50:	4d0b      	ldr	r5, [pc, #44]	; (1a002b80 <serveInterrupt+0x5c>)
1a002b52:	005e      	lsls	r6, r3, #1
1a002b54:	18f2      	adds	r2, r6, r3
1a002b56:	00d2      	lsls	r2, r2, #3
1a002b58:	442a      	add	r2, r5
1a002b5a:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a002b5c:	6852      	ldr	r2, [r2, #4]
1a002b5e:	1a89      	subs	r1, r1, r2
1a002b60:	4433      	add	r3, r6
1a002b62:	00db      	lsls	r3, r3, #3
1a002b64:	442b      	add	r3, r5
1a002b66:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a002b68:	4b03      	ldr	r3, [pc, #12]	; (1a002b78 <serveInterrupt+0x54>)
1a002b6a:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002b6c:	f7ff ffd2 	bl	1a002b14 <clearInterrupt>
1a002b70:	bd70      	pop	{r4, r5, r6, pc}
1a002b72:	bf00      	nop
1a002b74:	1a005060 	.word	0x1a005060
1a002b78:	40087000 	.word	0x40087000
1a002b7c:	40084000 	.word	0x40084000
1a002b80:	1000001c 	.word	0x1000001c

1a002b84 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a002b84:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a002b86:	2000      	movs	r0, #0
1a002b88:	f7ff ffcc 	bl	1a002b24 <serveInterrupt>
1a002b8c:	bd08      	pop	{r3, pc}
1a002b8e:	bf00      	nop

1a002b90 <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a002b90:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a002b92:	2001      	movs	r0, #1
1a002b94:	f7ff ffc6 	bl	1a002b24 <serveInterrupt>
1a002b98:	bd08      	pop	{r3, pc}
1a002b9a:	bf00      	nop

1a002b9c <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a002b9c:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a002b9e:	2002      	movs	r0, #2
1a002ba0:	f7ff ffc0 	bl	1a002b24 <serveInterrupt>
1a002ba4:	bd08      	pop	{r3, pc}
1a002ba6:	bf00      	nop

1a002ba8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002ba8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002baa:	4d09      	ldr	r5, [pc, #36]	; (1a002bd0 <gpioObtainPinInit+0x28>)
1a002bac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002bb0:	182c      	adds	r4, r5, r0
1a002bb2:	5c28      	ldrb	r0, [r5, r0]
1a002bb4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002bb6:	7861      	ldrb	r1, [r4, #1]
1a002bb8:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002bba:	78a2      	ldrb	r2, [r4, #2]
1a002bbc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002bbe:	78e2      	ldrb	r2, [r4, #3]
1a002bc0:	9b02      	ldr	r3, [sp, #8]
1a002bc2:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002bc4:	7922      	ldrb	r2, [r4, #4]
1a002bc6:	9b03      	ldr	r3, [sp, #12]
1a002bc8:	701a      	strb	r2, [r3, #0]
}
1a002bca:	bc30      	pop	{r4, r5}
1a002bcc:	4770      	bx	lr
1a002bce:	bf00      	nop
1a002bd0:	1a005064 	.word	0x1a005064

1a002bd4 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002bd4:	b570      	push	{r4, r5, r6, lr}
1a002bd6:	b084      	sub	sp, #16
1a002bd8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002bda:	2300      	movs	r3, #0
1a002bdc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002be0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002be4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002be8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002bec:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002bf0:	ab03      	add	r3, sp, #12
1a002bf2:	9300      	str	r3, [sp, #0]
1a002bf4:	f10d 030b 	add.w	r3, sp, #11
1a002bf8:	9301      	str	r3, [sp, #4]
1a002bfa:	f10d 010f 	add.w	r1, sp, #15
1a002bfe:	f10d 020e 	add.w	r2, sp, #14
1a002c02:	f10d 030d 	add.w	r3, sp, #13
1a002c06:	f7ff ffcf 	bl	1a002ba8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002c0a:	2c05      	cmp	r4, #5
1a002c0c:	f200 80a8 	bhi.w	1a002d60 <gpioInit+0x18c>
1a002c10:	e8df f004 	tbb	[pc, r4]
1a002c14:	46278408 	.word	0x46278408
1a002c18:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002c1a:	4853      	ldr	r0, [pc, #332]	; (1a002d68 <gpioInit+0x194>)
1a002c1c:	f001 f9c8 	bl	1a003fb0 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a002c20:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a002c22:	e09e      	b.n	1a002d62 <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a002c24:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002c28:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002c2c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002c30:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002c34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002c38:	494c      	ldr	r1, [pc, #304]	; (1a002d6c <gpioInit+0x198>)
1a002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002c3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002c42:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002c46:	2001      	movs	r0, #1
1a002c48:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a002c4c:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002c54:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002c58:	ea22 0204 	bic.w	r2, r2, r4
1a002c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002c60:	e07f      	b.n	1a002d62 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a002c62:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002c66:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002c6a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002c6e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002c72:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002c76:	493d      	ldr	r1, [pc, #244]	; (1a002d6c <gpioInit+0x198>)
1a002c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002c7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002c80:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002c84:	2001      	movs	r0, #1
1a002c86:	fa00 f402 	lsl.w	r4, r0, r2
1a002c8a:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002c92:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002c96:	ea22 0204 	bic.w	r2, r2, r4
1a002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002c9e:	e060      	b.n	1a002d62 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a002ca0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002ca4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002ca8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002cac:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002cb0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002cb4:	492d      	ldr	r1, [pc, #180]	; (1a002d6c <gpioInit+0x198>)
1a002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002cba:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002cbe:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002cc2:	2001      	movs	r0, #1
1a002cc4:	fa00 f402 	lsl.w	r4, r0, r2
1a002cc8:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002cd0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002cd4:	ea22 0204 	bic.w	r2, r2, r4
1a002cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002cdc:	e041      	b.n	1a002d62 <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a002cde:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002ce2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002ce6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002cea:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002cee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002cf2:	491e      	ldr	r1, [pc, #120]	; (1a002d6c <gpioInit+0x198>)
1a002cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002cf8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002cfc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002d00:	2001      	movs	r0, #1
1a002d02:	fa00 f402 	lsl.w	r4, r0, r2
1a002d06:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002d0e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002d12:	ea22 0204 	bic.w	r2, r2, r4
1a002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002d1a:	e022      	b.n	1a002d62 <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a002d1c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002d20:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002d24:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002d28:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002d2c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002d30:	490e      	ldr	r1, [pc, #56]	; (1a002d6c <gpioInit+0x198>)
1a002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002d36:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002d3a:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a002d3e:	b25a      	sxtb	r2, r3
1a002d40:	2001      	movs	r0, #1
1a002d42:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a002d46:	4a08      	ldr	r2, [pc, #32]	; (1a002d68 <gpioInit+0x194>)
1a002d48:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002d4c:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a002d50:	4331      	orrs	r1, r6
1a002d52:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a002d56:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002d5a:	2100      	movs	r1, #0
1a002d5c:	54d1      	strb	r1, [r2, r3]
1a002d5e:	e000      	b.n	1a002d62 <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a002d60:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a002d62:	b004      	add	sp, #16
1a002d64:	bd70      	pop	{r4, r5, r6, pc}
1a002d66:	bf00      	nop
1a002d68:	400f4000 	.word	0x400f4000
1a002d6c:	40086000 	.word	0x40086000

1a002d70 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002d70:	b510      	push	{r4, lr}
1a002d72:	b084      	sub	sp, #16
1a002d74:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002d76:	2300      	movs	r3, #0
1a002d78:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002d7c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002d80:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002d84:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002d88:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002d8c:	ab03      	add	r3, sp, #12
1a002d8e:	9300      	str	r3, [sp, #0]
1a002d90:	f10d 030b 	add.w	r3, sp, #11
1a002d94:	9301      	str	r3, [sp, #4]
1a002d96:	f10d 010f 	add.w	r1, sp, #15
1a002d9a:	f10d 020e 	add.w	r2, sp, #14
1a002d9e:	f10d 030d 	add.w	r3, sp, #13
1a002da2:	f7ff ff01 	bl	1a002ba8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002da6:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a002daa:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a002dae:	3400      	adds	r4, #0
1a002db0:	bf18      	it	ne
1a002db2:	2401      	movne	r4, #1
1a002db4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002db8:	4a02      	ldr	r2, [pc, #8]	; (1a002dc4 <gpioWrite+0x54>)
1a002dba:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a002dbc:	2001      	movs	r0, #1
1a002dbe:	b004      	add	sp, #16
1a002dc0:	bd10      	pop	{r4, pc}
1a002dc2:	bf00      	nop
1a002dc4:	400f4000 	.word	0x400f4000

1a002dc8 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002dc8:	b500      	push	{lr}
1a002dca:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002dcc:	2300      	movs	r3, #0
1a002dce:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002dd2:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002dd6:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002dda:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002dde:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002de2:	ab03      	add	r3, sp, #12
1a002de4:	9300      	str	r3, [sp, #0]
1a002de6:	f10d 030b 	add.w	r3, sp, #11
1a002dea:	9301      	str	r3, [sp, #4]
1a002dec:	f10d 010f 	add.w	r1, sp, #15
1a002df0:	f10d 020e 	add.w	r2, sp, #14
1a002df4:	f10d 030d 	add.w	r3, sp, #13
1a002df8:	f7ff fed6 	bl	1a002ba8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002dfc:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a002e00:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a002e04:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002e08:	4a04      	ldr	r2, [pc, #16]	; (1a002e1c <gpioRead+0x54>)
1a002e0a:	5cd3      	ldrb	r3, [r2, r3]
1a002e0c:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a002e10:	bf14      	ite	ne
1a002e12:	2001      	movne	r0, #1
1a002e14:	2000      	moveq	r0, #0
1a002e16:	b005      	add	sp, #20
1a002e18:	f85d fb04 	ldr.w	pc, [sp], #4
1a002e1c:	400f4000 	.word	0x400f4000

1a002e20 <gpioToggle>:
   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin )
{
1a002e20:	b510      	push	{r4, lr}
1a002e22:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a002e24:	f7ff ffd0 	bl	1a002dc8 <gpioRead>
1a002e28:	fab0 f180 	clz	r1, r0
1a002e2c:	0949      	lsrs	r1, r1, #5
1a002e2e:	4620      	mov	r0, r4
1a002e30:	f7ff ff9e 	bl	1a002d70 <gpioWrite>
}
1a002e34:	bd10      	pop	{r4, pc}
1a002e36:	bf00      	nop

1a002e38 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002e38:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a002e3a:	4908      	ldr	r1, [pc, #32]	; (1a002e5c <tickerCallback+0x24>)
1a002e3c:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002e40:	3201      	adds	r2, #1
1a002e42:	f143 0300 	adc.w	r3, r3, #0
1a002e46:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002e4a:	4b05      	ldr	r3, [pc, #20]	; (1a002e60 <tickerCallback+0x28>)
1a002e4c:	681b      	ldr	r3, [r3, #0]
1a002e4e:	b123      	cbz	r3, 1a002e5a <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a002e50:	4b03      	ldr	r3, [pc, #12]	; (1a002e60 <tickerCallback+0x28>)
1a002e52:	681b      	ldr	r3, [r3, #0]
1a002e54:	4a03      	ldr	r2, [pc, #12]	; (1a002e64 <tickerCallback+0x2c>)
1a002e56:	6810      	ldr	r0, [r2, #0]
1a002e58:	4798      	blx	r3
1a002e5a:	bd08      	pop	{r3, pc}
1a002e5c:	10002f30 	.word	0x10002f30
1a002e60:	10002b88 	.word	0x10002b88
1a002e64:	10002bbc 	.word	0x10002bbc

1a002e68 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a002e68:	b510      	push	{r4, lr}
1a002e6a:	b082      	sub	sp, #8
1a002e6c:	4601      	mov	r1, r0
      }
      return ret_val;
   #else
      #ifdef USE_FREERTOS
         static StaticTimer_t tickerObject;
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a002e6e:	4b0e      	ldr	r3, [pc, #56]	; (1a002ea8 <tickInit+0x40>)
1a002e70:	9300      	str	r3, [sp, #0]
1a002e72:	4b0e      	ldr	r3, [pc, #56]	; (1a002eac <tickInit+0x44>)
1a002e74:	9301      	str	r3, [sp, #4]
1a002e76:	480e      	ldr	r0, [pc, #56]	; (1a002eb0 <tickInit+0x48>)
1a002e78:	2201      	movs	r2, #1
1a002e7a:	2300      	movs	r3, #0
1a002e7c:	f7ff fade 	bl	1a00243c <xTimerCreateStatic>
                                               pdTRUE,
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
1a002e80:	b170      	cbz	r0, 1a002ea0 <tickInit+0x38>
1a002e82:	4604      	mov	r4, r0
            return 0;
         return xTimerStart(h, 0) == pdPASS;
1a002e84:	f7fe fd90 	bl	1a0019a8 <xTaskGetTickCount>
1a002e88:	4602      	mov	r2, r0
1a002e8a:	2300      	movs	r3, #0
1a002e8c:	9300      	str	r3, [sp, #0]
1a002e8e:	4620      	mov	r0, r4
1a002e90:	2101      	movs	r1, #1
1a002e92:	f7ff fafb 	bl	1a00248c <xTimerGenericCommand>
1a002e96:	2801      	cmp	r0, #1
1a002e98:	bf14      	ite	ne
1a002e9a:	2000      	movne	r0, #0
1a002e9c:	2001      	moveq	r0, #1
1a002e9e:	e000      	b.n	1a002ea2 <tickInit+0x3a>
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
            return 0;
1a002ea0:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a002ea2:	b002      	add	sp, #8
1a002ea4:	bd10      	pop	{r4, pc}
1a002ea6:	bf00      	nop
1a002ea8:	1a002e39 	.word	0x1a002e39
1a002eac:	10002b8c 	.word	0x10002b8c
1a002eb0:	1a00519c 	.word	0x1a00519c

1a002eb4 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a002eb4:	b570      	push	{r4, r5, r6, lr}
1a002eb6:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002eb8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a002ebc:	009b      	lsls	r3, r3, #2
1a002ebe:	4a21      	ldr	r2, [pc, #132]	; (1a002f44 <uartProcessIRQ+0x90>)
1a002ec0:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002ec2:	6975      	ldr	r5, [r6, #20]
1a002ec4:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a002ec6:	f015 0f01 	tst.w	r5, #1
1a002eca:	d019      	beq.n	1a002f00 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a002ecc:	b930      	cbnz	r0, 1a002edc <uartProcessIRQ+0x28>
1a002ece:	4b1e      	ldr	r3, [pc, #120]	; (1a002f48 <uartProcessIRQ+0x94>)
1a002ed0:	681b      	ldr	r3, [r3, #0]
1a002ed2:	b11b      	cbz	r3, 1a002edc <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a002ed4:	4b1c      	ldr	r3, [pc, #112]	; (1a002f48 <uartProcessIRQ+0x94>)
1a002ed6:	681b      	ldr	r3, [r3, #0]
1a002ed8:	2000      	movs	r0, #0
1a002eda:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002edc:	2c03      	cmp	r4, #3
1a002ede:	d106      	bne.n	1a002eee <uartProcessIRQ+0x3a>
1a002ee0:	4b1a      	ldr	r3, [pc, #104]	; (1a002f4c <uartProcessIRQ+0x98>)
1a002ee2:	681b      	ldr	r3, [r3, #0]
1a002ee4:	b11b      	cbz	r3, 1a002eee <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a002ee6:	4b19      	ldr	r3, [pc, #100]	; (1a002f4c <uartProcessIRQ+0x98>)
1a002ee8:	681b      	ldr	r3, [r3, #0]
1a002eea:	2000      	movs	r0, #0
1a002eec:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002eee:	2c05      	cmp	r4, #5
1a002ef0:	d106      	bne.n	1a002f00 <uartProcessIRQ+0x4c>
1a002ef2:	4b17      	ldr	r3, [pc, #92]	; (1a002f50 <uartProcessIRQ+0x9c>)
1a002ef4:	681b      	ldr	r3, [r3, #0]
1a002ef6:	b11b      	cbz	r3, 1a002f00 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a002ef8:	4b15      	ldr	r3, [pc, #84]	; (1a002f50 <uartProcessIRQ+0x9c>)
1a002efa:	681b      	ldr	r3, [r3, #0]
1a002efc:	2000      	movs	r0, #0
1a002efe:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a002f00:	f015 0f20 	tst.w	r5, #32
1a002f04:	d01d      	beq.n	1a002f42 <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a002f06:	6873      	ldr	r3, [r6, #4]
1a002f08:	f013 0f02 	tst.w	r3, #2
1a002f0c:	d019      	beq.n	1a002f42 <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a002f0e:	b934      	cbnz	r4, 1a002f1e <uartProcessIRQ+0x6a>
1a002f10:	4b10      	ldr	r3, [pc, #64]	; (1a002f54 <uartProcessIRQ+0xa0>)
1a002f12:	681b      	ldr	r3, [r3, #0]
1a002f14:	b11b      	cbz	r3, 1a002f1e <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a002f16:	4b0f      	ldr	r3, [pc, #60]	; (1a002f54 <uartProcessIRQ+0xa0>)
1a002f18:	681b      	ldr	r3, [r3, #0]
1a002f1a:	2000      	movs	r0, #0
1a002f1c:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002f1e:	2c03      	cmp	r4, #3
1a002f20:	d106      	bne.n	1a002f30 <uartProcessIRQ+0x7c>
1a002f22:	4b0d      	ldr	r3, [pc, #52]	; (1a002f58 <uartProcessIRQ+0xa4>)
1a002f24:	681b      	ldr	r3, [r3, #0]
1a002f26:	b11b      	cbz	r3, 1a002f30 <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a002f28:	4b0b      	ldr	r3, [pc, #44]	; (1a002f58 <uartProcessIRQ+0xa4>)
1a002f2a:	681b      	ldr	r3, [r3, #0]
1a002f2c:	2000      	movs	r0, #0
1a002f2e:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002f30:	2c05      	cmp	r4, #5
1a002f32:	d106      	bne.n	1a002f42 <uartProcessIRQ+0x8e>
1a002f34:	4b09      	ldr	r3, [pc, #36]	; (1a002f5c <uartProcessIRQ+0xa8>)
1a002f36:	681b      	ldr	r3, [r3, #0]
1a002f38:	b11b      	cbz	r3, 1a002f42 <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a002f3a:	4b08      	ldr	r3, [pc, #32]	; (1a002f5c <uartProcessIRQ+0xa8>)
1a002f3c:	681b      	ldr	r3, [r3, #0]
1a002f3e:	2000      	movs	r0, #0
1a002f40:	4798      	blx	r3
1a002f42:	bd70      	pop	{r4, r5, r6, pc}
1a002f44:	1a0051a8 	.word	0x1a0051a8
1a002f48:	10002bc0 	.word	0x10002bc0
1a002f4c:	10002bd0 	.word	0x10002bd0
1a002f50:	10002bd4 	.word	0x10002bd4
1a002f54:	10002bc4 	.word	0x10002bc4
1a002f58:	10002bc8 	.word	0x10002bc8
1a002f5c:	10002bcc 	.word	0x10002bcc

1a002f60 <uartRxInterruptSet>:

//-------------------------------------------------------------

// UART RX Interrupt Enable/Disable
void uartRxInterruptSet( uartMap_t uart, bool_t enable )
{
1a002f60:	b410      	push	{r4}
   if( enable ) {
1a002f62:	b1b9      	cbz	r1, 1a002f94 <uartRxInterruptSet+0x34>
      // Enable UART Receiver Buffer Register Interrupt
      Chip_UART_IntEnable( lpcUarts[uart].uartAddr, UART_IER_RBRINT );
1a002f64:	4a19      	ldr	r2, [pc, #100]	; (1a002fcc <uartRxInterruptSet+0x6c>)
1a002f66:	0041      	lsls	r1, r0, #1
1a002f68:	180b      	adds	r3, r1, r0
1a002f6a:	009b      	lsls	r3, r3, #2
1a002f6c:	58d4      	ldr	r4, [r2, r3]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a002f6e:	6863      	ldr	r3, [r4, #4]
1a002f70:	f043 0301 	orr.w	r3, r3, #1
1a002f74:	6063      	str	r3, [r4, #4]
      // Enable UART line status interrupt. LPC43xx User manual page 1118
      //NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 6 );
      // Enable Interrupt for UART channel
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a002f76:	4408      	add	r0, r1
1a002f78:	0080      	lsls	r0, r0, #2
1a002f7a:	4410      	add	r0, r2
1a002f7c:	7a83      	ldrb	r3, [r0, #10]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a002f7e:	b25a      	sxtb	r2, r3
1a002f80:	0952      	lsrs	r2, r2, #5
1a002f82:	f003 031f 	and.w	r3, r3, #31
1a002f86:	2101      	movs	r1, #1
1a002f88:	fa01 f303 	lsl.w	r3, r1, r3
1a002f8c:	4910      	ldr	r1, [pc, #64]	; (1a002fd0 <uartRxInterruptSet+0x70>)
1a002f8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a002f92:	e017      	b.n	1a002fc4 <uartRxInterruptSet+0x64>
   } else {
      // Disable UART Receiver Buffer Register Interrupt
      Chip_UART_IntDisable( lpcUarts[uart].uartAddr, UART_IER_RBRINT );
1a002f94:	4a0d      	ldr	r2, [pc, #52]	; (1a002fcc <uartRxInterruptSet+0x6c>)
1a002f96:	0041      	lsls	r1, r0, #1
1a002f98:	180b      	adds	r3, r1, r0
1a002f9a:	009b      	lsls	r3, r3, #2
1a002f9c:	58d4      	ldr	r4, [r2, r3]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a002f9e:	6863      	ldr	r3, [r4, #4]
1a002fa0:	f023 0301 	bic.w	r3, r3, #1
1a002fa4:	6063      	str	r3, [r4, #4]
      // Disable Interrupt for UART channel
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a002fa6:	4408      	add	r0, r1
1a002fa8:	0080      	lsls	r0, r0, #2
1a002faa:	4410      	add	r0, r2
1a002fac:	7a82      	ldrb	r2, [r0, #10]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1a002fae:	b253      	sxtb	r3, r2
1a002fb0:	095b      	lsrs	r3, r3, #5
1a002fb2:	f002 021f 	and.w	r2, r2, #31
1a002fb6:	2101      	movs	r1, #1
1a002fb8:	fa01 f202 	lsl.w	r2, r1, r2
1a002fbc:	3320      	adds	r3, #32
1a002fbe:	4904      	ldr	r1, [pc, #16]	; (1a002fd0 <uartRxInterruptSet+0x70>)
1a002fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   }
}
1a002fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002fc8:	4770      	bx	lr
1a002fca:	bf00      	nop
1a002fcc:	1a0051a8 	.word	0x1a0051a8
1a002fd0:	e000e100 	.word	0xe000e100

1a002fd4 <uartTxInterruptSet>:

// UART TX Interrupt Enable/Disable
void uartTxInterruptSet( uartMap_t uart, bool_t enable )
{
1a002fd4:	b410      	push	{r4}
   if( enable ) {
1a002fd6:	b1b9      	cbz	r1, 1a003008 <uartTxInterruptSet+0x34>
      // Enable THRE irq (TX)
      Chip_UART_IntEnable( lpcUarts[uart].uartAddr, UART_IER_THREINT );
1a002fd8:	4a19      	ldr	r2, [pc, #100]	; (1a003040 <uartTxInterruptSet+0x6c>)
1a002fda:	0041      	lsls	r1, r0, #1
1a002fdc:	180b      	adds	r3, r1, r0
1a002fde:	009b      	lsls	r3, r3, #2
1a002fe0:	58d4      	ldr	r4, [r2, r3]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a002fe2:	6863      	ldr	r3, [r4, #4]
1a002fe4:	f043 0302 	orr.w	r3, r3, #2
1a002fe8:	6063      	str	r3, [r4, #4]
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a002fea:	4408      	add	r0, r1
1a002fec:	0080      	lsls	r0, r0, #2
1a002fee:	4410      	add	r0, r2
1a002ff0:	7a83      	ldrb	r3, [r0, #10]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a002ff2:	b25a      	sxtb	r2, r3
1a002ff4:	0952      	lsrs	r2, r2, #5
1a002ff6:	f003 031f 	and.w	r3, r3, #31
1a002ffa:	2101      	movs	r1, #1
1a002ffc:	fa01 f303 	lsl.w	r3, r1, r3
1a003000:	4910      	ldr	r1, [pc, #64]	; (1a003044 <uartTxInterruptSet+0x70>)
1a003002:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a003006:	e017      	b.n	1a003038 <uartTxInterruptSet+0x64>
   } else {
      // Disable THRE irq (TX)
      Chip_UART_IntDisable( lpcUarts[uart].uartAddr, UART_IER_THREINT );
1a003008:	4a0d      	ldr	r2, [pc, #52]	; (1a003040 <uartTxInterruptSet+0x6c>)
1a00300a:	0041      	lsls	r1, r0, #1
1a00300c:	180b      	adds	r3, r1, r0
1a00300e:	009b      	lsls	r3, r3, #2
1a003010:	58d4      	ldr	r4, [r2, r3]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a003012:	6863      	ldr	r3, [r4, #4]
1a003014:	f023 0302 	bic.w	r3, r3, #2
1a003018:	6063      	str	r3, [r4, #4]
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a00301a:	4408      	add	r0, r1
1a00301c:	0080      	lsls	r0, r0, #2
1a00301e:	4410      	add	r0, r2
1a003020:	7a82      	ldrb	r2, [r0, #10]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1a003022:	b253      	sxtb	r3, r2
1a003024:	095b      	lsrs	r3, r3, #5
1a003026:	f002 021f 	and.w	r2, r2, #31
1a00302a:	2101      	movs	r1, #1
1a00302c:	fa01 f202 	lsl.w	r2, r1, r2
1a003030:	3320      	adds	r3, #32
1a003032:	4904      	ldr	r1, [pc, #16]	; (1a003044 <uartTxInterruptSet+0x70>)
1a003034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   }
}
1a003038:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00303c:	4770      	bx	lr
1a00303e:	bf00      	nop
1a003040:	1a0051a8 	.word	0x1a0051a8
1a003044:	e000e100 	.word	0xe000e100

1a003048 <uartRxInterruptCallbackSet>:
void uartRxInterruptCallbackSet(
   uartMap_t uart,                  // UART
   callBackFuncPtr_t rxIsrCallback  // pointer to function
)
{
   if( rxIsrCallback != 0 ) {
1a003048:	460b      	mov	r3, r1
1a00304a:	b191      	cbz	r1, 1a003072 <uartRxInterruptCallbackSet+0x2a>
      // Set callback
      if( uart == UART_GPIO ) rxIsrCallbackUART0 = rxIsrCallback;
1a00304c:	b908      	cbnz	r0, 1a003052 <uartRxInterruptCallbackSet+0xa>
1a00304e:	4a09      	ldr	r2, [pc, #36]	; (1a003074 <uartRxInterruptCallbackSet+0x2c>)
1a003050:	6011      	str	r1, [r2, #0]
      if( uart == UART_485  ) rxIsrCallbackUART0 = rxIsrCallback;
1a003052:	2801      	cmp	r0, #1
1a003054:	d101      	bne.n	1a00305a <uartRxInterruptCallbackSet+0x12>
1a003056:	4a07      	ldr	r2, [pc, #28]	; (1a003074 <uartRxInterruptCallbackSet+0x2c>)
1a003058:	6013      	str	r3, [r2, #0]
      if( uart == UART_USB  ) rxIsrCallbackUART2 = rxIsrCallback;
1a00305a:	2803      	cmp	r0, #3
1a00305c:	d101      	bne.n	1a003062 <uartRxInterruptCallbackSet+0x1a>
1a00305e:	4a06      	ldr	r2, [pc, #24]	; (1a003078 <uartRxInterruptCallbackSet+0x30>)
1a003060:	6013      	str	r3, [r2, #0]
      if( uart == UART_ENET ) rxIsrCallbackUART2 = rxIsrCallback;
1a003062:	2804      	cmp	r0, #4
1a003064:	d101      	bne.n	1a00306a <uartRxInterruptCallbackSet+0x22>
1a003066:	4a04      	ldr	r2, [pc, #16]	; (1a003078 <uartRxInterruptCallbackSet+0x30>)
1a003068:	6013      	str	r3, [r2, #0]
      if( uart == UART_232  ) rxIsrCallbackUART3 = rxIsrCallback;
1a00306a:	2805      	cmp	r0, #5
1a00306c:	d101      	bne.n	1a003072 <uartRxInterruptCallbackSet+0x2a>
1a00306e:	4a03      	ldr	r2, [pc, #12]	; (1a00307c <uartRxInterruptCallbackSet+0x34>)
1a003070:	6013      	str	r3, [r2, #0]
1a003072:	4770      	bx	lr
1a003074:	10002bc0 	.word	0x10002bc0
1a003078:	10002bd0 	.word	0x10002bd0
1a00307c:	10002bd4 	.word	0x10002bd4

1a003080 <uartTxInterruptCallbackSet>:
void uartTxInterruptCallbackSet(
   uartMap_t uart,                  // UART
   callBackFuncPtr_t txIsrCallback  // pointer to function
)
{
   if( txIsrCallback != 0 ) {
1a003080:	460b      	mov	r3, r1
1a003082:	b191      	cbz	r1, 1a0030aa <uartTxInterruptCallbackSet+0x2a>
      // Set callback
      if( uart == UART_GPIO ) txIsrCallbackUART0 = txIsrCallback;
1a003084:	b908      	cbnz	r0, 1a00308a <uartTxInterruptCallbackSet+0xa>
1a003086:	4a09      	ldr	r2, [pc, #36]	; (1a0030ac <uartTxInterruptCallbackSet+0x2c>)
1a003088:	6011      	str	r1, [r2, #0]
      if( uart == UART_485  ) txIsrCallbackUART0 = txIsrCallback;
1a00308a:	2801      	cmp	r0, #1
1a00308c:	d101      	bne.n	1a003092 <uartTxInterruptCallbackSet+0x12>
1a00308e:	4a07      	ldr	r2, [pc, #28]	; (1a0030ac <uartTxInterruptCallbackSet+0x2c>)
1a003090:	6013      	str	r3, [r2, #0]
      if( uart == UART_USB  ) txIsrCallbackUART2 = txIsrCallback;
1a003092:	2803      	cmp	r0, #3
1a003094:	d101      	bne.n	1a00309a <uartTxInterruptCallbackSet+0x1a>
1a003096:	4a06      	ldr	r2, [pc, #24]	; (1a0030b0 <uartTxInterruptCallbackSet+0x30>)
1a003098:	6013      	str	r3, [r2, #0]
      if( uart == UART_ENET ) txIsrCallbackUART2 = txIsrCallback;
1a00309a:	2804      	cmp	r0, #4
1a00309c:	d101      	bne.n	1a0030a2 <uartTxInterruptCallbackSet+0x22>
1a00309e:	4a04      	ldr	r2, [pc, #16]	; (1a0030b0 <uartTxInterruptCallbackSet+0x30>)
1a0030a0:	6013      	str	r3, [r2, #0]
      if( uart == UART_232  ) txIsrCallbackUART3 = txIsrCallback;
1a0030a2:	2805      	cmp	r0, #5
1a0030a4:	d101      	bne.n	1a0030aa <uartTxInterruptCallbackSet+0x2a>
1a0030a6:	4a03      	ldr	r2, [pc, #12]	; (1a0030b4 <uartTxInterruptCallbackSet+0x34>)
1a0030a8:	6013      	str	r3, [r2, #0]
1a0030aa:	4770      	bx	lr
1a0030ac:	10002bc4 	.word	0x10002bc4
1a0030b0:	10002bc8 	.word	0x10002bc8
1a0030b4:	10002bcc 	.word	0x10002bcc

1a0030b8 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0030b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0030bc:	0080      	lsls	r0, r0, #2
1a0030be:	4b03      	ldr	r3, [pc, #12]	; (1a0030cc <uartTxReady+0x14>)
1a0030c0:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0030c2:	6958      	ldr	r0, [r3, #20]
}
1a0030c4:	f000 0020 	and.w	r0, r0, #32
1a0030c8:	4770      	bx	lr
1a0030ca:	bf00      	nop
1a0030cc:	1a0051a8 	.word	0x1a0051a8

1a0030d0 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a0030d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0030d4:	0080      	lsls	r0, r0, #2
1a0030d6:	4b02      	ldr	r3, [pc, #8]	; (1a0030e0 <uartRxRead+0x10>)
1a0030d8:	581b      	ldr	r3, [r3, r0]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0030da:	6818      	ldr	r0, [r3, #0]
}
1a0030dc:	b2c0      	uxtb	r0, r0
1a0030de:	4770      	bx	lr
1a0030e0:	1a0051a8 	.word	0x1a0051a8

1a0030e4 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0030e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0030e8:	0080      	lsls	r0, r0, #2
1a0030ea:	4b02      	ldr	r3, [pc, #8]	; (1a0030f4 <uartTxWrite+0x10>)
1a0030ec:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a0030ee:	6019      	str	r1, [r3, #0]
1a0030f0:	4770      	bx	lr
1a0030f2:	bf00      	nop
1a0030f4:	1a0051a8 	.word	0x1a0051a8

1a0030f8 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0030f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0030fc:	4607      	mov	r7, r0
1a0030fe:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003100:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a003170 <uartInit+0x78>
1a003104:	0044      	lsls	r4, r0, #1
1a003106:	1823      	adds	r3, r4, r0
1a003108:	009b      	lsls	r3, r3, #2
1a00310a:	eb08 0503 	add.w	r5, r8, r3
1a00310e:	f858 6003 	ldr.w	r6, [r8, r3]
1a003112:	4630      	mov	r0, r6
1a003114:	f000 fa9a 	bl	1a00364c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003118:	4630      	mov	r0, r6
1a00311a:	4649      	mov	r1, r9
1a00311c:	f000 fac0 	bl	1a0036a0 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a003120:	2307      	movs	r3, #7
1a003122:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003124:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a003126:	2301      	movs	r3, #1
1a003128:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00312a:	7929      	ldrb	r1, [r5, #4]
1a00312c:	796b      	ldrb	r3, [r5, #5]
1a00312e:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003130:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003134:	480c      	ldr	r0, [pc, #48]	; (1a003168 <uartInit+0x70>)
1a003136:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00313a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00313e:	79ee      	ldrb	r6, [r5, #7]
1a003140:	7a2a      	ldrb	r2, [r5, #8]
1a003142:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003144:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003148:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a00314c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a003150:	2f01      	cmp	r7, #1
1a003152:	d107      	bne.n	1a003164 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003154:	4a05      	ldr	r2, [pc, #20]	; (1a00316c <uartInit+0x74>)
1a003156:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003158:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00315c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00315e:	221a      	movs	r2, #26
1a003160:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a003164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003168:	40086000 	.word	0x40086000
1a00316c:	40081000 	.word	0x40081000
1a003170:	1a0051a8 	.word	0x1a0051a8

1a003174 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a003174:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a003176:	2003      	movs	r0, #3
1a003178:	f7ff fe9c 	bl	1a002eb4 <uartProcessIRQ>
1a00317c:	bd08      	pop	{r3, pc}
1a00317e:	bf00      	nop

1a003180 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a003180:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a003182:	2005      	movs	r0, #5
1a003184:	f7ff fe96 	bl	1a002eb4 <uartProcessIRQ>
1a003188:	bd08      	pop	{r3, pc}
1a00318a:	bf00      	nop

1a00318c <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a00318c:	e7fe      	b.n	1a00318c <errorOcurred>
1a00318e:	bf00      	nop

1a003190 <doNothing>:
}

static void doNothing( void* ptr )
{
1a003190:	4770      	bx	lr
1a003192:	bf00      	nop

1a003194 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a003194:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003196:	2400      	movs	r4, #0
1a003198:	e013      	b.n	1a0031c2 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00319a:	4b0b      	ldr	r3, [pc, #44]	; (1a0031c8 <TIMER0_IRQHandler+0x34>)
1a00319c:	681a      	ldr	r2, [r3, #0]
1a00319e:	f004 010f 	and.w	r1, r4, #15
1a0031a2:	2301      	movs	r3, #1
1a0031a4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0031a6:	421a      	tst	r2, r3
1a0031a8:	d009      	beq.n	1a0031be <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0031aa:	4b08      	ldr	r3, [pc, #32]	; (1a0031cc <TIMER0_IRQHandler+0x38>)
1a0031ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0031b0:	2000      	movs	r0, #0
1a0031b2:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0031b4:	b262      	sxtb	r2, r4
1a0031b6:	2301      	movs	r3, #1
1a0031b8:	4093      	lsls	r3, r2
1a0031ba:	4a03      	ldr	r2, [pc, #12]	; (1a0031c8 <TIMER0_IRQHandler+0x34>)
1a0031bc:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0031be:	3401      	adds	r4, #1
1a0031c0:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0031c2:	2c03      	cmp	r4, #3
1a0031c4:	d9e9      	bls.n	1a00319a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0031c6:	bd10      	pop	{r4, pc}
1a0031c8:	40084000 	.word	0x40084000
1a0031cc:	10000064 	.word	0x10000064

1a0031d0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0031d0:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0031d2:	2400      	movs	r4, #0
1a0031d4:	e014      	b.n	1a003200 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0031d6:	4b0c      	ldr	r3, [pc, #48]	; (1a003208 <TIMER1_IRQHandler+0x38>)
1a0031d8:	681a      	ldr	r2, [r3, #0]
1a0031da:	f004 010f 	and.w	r1, r4, #15
1a0031de:	2301      	movs	r3, #1
1a0031e0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0031e2:	421a      	tst	r2, r3
1a0031e4:	d00a      	beq.n	1a0031fc <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0031e6:	1d23      	adds	r3, r4, #4
1a0031e8:	4a08      	ldr	r2, [pc, #32]	; (1a00320c <TIMER1_IRQHandler+0x3c>)
1a0031ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0031ee:	2000      	movs	r0, #0
1a0031f0:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0031f2:	b262      	sxtb	r2, r4
1a0031f4:	2301      	movs	r3, #1
1a0031f6:	4093      	lsls	r3, r2
1a0031f8:	4a03      	ldr	r2, [pc, #12]	; (1a003208 <TIMER1_IRQHandler+0x38>)
1a0031fa:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0031fc:	3401      	adds	r4, #1
1a0031fe:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003200:	2c03      	cmp	r4, #3
1a003202:	d9e8      	bls.n	1a0031d6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a003204:	bd10      	pop	{r4, pc}
1a003206:	bf00      	nop
1a003208:	40085000 	.word	0x40085000
1a00320c:	10000064 	.word	0x10000064

1a003210 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a003210:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003212:	2400      	movs	r4, #0
1a003214:	e015      	b.n	1a003242 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003216:	4b0c      	ldr	r3, [pc, #48]	; (1a003248 <TIMER2_IRQHandler+0x38>)
1a003218:	681a      	ldr	r2, [r3, #0]
1a00321a:	f004 010f 	and.w	r1, r4, #15
1a00321e:	2301      	movs	r3, #1
1a003220:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a003222:	421a      	tst	r2, r3
1a003224:	d00b      	beq.n	1a00323e <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003226:	f104 0308 	add.w	r3, r4, #8
1a00322a:	4a08      	ldr	r2, [pc, #32]	; (1a00324c <TIMER2_IRQHandler+0x3c>)
1a00322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003230:	2000      	movs	r0, #0
1a003232:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003234:	b262      	sxtb	r2, r4
1a003236:	2301      	movs	r3, #1
1a003238:	4093      	lsls	r3, r2
1a00323a:	4a03      	ldr	r2, [pc, #12]	; (1a003248 <TIMER2_IRQHandler+0x38>)
1a00323c:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00323e:	3401      	adds	r4, #1
1a003240:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003242:	2c03      	cmp	r4, #3
1a003244:	d9e7      	bls.n	1a003216 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a003246:	bd10      	pop	{r4, pc}
1a003248:	400c3000 	.word	0x400c3000
1a00324c:	10000064 	.word	0x10000064

1a003250 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003250:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003252:	2400      	movs	r4, #0
1a003254:	e015      	b.n	1a003282 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003256:	4b0c      	ldr	r3, [pc, #48]	; (1a003288 <TIMER3_IRQHandler+0x38>)
1a003258:	681a      	ldr	r2, [r3, #0]
1a00325a:	f004 010f 	and.w	r1, r4, #15
1a00325e:	2301      	movs	r3, #1
1a003260:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a003262:	421a      	tst	r2, r3
1a003264:	d00b      	beq.n	1a00327e <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003266:	f104 030c 	add.w	r3, r4, #12
1a00326a:	4a08      	ldr	r2, [pc, #32]	; (1a00328c <TIMER3_IRQHandler+0x3c>)
1a00326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003270:	2000      	movs	r0, #0
1a003272:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003274:	b262      	sxtb	r2, r4
1a003276:	2301      	movs	r3, #1
1a003278:	4093      	lsls	r3, r2
1a00327a:	4a03      	ldr	r2, [pc, #12]	; (1a003288 <TIMER3_IRQHandler+0x38>)
1a00327c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00327e:	3401      	adds	r4, #1
1a003280:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003282:	2c03      	cmp	r4, #3
1a003284:	d9e7      	bls.n	1a003256 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003286:	bd10      	pop	{r4, pc}
1a003288:	400c4000 	.word	0x400c4000
1a00328c:	10000064 	.word	0x10000064

1a003290 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a003290:	b508      	push	{r3, lr}
   *printer = uart;
1a003292:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a003294:	4608      	mov	r0, r1
1a003296:	4611      	mov	r1, r2
1a003298:	f7ff ff2e 	bl	1a0030f8 <uartInit>
1a00329c:	bd08      	pop	{r3, pc}
1a00329e:	bf00      	nop

1a0032a0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0032a0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0032a2:	f000 faf1 	bl	1a003888 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0032a6:	4b3a      	ldr	r3, [pc, #232]	; (1a003390 <boardInit+0xf0>)
1a0032a8:	6818      	ldr	r0, [r3, #0]
1a0032aa:	f7ff fc25 	bl	1a002af8 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0032ae:	2001      	movs	r0, #1
1a0032b0:	2100      	movs	r1, #0
1a0032b2:	f7ff fdd9 	bl	1a002e68 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0032b6:	2000      	movs	r0, #0
1a0032b8:	2105      	movs	r1, #5
1a0032ba:	f7ff fc8b 	bl	1a002bd4 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0032be:	2024      	movs	r0, #36	; 0x24
1a0032c0:	2100      	movs	r1, #0
1a0032c2:	f7ff fc87 	bl	1a002bd4 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0032c6:	2025      	movs	r0, #37	; 0x25
1a0032c8:	2100      	movs	r1, #0
1a0032ca:	f7ff fc83 	bl	1a002bd4 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0032ce:	2026      	movs	r0, #38	; 0x26
1a0032d0:	2100      	movs	r1, #0
1a0032d2:	f7ff fc7f 	bl	1a002bd4 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a0032d6:	2027      	movs	r0, #39	; 0x27
1a0032d8:	2100      	movs	r1, #0
1a0032da:	f7ff fc7b 	bl	1a002bd4 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a0032de:	2028      	movs	r0, #40	; 0x28
1a0032e0:	2101      	movs	r1, #1
1a0032e2:	f7ff fc77 	bl	1a002bd4 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a0032e6:	2029      	movs	r0, #41	; 0x29
1a0032e8:	2101      	movs	r1, #1
1a0032ea:	f7ff fc73 	bl	1a002bd4 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0032ee:	202a      	movs	r0, #42	; 0x2a
1a0032f0:	2101      	movs	r1, #1
1a0032f2:	f7ff fc6f 	bl	1a002bd4 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a0032f6:	202b      	movs	r0, #43	; 0x2b
1a0032f8:	2101      	movs	r1, #1
1a0032fa:	f7ff fc6b 	bl	1a002bd4 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0032fe:	202c      	movs	r0, #44	; 0x2c
1a003300:	2101      	movs	r1, #1
1a003302:	f7ff fc67 	bl	1a002bd4 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a003306:	202d      	movs	r0, #45	; 0x2d
1a003308:	2101      	movs	r1, #1
1a00330a:	f7ff fc63 	bl	1a002bd4 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00330e:	202e      	movs	r0, #46	; 0x2e
1a003310:	2100      	movs	r1, #0
1a003312:	f7ff fc5f 	bl	1a002bd4 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a003316:	202f      	movs	r0, #47	; 0x2f
1a003318:	2100      	movs	r1, #0
1a00331a:	f7ff fc5b 	bl	1a002bd4 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00331e:	2030      	movs	r0, #48	; 0x30
1a003320:	2100      	movs	r1, #0
1a003322:	f7ff fc57 	bl	1a002bd4 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a003326:	2031      	movs	r0, #49	; 0x31
1a003328:	2100      	movs	r1, #0
1a00332a:	f7ff fc53 	bl	1a002bd4 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00332e:	2032      	movs	r0, #50	; 0x32
1a003330:	2100      	movs	r1, #0
1a003332:	f7ff fc4f 	bl	1a002bd4 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a003336:	2033      	movs	r0, #51	; 0x33
1a003338:	2100      	movs	r1, #0
1a00333a:	f7ff fc4b 	bl	1a002bd4 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00333e:	2034      	movs	r0, #52	; 0x34
1a003340:	2100      	movs	r1, #0
1a003342:	f7ff fc47 	bl	1a002bd4 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a003346:	2035      	movs	r0, #53	; 0x35
1a003348:	2100      	movs	r1, #0
1a00334a:	f7ff fc43 	bl	1a002bd4 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00334e:	2036      	movs	r0, #54	; 0x36
1a003350:	2101      	movs	r1, #1
1a003352:	f7ff fc3f 	bl	1a002bd4 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a003356:	2037      	movs	r0, #55	; 0x37
1a003358:	2101      	movs	r1, #1
1a00335a:	f7ff fc3b 	bl	1a002bd4 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00335e:	2038      	movs	r0, #56	; 0x38
1a003360:	2101      	movs	r1, #1
1a003362:	f7ff fc37 	bl	1a002bd4 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a003366:	2039      	movs	r0, #57	; 0x39
1a003368:	2101      	movs	r1, #1
1a00336a:	f7ff fc33 	bl	1a002bd4 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00336e:	203a      	movs	r0, #58	; 0x3a
1a003370:	2101      	movs	r1, #1
1a003372:	f7ff fc2f 	bl	1a002bd4 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a003376:	203b      	movs	r0, #59	; 0x3b
1a003378:	2101      	movs	r1, #1
1a00337a:	f7ff fc2b 	bl	1a002bd4 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00337e:	203c      	movs	r0, #60	; 0x3c
1a003380:	2101      	movs	r1, #1
1a003382:	f7ff fc27 	bl	1a002bd4 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a003386:	203d      	movs	r0, #61	; 0x3d
1a003388:	2101      	movs	r1, #1
1a00338a:	f7ff fc23 	bl	1a002bd4 <gpioInit>
1a00338e:	bd08      	pop	{r3, pc}
1a003390:	10002f40 	.word	0x10002f40

1a003394 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a003394:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003396:	2200      	movs	r2, #0
1a003398:	e014      	b.n	1a0033c4 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00339a:	4b0c      	ldr	r3, [pc, #48]	; (1a0033cc <Board_LED_Init+0x38>)
1a00339c:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a0033a0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0033a4:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0033a6:	480a      	ldr	r0, [pc, #40]	; (1a0033d0 <Board_LED_Init+0x3c>)
1a0033a8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0033ac:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a0033b0:	2301      	movs	r3, #1
1a0033b2:	408b      	lsls	r3, r1
1a0033b4:	4333      	orrs	r3, r6
1a0033b6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0033ba:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a0033be:	2300      	movs	r3, #0
1a0033c0:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0033c2:	3201      	adds	r2, #1
1a0033c4:	2a05      	cmp	r2, #5
1a0033c6:	d9e8      	bls.n	1a00339a <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0033c8:	bc70      	pop	{r4, r5, r6}
1a0033ca:	4770      	bx	lr
1a0033cc:	1a005214 	.word	0x1a005214
1a0033d0:	400f4000 	.word	0x400f4000

1a0033d4 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a0033d4:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0033d6:	2300      	movs	r3, #0
1a0033d8:	e011      	b.n	1a0033fe <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0033da:	490b      	ldr	r1, [pc, #44]	; (1a003408 <Board_TEC_Init+0x34>)
1a0033dc:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0033e0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0033e4:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0033e6:	4c09      	ldr	r4, [pc, #36]	; (1a00340c <Board_TEC_Init+0x38>)
1a0033e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0033ec:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a0033f0:	2101      	movs	r1, #1
1a0033f2:	40a9      	lsls	r1, r5
1a0033f4:	ea20 0101 	bic.w	r1, r0, r1
1a0033f8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0033fc:	3301      	adds	r3, #1
1a0033fe:	2b03      	cmp	r3, #3
1a003400:	d9eb      	bls.n	1a0033da <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a003402:	bc30      	pop	{r4, r5}
1a003404:	4770      	bx	lr
1a003406:	bf00      	nop
1a003408:	1a00520c 	.word	0x1a00520c
1a00340c:	400f4000 	.word	0x400f4000

1a003410 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a003410:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003412:	2300      	movs	r3, #0
1a003414:	e011      	b.n	1a00343a <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003416:	490b      	ldr	r1, [pc, #44]	; (1a003444 <Board_GPIO_Init+0x34>)
1a003418:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00341c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003420:	784d      	ldrb	r5, [r1, #1]
1a003422:	4c09      	ldr	r4, [pc, #36]	; (1a003448 <Board_GPIO_Init+0x38>)
1a003424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003428:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a00342c:	2101      	movs	r1, #1
1a00342e:	40a9      	lsls	r1, r5
1a003430:	ea20 0101 	bic.w	r1, r0, r1
1a003434:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003438:	3301      	adds	r3, #1
1a00343a:	2b08      	cmp	r3, #8
1a00343c:	d9eb      	bls.n	1a003416 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a00343e:	bc30      	pop	{r4, r5}
1a003440:	4770      	bx	lr
1a003442:	bf00      	nop
1a003444:	1a0051f0 	.word	0x1a0051f0
1a003448:	400f4000 	.word	0x400f4000

1a00344c <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a00344c:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00344e:	4c0b      	ldr	r4, [pc, #44]	; (1a00347c <Board_SPI_Init+0x30>)
1a003450:	4620      	mov	r0, r4
1a003452:	f000 fe29 	bl	1a0040a8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003456:	6863      	ldr	r3, [r4, #4]
1a003458:	f023 0304 	bic.w	r3, r3, #4
1a00345c:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00345e:	6823      	ldr	r3, [r4, #0]
1a003460:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003464:	f043 0307 	orr.w	r3, r3, #7
1a003468:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00346a:	4620      	mov	r0, r4
1a00346c:	4904      	ldr	r1, [pc, #16]	; (1a003480 <Board_SPI_Init+0x34>)
1a00346e:	f000 fdfb 	bl	1a004068 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003472:	6863      	ldr	r3, [r4, #4]
1a003474:	f043 0302 	orr.w	r3, r3, #2
1a003478:	6063      	str	r3, [r4, #4]
1a00347a:	bd10      	pop	{r4, pc}
1a00347c:	400c5000 	.word	0x400c5000
1a003480:	000186a0 	.word	0x000186a0

1a003484 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a003484:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a003486:	2000      	movs	r0, #0
1a003488:	f000 fda4 	bl	1a003fd4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00348c:	f640 0208 	movw	r2, #2056	; 0x808
1a003490:	4b03      	ldr	r3, [pc, #12]	; (1a0034a0 <Board_I2C_Init+0x1c>)
1a003492:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003496:	2000      	movs	r0, #0
1a003498:	4902      	ldr	r1, [pc, #8]	; (1a0034a4 <Board_I2C_Init+0x20>)
1a00349a:	f000 fdad 	bl	1a003ff8 <Chip_I2C_SetClockRate>
1a00349e:	bd08      	pop	{r3, pc}
1a0034a0:	40086000 	.word	0x40086000
1a0034a4:	000f4240 	.word	0x000f4240

1a0034a8 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0034a8:	b510      	push	{r4, lr}
1a0034aa:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a0034ac:	4c08      	ldr	r4, [pc, #32]	; (1a0034d0 <Board_ADC_Init+0x28>)
1a0034ae:	4620      	mov	r0, r4
1a0034b0:	4669      	mov	r1, sp
1a0034b2:	f000 f9a9 	bl	1a003808 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0034b6:	4620      	mov	r0, r4
1a0034b8:	4669      	mov	r1, sp
1a0034ba:	4a06      	ldr	r2, [pc, #24]	; (1a0034d4 <Board_ADC_Init+0x2c>)
1a0034bc:	f000 f9c4 	bl	1a003848 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0034c0:	4620      	mov	r0, r4
1a0034c2:	4669      	mov	r1, sp
1a0034c4:	2200      	movs	r2, #0
1a0034c6:	f000 f9d9 	bl	1a00387c <Chip_ADC_SetResolution>
}
1a0034ca:	b002      	add	sp, #8
1a0034cc:	bd10      	pop	{r4, pc}
1a0034ce:	bf00      	nop
1a0034d0:	400e3000 	.word	0x400e3000
1a0034d4:	00061a80 	.word	0x00061a80

1a0034d8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0034d8:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0034da:	4c07      	ldr	r4, [pc, #28]	; (1a0034f8 <Board_Debug_Init+0x20>)
1a0034dc:	4620      	mov	r0, r4
1a0034de:	f000 f8b5 	bl	1a00364c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0034e2:	4620      	mov	r0, r4
1a0034e4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0034e8:	f000 f8fa 	bl	1a0036e0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0034ec:	2303      	movs	r3, #3
1a0034ee:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0034f0:	2301      	movs	r3, #1
1a0034f2:	65e3      	str	r3, [r4, #92]	; 0x5c
1a0034f4:	bd10      	pop	{r4, pc}
1a0034f6:	bf00      	nop
1a0034f8:	400c1000 	.word	0x400c1000

1a0034fc <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0034fc:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0034fe:	f7ff ffeb 	bl	1a0034d8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a003502:	480b      	ldr	r0, [pc, #44]	; (1a003530 <Board_Init+0x34>)
1a003504:	f000 fd54 	bl	1a003fb0 <Chip_GPIO_Init>

   Board_LED_Init();
1a003508:	f7ff ff44 	bl	1a003394 <Board_LED_Init>
   Board_TEC_Init();
1a00350c:	f7ff ff62 	bl	1a0033d4 <Board_TEC_Init>
   Board_SPI_Init();
1a003510:	f7ff ff9c 	bl	1a00344c <Board_SPI_Init>
   Board_GPIO_Init();
1a003514:	f7ff ff7c 	bl	1a003410 <Board_GPIO_Init>
   Board_I2C_Init();
1a003518:	f7ff ffb4 	bl	1a003484 <Board_I2C_Init>
   Board_ADC_Init();
1a00351c:	f7ff ffc4 	bl	1a0034a8 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a003520:	4a04      	ldr	r2, [pc, #16]	; (1a003534 <Board_Init+0x38>)
1a003522:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a003526:	f043 0304 	orr.w	r3, r3, #4
1a00352a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a00352e:	bd08      	pop	{r3, pc}
1a003530:	400f4000 	.word	0x400f4000
1a003534:	40043000 	.word	0x40043000

1a003538 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a003538:	4b05      	ldr	r3, [pc, #20]	; (1a003550 <_sbrk_r+0x18>)
1a00353a:	681b      	ldr	r3, [r3, #0]
1a00353c:	b913      	cbnz	r3, 1a003544 <_sbrk_r+0xc>
       heap_end = &_pvHeapStart;
1a00353e:	4a05      	ldr	r2, [pc, #20]	; (1a003554 <_sbrk_r+0x1c>)
1a003540:	4b03      	ldr	r3, [pc, #12]	; (1a003550 <_sbrk_r+0x18>)
1a003542:	601a      	str	r2, [r3, #0]
   }
   prev_heap_end = heap_end;
1a003544:	4b02      	ldr	r3, [pc, #8]	; (1a003550 <_sbrk_r+0x18>)
1a003546:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a003548:	4401      	add	r1, r0
1a00354a:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00354c:	4770      	bx	lr
1a00354e:	bf00      	nop
1a003550:	10002bd8 	.word	0x10002bd8
1a003554:	10002f44 	.word	0x10002f44

1a003558 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a003558:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a00355a:	4b04      	ldr	r3, [pc, #16]	; (1a00356c <SystemInit+0x14>)
1a00355c:	4a04      	ldr	r2, [pc, #16]	; (1a003570 <SystemInit+0x18>)
1a00355e:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a003560:	f000 fcfa 	bl	1a003f58 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a003564:	f000 f856 	bl	1a003614 <Board_SystemInit>
1a003568:	bd08      	pop	{r3, pc}
1a00356a:	bf00      	nop
1a00356c:	e000ed08 	.word	0xe000ed08
1a003570:	1a000000 	.word	0x1a000000

1a003574 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a003574:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003576:	2300      	movs	r3, #0
1a003578:	e00c      	b.n	1a003594 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00357a:	4a09      	ldr	r2, [pc, #36]	; (1a0035a0 <Board_SetupMuxing+0x2c>)
1a00357c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003580:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003584:	784a      	ldrb	r2, [r1, #1]
1a003586:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003588:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00358c:	4905      	ldr	r1, [pc, #20]	; (1a0035a4 <Board_SetupMuxing+0x30>)
1a00358e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003592:	3301      	adds	r3, #1
1a003594:	2b25      	cmp	r3, #37	; 0x25
1a003596:	d9f0      	bls.n	1a00357a <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a003598:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00359c:	4770      	bx	lr
1a00359e:	bf00      	nop
1a0035a0:	1a00522c 	.word	0x1a00522c
1a0035a4:	40086000 	.word	0x40086000

1a0035a8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0035a8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0035aa:	4a17      	ldr	r2, [pc, #92]	; (1a003608 <Board_SetupClocking+0x60>)
1a0035ac:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0035b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0035b4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0035b8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0035bc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0035c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0035c4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0035c8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0035cc:	2006      	movs	r0, #6
1a0035ce:	490f      	ldr	r1, [pc, #60]	; (1a00360c <Board_SetupClocking+0x64>)
1a0035d0:	2201      	movs	r2, #1
1a0035d2:	f000 fc19 	bl	1a003e08 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0035d6:	2400      	movs	r4, #0
1a0035d8:	e00a      	b.n	1a0035f0 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0035da:	4a0d      	ldr	r2, [pc, #52]	; (1a003610 <Board_SetupClocking+0x68>)
1a0035dc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a0035e0:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a0035e4:	7859      	ldrb	r1, [r3, #1]
1a0035e6:	789a      	ldrb	r2, [r3, #2]
1a0035e8:	78db      	ldrb	r3, [r3, #3]
1a0035ea:	f000 fb75 	bl	1a003cd8 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0035ee:	3401      	adds	r4, #1
1a0035f0:	2c02      	cmp	r4, #2
1a0035f2:	d9f2      	bls.n	1a0035da <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0035f4:	4b04      	ldr	r3, [pc, #16]	; (1a003608 <Board_SetupClocking+0x60>)
1a0035f6:	685a      	ldr	r2, [r3, #4]
1a0035f8:	f022 020c 	bic.w	r2, r2, #12
1a0035fc:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0035fe:	685a      	ldr	r2, [r3, #4]
1a003600:	f042 0203 	orr.w	r2, r2, #3
1a003604:	605a      	str	r2, [r3, #4]
1a003606:	bd10      	pop	{r4, pc}
1a003608:	40043000 	.word	0x40043000
1a00360c:	0c28cb00 	.word	0x0c28cb00
1a003610:	1a005220 	.word	0x1a005220

1a003614 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003614:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a003616:	f7ff ffad 	bl	1a003574 <Board_SetupMuxing>
    Board_SetupClocking();
1a00361a:	f7ff ffc5 	bl	1a0035a8 <Board_SetupClocking>
1a00361e:	bd08      	pop	{r3, pc}

1a003620 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003620:	4b09      	ldr	r3, [pc, #36]	; (1a003648 <Chip_UART_GetIndex+0x28>)
1a003622:	4298      	cmp	r0, r3
1a003624:	d009      	beq.n	1a00363a <Chip_UART_GetIndex+0x1a>
1a003626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00362a:	4298      	cmp	r0, r3
1a00362c:	d007      	beq.n	1a00363e <Chip_UART_GetIndex+0x1e>
1a00362e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003632:	4298      	cmp	r0, r3
1a003634:	d005      	beq.n	1a003642 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003636:	2000      	movs	r0, #0
1a003638:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00363a:	2002      	movs	r0, #2
1a00363c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00363e:	2003      	movs	r0, #3
1a003640:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a003642:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a003644:	4770      	bx	lr
1a003646:	bf00      	nop
1a003648:	400c1000 	.word	0x400c1000

1a00364c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00364c:	b510      	push	{r4, lr}
1a00364e:	b082      	sub	sp, #8
1a003650:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003652:	f7ff ffe5 	bl	1a003620 <Chip_UART_GetIndex>
1a003656:	4b10      	ldr	r3, [pc, #64]	; (1a003698 <Chip_UART_Init+0x4c>)
1a003658:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00365c:	2101      	movs	r1, #1
1a00365e:	460a      	mov	r2, r1
1a003660:	460b      	mov	r3, r1
1a003662:	f000 fb73 	bl	1a003d4c <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a003666:	2307      	movs	r3, #7
1a003668:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a00366a:	2300      	movs	r3, #0
1a00366c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00366e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003670:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003672:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003674:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003676:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003678:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00367a:	4b08      	ldr	r3, [pc, #32]	; (1a00369c <Chip_UART_Init+0x50>)
1a00367c:	429c      	cmp	r4, r3
1a00367e:	d103      	bne.n	1a003688 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a003680:	2300      	movs	r3, #0
1a003682:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a003684:	69a3      	ldr	r3, [r4, #24]
1a003686:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a003688:	2303      	movs	r3, #3
1a00368a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00368c:	2310      	movs	r3, #16
1a00368e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003690:	9b01      	ldr	r3, [sp, #4]
}
1a003692:	b002      	add	sp, #8
1a003694:	bd10      	pop	{r4, pc}
1a003696:	bf00      	nop
1a003698:	1a0052cc 	.word	0x1a0052cc
1a00369c:	40082000 	.word	0x40082000

1a0036a0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0036a0:	b538      	push	{r3, r4, r5, lr}
1a0036a2:	4605      	mov	r5, r0
1a0036a4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0036a6:	f7ff ffbb 	bl	1a003620 <Chip_UART_GetIndex>
1a0036aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0036dc <Chip_UART_SetBaud+0x3c>)
1a0036ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0036b0:	f000 fb84 	bl	1a003dbc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0036b4:	0124      	lsls	r4, r4, #4
1a0036b6:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0036ba:	68ea      	ldr	r2, [r5, #12]
1a0036bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0036c0:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0036c2:	b2da      	uxtb	r2, r3
1a0036c4:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0036c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0036ca:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0036cc:	68ea      	ldr	r2, [r5, #12]
1a0036ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0036d2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0036d4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0036d8:	0900      	lsrs	r0, r0, #4
1a0036da:	bd38      	pop	{r3, r4, r5, pc}
1a0036dc:	1a0052c4 	.word	0x1a0052c4

1a0036e0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0036e4:	b083      	sub	sp, #12
1a0036e6:	4683      	mov	fp, r0
1a0036e8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0036ea:	f7ff ff99 	bl	1a003620 <Chip_UART_GetIndex>
1a0036ee:	4b34      	ldr	r3, [pc, #208]	; (1a0037c0 <Chip_UART_SetBaudFDR+0xe0>)
1a0036f0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0036f4:	f000 fb62 	bl	1a003dbc <Chip_Clock_GetRate>
1a0036f8:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a0036fa:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0036fe:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003700:	2300      	movs	r3, #0
1a003702:	9301      	str	r3, [sp, #4]
1a003704:	46a2      	mov	sl, r4
1a003706:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003708:	e029      	b.n	1a00375e <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00370a:	2300      	movs	r3, #0
1a00370c:	0932      	lsrs	r2, r6, #4
1a00370e:	0730      	lsls	r0, r6, #28
1a003710:	fba0 0104 	umull	r0, r1, r0, r4
1a003714:	fb04 1102 	mla	r1, r4, r2, r1
1a003718:	1962      	adds	r2, r4, r5
1a00371a:	fb08 f202 	mul.w	r2, r8, r2
1a00371e:	f000 fd23 	bl	1a004168 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a003722:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a003724:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a003726:	2800      	cmp	r0, #0
1a003728:	da01      	bge.n	1a00372e <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a00372a:	4243      	negs	r3, r0
				div ++;
1a00372c:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00372e:	429f      	cmp	r7, r3
1a003730:	d30a      	bcc.n	1a003748 <Chip_UART_SetBaudFDR+0x68>
1a003732:	b14a      	cbz	r2, 1a003748 <Chip_UART_SetBaudFDR+0x68>
1a003734:	0c11      	lsrs	r1, r2, #16
1a003736:	d107      	bne.n	1a003748 <Chip_UART_SetBaudFDR+0x68>
1a003738:	2a02      	cmp	r2, #2
1a00373a:	d800      	bhi.n	1a00373e <Chip_UART_SetBaudFDR+0x5e>
1a00373c:	b925      	cbnz	r5, 1a003748 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00373e:	b14b      	cbz	r3, 1a003754 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a003740:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a003742:	9501      	str	r5, [sp, #4]
			sm = m;
1a003744:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a003746:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a003748:	3501      	adds	r5, #1
1a00374a:	e000      	b.n	1a00374e <Chip_UART_SetBaudFDR+0x6e>
1a00374c:	2500      	movs	r5, #0
1a00374e:	42a5      	cmp	r5, r4
1a003750:	d3db      	bcc.n	1a00370a <Chip_UART_SetBaudFDR+0x2a>
1a003752:	e003      	b.n	1a00375c <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a003754:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a003756:	9501      	str	r5, [sp, #4]
			sm = m;
1a003758:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a00375a:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00375c:	3401      	adds	r4, #1
1a00375e:	b10f      	cbz	r7, 1a003764 <Chip_UART_SetBaudFDR+0x84>
1a003760:	2c0f      	cmp	r4, #15
1a003762:	d9f3      	bls.n	1a00374c <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a003764:	f1b9 0f00 	cmp.w	r9, #0
1a003768:	d026      	beq.n	1a0037b8 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00376a:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003772:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a003776:	fa5f f389 	uxtb.w	r3, r9
1a00377a:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a00377e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a003782:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003786:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00378a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00378e:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003792:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003796:	b2da      	uxtb	r2, r3
1a003798:	9901      	ldr	r1, [sp, #4]
1a00379a:	f001 030f 	and.w	r3, r1, #15
1a00379e:	4313      	orrs	r3, r2
1a0037a0:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0037a4:	0933      	lsrs	r3, r6, #4
1a0037a6:	fb0a f303 	mul.w	r3, sl, r3
1a0037aa:	eb0a 0001 	add.w	r0, sl, r1
1a0037ae:	fb09 f000 	mul.w	r0, r9, r0
1a0037b2:	fbb3 f0f0 	udiv	r0, r3, r0
1a0037b6:	e000      	b.n	1a0037ba <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a0037b8:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a0037ba:	b003      	add	sp, #12
1a0037bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0037c0:	1a0052c4 	.word	0x1a0052c4

1a0037c4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0037c4:	4b03      	ldr	r3, [pc, #12]	; (1a0037d4 <Chip_ADC_GetClockIndex+0x10>)
1a0037c6:	4298      	cmp	r0, r3
1a0037c8:	d101      	bne.n	1a0037ce <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a0037ca:	2004      	movs	r0, #4
1a0037cc:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0037ce:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0037d0:	4770      	bx	lr
1a0037d2:	bf00      	nop
1a0037d4:	400e4000 	.word	0x400e4000

1a0037d8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0037d8:	b570      	push	{r4, r5, r6, lr}
1a0037da:	460d      	mov	r5, r1
1a0037dc:	4614      	mov	r4, r2
1a0037de:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0037e0:	f7ff fff0 	bl	1a0037c4 <Chip_ADC_GetClockIndex>
1a0037e4:	f000 faea 	bl	1a003dbc <Chip_Clock_GetRate>
	if (burstMode) {
1a0037e8:	b115      	cbz	r5, 1a0037f0 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a0037ea:	fb04 f406 	mul.w	r4, r4, r6
1a0037ee:	e003      	b.n	1a0037f8 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0037f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0037f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0037f8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0037fc:	0064      	lsls	r4, r4, #1
1a0037fe:	fbb0 f4f4 	udiv	r4, r0, r4
1a003802:	1e60      	subs	r0, r4, #1
	return div;
}
1a003804:	b2c0      	uxtb	r0, r0
1a003806:	bd70      	pop	{r4, r5, r6, pc}

1a003808 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003808:	b538      	push	{r3, r4, r5, lr}
1a00380a:	4605      	mov	r5, r0
1a00380c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00380e:	f7ff ffd9 	bl	1a0037c4 <Chip_ADC_GetClockIndex>
1a003812:	2101      	movs	r1, #1
1a003814:	460a      	mov	r2, r1
1a003816:	460b      	mov	r3, r1
1a003818:	f000 fa98 	bl	1a003d4c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00381c:	2100      	movs	r1, #0
1a00381e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003820:	4a08      	ldr	r2, [pc, #32]	; (1a003844 <Chip_ADC_Init+0x3c>)
1a003822:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003824:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003826:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003828:	4628      	mov	r0, r5
1a00382a:	230b      	movs	r3, #11
1a00382c:	f7ff ffd4 	bl	1a0037d8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003830:	0200      	lsls	r0, r0, #8
1a003832:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003836:	7920      	ldrb	r0, [r4, #4]
1a003838:	f000 0007 	and.w	r0, r0, #7
1a00383c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a003840:	6028      	str	r0, [r5, #0]
1a003842:	bd38      	pop	{r3, r4, r5, pc}
1a003844:	00061a80 	.word	0x00061a80

1a003848 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003848:	b570      	push	{r4, r5, r6, lr}
1a00384a:	4606      	mov	r6, r0
1a00384c:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00384e:	6804      	ldr	r4, [r0, #0]
1a003850:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003854:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003858:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00385a:	790b      	ldrb	r3, [r1, #4]
1a00385c:	f1c3 030b 	rsb	r3, r3, #11
1a003860:	7949      	ldrb	r1, [r1, #5]
1a003862:	b2db      	uxtb	r3, r3
1a003864:	f7ff ffb8 	bl	1a0037d8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003868:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00386c:	792c      	ldrb	r4, [r5, #4]
1a00386e:	f004 0407 	and.w	r4, r4, #7
1a003872:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a003876:	6030      	str	r0, [r6, #0]
1a003878:	bd70      	pop	{r4, r5, r6, pc}
1a00387a:	bf00      	nop

1a00387c <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00387c:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00387e:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003880:	680a      	ldr	r2, [r1, #0]
1a003882:	f7ff ffe1 	bl	1a003848 <Chip_ADC_SetSampleRate>
1a003886:	bd08      	pop	{r3, pc}

1a003888 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003888:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00388a:	2069      	movs	r0, #105	; 0x69
1a00388c:	f000 fa96 	bl	1a003dbc <Chip_Clock_GetRate>
1a003890:	4b01      	ldr	r3, [pc, #4]	; (1a003898 <SystemCoreClockUpdate+0x10>)
1a003892:	6018      	str	r0, [r3, #0]
1a003894:	bd08      	pop	{r3, pc}
1a003896:	bf00      	nop
1a003898:	10002f40 	.word	0x10002f40

1a00389c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00389c:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00389e:	680b      	ldr	r3, [r1, #0]
1a0038a0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0038a4:	d002      	beq.n	1a0038ac <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0038a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0038aa:	600b      	str	r3, [r1, #0]
1a0038ac:	4686      	mov	lr, r0
1a0038ae:	2601      	movs	r6, #1
1a0038b0:	e041      	b.n	1a003936 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a0038b2:	680d      	ldr	r5, [r1, #0]
1a0038b4:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0038b8:	d008      	beq.n	1a0038cc <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0038ba:	1c7b      	adds	r3, r7, #1
1a0038bc:	fa04 f203 	lsl.w	r2, r4, r3
1a0038c0:	694b      	ldr	r3, [r1, #20]
1a0038c2:	fb03 f302 	mul.w	r3, r3, r2
1a0038c6:	fbb3 f3f6 	udiv	r3, r3, r6
1a0038ca:	e004      	b.n	1a0038d6 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a0038cc:	694b      	ldr	r3, [r1, #20]
1a0038ce:	fb04 f303 	mul.w	r3, r4, r3
1a0038d2:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0038d6:	4a19      	ldr	r2, [pc, #100]	; (1a00393c <pll_calc_divs+0xa0>)
1a0038d8:	4293      	cmp	r3, r2
1a0038da:	d920      	bls.n	1a00391e <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0038dc:	4a18      	ldr	r2, [pc, #96]	; (1a003940 <pll_calc_divs+0xa4>)
1a0038de:	4293      	cmp	r3, r2
1a0038e0:	d823      	bhi.n	1a00392a <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a0038e2:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0038e6:	d103      	bne.n	1a0038f0 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a0038e8:	1c7a      	adds	r2, r7, #1
1a0038ea:	fa23 f202 	lsr.w	r2, r3, r2
1a0038ee:	e000      	b.n	1a0038f2 <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0038f0:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0038f2:	1a85      	subs	r5, r0, r2
1a0038f4:	d502      	bpl.n	1a0038fc <pll_calc_divs+0x60>
		return -val;
1a0038f6:	f1c5 0c00 	rsb	ip, r5, #0
1a0038fa:	e000      	b.n	1a0038fe <pll_calc_divs+0x62>
	return val;
1a0038fc:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0038fe:	45e6      	cmp	lr, ip
1a003900:	d90d      	bls.n	1a00391e <pll_calc_divs+0x82>
					ppll->nsel = n;
1a003902:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a003904:	f107 0e01 	add.w	lr, r7, #1
1a003908:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a00390c:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a00390e:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a003910:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003912:	2d00      	cmp	r5, #0
1a003914:	da02      	bge.n	1a00391c <pll_calc_divs+0x80>
		return -val;
1a003916:	f1c5 0e00 	rsb	lr, r5, #0
1a00391a:	e000      	b.n	1a00391e <pll_calc_divs+0x82>
	return val;
1a00391c:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a00391e:	3401      	adds	r4, #1
1a003920:	e000      	b.n	1a003924 <pll_calc_divs+0x88>
1a003922:	2401      	movs	r4, #1
1a003924:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a003928:	ddc3      	ble.n	1a0038b2 <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00392a:	3701      	adds	r7, #1
1a00392c:	e000      	b.n	1a003930 <pll_calc_divs+0x94>
1a00392e:	2700      	movs	r7, #0
1a003930:	2f03      	cmp	r7, #3
1a003932:	ddf6      	ble.n	1a003922 <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a003934:	3601      	adds	r6, #1
1a003936:	2e04      	cmp	r6, #4
1a003938:	ddf9      	ble.n	1a00392e <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a00393a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00393c:	094c5eff 	.word	0x094c5eff
1a003940:	1312d000 	.word	0x1312d000

1a003944 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003944:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003946:	b099      	sub	sp, #100	; 0x64
1a003948:	4605      	mov	r5, r0
1a00394a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00394c:	4668      	mov	r0, sp
1a00394e:	2100      	movs	r1, #0
1a003950:	2260      	movs	r2, #96	; 0x60
1a003952:	f000 ff08 	bl	1a004766 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003956:	2380      	movs	r3, #128	; 0x80
1a003958:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00395a:	6963      	ldr	r3, [r4, #20]
1a00395c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00395e:	7923      	ldrb	r3, [r4, #4]
1a003960:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003964:	4628      	mov	r0, r5
1a003966:	4669      	mov	r1, sp
1a003968:	f7ff ff98 	bl	1a00389c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00396c:	9b06      	ldr	r3, [sp, #24]
1a00396e:	42ab      	cmp	r3, r5
1a003970:	d107      	bne.n	1a003982 <pll_get_frac+0x3e>
		*ppll = pll[0];
1a003972:	466d      	mov	r5, sp
1a003974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003978:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00397c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a003980:	e05e      	b.n	1a003a40 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003982:	1aeb      	subs	r3, r5, r3
1a003984:	d500      	bpl.n	1a003988 <pll_get_frac+0x44>
		return -val;
1a003986:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003988:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00398a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00398c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003990:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003992:	6963      	ldr	r3, [r4, #20]
1a003994:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003996:	7923      	ldrb	r3, [r4, #4]
1a003998:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00399c:	4628      	mov	r0, r5
1a00399e:	a910      	add	r1, sp, #64	; 0x40
1a0039a0:	f7ff ff7c 	bl	1a00389c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0039a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0039a6:	42ab      	cmp	r3, r5
1a0039a8:	d107      	bne.n	1a0039ba <pll_get_frac+0x76>
		*ppll = pll[2];
1a0039aa:	ad10      	add	r5, sp, #64	; 0x40
1a0039ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0039ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0039b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0039b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0039b8:	e042      	b.n	1a003a40 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0039ba:	1aeb      	subs	r3, r5, r3
1a0039bc:	d500      	bpl.n	1a0039c0 <pll_get_frac+0x7c>
		return -val;
1a0039be:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0039c0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0039c2:	4b20      	ldr	r3, [pc, #128]	; (1a003a44 <pll_get_frac+0x100>)
1a0039c4:	429d      	cmp	r5, r3
1a0039c6:	d812      	bhi.n	1a0039ee <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a0039c8:	2340      	movs	r3, #64	; 0x40
1a0039ca:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0039cc:	6963      	ldr	r3, [r4, #20]
1a0039ce:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0039d0:	4628      	mov	r0, r5
1a0039d2:	a908      	add	r1, sp, #32
1a0039d4:	f7ff ff62 	bl	1a00389c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0039d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0039da:	42ab      	cmp	r3, r5
1a0039dc:	d107      	bne.n	1a0039ee <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0039de:	ad08      	add	r5, sp, #32
1a0039e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0039e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0039e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0039e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0039ec:	e028      	b.n	1a003a40 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0039ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0039f0:	1aed      	subs	r5, r5, r3
1a0039f2:	d500      	bpl.n	1a0039f6 <pll_get_frac+0xb2>
		return -val;
1a0039f4:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0039f6:	42ae      	cmp	r6, r5
1a0039f8:	dc11      	bgt.n	1a003a1e <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a0039fa:	42be      	cmp	r6, r7
1a0039fc:	dc07      	bgt.n	1a003a0e <pll_get_frac+0xca>
			*ppll = pll[0];
1a0039fe:	466d      	mov	r5, sp
1a003a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003a0c:	e018      	b.n	1a003a40 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a003a0e:	ad10      	add	r5, sp, #64	; 0x40
1a003a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003a1c:	e010      	b.n	1a003a40 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a003a1e:	42af      	cmp	r7, r5
1a003a20:	db07      	blt.n	1a003a32 <pll_get_frac+0xee>
			*ppll = pll[1];
1a003a22:	ad08      	add	r5, sp, #32
1a003a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003a30:	e006      	b.n	1a003a40 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a003a32:	ad10      	add	r5, sp, #64	; 0x40
1a003a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a003a40:	b019      	add	sp, #100	; 0x64
1a003a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003a44:	068e7780 	.word	0x068e7780

1a003a48 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003a48:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003a4a:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003a4c:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003a4e:	e010      	b.n	1a003a72 <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003a50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003a54:	0052      	lsls	r2, r2, #1
1a003a56:	4d0d      	ldr	r5, [pc, #52]	; (1a003a8c <Chip_Clock_FindBaseClock+0x44>)
1a003a58:	5aaa      	ldrh	r2, [r5, r2]
1a003a5a:	4282      	cmp	r2, r0
1a003a5c:	d806      	bhi.n	1a003a6c <Chip_Clock_FindBaseClock+0x24>
1a003a5e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003a62:	0052      	lsls	r2, r2, #1
1a003a64:	442a      	add	r2, r5
1a003a66:	8852      	ldrh	r2, [r2, #2]
1a003a68:	4282      	cmp	r2, r0
1a003a6a:	d201      	bcs.n	1a003a70 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003a6c:	3301      	adds	r3, #1
1a003a6e:	e000      	b.n	1a003a72 <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a003a70:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003a72:	291c      	cmp	r1, #28
1a003a74:	d107      	bne.n	1a003a86 <Chip_Clock_FindBaseClock+0x3e>
1a003a76:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003a7a:	0052      	lsls	r2, r2, #1
1a003a7c:	4c03      	ldr	r4, [pc, #12]	; (1a003a8c <Chip_Clock_FindBaseClock+0x44>)
1a003a7e:	4422      	add	r2, r4
1a003a80:	7914      	ldrb	r4, [r2, #4]
1a003a82:	428c      	cmp	r4, r1
1a003a84:	d1e4      	bne.n	1a003a50 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a003a86:	4608      	mov	r0, r1
1a003a88:	bc30      	pop	{r4, r5}
1a003a8a:	4770      	bx	lr
1a003a8c:	1a0052e0 	.word	0x1a0052e0

1a003a90 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003a90:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003a96:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003a98:	4a0d      	ldr	r2, [pc, #52]	; (1a003ad0 <Chip_Clock_EnableCrystal+0x40>)
1a003a9a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003a9c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003aa0:	6992      	ldr	r2, [r2, #24]
1a003aa2:	428a      	cmp	r2, r1
1a003aa4:	d001      	beq.n	1a003aaa <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003aa6:	4a0a      	ldr	r2, [pc, #40]	; (1a003ad0 <Chip_Clock_EnableCrystal+0x40>)
1a003aa8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a003aaa:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a003aae:	4a09      	ldr	r2, [pc, #36]	; (1a003ad4 <Chip_Clock_EnableCrystal+0x44>)
1a003ab0:	6811      	ldr	r1, [r2, #0]
1a003ab2:	4a09      	ldr	r2, [pc, #36]	; (1a003ad8 <Chip_Clock_EnableCrystal+0x48>)
1a003ab4:	4291      	cmp	r1, r2
1a003ab6:	d901      	bls.n	1a003abc <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003ab8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003abc:	4a04      	ldr	r2, [pc, #16]	; (1a003ad0 <Chip_Clock_EnableCrystal+0x40>)
1a003abe:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003ac0:	9b01      	ldr	r3, [sp, #4]
1a003ac2:	1e5a      	subs	r2, r3, #1
1a003ac4:	9201      	str	r2, [sp, #4]
1a003ac6:	2b00      	cmp	r3, #0
1a003ac8:	d1fa      	bne.n	1a003ac0 <Chip_Clock_EnableCrystal+0x30>
}
1a003aca:	b002      	add	sp, #8
1a003acc:	4770      	bx	lr
1a003ace:	bf00      	nop
1a003ad0:	40050000 	.word	0x40050000
1a003ad4:	1a005204 	.word	0x1a005204
1a003ad8:	01312cff 	.word	0x01312cff

1a003adc <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003adc:	3012      	adds	r0, #18
1a003ade:	4b05      	ldr	r3, [pc, #20]	; (1a003af4 <Chip_Clock_GetDividerSource+0x18>)
1a003ae0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003ae4:	f010 0f01 	tst.w	r0, #1
1a003ae8:	d102      	bne.n	1a003af0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003aea:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003aee:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a003af0:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003af2:	4770      	bx	lr
1a003af4:	40050000 	.word	0x40050000

1a003af8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003af8:	f100 0212 	add.w	r2, r0, #18
1a003afc:	4b03      	ldr	r3, [pc, #12]	; (1a003b0c <Chip_Clock_GetDividerDivisor+0x14>)
1a003afe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003b02:	4b03      	ldr	r3, [pc, #12]	; (1a003b10 <Chip_Clock_GetDividerDivisor+0x18>)
1a003b04:	5c18      	ldrb	r0, [r3, r0]
}
1a003b06:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003b0a:	4770      	bx	lr
1a003b0c:	40050000 	.word	0x40050000
1a003b10:	1a0052d8 	.word	0x1a0052d8

1a003b14 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003b14:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003b16:	2810      	cmp	r0, #16
1a003b18:	d80a      	bhi.n	1a003b30 <Chip_Clock_GetClockInputHz+0x1c>
1a003b1a:	e8df f000 	tbb	[pc, r0]
1a003b1e:	0b42      	.short	0x0b42
1a003b20:	091f160d 	.word	0x091f160d
1a003b24:	2b282522 	.word	0x2b282522
1a003b28:	322e0909 	.word	0x322e0909
1a003b2c:	3a36      	.short	0x3a36
1a003b2e:	3e          	.byte	0x3e
1a003b2f:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003b30:	2000      	movs	r0, #0
1a003b32:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003b34:	481e      	ldr	r0, [pc, #120]	; (1a003bb0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003b36:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003b38:	4b1e      	ldr	r3, [pc, #120]	; (1a003bb4 <Chip_Clock_GetClockInputHz+0xa0>)
1a003b3a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003b3e:	f003 0307 	and.w	r3, r3, #7
1a003b42:	2b04      	cmp	r3, #4
1a003b44:	d130      	bne.n	1a003ba8 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003b46:	2000      	movs	r0, #0
1a003b48:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003b4a:	4b1a      	ldr	r3, [pc, #104]	; (1a003bb4 <Chip_Clock_GetClockInputHz+0xa0>)
1a003b4c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003b50:	f003 0307 	and.w	r3, r3, #7
1a003b54:	2b04      	cmp	r3, #4
1a003b56:	d029      	beq.n	1a003bac <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003b58:	4817      	ldr	r0, [pc, #92]	; (1a003bb8 <Chip_Clock_GetClockInputHz+0xa4>)
1a003b5a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003b5c:	4b17      	ldr	r3, [pc, #92]	; (1a003bbc <Chip_Clock_GetClockInputHz+0xa8>)
1a003b5e:	6818      	ldr	r0, [r3, #0]
		break;
1a003b60:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003b62:	4b17      	ldr	r3, [pc, #92]	; (1a003bc0 <Chip_Clock_GetClockInputHz+0xac>)
1a003b64:	6818      	ldr	r0, [r3, #0]
		break;
1a003b66:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003b68:	4b16      	ldr	r3, [pc, #88]	; (1a003bc4 <Chip_Clock_GetClockInputHz+0xb0>)
1a003b6a:	6818      	ldr	r0, [r3, #0]
		break;
1a003b6c:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003b6e:	4b15      	ldr	r3, [pc, #84]	; (1a003bc4 <Chip_Clock_GetClockInputHz+0xb0>)
1a003b70:	6858      	ldr	r0, [r3, #4]
		break;
1a003b72:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003b74:	f000 f86a 	bl	1a003c4c <Chip_Clock_GetMainPLLHz>
		break;
1a003b78:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003b7a:	2100      	movs	r1, #0
1a003b7c:	f000 f89a 	bl	1a003cb4 <Chip_Clock_GetDivRate>
		break;
1a003b80:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003b82:	2101      	movs	r1, #1
1a003b84:	f000 f896 	bl	1a003cb4 <Chip_Clock_GetDivRate>
		break;
1a003b88:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003b8a:	2102      	movs	r1, #2
1a003b8c:	f000 f892 	bl	1a003cb4 <Chip_Clock_GetDivRate>
		break;
1a003b90:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003b92:	2103      	movs	r1, #3
1a003b94:	f000 f88e 	bl	1a003cb4 <Chip_Clock_GetDivRate>
		break;
1a003b98:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003b9a:	2104      	movs	r1, #4
1a003b9c:	f000 f88a 	bl	1a003cb4 <Chip_Clock_GetDivRate>
		break;
1a003ba0:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a003ba2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a003ba6:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a003ba8:	4803      	ldr	r0, [pc, #12]	; (1a003bb8 <Chip_Clock_GetClockInputHz+0xa4>)
1a003baa:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a003bac:	4806      	ldr	r0, [pc, #24]	; (1a003bc8 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a003bae:	bd08      	pop	{r3, pc}
1a003bb0:	00b71b00 	.word	0x00b71b00
1a003bb4:	40043000 	.word	0x40043000
1a003bb8:	017d7840 	.word	0x017d7840
1a003bbc:	1a005208 	.word	0x1a005208
1a003bc0:	1a005204 	.word	0x1a005204
1a003bc4:	10002bdc 	.word	0x10002bdc
1a003bc8:	02faf080 	.word	0x02faf080

1a003bcc <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003bcc:	b538      	push	{r3, r4, r5, lr}
1a003bce:	4605      	mov	r5, r0
1a003bd0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003bd2:	7908      	ldrb	r0, [r1, #4]
1a003bd4:	f7ff ff9e 	bl	1a003b14 <Chip_Clock_GetClockInputHz>
1a003bd8:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a003bda:	4b19      	ldr	r3, [pc, #100]	; (1a003c40 <Chip_Clock_CalcMainPLLValue+0x74>)
1a003bdc:	442b      	add	r3, r5
1a003bde:	4a19      	ldr	r2, [pc, #100]	; (1a003c44 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003be0:	4293      	cmp	r3, r2
1a003be2:	d821      	bhi.n	1a003c28 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003be4:	b318      	cbz	r0, 1a003c2e <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003be6:	2380      	movs	r3, #128	; 0x80
1a003be8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003bea:	2300      	movs	r3, #0
1a003bec:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003bee:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003bf0:	fbb5 f3f0 	udiv	r3, r5, r0
1a003bf4:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003bf6:	4a14      	ldr	r2, [pc, #80]	; (1a003c48 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003bf8:	4295      	cmp	r5, r2
1a003bfa:	d903      	bls.n	1a003c04 <Chip_Clock_CalcMainPLLValue+0x38>
1a003bfc:	fb03 f000 	mul.w	r0, r3, r0
1a003c00:	42a8      	cmp	r0, r5
1a003c02:	d007      	beq.n	1a003c14 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003c04:	4628      	mov	r0, r5
1a003c06:	4621      	mov	r1, r4
1a003c08:	f7ff fe9c 	bl	1a003944 <pll_get_frac>
		if (!ppll->nsel) {
1a003c0c:	68a3      	ldr	r3, [r4, #8]
1a003c0e:	b18b      	cbz	r3, 1a003c34 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a003c10:	3b01      	subs	r3, #1
1a003c12:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a003c14:	6923      	ldr	r3, [r4, #16]
1a003c16:	b183      	cbz	r3, 1a003c3a <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a003c18:	68e2      	ldr	r2, [r4, #12]
1a003c1a:	b10a      	cbz	r2, 1a003c20 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003c1c:	3a01      	subs	r2, #1
1a003c1e:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a003c20:	3b01      	subs	r3, #1
1a003c22:	6123      	str	r3, [r4, #16]

	return 0;
1a003c24:	2000      	movs	r0, #0
1a003c26:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a003c28:	f04f 30ff 	mov.w	r0, #4294967295
1a003c2c:	bd38      	pop	{r3, r4, r5, pc}
1a003c2e:	f04f 30ff 	mov.w	r0, #4294967295
1a003c32:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a003c34:	f04f 30ff 	mov.w	r0, #4294967295
1a003c38:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a003c3a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a003c3e:	bd38      	pop	{r3, r4, r5, pc}
1a003c40:	ff6b3a10 	.word	0xff6b3a10
1a003c44:	0b940510 	.word	0x0b940510
1a003c48:	094c5eff 	.word	0x094c5eff

1a003c4c <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a003c4c:	b570      	push	{r4, r5, r6, lr}
1a003c4e:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003c50:	4d16      	ldr	r5, [pc, #88]	; (1a003cac <Chip_Clock_GetMainPLLHz+0x60>)
1a003c52:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003c54:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003c58:	f7ff ff5c 	bl	1a003b14 <Chip_Clock_GetClockInputHz>
1a003c5c:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003c5e:	4b14      	ldr	r3, [pc, #80]	; (1a003cb0 <Chip_Clock_GetMainPLLHz+0x64>)
1a003c60:	6818      	ldr	r0, [r3, #0]
1a003c62:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003c64:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a003c66:	f010 0001 	ands.w	r0, r0, #1
1a003c6a:	d01d      	beq.n	1a003ca8 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a003c6c:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003c70:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003c74:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a003c78:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a003c7c:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a003c7e:	3201      	adds	r2, #1
	p = ptab[psel];
1a003c80:	a802      	add	r0, sp, #8
1a003c82:	4401      	add	r1, r0
1a003c84:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a003c88:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003c8c:	d100      	bne.n	1a003c90 <Chip_Clock_GetMainPLLHz+0x44>
1a003c8e:	b125      	cbz	r5, 1a003c9a <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a003c90:	fbb6 f0f2 	udiv	r0, r6, r2
1a003c94:	fb03 f000 	mul.w	r0, r3, r0
1a003c98:	e006      	b.n	1a003ca8 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a003c9a:	0040      	lsls	r0, r0, #1
1a003c9c:	fbb3 f3f0 	udiv	r3, r3, r0
1a003ca0:	fbb6 f0f2 	udiv	r0, r6, r2
1a003ca4:	fb00 f003 	mul.w	r0, r0, r3
}
1a003ca8:	b002      	add	sp, #8
1a003caa:	bd70      	pop	{r4, r5, r6, pc}
1a003cac:	40050000 	.word	0x40050000
1a003cb0:	1a0052d4 	.word	0x1a0052d4

1a003cb4 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a003cb4:	b538      	push	{r3, r4, r5, lr}
1a003cb6:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a003cb8:	4608      	mov	r0, r1
1a003cba:	f7ff ff0f 	bl	1a003adc <Chip_Clock_GetDividerSource>
1a003cbe:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003cc0:	4620      	mov	r0, r4
1a003cc2:	f7ff ff19 	bl	1a003af8 <Chip_Clock_GetDividerDivisor>
1a003cc6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003cc8:	4628      	mov	r0, r5
1a003cca:	f7ff ff23 	bl	1a003b14 <Chip_Clock_GetClockInputHz>
1a003cce:	3401      	adds	r4, #1
}
1a003cd0:	fbb0 f0f4 	udiv	r0, r0, r4
1a003cd4:	bd38      	pop	{r3, r4, r5, pc}
1a003cd6:	bf00      	nop

1a003cd8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003cd8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003cda:	0085      	lsls	r5, r0, #2
1a003cdc:	4c0d      	ldr	r4, [pc, #52]	; (1a003d14 <Chip_Clock_SetBaseClock+0x3c>)
1a003cde:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a003ce0:	281b      	cmp	r0, #27
1a003ce2:	d80f      	bhi.n	1a003d04 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a003ce4:	2911      	cmp	r1, #17
1a003ce6:	d012      	beq.n	1a003d0e <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003ce8:	4c0b      	ldr	r4, [pc, #44]	; (1a003d18 <Chip_Clock_SetBaseClock+0x40>)
1a003cea:	402c      	ands	r4, r5

			if (autoblocken) {
1a003cec:	b10a      	cbz	r2, 1a003cf2 <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a003cee:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a003cf2:	b10b      	cbz	r3, 1a003cf8 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a003cf4:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003cf8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003cfc:	0080      	lsls	r0, r0, #2
1a003cfe:	4b05      	ldr	r3, [pc, #20]	; (1a003d14 <Chip_Clock_SetBaseClock+0x3c>)
1a003d00:	501c      	str	r4, [r3, r0]
1a003d02:	e004      	b.n	1a003d0e <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003d04:	f045 0501 	orr.w	r5, r5, #1
1a003d08:	0080      	lsls	r0, r0, #2
1a003d0a:	4b02      	ldr	r3, [pc, #8]	; (1a003d14 <Chip_Clock_SetBaseClock+0x3c>)
1a003d0c:	501d      	str	r5, [r3, r0]
	}
}
1a003d0e:	bc30      	pop	{r4, r5}
1a003d10:	4770      	bx	lr
1a003d12:	bf00      	nop
1a003d14:	4005005c 	.word	0x4005005c
1a003d18:	e0fff7fe 	.word	0xe0fff7fe

1a003d1c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003d1c:	281b      	cmp	r0, #27
1a003d1e:	d808      	bhi.n	1a003d32 <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003d20:	0080      	lsls	r0, r0, #2
1a003d22:	4b06      	ldr	r3, [pc, #24]	; (1a003d3c <Chip_Clock_GetBaseClock+0x20>)
1a003d24:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a003d26:	f010 0f01 	tst.w	r0, #1
1a003d2a:	d104      	bne.n	1a003d36 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003d2c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003d30:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a003d32:	2011      	movs	r0, #17
1a003d34:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a003d36:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003d38:	4770      	bx	lr
1a003d3a:	bf00      	nop
1a003d3c:	4005005c 	.word	0x4005005c

1a003d40 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a003d40:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003d42:	f7ff ffeb 	bl	1a003d1c <Chip_Clock_GetBaseClock>
1a003d46:	f7ff fee5 	bl	1a003b14 <Chip_Clock_GetClockInputHz>
}
1a003d4a:	bd08      	pop	{r3, pc}

1a003d4c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003d4c:	b909      	cbnz	r1, 1a003d52 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a003d4e:	2101      	movs	r1, #1
1a003d50:	e000      	b.n	1a003d54 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a003d52:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a003d54:	b10a      	cbz	r2, 1a003d5a <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a003d56:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003d5a:	2b02      	cmp	r3, #2
1a003d5c:	d101      	bne.n	1a003d62 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a003d5e:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003d62:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003d66:	d305      	bcc.n	1a003d74 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003d68:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003d6c:	4b04      	ldr	r3, [pc, #16]	; (1a003d80 <Chip_Clock_EnableOpts+0x34>)
1a003d6e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003d72:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003d74:	3020      	adds	r0, #32
1a003d76:	4b03      	ldr	r3, [pc, #12]	; (1a003d84 <Chip_Clock_EnableOpts+0x38>)
1a003d78:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003d7c:	4770      	bx	lr
1a003d7e:	bf00      	nop
1a003d80:	40052000 	.word	0x40052000
1a003d84:	40051000 	.word	0x40051000

1a003d88 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003d88:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003d8c:	d309      	bcc.n	1a003da2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003d8e:	4a09      	ldr	r2, [pc, #36]	; (1a003db4 <Chip_Clock_Enable+0x2c>)
1a003d90:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003d94:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003d98:	f043 0301 	orr.w	r3, r3, #1
1a003d9c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003da0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003da2:	4a05      	ldr	r2, [pc, #20]	; (1a003db8 <Chip_Clock_Enable+0x30>)
1a003da4:	3020      	adds	r0, #32
1a003da6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003daa:	f043 0301 	orr.w	r3, r3, #1
1a003dae:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003db2:	4770      	bx	lr
1a003db4:	40052000 	.word	0x40052000
1a003db8:	40051000 	.word	0x40051000

1a003dbc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003dbc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003dbe:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003dc2:	d305      	bcc.n	1a003dd0 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003dc4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003dc8:	4a0d      	ldr	r2, [pc, #52]	; (1a003e00 <Chip_Clock_GetRate+0x44>)
1a003dca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003dce:	e004      	b.n	1a003dda <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003dd0:	f100 0320 	add.w	r3, r0, #32
1a003dd4:	4a0b      	ldr	r2, [pc, #44]	; (1a003e04 <Chip_Clock_GetRate+0x48>)
1a003dd6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003dda:	f014 0f01 	tst.w	r4, #1
1a003dde:	d00c      	beq.n	1a003dfa <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003de0:	f7ff fe32 	bl	1a003a48 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003de4:	f7ff ffac 	bl	1a003d40 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a003de8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003dec:	d101      	bne.n	1a003df2 <Chip_Clock_GetRate+0x36>
			div = 1;
1a003dee:	2301      	movs	r3, #1
1a003df0:	e000      	b.n	1a003df4 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a003df2:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a003df4:	fbb0 f0f3 	udiv	r0, r0, r3
1a003df8:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a003dfa:	2000      	movs	r0, #0
	}

	return rate;
}
1a003dfc:	bd10      	pop	{r4, pc}
1a003dfe:	bf00      	nop
1a003e00:	40052000 	.word	0x40052000
1a003e04:	40051000 	.word	0x40051000

1a003e08 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003e08:	b570      	push	{r4, r5, r6, lr}
1a003e0a:	b08a      	sub	sp, #40	; 0x28
1a003e0c:	4605      	mov	r5, r0
1a003e0e:	460e      	mov	r6, r1
1a003e10:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003e12:	f242 7310 	movw	r3, #10000	; 0x2710
1a003e16:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003e18:	2806      	cmp	r0, #6
1a003e1a:	d101      	bne.n	1a003e20 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a003e1c:	f7ff fe38 	bl	1a003a90 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003e20:	2004      	movs	r0, #4
1a003e22:	4629      	mov	r1, r5
1a003e24:	2201      	movs	r2, #1
1a003e26:	2300      	movs	r3, #0
1a003e28:	f7ff ff56 	bl	1a003cd8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003e2c:	4a47      	ldr	r2, [pc, #284]	; (1a003f4c <Chip_SetupCoreClock+0x144>)
1a003e2e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003e30:	f043 0301 	orr.w	r3, r3, #1
1a003e34:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003e36:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003e3a:	4630      	mov	r0, r6
1a003e3c:	a901      	add	r1, sp, #4
1a003e3e:	f7ff fec5 	bl	1a003bcc <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003e42:	4b43      	ldr	r3, [pc, #268]	; (1a003f50 <Chip_SetupCoreClock+0x148>)
1a003e44:	429e      	cmp	r6, r3
1a003e46:	d913      	bls.n	1a003e70 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a003e48:	9b01      	ldr	r3, [sp, #4]
1a003e4a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003e4e:	d000      	beq.n	1a003e52 <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003e50:	e7fe      	b.n	1a003e50 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a003e52:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003e56:	d005      	beq.n	1a003e64 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003e5c:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a003e5e:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a003e60:	2601      	movs	r6, #1
1a003e62:	e007      	b.n	1a003e74 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a003e64:	9b04      	ldr	r3, [sp, #16]
1a003e66:	3301      	adds	r3, #1
1a003e68:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a003e6a:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a003e6c:	2600      	movs	r6, #0
1a003e6e:	e001      	b.n	1a003e74 <Chip_SetupCoreClock+0x6c>
1a003e70:	2500      	movs	r5, #0
1a003e72:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003e74:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003e78:	9b01      	ldr	r3, [sp, #4]
1a003e7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003e7e:	9a05      	ldr	r2, [sp, #20]
1a003e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003e84:	9a03      	ldr	r2, [sp, #12]
1a003e86:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003e8a:	9a04      	ldr	r2, [sp, #16]
1a003e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003e94:	4a2d      	ldr	r2, [pc, #180]	; (1a003f4c <Chip_SetupCoreClock+0x144>)
1a003e96:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003e98:	4b2c      	ldr	r3, [pc, #176]	; (1a003f4c <Chip_SetupCoreClock+0x144>)
1a003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003e9c:	f013 0f01 	tst.w	r3, #1
1a003ea0:	d0fa      	beq.n	1a003e98 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003ea2:	2004      	movs	r0, #4
1a003ea4:	2109      	movs	r1, #9
1a003ea6:	2201      	movs	r2, #1
1a003ea8:	2300      	movs	r3, #0
1a003eaa:	f7ff ff15 	bl	1a003cd8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003eae:	b1ee      	cbz	r6, 1a003eec <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003eb0:	f242 7310 	movw	r3, #10000	; 0x2710
1a003eb4:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003eb8:	1e5a      	subs	r2, r3, #1
1a003eba:	9209      	str	r2, [sp, #36]	; 0x24
1a003ebc:	2b00      	cmp	r3, #0
1a003ebe:	d1fa      	bne.n	1a003eb6 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a003ec0:	9b01      	ldr	r3, [sp, #4]
1a003ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003ec6:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003ec8:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003ecc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003ed0:	9a05      	ldr	r2, [sp, #20]
1a003ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003ed6:	9a03      	ldr	r2, [sp, #12]
1a003ed8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003edc:	9a04      	ldr	r2, [sp, #16]
1a003ede:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003ee2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003ee6:	4a19      	ldr	r2, [pc, #100]	; (1a003f4c <Chip_SetupCoreClock+0x144>)
1a003ee8:	6453      	str	r3, [r2, #68]	; 0x44
1a003eea:	e01c      	b.n	1a003f26 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a003eec:	b1dd      	cbz	r5, 1a003f26 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003eee:	f242 7310 	movw	r3, #10000	; 0x2710
1a003ef2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003ef6:	1e5a      	subs	r2, r3, #1
1a003ef8:	9209      	str	r2, [sp, #36]	; 0x24
1a003efa:	2b00      	cmp	r3, #0
1a003efc:	d1fa      	bne.n	1a003ef4 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a003efe:	9b04      	ldr	r3, [sp, #16]
1a003f00:	1e59      	subs	r1, r3, #1
1a003f02:	9104      	str	r1, [sp, #16]
1a003f04:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003f08:	9b01      	ldr	r3, [sp, #4]
1a003f0a:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a003f0e:	9b05      	ldr	r3, [sp, #20]
1a003f10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a003f14:	9b03      	ldr	r3, [sp, #12]
1a003f16:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a003f1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a003f1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003f22:	4a0a      	ldr	r2, [pc, #40]	; (1a003f4c <Chip_SetupCoreClock+0x144>)
1a003f24:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003f26:	b964      	cbnz	r4, 1a003f42 <Chip_SetupCoreClock+0x13a>
1a003f28:	e00e      	b.n	1a003f48 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003f2a:	4a0a      	ldr	r2, [pc, #40]	; (1a003f54 <Chip_SetupCoreClock+0x14c>)
1a003f2c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a003f30:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a003f34:	7859      	ldrb	r1, [r3, #1]
1a003f36:	789a      	ldrb	r2, [r3, #2]
1a003f38:	78db      	ldrb	r3, [r3, #3]
1a003f3a:	f7ff fecd 	bl	1a003cd8 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003f3e:	3401      	adds	r4, #1
1a003f40:	e000      	b.n	1a003f44 <Chip_SetupCoreClock+0x13c>
1a003f42:	2400      	movs	r4, #0
1a003f44:	2c11      	cmp	r4, #17
1a003f46:	d9f0      	bls.n	1a003f2a <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003f48:	b00a      	add	sp, #40	; 0x28
1a003f4a:	bd70      	pop	{r4, r5, r6, pc}
1a003f4c:	40050000 	.word	0x40050000
1a003f50:	068e7780 	.word	0x068e7780
1a003f54:	1a00534c 	.word	0x1a00534c

1a003f58 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a003f58:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a003f5a:	4b10      	ldr	r3, [pc, #64]	; (1a003f9c <fpuInit+0x44>)
1a003f5c:	681b      	ldr	r3, [r3, #0]
1a003f5e:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a003f60:	4b0f      	ldr	r3, [pc, #60]	; (1a003fa0 <fpuInit+0x48>)
1a003f62:	681b      	ldr	r3, [r3, #0]
1a003f64:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a003f66:	9a02      	ldr	r2, [sp, #8]
1a003f68:	4b0e      	ldr	r3, [pc, #56]	; (1a003fa4 <fpuInit+0x4c>)
1a003f6a:	429a      	cmp	r2, r3
1a003f6c:	d105      	bne.n	1a003f7a <fpuInit+0x22>
1a003f6e:	9a01      	ldr	r2, [sp, #4]
1a003f70:	4b0d      	ldr	r3, [pc, #52]	; (1a003fa8 <fpuInit+0x50>)
1a003f72:	429a      	cmp	r2, r3
1a003f74:	d003      	beq.n	1a003f7e <fpuInit+0x26>
1a003f76:	2300      	movs	r3, #0
1a003f78:	e002      	b.n	1a003f80 <fpuInit+0x28>
1a003f7a:	2300      	movs	r3, #0
1a003f7c:	e000      	b.n	1a003f80 <fpuInit+0x28>
1a003f7e:	2301      	movs	r3, #1

	if (vfpPresent) {
1a003f80:	f013 0fff 	tst.w	r3, #255	; 0xff
1a003f84:	d008      	beq.n	1a003f98 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a003f86:	4a09      	ldr	r2, [pc, #36]	; (1a003fac <fpuInit+0x54>)
1a003f88:	6813      	ldr	r3, [r2, #0]
1a003f8a:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a003f8c:	9b03      	ldr	r3, [sp, #12]
1a003f8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003f92:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a003f94:	9b03      	ldr	r3, [sp, #12]
1a003f96:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a003f98:	b004      	add	sp, #16
1a003f9a:	4770      	bx	lr
1a003f9c:	e000ef40 	.word	0xe000ef40
1a003fa0:	e000ef44 	.word	0xe000ef44
1a003fa4:	10110021 	.word	0x10110021
1a003fa8:	11000011 	.word	0x11000011
1a003fac:	e000ed88 	.word	0xe000ed88

1a003fb0 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a003fb0:	4770      	bx	lr
1a003fb2:	bf00      	nop

1a003fb4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003fb4:	2901      	cmp	r1, #1
1a003fb6:	d109      	bne.n	1a003fcc <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a003fb8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003fbc:	0080      	lsls	r0, r0, #2
1a003fbe:	4b04      	ldr	r3, [pc, #16]	; (1a003fd0 <Chip_I2C_EventHandler+0x1c>)
1a003fc0:	4418      	add	r0, r3
1a003fc2:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a003fc4:	7d13      	ldrb	r3, [r2, #20]
1a003fc6:	b2db      	uxtb	r3, r3
1a003fc8:	2b04      	cmp	r3, #4
1a003fca:	d0fb      	beq.n	1a003fc4 <Chip_I2C_EventHandler+0x10>
1a003fcc:	4770      	bx	lr
1a003fce:	bf00      	nop
1a003fd0:	100000a4 	.word	0x100000a4

1a003fd4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003fd4:	b570      	push	{r4, r5, r6, lr}
1a003fd6:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a003fd8:	4e06      	ldr	r6, [pc, #24]	; (1a003ff4 <Chip_I2C_Init+0x20>)
1a003fda:	00c4      	lsls	r4, r0, #3
1a003fdc:	1a23      	subs	r3, r4, r0
1a003fde:	009b      	lsls	r3, r3, #2
1a003fe0:	4433      	add	r3, r6
1a003fe2:	8898      	ldrh	r0, [r3, #4]
1a003fe4:	f7ff fed0 	bl	1a003d88 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003fe8:	1b60      	subs	r0, r4, r5
1a003fea:	0080      	lsls	r0, r0, #2
1a003fec:	5833      	ldr	r3, [r6, r0]
1a003fee:	226c      	movs	r2, #108	; 0x6c
1a003ff0:	619a      	str	r2, [r3, #24]
1a003ff2:	bd70      	pop	{r4, r5, r6, pc}
1a003ff4:	100000a4 	.word	0x100000a4

1a003ff8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003ffc:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a003ffe:	4f09      	ldr	r7, [pc, #36]	; (1a004024 <Chip_I2C_SetClockRate+0x2c>)
1a004000:	00c5      	lsls	r5, r0, #3
1a004002:	1a2e      	subs	r6, r5, r0
1a004004:	00b6      	lsls	r6, r6, #2
1a004006:	19bb      	adds	r3, r7, r6
1a004008:	8898      	ldrh	r0, [r3, #4]
1a00400a:	f7ff fed7 	bl	1a003dbc <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00400e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a004012:	59bb      	ldr	r3, [r7, r6]
1a004014:	0842      	lsrs	r2, r0, #1
1a004016:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a004018:	59bb      	ldr	r3, [r7, r6]
1a00401a:	691a      	ldr	r2, [r3, #16]
1a00401c:	1a80      	subs	r0, r0, r2
1a00401e:	6158      	str	r0, [r3, #20]
1a004020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004024:	100000a4 	.word	0x100000a4

1a004028 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004028:	4b03      	ldr	r3, [pc, #12]	; (1a004038 <Chip_SSP_GetClockIndex+0x10>)
1a00402a:	4298      	cmp	r0, r3
1a00402c:	d101      	bne.n	1a004032 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a00402e:	20a5      	movs	r0, #165	; 0xa5
1a004030:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a004032:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a004034:	4770      	bx	lr
1a004036:	bf00      	nop
1a004038:	400c5000 	.word	0x400c5000

1a00403c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00403c:	4b04      	ldr	r3, [pc, #16]	; (1a004050 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00403e:	4298      	cmp	r0, r3
1a004040:	d102      	bne.n	1a004048 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a004042:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a004046:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a004048:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00404c:	4770      	bx	lr
1a00404e:	bf00      	nop
1a004050:	400c5000 	.word	0x400c5000

1a004054 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a004054:	6803      	ldr	r3, [r0, #0]
1a004056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00405a:	0209      	lsls	r1, r1, #8
1a00405c:	b289      	uxth	r1, r1
1a00405e:	430b      	orrs	r3, r1
1a004060:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a004062:	6102      	str	r2, [r0, #16]
1a004064:	4770      	bx	lr
1a004066:	bf00      	nop

1a004068 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a004068:	b570      	push	{r4, r5, r6, lr}
1a00406a:	4606      	mov	r6, r0
1a00406c:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00406e:	f7ff ffe5 	bl	1a00403c <Chip_SSP_GetPeriphClockIndex>
1a004072:	f7ff fea3 	bl	1a003dbc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a004076:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a004078:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a00407c:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00407e:	e00c      	b.n	1a00409a <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a004080:	1c4c      	adds	r4, r1, #1
1a004082:	fb02 f304 	mul.w	r3, r2, r4
1a004086:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00408a:	42ab      	cmp	r3, r5
1a00408c:	d905      	bls.n	1a00409a <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a00408e:	2cff      	cmp	r4, #255	; 0xff
1a004090:	d902      	bls.n	1a004098 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a004092:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a004094:	2100      	movs	r1, #0
1a004096:	e000      	b.n	1a00409a <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a004098:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00409a:	42ab      	cmp	r3, r5
1a00409c:	d8f0      	bhi.n	1a004080 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00409e:	4630      	mov	r0, r6
1a0040a0:	f7ff ffd8 	bl	1a004054 <Chip_SSP_SetClockRate>
1a0040a4:	bd70      	pop	{r4, r5, r6, pc}
1a0040a6:	bf00      	nop

1a0040a8 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0040a8:	b510      	push	{r4, lr}
1a0040aa:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0040ac:	f7ff ffbc 	bl	1a004028 <Chip_SSP_GetClockIndex>
1a0040b0:	f7ff fe6a 	bl	1a003d88 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0040b4:	4620      	mov	r0, r4
1a0040b6:	f7ff ffc1 	bl	1a00403c <Chip_SSP_GetPeriphClockIndex>
1a0040ba:	f7ff fe65 	bl	1a003d88 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0040be:	6863      	ldr	r3, [r4, #4]
1a0040c0:	f023 0304 	bic.w	r3, r3, #4
1a0040c4:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0040c6:	6823      	ldr	r3, [r4, #0]
1a0040c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0040cc:	f043 0307 	orr.w	r3, r3, #7
1a0040d0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0040d2:	4620      	mov	r0, r4
1a0040d4:	4901      	ldr	r1, [pc, #4]	; (1a0040dc <Chip_SSP_Init+0x34>)
1a0040d6:	f7ff ffc7 	bl	1a004068 <Chip_SSP_SetBitRate>
1a0040da:	bd10      	pop	{r4, pc}
1a0040dc:	000186a0 	.word	0x000186a0

1a0040e0 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a0040e0:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0040e2:	4a19      	ldr	r2, [pc, #100]	; (1a004148 <ResetISR+0x68>)
1a0040e4:	4b19      	ldr	r3, [pc, #100]	; (1a00414c <ResetISR+0x6c>)
1a0040e6:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0040e8:	4a19      	ldr	r2, [pc, #100]	; (1a004150 <ResetISR+0x70>)
1a0040ea:	3304      	adds	r3, #4
1a0040ec:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0040ee:	2300      	movs	r3, #0
1a0040f0:	e005      	b.n	1a0040fe <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0040f2:	f04f 31ff 	mov.w	r1, #4294967295
1a0040f6:	4a17      	ldr	r2, [pc, #92]	; (1a004154 <ResetISR+0x74>)
1a0040f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0040fc:	3301      	adds	r3, #1
1a0040fe:	2b07      	cmp	r3, #7
1a004100:	d9f7      	bls.n	1a0040f2 <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a004102:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a004104:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a004106:	f7ff fa27 	bl	1a003558 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a00410a:	4b13      	ldr	r3, [pc, #76]	; (1a004158 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a00410c:	e007      	b.n	1a00411e <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a00410e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a004112:	6818      	ldr	r0, [r3, #0]
1a004114:	6859      	ldr	r1, [r3, #4]
1a004116:	689a      	ldr	r2, [r3, #8]
1a004118:	f7fc f848 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a00411c:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a00411e:	4a0f      	ldr	r2, [pc, #60]	; (1a00415c <ResetISR+0x7c>)
1a004120:	4293      	cmp	r3, r2
1a004122:	d3f4      	bcc.n	1a00410e <ResetISR+0x2e>
1a004124:	e006      	b.n	1a004134 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a004126:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a004128:	f854 0b08 	ldr.w	r0, [r4], #8
1a00412c:	6859      	ldr	r1, [r3, #4]
1a00412e:	f7fc f84b 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a004132:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a004134:	4a0a      	ldr	r2, [pc, #40]	; (1a004160 <ResetISR+0x80>)
1a004136:	4293      	cmp	r3, r2
1a004138:	d3f5      	bcc.n	1a004126 <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a00413a:	f000 fae3 	bl	1a004704 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a00413e:	f7ff f9dd 	bl	1a0034fc <Board_Init>
    main();
1a004142:	f7fc f8dd 	bl	1a000300 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a004146:	e7fe      	b.n	1a004146 <ResetISR+0x66>
1a004148:	10df1000 	.word	0x10df1000
1a00414c:	40053100 	.word	0x40053100
1a004150:	01dff7ff 	.word	0x01dff7ff
1a004154:	e000e280 	.word	0xe000e280
1a004158:	1a000114 	.word	0x1a000114
1a00415c:	1a000150 	.word	0x1a000150
1a004160:	1a000178 	.word	0x1a000178

1a004164 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a004164:	4770      	bx	lr
1a004166:	bf00      	nop

1a004168 <__aeabi_uldivmod>:
1a004168:	b953      	cbnz	r3, 1a004180 <__aeabi_uldivmod+0x18>
1a00416a:	b94a      	cbnz	r2, 1a004180 <__aeabi_uldivmod+0x18>
1a00416c:	2900      	cmp	r1, #0
1a00416e:	bf08      	it	eq
1a004170:	2800      	cmpeq	r0, #0
1a004172:	bf1c      	itt	ne
1a004174:	f04f 31ff 	movne.w	r1, #4294967295
1a004178:	f04f 30ff 	movne.w	r0, #4294967295
1a00417c:	f000 b83c 	b.w	1a0041f8 <__aeabi_idiv0>
1a004180:	b082      	sub	sp, #8
1a004182:	46ec      	mov	ip, sp
1a004184:	e92d 5000 	stmdb	sp!, {ip, lr}
1a004188:	f000 f81e 	bl	1a0041c8 <__gnu_uldivmod_helper>
1a00418c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004190:	b002      	add	sp, #8
1a004192:	bc0c      	pop	{r2, r3}
1a004194:	4770      	bx	lr
1a004196:	bf00      	nop

1a004198 <__gnu_ldivmod_helper>:
1a004198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00419c:	9c06      	ldr	r4, [sp, #24]
1a00419e:	4615      	mov	r5, r2
1a0041a0:	4606      	mov	r6, r0
1a0041a2:	460f      	mov	r7, r1
1a0041a4:	4698      	mov	r8, r3
1a0041a6:	f000 f829 	bl	1a0041fc <__divdi3>
1a0041aa:	fb05 f301 	mul.w	r3, r5, r1
1a0041ae:	fb00 3808 	mla	r8, r0, r8, r3
1a0041b2:	fba5 2300 	umull	r2, r3, r5, r0
1a0041b6:	1ab2      	subs	r2, r6, r2
1a0041b8:	4443      	add	r3, r8
1a0041ba:	eb67 0303 	sbc.w	r3, r7, r3
1a0041be:	e9c4 2300 	strd	r2, r3, [r4]
1a0041c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0041c6:	bf00      	nop

1a0041c8 <__gnu_uldivmod_helper>:
1a0041c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0041cc:	9c06      	ldr	r4, [sp, #24]
1a0041ce:	4690      	mov	r8, r2
1a0041d0:	4606      	mov	r6, r0
1a0041d2:	460f      	mov	r7, r1
1a0041d4:	461d      	mov	r5, r3
1a0041d6:	f000 f95f 	bl	1a004498 <__udivdi3>
1a0041da:	fb00 f505 	mul.w	r5, r0, r5
1a0041de:	fba0 2308 	umull	r2, r3, r0, r8
1a0041e2:	fb08 5501 	mla	r5, r8, r1, r5
1a0041e6:	1ab2      	subs	r2, r6, r2
1a0041e8:	442b      	add	r3, r5
1a0041ea:	eb67 0303 	sbc.w	r3, r7, r3
1a0041ee:	e9c4 2300 	strd	r2, r3, [r4]
1a0041f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0041f6:	bf00      	nop

1a0041f8 <__aeabi_idiv0>:
1a0041f8:	4770      	bx	lr
1a0041fa:	bf00      	nop

1a0041fc <__divdi3>:
1a0041fc:	2900      	cmp	r1, #0
1a0041fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004202:	f2c0 80a6 	blt.w	1a004352 <__divdi3+0x156>
1a004206:	2600      	movs	r6, #0
1a004208:	2b00      	cmp	r3, #0
1a00420a:	f2c0 809c 	blt.w	1a004346 <__divdi3+0x14a>
1a00420e:	4688      	mov	r8, r1
1a004210:	4694      	mov	ip, r2
1a004212:	469e      	mov	lr, r3
1a004214:	4615      	mov	r5, r2
1a004216:	4604      	mov	r4, r0
1a004218:	460f      	mov	r7, r1
1a00421a:	2b00      	cmp	r3, #0
1a00421c:	d13d      	bne.n	1a00429a <__divdi3+0x9e>
1a00421e:	428a      	cmp	r2, r1
1a004220:	d959      	bls.n	1a0042d6 <__divdi3+0xda>
1a004222:	fab2 f382 	clz	r3, r2
1a004226:	b13b      	cbz	r3, 1a004238 <__divdi3+0x3c>
1a004228:	f1c3 0220 	rsb	r2, r3, #32
1a00422c:	409f      	lsls	r7, r3
1a00422e:	fa20 f202 	lsr.w	r2, r0, r2
1a004232:	409d      	lsls	r5, r3
1a004234:	4317      	orrs	r7, r2
1a004236:	409c      	lsls	r4, r3
1a004238:	0c29      	lsrs	r1, r5, #16
1a00423a:	0c22      	lsrs	r2, r4, #16
1a00423c:	fbb7 fef1 	udiv	lr, r7, r1
1a004240:	b2a8      	uxth	r0, r5
1a004242:	fb01 771e 	mls	r7, r1, lr, r7
1a004246:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a00424a:	fb00 f30e 	mul.w	r3, r0, lr
1a00424e:	42bb      	cmp	r3, r7
1a004250:	d90a      	bls.n	1a004268 <__divdi3+0x6c>
1a004252:	197f      	adds	r7, r7, r5
1a004254:	f10e 32ff 	add.w	r2, lr, #4294967295
1a004258:	f080 8105 	bcs.w	1a004466 <__divdi3+0x26a>
1a00425c:	42bb      	cmp	r3, r7
1a00425e:	f240 8102 	bls.w	1a004466 <__divdi3+0x26a>
1a004262:	f1ae 0e02 	sub.w	lr, lr, #2
1a004266:	442f      	add	r7, r5
1a004268:	1aff      	subs	r7, r7, r3
1a00426a:	b2a4      	uxth	r4, r4
1a00426c:	fbb7 f3f1 	udiv	r3, r7, r1
1a004270:	fb01 7713 	mls	r7, r1, r3, r7
1a004274:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a004278:	fb00 f003 	mul.w	r0, r0, r3
1a00427c:	42b8      	cmp	r0, r7
1a00427e:	d908      	bls.n	1a004292 <__divdi3+0x96>
1a004280:	197f      	adds	r7, r7, r5
1a004282:	f103 32ff 	add.w	r2, r3, #4294967295
1a004286:	f080 80f0 	bcs.w	1a00446a <__divdi3+0x26e>
1a00428a:	42b8      	cmp	r0, r7
1a00428c:	f240 80ed 	bls.w	1a00446a <__divdi3+0x26e>
1a004290:	3b02      	subs	r3, #2
1a004292:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a004296:	2200      	movs	r2, #0
1a004298:	e003      	b.n	1a0042a2 <__divdi3+0xa6>
1a00429a:	428b      	cmp	r3, r1
1a00429c:	d90f      	bls.n	1a0042be <__divdi3+0xc2>
1a00429e:	2200      	movs	r2, #0
1a0042a0:	4613      	mov	r3, r2
1a0042a2:	1c34      	adds	r4, r6, #0
1a0042a4:	bf18      	it	ne
1a0042a6:	2401      	movne	r4, #1
1a0042a8:	4260      	negs	r0, r4
1a0042aa:	f04f 0500 	mov.w	r5, #0
1a0042ae:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a0042b2:	4058      	eors	r0, r3
1a0042b4:	4051      	eors	r1, r2
1a0042b6:	1900      	adds	r0, r0, r4
1a0042b8:	4169      	adcs	r1, r5
1a0042ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0042be:	fab3 f283 	clz	r2, r3
1a0042c2:	2a00      	cmp	r2, #0
1a0042c4:	f040 8086 	bne.w	1a0043d4 <__divdi3+0x1d8>
1a0042c8:	428b      	cmp	r3, r1
1a0042ca:	d302      	bcc.n	1a0042d2 <__divdi3+0xd6>
1a0042cc:	4584      	cmp	ip, r0
1a0042ce:	f200 80db 	bhi.w	1a004488 <__divdi3+0x28c>
1a0042d2:	2301      	movs	r3, #1
1a0042d4:	e7e5      	b.n	1a0042a2 <__divdi3+0xa6>
1a0042d6:	b912      	cbnz	r2, 1a0042de <__divdi3+0xe2>
1a0042d8:	2301      	movs	r3, #1
1a0042da:	fbb3 f5f2 	udiv	r5, r3, r2
1a0042de:	fab5 f085 	clz	r0, r5
1a0042e2:	2800      	cmp	r0, #0
1a0042e4:	d13b      	bne.n	1a00435e <__divdi3+0x162>
1a0042e6:	1b78      	subs	r0, r7, r5
1a0042e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0042ec:	fa1f fc85 	uxth.w	ip, r5
1a0042f0:	2201      	movs	r2, #1
1a0042f2:	fbb0 f8fe 	udiv	r8, r0, lr
1a0042f6:	0c21      	lsrs	r1, r4, #16
1a0042f8:	fb0e 0718 	mls	r7, lr, r8, r0
1a0042fc:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a004300:	fb0c f308 	mul.w	r3, ip, r8
1a004304:	42bb      	cmp	r3, r7
1a004306:	d907      	bls.n	1a004318 <__divdi3+0x11c>
1a004308:	197f      	adds	r7, r7, r5
1a00430a:	f108 31ff 	add.w	r1, r8, #4294967295
1a00430e:	d202      	bcs.n	1a004316 <__divdi3+0x11a>
1a004310:	42bb      	cmp	r3, r7
1a004312:	f200 80bd 	bhi.w	1a004490 <__divdi3+0x294>
1a004316:	4688      	mov	r8, r1
1a004318:	1aff      	subs	r7, r7, r3
1a00431a:	b2a4      	uxth	r4, r4
1a00431c:	fbb7 f3fe 	udiv	r3, r7, lr
1a004320:	fb0e 7713 	mls	r7, lr, r3, r7
1a004324:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a004328:	fb0c fc03 	mul.w	ip, ip, r3
1a00432c:	45bc      	cmp	ip, r7
1a00432e:	d907      	bls.n	1a004340 <__divdi3+0x144>
1a004330:	197f      	adds	r7, r7, r5
1a004332:	f103 31ff 	add.w	r1, r3, #4294967295
1a004336:	d202      	bcs.n	1a00433e <__divdi3+0x142>
1a004338:	45bc      	cmp	ip, r7
1a00433a:	f200 80a7 	bhi.w	1a00448c <__divdi3+0x290>
1a00433e:	460b      	mov	r3, r1
1a004340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004344:	e7ad      	b.n	1a0042a2 <__divdi3+0xa6>
1a004346:	4252      	negs	r2, r2
1a004348:	ea6f 0606 	mvn.w	r6, r6
1a00434c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004350:	e75d      	b.n	1a00420e <__divdi3+0x12>
1a004352:	4240      	negs	r0, r0
1a004354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004358:	f04f 36ff 	mov.w	r6, #4294967295
1a00435c:	e754      	b.n	1a004208 <__divdi3+0xc>
1a00435e:	f1c0 0220 	rsb	r2, r0, #32
1a004362:	fa24 f102 	lsr.w	r1, r4, r2
1a004366:	fa07 f300 	lsl.w	r3, r7, r0
1a00436a:	4085      	lsls	r5, r0
1a00436c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004370:	40d7      	lsrs	r7, r2
1a004372:	4319      	orrs	r1, r3
1a004374:	fbb7 f2fe 	udiv	r2, r7, lr
1a004378:	0c0b      	lsrs	r3, r1, #16
1a00437a:	fb0e 7712 	mls	r7, lr, r2, r7
1a00437e:	fa1f fc85 	uxth.w	ip, r5
1a004382:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a004386:	fb0c f702 	mul.w	r7, ip, r2
1a00438a:	429f      	cmp	r7, r3
1a00438c:	fa04 f400 	lsl.w	r4, r4, r0
1a004390:	d907      	bls.n	1a0043a2 <__divdi3+0x1a6>
1a004392:	195b      	adds	r3, r3, r5
1a004394:	f102 30ff 	add.w	r0, r2, #4294967295
1a004398:	d274      	bcs.n	1a004484 <__divdi3+0x288>
1a00439a:	429f      	cmp	r7, r3
1a00439c:	d972      	bls.n	1a004484 <__divdi3+0x288>
1a00439e:	3a02      	subs	r2, #2
1a0043a0:	442b      	add	r3, r5
1a0043a2:	1bdf      	subs	r7, r3, r7
1a0043a4:	b289      	uxth	r1, r1
1a0043a6:	fbb7 f8fe 	udiv	r8, r7, lr
1a0043aa:	fb0e 7318 	mls	r3, lr, r8, r7
1a0043ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0043b2:	fb0c f708 	mul.w	r7, ip, r8
1a0043b6:	429f      	cmp	r7, r3
1a0043b8:	d908      	bls.n	1a0043cc <__divdi3+0x1d0>
1a0043ba:	195b      	adds	r3, r3, r5
1a0043bc:	f108 31ff 	add.w	r1, r8, #4294967295
1a0043c0:	d25c      	bcs.n	1a00447c <__divdi3+0x280>
1a0043c2:	429f      	cmp	r7, r3
1a0043c4:	d95a      	bls.n	1a00447c <__divdi3+0x280>
1a0043c6:	f1a8 0802 	sub.w	r8, r8, #2
1a0043ca:	442b      	add	r3, r5
1a0043cc:	1bd8      	subs	r0, r3, r7
1a0043ce:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a0043d2:	e78e      	b.n	1a0042f2 <__divdi3+0xf6>
1a0043d4:	f1c2 0320 	rsb	r3, r2, #32
1a0043d8:	fa2c f103 	lsr.w	r1, ip, r3
1a0043dc:	fa0e fe02 	lsl.w	lr, lr, r2
1a0043e0:	fa20 f703 	lsr.w	r7, r0, r3
1a0043e4:	ea41 0e0e 	orr.w	lr, r1, lr
1a0043e8:	fa08 f002 	lsl.w	r0, r8, r2
1a0043ec:	fa28 f103 	lsr.w	r1, r8, r3
1a0043f0:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a0043f4:	4338      	orrs	r0, r7
1a0043f6:	fbb1 f8f5 	udiv	r8, r1, r5
1a0043fa:	0c03      	lsrs	r3, r0, #16
1a0043fc:	fb05 1118 	mls	r1, r5, r8, r1
1a004400:	fa1f f78e 	uxth.w	r7, lr
1a004404:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a004408:	fb07 f308 	mul.w	r3, r7, r8
1a00440c:	428b      	cmp	r3, r1
1a00440e:	fa0c fc02 	lsl.w	ip, ip, r2
1a004412:	d909      	bls.n	1a004428 <__divdi3+0x22c>
1a004414:	eb11 010e 	adds.w	r1, r1, lr
1a004418:	f108 39ff 	add.w	r9, r8, #4294967295
1a00441c:	d230      	bcs.n	1a004480 <__divdi3+0x284>
1a00441e:	428b      	cmp	r3, r1
1a004420:	d92e      	bls.n	1a004480 <__divdi3+0x284>
1a004422:	f1a8 0802 	sub.w	r8, r8, #2
1a004426:	4471      	add	r1, lr
1a004428:	1ac9      	subs	r1, r1, r3
1a00442a:	b280      	uxth	r0, r0
1a00442c:	fbb1 f3f5 	udiv	r3, r1, r5
1a004430:	fb05 1113 	mls	r1, r5, r3, r1
1a004434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a004438:	fb07 f703 	mul.w	r7, r7, r3
1a00443c:	428f      	cmp	r7, r1
1a00443e:	d908      	bls.n	1a004452 <__divdi3+0x256>
1a004440:	eb11 010e 	adds.w	r1, r1, lr
1a004444:	f103 30ff 	add.w	r0, r3, #4294967295
1a004448:	d216      	bcs.n	1a004478 <__divdi3+0x27c>
1a00444a:	428f      	cmp	r7, r1
1a00444c:	d914      	bls.n	1a004478 <__divdi3+0x27c>
1a00444e:	3b02      	subs	r3, #2
1a004450:	4471      	add	r1, lr
1a004452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004456:	1bc9      	subs	r1, r1, r7
1a004458:	fba3 890c 	umull	r8, r9, r3, ip
1a00445c:	4549      	cmp	r1, r9
1a00445e:	d309      	bcc.n	1a004474 <__divdi3+0x278>
1a004460:	d005      	beq.n	1a00446e <__divdi3+0x272>
1a004462:	2200      	movs	r2, #0
1a004464:	e71d      	b.n	1a0042a2 <__divdi3+0xa6>
1a004466:	4696      	mov	lr, r2
1a004468:	e6fe      	b.n	1a004268 <__divdi3+0x6c>
1a00446a:	4613      	mov	r3, r2
1a00446c:	e711      	b.n	1a004292 <__divdi3+0x96>
1a00446e:	4094      	lsls	r4, r2
1a004470:	4544      	cmp	r4, r8
1a004472:	d2f6      	bcs.n	1a004462 <__divdi3+0x266>
1a004474:	3b01      	subs	r3, #1
1a004476:	e7f4      	b.n	1a004462 <__divdi3+0x266>
1a004478:	4603      	mov	r3, r0
1a00447a:	e7ea      	b.n	1a004452 <__divdi3+0x256>
1a00447c:	4688      	mov	r8, r1
1a00447e:	e7a5      	b.n	1a0043cc <__divdi3+0x1d0>
1a004480:	46c8      	mov	r8, r9
1a004482:	e7d1      	b.n	1a004428 <__divdi3+0x22c>
1a004484:	4602      	mov	r2, r0
1a004486:	e78c      	b.n	1a0043a2 <__divdi3+0x1a6>
1a004488:	4613      	mov	r3, r2
1a00448a:	e70a      	b.n	1a0042a2 <__divdi3+0xa6>
1a00448c:	3b02      	subs	r3, #2
1a00448e:	e757      	b.n	1a004340 <__divdi3+0x144>
1a004490:	f1a8 0802 	sub.w	r8, r8, #2
1a004494:	442f      	add	r7, r5
1a004496:	e73f      	b.n	1a004318 <__divdi3+0x11c>

1a004498 <__udivdi3>:
1a004498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00449c:	2b00      	cmp	r3, #0
1a00449e:	d144      	bne.n	1a00452a <__udivdi3+0x92>
1a0044a0:	428a      	cmp	r2, r1
1a0044a2:	4615      	mov	r5, r2
1a0044a4:	4604      	mov	r4, r0
1a0044a6:	d94f      	bls.n	1a004548 <__udivdi3+0xb0>
1a0044a8:	fab2 f782 	clz	r7, r2
1a0044ac:	460e      	mov	r6, r1
1a0044ae:	b14f      	cbz	r7, 1a0044c4 <__udivdi3+0x2c>
1a0044b0:	f1c7 0320 	rsb	r3, r7, #32
1a0044b4:	40b9      	lsls	r1, r7
1a0044b6:	fa20 f603 	lsr.w	r6, r0, r3
1a0044ba:	fa02 f507 	lsl.w	r5, r2, r7
1a0044be:	430e      	orrs	r6, r1
1a0044c0:	fa00 f407 	lsl.w	r4, r0, r7
1a0044c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0044c8:	0c23      	lsrs	r3, r4, #16
1a0044ca:	fbb6 f0fe 	udiv	r0, r6, lr
1a0044ce:	b2af      	uxth	r7, r5
1a0044d0:	fb0e 6110 	mls	r1, lr, r0, r6
1a0044d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0044d8:	fb07 f100 	mul.w	r1, r7, r0
1a0044dc:	4299      	cmp	r1, r3
1a0044de:	d909      	bls.n	1a0044f4 <__udivdi3+0x5c>
1a0044e0:	195b      	adds	r3, r3, r5
1a0044e2:	f100 32ff 	add.w	r2, r0, #4294967295
1a0044e6:	f080 80ec 	bcs.w	1a0046c2 <__udivdi3+0x22a>
1a0044ea:	4299      	cmp	r1, r3
1a0044ec:	f240 80e9 	bls.w	1a0046c2 <__udivdi3+0x22a>
1a0044f0:	3802      	subs	r0, #2
1a0044f2:	442b      	add	r3, r5
1a0044f4:	1a5a      	subs	r2, r3, r1
1a0044f6:	b2a4      	uxth	r4, r4
1a0044f8:	fbb2 f3fe 	udiv	r3, r2, lr
1a0044fc:	fb0e 2213 	mls	r2, lr, r3, r2
1a004500:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a004504:	fb07 f703 	mul.w	r7, r7, r3
1a004508:	4297      	cmp	r7, r2
1a00450a:	d908      	bls.n	1a00451e <__udivdi3+0x86>
1a00450c:	1952      	adds	r2, r2, r5
1a00450e:	f103 31ff 	add.w	r1, r3, #4294967295
1a004512:	f080 80d8 	bcs.w	1a0046c6 <__udivdi3+0x22e>
1a004516:	4297      	cmp	r7, r2
1a004518:	f240 80d5 	bls.w	1a0046c6 <__udivdi3+0x22e>
1a00451c:	3b02      	subs	r3, #2
1a00451e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a004522:	2600      	movs	r6, #0
1a004524:	4631      	mov	r1, r6
1a004526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00452a:	428b      	cmp	r3, r1
1a00452c:	d847      	bhi.n	1a0045be <__udivdi3+0x126>
1a00452e:	fab3 f683 	clz	r6, r3
1a004532:	2e00      	cmp	r6, #0
1a004534:	d148      	bne.n	1a0045c8 <__udivdi3+0x130>
1a004536:	428b      	cmp	r3, r1
1a004538:	d302      	bcc.n	1a004540 <__udivdi3+0xa8>
1a00453a:	4282      	cmp	r2, r0
1a00453c:	f200 80cd 	bhi.w	1a0046da <__udivdi3+0x242>
1a004540:	2001      	movs	r0, #1
1a004542:	4631      	mov	r1, r6
1a004544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004548:	b912      	cbnz	r2, 1a004550 <__udivdi3+0xb8>
1a00454a:	2501      	movs	r5, #1
1a00454c:	fbb5 f5f2 	udiv	r5, r5, r2
1a004550:	fab5 f885 	clz	r8, r5
1a004554:	f1b8 0f00 	cmp.w	r8, #0
1a004558:	d177      	bne.n	1a00464a <__udivdi3+0x1b2>
1a00455a:	1b4a      	subs	r2, r1, r5
1a00455c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004560:	b2af      	uxth	r7, r5
1a004562:	2601      	movs	r6, #1
1a004564:	fbb2 f0fe 	udiv	r0, r2, lr
1a004568:	0c23      	lsrs	r3, r4, #16
1a00456a:	fb0e 2110 	mls	r1, lr, r0, r2
1a00456e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a004572:	fb07 f300 	mul.w	r3, r7, r0
1a004576:	428b      	cmp	r3, r1
1a004578:	d907      	bls.n	1a00458a <__udivdi3+0xf2>
1a00457a:	1949      	adds	r1, r1, r5
1a00457c:	f100 32ff 	add.w	r2, r0, #4294967295
1a004580:	d202      	bcs.n	1a004588 <__udivdi3+0xf0>
1a004582:	428b      	cmp	r3, r1
1a004584:	f200 80ba 	bhi.w	1a0046fc <__udivdi3+0x264>
1a004588:	4610      	mov	r0, r2
1a00458a:	1ac9      	subs	r1, r1, r3
1a00458c:	b2a4      	uxth	r4, r4
1a00458e:	fbb1 f3fe 	udiv	r3, r1, lr
1a004592:	fb0e 1113 	mls	r1, lr, r3, r1
1a004596:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a00459a:	fb07 f703 	mul.w	r7, r7, r3
1a00459e:	42a7      	cmp	r7, r4
1a0045a0:	d908      	bls.n	1a0045b4 <__udivdi3+0x11c>
1a0045a2:	1964      	adds	r4, r4, r5
1a0045a4:	f103 32ff 	add.w	r2, r3, #4294967295
1a0045a8:	f080 808f 	bcs.w	1a0046ca <__udivdi3+0x232>
1a0045ac:	42a7      	cmp	r7, r4
1a0045ae:	f240 808c 	bls.w	1a0046ca <__udivdi3+0x232>
1a0045b2:	3b02      	subs	r3, #2
1a0045b4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0045b8:	4631      	mov	r1, r6
1a0045ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0045be:	2600      	movs	r6, #0
1a0045c0:	4630      	mov	r0, r6
1a0045c2:	4631      	mov	r1, r6
1a0045c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0045c8:	f1c6 0420 	rsb	r4, r6, #32
1a0045cc:	fa22 f504 	lsr.w	r5, r2, r4
1a0045d0:	40b3      	lsls	r3, r6
1a0045d2:	432b      	orrs	r3, r5
1a0045d4:	fa20 fc04 	lsr.w	ip, r0, r4
1a0045d8:	fa01 f706 	lsl.w	r7, r1, r6
1a0045dc:	fa21 f504 	lsr.w	r5, r1, r4
1a0045e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a0045e4:	ea4c 0707 	orr.w	r7, ip, r7
1a0045e8:	fbb5 f8fe 	udiv	r8, r5, lr
1a0045ec:	0c39      	lsrs	r1, r7, #16
1a0045ee:	fb0e 5518 	mls	r5, lr, r8, r5
1a0045f2:	fa1f fc83 	uxth.w	ip, r3
1a0045f6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a0045fa:	fb0c f108 	mul.w	r1, ip, r8
1a0045fe:	42a9      	cmp	r1, r5
1a004600:	fa02 f206 	lsl.w	r2, r2, r6
1a004604:	d904      	bls.n	1a004610 <__udivdi3+0x178>
1a004606:	18ed      	adds	r5, r5, r3
1a004608:	f108 34ff 	add.w	r4, r8, #4294967295
1a00460c:	d367      	bcc.n	1a0046de <__udivdi3+0x246>
1a00460e:	46a0      	mov	r8, r4
1a004610:	1a6d      	subs	r5, r5, r1
1a004612:	b2bf      	uxth	r7, r7
1a004614:	fbb5 f4fe 	udiv	r4, r5, lr
1a004618:	fb0e 5514 	mls	r5, lr, r4, r5
1a00461c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a004620:	fb0c fc04 	mul.w	ip, ip, r4
1a004624:	458c      	cmp	ip, r1
1a004626:	d904      	bls.n	1a004632 <__udivdi3+0x19a>
1a004628:	18c9      	adds	r1, r1, r3
1a00462a:	f104 35ff 	add.w	r5, r4, #4294967295
1a00462e:	d35c      	bcc.n	1a0046ea <__udivdi3+0x252>
1a004630:	462c      	mov	r4, r5
1a004632:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a004636:	ebcc 0101 	rsb	r1, ip, r1
1a00463a:	fba4 2302 	umull	r2, r3, r4, r2
1a00463e:	4299      	cmp	r1, r3
1a004640:	d348      	bcc.n	1a0046d4 <__udivdi3+0x23c>
1a004642:	d044      	beq.n	1a0046ce <__udivdi3+0x236>
1a004644:	4620      	mov	r0, r4
1a004646:	2600      	movs	r6, #0
1a004648:	e76c      	b.n	1a004524 <__udivdi3+0x8c>
1a00464a:	f1c8 0420 	rsb	r4, r8, #32
1a00464e:	fa01 f308 	lsl.w	r3, r1, r8
1a004652:	fa05 f508 	lsl.w	r5, r5, r8
1a004656:	fa20 f704 	lsr.w	r7, r0, r4
1a00465a:	40e1      	lsrs	r1, r4
1a00465c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004660:	431f      	orrs	r7, r3
1a004662:	fbb1 f6fe 	udiv	r6, r1, lr
1a004666:	0c3a      	lsrs	r2, r7, #16
1a004668:	fb0e 1116 	mls	r1, lr, r6, r1
1a00466c:	fa1f fc85 	uxth.w	ip, r5
1a004670:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a004674:	fb0c f206 	mul.w	r2, ip, r6
1a004678:	429a      	cmp	r2, r3
1a00467a:	fa00 f408 	lsl.w	r4, r0, r8
1a00467e:	d907      	bls.n	1a004690 <__udivdi3+0x1f8>
1a004680:	195b      	adds	r3, r3, r5
1a004682:	f106 31ff 	add.w	r1, r6, #4294967295
1a004686:	d237      	bcs.n	1a0046f8 <__udivdi3+0x260>
1a004688:	429a      	cmp	r2, r3
1a00468a:	d935      	bls.n	1a0046f8 <__udivdi3+0x260>
1a00468c:	3e02      	subs	r6, #2
1a00468e:	442b      	add	r3, r5
1a004690:	1a9b      	subs	r3, r3, r2
1a004692:	b2bf      	uxth	r7, r7
1a004694:	fbb3 f0fe 	udiv	r0, r3, lr
1a004698:	fb0e 3310 	mls	r3, lr, r0, r3
1a00469c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a0046a0:	fb0c f100 	mul.w	r1, ip, r0
1a0046a4:	4299      	cmp	r1, r3
1a0046a6:	d907      	bls.n	1a0046b8 <__udivdi3+0x220>
1a0046a8:	195b      	adds	r3, r3, r5
1a0046aa:	f100 32ff 	add.w	r2, r0, #4294967295
1a0046ae:	d221      	bcs.n	1a0046f4 <__udivdi3+0x25c>
1a0046b0:	4299      	cmp	r1, r3
1a0046b2:	d91f      	bls.n	1a0046f4 <__udivdi3+0x25c>
1a0046b4:	3802      	subs	r0, #2
1a0046b6:	442b      	add	r3, r5
1a0046b8:	1a5a      	subs	r2, r3, r1
1a0046ba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a0046be:	4667      	mov	r7, ip
1a0046c0:	e750      	b.n	1a004564 <__udivdi3+0xcc>
1a0046c2:	4610      	mov	r0, r2
1a0046c4:	e716      	b.n	1a0044f4 <__udivdi3+0x5c>
1a0046c6:	460b      	mov	r3, r1
1a0046c8:	e729      	b.n	1a00451e <__udivdi3+0x86>
1a0046ca:	4613      	mov	r3, r2
1a0046cc:	e772      	b.n	1a0045b4 <__udivdi3+0x11c>
1a0046ce:	40b0      	lsls	r0, r6
1a0046d0:	4290      	cmp	r0, r2
1a0046d2:	d2b7      	bcs.n	1a004644 <__udivdi3+0x1ac>
1a0046d4:	1e60      	subs	r0, r4, #1
1a0046d6:	2600      	movs	r6, #0
1a0046d8:	e724      	b.n	1a004524 <__udivdi3+0x8c>
1a0046da:	4630      	mov	r0, r6
1a0046dc:	e722      	b.n	1a004524 <__udivdi3+0x8c>
1a0046de:	42a9      	cmp	r1, r5
1a0046e0:	d995      	bls.n	1a00460e <__udivdi3+0x176>
1a0046e2:	f1a8 0802 	sub.w	r8, r8, #2
1a0046e6:	441d      	add	r5, r3
1a0046e8:	e792      	b.n	1a004610 <__udivdi3+0x178>
1a0046ea:	458c      	cmp	ip, r1
1a0046ec:	d9a0      	bls.n	1a004630 <__udivdi3+0x198>
1a0046ee:	3c02      	subs	r4, #2
1a0046f0:	4419      	add	r1, r3
1a0046f2:	e79e      	b.n	1a004632 <__udivdi3+0x19a>
1a0046f4:	4610      	mov	r0, r2
1a0046f6:	e7df      	b.n	1a0046b8 <__udivdi3+0x220>
1a0046f8:	460e      	mov	r6, r1
1a0046fa:	e7c9      	b.n	1a004690 <__udivdi3+0x1f8>
1a0046fc:	3802      	subs	r0, #2
1a0046fe:	4429      	add	r1, r5
1a004700:	e743      	b.n	1a00458a <__udivdi3+0xf2>
1a004702:	bf00      	nop

1a004704 <__libc_init_array>:
1a004704:	b570      	push	{r4, r5, r6, lr}
1a004706:	4b0e      	ldr	r3, [pc, #56]	; (1a004740 <__libc_init_array+0x3c>)
1a004708:	4c0e      	ldr	r4, [pc, #56]	; (1a004744 <__libc_init_array+0x40>)
1a00470a:	1ae4      	subs	r4, r4, r3
1a00470c:	10a4      	asrs	r4, r4, #2
1a00470e:	2500      	movs	r5, #0
1a004710:	461e      	mov	r6, r3
1a004712:	42a5      	cmp	r5, r4
1a004714:	d004      	beq.n	1a004720 <__libc_init_array+0x1c>
1a004716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00471a:	4798      	blx	r3
1a00471c:	3501      	adds	r5, #1
1a00471e:	e7f8      	b.n	1a004712 <__libc_init_array+0xe>
1a004720:	f7ff fd20 	bl	1a004164 <_init>
1a004724:	4c08      	ldr	r4, [pc, #32]	; (1a004748 <__libc_init_array+0x44>)
1a004726:	4b09      	ldr	r3, [pc, #36]	; (1a00474c <__libc_init_array+0x48>)
1a004728:	1ae4      	subs	r4, r4, r3
1a00472a:	10a4      	asrs	r4, r4, #2
1a00472c:	2500      	movs	r5, #0
1a00472e:	461e      	mov	r6, r3
1a004730:	42a5      	cmp	r5, r4
1a004732:	d004      	beq.n	1a00473e <__libc_init_array+0x3a>
1a004734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004738:	4798      	blx	r3
1a00473a:	3501      	adds	r5, #1
1a00473c:	e7f8      	b.n	1a004730 <__libc_init_array+0x2c>
1a00473e:	bd70      	pop	{r4, r5, r6, pc}
1a004740:	1a00542c 	.word	0x1a00542c
1a004744:	1a00542c 	.word	0x1a00542c
1a004748:	1a00542c 	.word	0x1a00542c
1a00474c:	1a00542c 	.word	0x1a00542c

1a004750 <memcpy>:
1a004750:	b510      	push	{r4, lr}
1a004752:	1e43      	subs	r3, r0, #1
1a004754:	440a      	add	r2, r1
1a004756:	4291      	cmp	r1, r2
1a004758:	d004      	beq.n	1a004764 <memcpy+0x14>
1a00475a:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00475e:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004762:	e7f8      	b.n	1a004756 <memcpy+0x6>
1a004764:	bd10      	pop	{r4, pc}

1a004766 <memset>:
1a004766:	4402      	add	r2, r0
1a004768:	4603      	mov	r3, r0
1a00476a:	4293      	cmp	r3, r2
1a00476c:	d002      	beq.n	1a004774 <memset+0xe>
1a00476e:	f803 1b01 	strb.w	r1, [r3], #1
1a004772:	e7fa      	b.n	1a00476a <memset+0x4>
1a004774:	4770      	bx	lr
	...

1a004778 <siprintf>:
1a004778:	b40e      	push	{r1, r2, r3}
1a00477a:	b500      	push	{lr}
1a00477c:	b09c      	sub	sp, #112	; 0x70
1a00477e:	f44f 7102 	mov.w	r1, #520	; 0x208
1a004782:	f8ad 1014 	strh.w	r1, [sp, #20]
1a004786:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a00478a:	9104      	str	r1, [sp, #16]
1a00478c:	9107      	str	r1, [sp, #28]
1a00478e:	f64f 71ff 	movw	r1, #65535	; 0xffff
1a004792:	ab1d      	add	r3, sp, #116	; 0x74
1a004794:	f8ad 1016 	strh.w	r1, [sp, #22]
1a004798:	4908      	ldr	r1, [pc, #32]	; (1a0047bc <siprintf+0x44>)
1a00479a:	f853 2b04 	ldr.w	r2, [r3], #4
1a00479e:	9002      	str	r0, [sp, #8]
1a0047a0:	9006      	str	r0, [sp, #24]
1a0047a2:	6808      	ldr	r0, [r1, #0]
1a0047a4:	9301      	str	r3, [sp, #4]
1a0047a6:	a902      	add	r1, sp, #8
1a0047a8:	f000 f926 	bl	1a0049f8 <_svfiprintf_r>
1a0047ac:	9b02      	ldr	r3, [sp, #8]
1a0047ae:	2200      	movs	r2, #0
1a0047b0:	701a      	strb	r2, [r3, #0]
1a0047b2:	b01c      	add	sp, #112	; 0x70
1a0047b4:	f85d eb04 	ldr.w	lr, [sp], #4
1a0047b8:	b003      	add	sp, #12
1a0047ba:	4770      	bx	lr
1a0047bc:	1000013c 	.word	0x1000013c

1a0047c0 <strchr>:
1a0047c0:	b2c9      	uxtb	r1, r1
1a0047c2:	4603      	mov	r3, r0
1a0047c4:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0047c8:	b11a      	cbz	r2, 1a0047d2 <strchr+0x12>
1a0047ca:	428a      	cmp	r2, r1
1a0047cc:	d1f9      	bne.n	1a0047c2 <strchr+0x2>
1a0047ce:	4618      	mov	r0, r3
1a0047d0:	4770      	bx	lr
1a0047d2:	2900      	cmp	r1, #0
1a0047d4:	bf0c      	ite	eq
1a0047d6:	4618      	moveq	r0, r3
1a0047d8:	2000      	movne	r0, #0
1a0047da:	4770      	bx	lr

1a0047dc <strcpy>:
1a0047dc:	4603      	mov	r3, r0
1a0047de:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0047e2:	f803 2b01 	strb.w	r2, [r3], #1
1a0047e6:	2a00      	cmp	r2, #0
1a0047e8:	d1f9      	bne.n	1a0047de <strcpy+0x2>
1a0047ea:	4770      	bx	lr

1a0047ec <strncpy>:
1a0047ec:	b510      	push	{r4, lr}
1a0047ee:	4603      	mov	r3, r0
1a0047f0:	b132      	cbz	r2, 1a004800 <strncpy+0x14>
1a0047f2:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0047f6:	f803 4b01 	strb.w	r4, [r3], #1
1a0047fa:	3a01      	subs	r2, #1
1a0047fc:	2c00      	cmp	r4, #0
1a0047fe:	d1f7      	bne.n	1a0047f0 <strncpy+0x4>
1a004800:	441a      	add	r2, r3
1a004802:	4293      	cmp	r3, r2
1a004804:	d003      	beq.n	1a00480e <strncpy+0x22>
1a004806:	2100      	movs	r1, #0
1a004808:	f803 1b01 	strb.w	r1, [r3], #1
1a00480c:	e7f9      	b.n	1a004802 <strncpy+0x16>
1a00480e:	bd10      	pop	{r4, pc}

1a004810 <_free_r>:
1a004810:	b530      	push	{r4, r5, lr}
1a004812:	2900      	cmp	r1, #0
1a004814:	d03d      	beq.n	1a004892 <_free_r+0x82>
1a004816:	f851 2c04 	ldr.w	r2, [r1, #-4]
1a00481a:	1f0b      	subs	r3, r1, #4
1a00481c:	491d      	ldr	r1, [pc, #116]	; (1a004894 <_free_r+0x84>)
1a00481e:	2a00      	cmp	r2, #0
1a004820:	bfb8      	it	lt
1a004822:	189b      	addlt	r3, r3, r2
1a004824:	680a      	ldr	r2, [r1, #0]
1a004826:	460c      	mov	r4, r1
1a004828:	b912      	cbnz	r2, 1a004830 <_free_r+0x20>
1a00482a:	605a      	str	r2, [r3, #4]
1a00482c:	600b      	str	r3, [r1, #0]
1a00482e:	bd30      	pop	{r4, r5, pc}
1a004830:	4293      	cmp	r3, r2
1a004832:	d20d      	bcs.n	1a004850 <_free_r+0x40>
1a004834:	6819      	ldr	r1, [r3, #0]
1a004836:	1858      	adds	r0, r3, r1
1a004838:	4290      	cmp	r0, r2
1a00483a:	bf01      	itttt	eq
1a00483c:	585a      	ldreq	r2, [r3, r1]
1a00483e:	1852      	addeq	r2, r2, r1
1a004840:	601a      	streq	r2, [r3, #0]
1a004842:	6842      	ldreq	r2, [r0, #4]
1a004844:	605a      	str	r2, [r3, #4]
1a004846:	6023      	str	r3, [r4, #0]
1a004848:	bd30      	pop	{r4, r5, pc}
1a00484a:	4299      	cmp	r1, r3
1a00484c:	d803      	bhi.n	1a004856 <_free_r+0x46>
1a00484e:	460a      	mov	r2, r1
1a004850:	6851      	ldr	r1, [r2, #4]
1a004852:	2900      	cmp	r1, #0
1a004854:	d1f9      	bne.n	1a00484a <_free_r+0x3a>
1a004856:	6814      	ldr	r4, [r2, #0]
1a004858:	1915      	adds	r5, r2, r4
1a00485a:	429d      	cmp	r5, r3
1a00485c:	d10a      	bne.n	1a004874 <_free_r+0x64>
1a00485e:	681b      	ldr	r3, [r3, #0]
1a004860:	4423      	add	r3, r4
1a004862:	18d0      	adds	r0, r2, r3
1a004864:	4288      	cmp	r0, r1
1a004866:	6013      	str	r3, [r2, #0]
1a004868:	d113      	bne.n	1a004892 <_free_r+0x82>
1a00486a:	6808      	ldr	r0, [r1, #0]
1a00486c:	4403      	add	r3, r0
1a00486e:	6013      	str	r3, [r2, #0]
1a004870:	684b      	ldr	r3, [r1, #4]
1a004872:	e00d      	b.n	1a004890 <_free_r+0x80>
1a004874:	d902      	bls.n	1a00487c <_free_r+0x6c>
1a004876:	230c      	movs	r3, #12
1a004878:	6003      	str	r3, [r0, #0]
1a00487a:	bd30      	pop	{r4, r5, pc}
1a00487c:	681c      	ldr	r4, [r3, #0]
1a00487e:	1918      	adds	r0, r3, r4
1a004880:	4288      	cmp	r0, r1
1a004882:	bf04      	itt	eq
1a004884:	6808      	ldreq	r0, [r1, #0]
1a004886:	6849      	ldreq	r1, [r1, #4]
1a004888:	6059      	str	r1, [r3, #4]
1a00488a:	bf04      	itt	eq
1a00488c:	1900      	addeq	r0, r0, r4
1a00488e:	6018      	streq	r0, [r3, #0]
1a004890:	6053      	str	r3, [r2, #4]
1a004892:	bd30      	pop	{r4, r5, pc}
1a004894:	10002be8 	.word	0x10002be8

1a004898 <_malloc_r>:
1a004898:	b570      	push	{r4, r5, r6, lr}
1a00489a:	1ccc      	adds	r4, r1, #3
1a00489c:	f024 0403 	bic.w	r4, r4, #3
1a0048a0:	3408      	adds	r4, #8
1a0048a2:	2c0c      	cmp	r4, #12
1a0048a4:	bf38      	it	cc
1a0048a6:	240c      	movcc	r4, #12
1a0048a8:	2c00      	cmp	r4, #0
1a0048aa:	4606      	mov	r6, r0
1a0048ac:	da03      	bge.n	1a0048b6 <_malloc_r+0x1e>
1a0048ae:	230c      	movs	r3, #12
1a0048b0:	6033      	str	r3, [r6, #0]
1a0048b2:	2000      	movs	r0, #0
1a0048b4:	bd70      	pop	{r4, r5, r6, pc}
1a0048b6:	428c      	cmp	r4, r1
1a0048b8:	d3f9      	bcc.n	1a0048ae <_malloc_r+0x16>
1a0048ba:	4a20      	ldr	r2, [pc, #128]	; (1a00493c <_malloc_r+0xa4>)
1a0048bc:	6813      	ldr	r3, [r2, #0]
1a0048be:	4610      	mov	r0, r2
1a0048c0:	4619      	mov	r1, r3
1a0048c2:	b1a1      	cbz	r1, 1a0048ee <_malloc_r+0x56>
1a0048c4:	680a      	ldr	r2, [r1, #0]
1a0048c6:	1b12      	subs	r2, r2, r4
1a0048c8:	d40e      	bmi.n	1a0048e8 <_malloc_r+0x50>
1a0048ca:	2a0b      	cmp	r2, #11
1a0048cc:	d903      	bls.n	1a0048d6 <_malloc_r+0x3e>
1a0048ce:	600a      	str	r2, [r1, #0]
1a0048d0:	188b      	adds	r3, r1, r2
1a0048d2:	508c      	str	r4, [r1, r2]
1a0048d4:	e01f      	b.n	1a004916 <_malloc_r+0x7e>
1a0048d6:	428b      	cmp	r3, r1
1a0048d8:	bf0d      	iteet	eq
1a0048da:	685a      	ldreq	r2, [r3, #4]
1a0048dc:	684a      	ldrne	r2, [r1, #4]
1a0048de:	605a      	strne	r2, [r3, #4]
1a0048e0:	6002      	streq	r2, [r0, #0]
1a0048e2:	bf18      	it	ne
1a0048e4:	460b      	movne	r3, r1
1a0048e6:	e016      	b.n	1a004916 <_malloc_r+0x7e>
1a0048e8:	460b      	mov	r3, r1
1a0048ea:	6849      	ldr	r1, [r1, #4]
1a0048ec:	e7e9      	b.n	1a0048c2 <_malloc_r+0x2a>
1a0048ee:	4d14      	ldr	r5, [pc, #80]	; (1a004940 <_malloc_r+0xa8>)
1a0048f0:	682b      	ldr	r3, [r5, #0]
1a0048f2:	b91b      	cbnz	r3, 1a0048fc <_malloc_r+0x64>
1a0048f4:	4630      	mov	r0, r6
1a0048f6:	f7fe fe1f 	bl	1a003538 <_sbrk_r>
1a0048fa:	6028      	str	r0, [r5, #0]
1a0048fc:	4630      	mov	r0, r6
1a0048fe:	4621      	mov	r1, r4
1a004900:	f7fe fe1a 	bl	1a003538 <_sbrk_r>
1a004904:	1c42      	adds	r2, r0, #1
1a004906:	4603      	mov	r3, r0
1a004908:	d0d1      	beq.n	1a0048ae <_malloc_r+0x16>
1a00490a:	1cc5      	adds	r5, r0, #3
1a00490c:	f025 0503 	bic.w	r5, r5, #3
1a004910:	4285      	cmp	r5, r0
1a004912:	d10a      	bne.n	1a00492a <_malloc_r+0x92>
1a004914:	601c      	str	r4, [r3, #0]
1a004916:	f103 000b 	add.w	r0, r3, #11
1a00491a:	1d1a      	adds	r2, r3, #4
1a00491c:	f020 0007 	bic.w	r0, r0, #7
1a004920:	1a82      	subs	r2, r0, r2
1a004922:	d00a      	beq.n	1a00493a <_malloc_r+0xa2>
1a004924:	4251      	negs	r1, r2
1a004926:	5099      	str	r1, [r3, r2]
1a004928:	bd70      	pop	{r4, r5, r6, pc}
1a00492a:	4630      	mov	r0, r6
1a00492c:	1ae9      	subs	r1, r5, r3
1a00492e:	f7fe fe03 	bl	1a003538 <_sbrk_r>
1a004932:	3001      	adds	r0, #1
1a004934:	d0bb      	beq.n	1a0048ae <_malloc_r+0x16>
1a004936:	462b      	mov	r3, r5
1a004938:	e7ec      	b.n	1a004914 <_malloc_r+0x7c>
1a00493a:	bd70      	pop	{r4, r5, r6, pc}
1a00493c:	10002be8 	.word	0x10002be8
1a004940:	10002be4 	.word	0x10002be4

1a004944 <__ssputs_r>:
1a004944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004948:	688e      	ldr	r6, [r1, #8]
1a00494a:	42b3      	cmp	r3, r6
1a00494c:	4682      	mov	sl, r0
1a00494e:	460c      	mov	r4, r1
1a004950:	4690      	mov	r8, r2
1a004952:	4699      	mov	r9, r3
1a004954:	d340      	bcc.n	1a0049d8 <__ssputs_r+0x94>
1a004956:	898a      	ldrh	r2, [r1, #12]
1a004958:	f412 6f90 	tst.w	r2, #1152	; 0x480
1a00495c:	d03a      	beq.n	1a0049d4 <__ssputs_r+0x90>
1a00495e:	6825      	ldr	r5, [r4, #0]
1a004960:	6909      	ldr	r1, [r1, #16]
1a004962:	1a6f      	subs	r7, r5, r1
1a004964:	6965      	ldr	r5, [r4, #20]
1a004966:	2302      	movs	r3, #2
1a004968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a00496c:	fb95 f5f3 	sdiv	r5, r5, r3
1a004970:	1c7b      	adds	r3, r7, #1
1a004972:	444b      	add	r3, r9
1a004974:	429d      	cmp	r5, r3
1a004976:	bf38      	it	cc
1a004978:	461d      	movcc	r5, r3
1a00497a:	0553      	lsls	r3, r2, #21
1a00497c:	d50f      	bpl.n	1a00499e <__ssputs_r+0x5a>
1a00497e:	4629      	mov	r1, r5
1a004980:	f7ff ff8a 	bl	1a004898 <_malloc_r>
1a004984:	4606      	mov	r6, r0
1a004986:	b198      	cbz	r0, 1a0049b0 <__ssputs_r+0x6c>
1a004988:	6921      	ldr	r1, [r4, #16]
1a00498a:	463a      	mov	r2, r7
1a00498c:	f7ff fee0 	bl	1a004750 <memcpy>
1a004990:	89a3      	ldrh	r3, [r4, #12]
1a004992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a004996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00499a:	81a3      	strh	r3, [r4, #12]
1a00499c:	e013      	b.n	1a0049c6 <__ssputs_r+0x82>
1a00499e:	462a      	mov	r2, r5
1a0049a0:	f000 fadc 	bl	1a004f5c <_realloc_r>
1a0049a4:	4606      	mov	r6, r0
1a0049a6:	b970      	cbnz	r0, 1a0049c6 <__ssputs_r+0x82>
1a0049a8:	4650      	mov	r0, sl
1a0049aa:	6921      	ldr	r1, [r4, #16]
1a0049ac:	f7ff ff30 	bl	1a004810 <_free_r>
1a0049b0:	230c      	movs	r3, #12
1a0049b2:	f8ca 3000 	str.w	r3, [sl]
1a0049b6:	89a3      	ldrh	r3, [r4, #12]
1a0049b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0049bc:	81a3      	strh	r3, [r4, #12]
1a0049be:	f04f 30ff 	mov.w	r0, #4294967295
1a0049c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0049c6:	6126      	str	r6, [r4, #16]
1a0049c8:	6165      	str	r5, [r4, #20]
1a0049ca:	443e      	add	r6, r7
1a0049cc:	1bed      	subs	r5, r5, r7
1a0049ce:	6026      	str	r6, [r4, #0]
1a0049d0:	60a5      	str	r5, [r4, #8]
1a0049d2:	464e      	mov	r6, r9
1a0049d4:	45b1      	cmp	r9, r6
1a0049d6:	d200      	bcs.n	1a0049da <__ssputs_r+0x96>
1a0049d8:	464e      	mov	r6, r9
1a0049da:	4632      	mov	r2, r6
1a0049dc:	6820      	ldr	r0, [r4, #0]
1a0049de:	4641      	mov	r1, r8
1a0049e0:	f000 faa1 	bl	1a004f26 <memmove>
1a0049e4:	68a3      	ldr	r3, [r4, #8]
1a0049e6:	1b9b      	subs	r3, r3, r6
1a0049e8:	60a3      	str	r3, [r4, #8]
1a0049ea:	6823      	ldr	r3, [r4, #0]
1a0049ec:	441e      	add	r6, r3
1a0049ee:	6026      	str	r6, [r4, #0]
1a0049f0:	2000      	movs	r0, #0
1a0049f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

1a0049f8 <_svfiprintf_r>:
1a0049f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0049fc:	b09d      	sub	sp, #116	; 0x74
1a0049fe:	4606      	mov	r6, r0
1a004a00:	9303      	str	r3, [sp, #12]
1a004a02:	898b      	ldrh	r3, [r1, #12]
1a004a04:	061c      	lsls	r4, r3, #24
1a004a06:	460d      	mov	r5, r1
1a004a08:	4690      	mov	r8, r2
1a004a0a:	d50c      	bpl.n	1a004a26 <_svfiprintf_r+0x2e>
1a004a0c:	690b      	ldr	r3, [r1, #16]
1a004a0e:	b953      	cbnz	r3, 1a004a26 <_svfiprintf_r+0x2e>
1a004a10:	2140      	movs	r1, #64	; 0x40
1a004a12:	f7ff ff41 	bl	1a004898 <_malloc_r>
1a004a16:	6028      	str	r0, [r5, #0]
1a004a18:	6128      	str	r0, [r5, #16]
1a004a1a:	b910      	cbnz	r0, 1a004a22 <_svfiprintf_r+0x2a>
1a004a1c:	230c      	movs	r3, #12
1a004a1e:	6033      	str	r3, [r6, #0]
1a004a20:	e0cc      	b.n	1a004bbc <_svfiprintf_r+0x1c4>
1a004a22:	2340      	movs	r3, #64	; 0x40
1a004a24:	616b      	str	r3, [r5, #20]
1a004a26:	2300      	movs	r3, #0
1a004a28:	9309      	str	r3, [sp, #36]	; 0x24
1a004a2a:	2320      	movs	r3, #32
1a004a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004a30:	2330      	movs	r3, #48	; 0x30
1a004a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004a36:	4643      	mov	r3, r8
1a004a38:	461c      	mov	r4, r3
1a004a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
1a004a3e:	b91a      	cbnz	r2, 1a004a48 <_svfiprintf_r+0x50>
1a004a40:	ebb4 0908 	subs.w	r9, r4, r8
1a004a44:	d00f      	beq.n	1a004a66 <_svfiprintf_r+0x6e>
1a004a46:	e002      	b.n	1a004a4e <_svfiprintf_r+0x56>
1a004a48:	2a25      	cmp	r2, #37	; 0x25
1a004a4a:	d1f5      	bne.n	1a004a38 <_svfiprintf_r+0x40>
1a004a4c:	e7f8      	b.n	1a004a40 <_svfiprintf_r+0x48>
1a004a4e:	4630      	mov	r0, r6
1a004a50:	4629      	mov	r1, r5
1a004a52:	4642      	mov	r2, r8
1a004a54:	464b      	mov	r3, r9
1a004a56:	f7ff ff75 	bl	1a004944 <__ssputs_r>
1a004a5a:	3001      	adds	r0, #1
1a004a5c:	f000 80a9 	beq.w	1a004bb2 <_svfiprintf_r+0x1ba>
1a004a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004a62:	444b      	add	r3, r9
1a004a64:	9309      	str	r3, [sp, #36]	; 0x24
1a004a66:	7823      	ldrb	r3, [r4, #0]
1a004a68:	2b00      	cmp	r3, #0
1a004a6a:	f000 80a2 	beq.w	1a004bb2 <_svfiprintf_r+0x1ba>
1a004a6e:	2300      	movs	r3, #0
1a004a70:	f04f 32ff 	mov.w	r2, #4294967295
1a004a74:	9304      	str	r3, [sp, #16]
1a004a76:	9307      	str	r3, [sp, #28]
1a004a78:	9205      	str	r2, [sp, #20]
1a004a7a:	9306      	str	r3, [sp, #24]
1a004a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004a80:	931a      	str	r3, [sp, #104]	; 0x68
1a004a82:	f104 0801 	add.w	r8, r4, #1
1a004a86:	4644      	mov	r4, r8
1a004a88:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a004bd4 <_svfiprintf_r+0x1dc>
1a004a8c:	7821      	ldrb	r1, [r4, #0]
1a004a8e:	4648      	mov	r0, r9
1a004a90:	2205      	movs	r2, #5
1a004a92:	f000 fa39 	bl	1a004f08 <memchr>
1a004a96:	f108 0801 	add.w	r8, r8, #1
1a004a9a:	9b04      	ldr	r3, [sp, #16]
1a004a9c:	b130      	cbz	r0, 1a004aac <_svfiprintf_r+0xb4>
1a004a9e:	ebc9 0000 	rsb	r0, r9, r0
1a004aa2:	2201      	movs	r2, #1
1a004aa4:	4082      	lsls	r2, r0
1a004aa6:	4313      	orrs	r3, r2
1a004aa8:	9304      	str	r3, [sp, #16]
1a004aaa:	e7ec      	b.n	1a004a86 <_svfiprintf_r+0x8e>
1a004aac:	06d8      	lsls	r0, r3, #27
1a004aae:	bf44      	itt	mi
1a004ab0:	2220      	movmi	r2, #32
1a004ab2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004ab6:	0719      	lsls	r1, r3, #28
1a004ab8:	bf44      	itt	mi
1a004aba:	222b      	movmi	r2, #43	; 0x2b
1a004abc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004ac0:	7822      	ldrb	r2, [r4, #0]
1a004ac2:	2a2a      	cmp	r2, #42	; 0x2a
1a004ac4:	d002      	beq.n	1a004acc <_svfiprintf_r+0xd4>
1a004ac6:	9907      	ldr	r1, [sp, #28]
1a004ac8:	4623      	mov	r3, r4
1a004aca:	e00e      	b.n	1a004aea <_svfiprintf_r+0xf2>
1a004acc:	9a03      	ldr	r2, [sp, #12]
1a004ace:	1d11      	adds	r1, r2, #4
1a004ad0:	6812      	ldr	r2, [r2, #0]
1a004ad2:	9103      	str	r1, [sp, #12]
1a004ad4:	2a00      	cmp	r2, #0
1a004ad6:	bfbb      	ittet	lt
1a004ad8:	4252      	neglt	r2, r2
1a004ada:	f043 0302 	orrlt.w	r3, r3, #2
1a004ade:	9207      	strge	r2, [sp, #28]
1a004ae0:	9207      	strlt	r2, [sp, #28]
1a004ae2:	bfb8      	it	lt
1a004ae4:	9304      	strlt	r3, [sp, #16]
1a004ae6:	3401      	adds	r4, #1
1a004ae8:	e00a      	b.n	1a004b00 <_svfiprintf_r+0x108>
1a004aea:	461c      	mov	r4, r3
1a004aec:	3301      	adds	r3, #1
1a004aee:	7822      	ldrb	r2, [r4, #0]
1a004af0:	3a30      	subs	r2, #48	; 0x30
1a004af2:	2a09      	cmp	r2, #9
1a004af4:	d803      	bhi.n	1a004afe <_svfiprintf_r+0x106>
1a004af6:	200a      	movs	r0, #10
1a004af8:	fb00 2101 	mla	r1, r0, r1, r2
1a004afc:	e7f5      	b.n	1a004aea <_svfiprintf_r+0xf2>
1a004afe:	9107      	str	r1, [sp, #28]
1a004b00:	7823      	ldrb	r3, [r4, #0]
1a004b02:	2b2e      	cmp	r3, #46	; 0x2e
1a004b04:	d11a      	bne.n	1a004b3c <_svfiprintf_r+0x144>
1a004b06:	7863      	ldrb	r3, [r4, #1]
1a004b08:	2b2a      	cmp	r3, #42	; 0x2a
1a004b0a:	d10a      	bne.n	1a004b22 <_svfiprintf_r+0x12a>
1a004b0c:	9b03      	ldr	r3, [sp, #12]
1a004b0e:	1d1a      	adds	r2, r3, #4
1a004b10:	681b      	ldr	r3, [r3, #0]
1a004b12:	9203      	str	r2, [sp, #12]
1a004b14:	2b00      	cmp	r3, #0
1a004b16:	bfb8      	it	lt
1a004b18:	f04f 33ff 	movlt.w	r3, #4294967295
1a004b1c:	3402      	adds	r4, #2
1a004b1e:	9305      	str	r3, [sp, #20]
1a004b20:	e00c      	b.n	1a004b3c <_svfiprintf_r+0x144>
1a004b22:	1c61      	adds	r1, r4, #1
1a004b24:	2200      	movs	r2, #0
1a004b26:	460c      	mov	r4, r1
1a004b28:	3101      	adds	r1, #1
1a004b2a:	7823      	ldrb	r3, [r4, #0]
1a004b2c:	3b30      	subs	r3, #48	; 0x30
1a004b2e:	2b09      	cmp	r3, #9
1a004b30:	d803      	bhi.n	1a004b3a <_svfiprintf_r+0x142>
1a004b32:	200a      	movs	r0, #10
1a004b34:	fb00 3202 	mla	r2, r0, r2, r3
1a004b38:	e7f5      	b.n	1a004b26 <_svfiprintf_r+0x12e>
1a004b3a:	9205      	str	r2, [sp, #20]
1a004b3c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1a004bd8 <_svfiprintf_r+0x1e0>
1a004b40:	7821      	ldrb	r1, [r4, #0]
1a004b42:	4640      	mov	r0, r8
1a004b44:	2203      	movs	r2, #3
1a004b46:	f000 f9df 	bl	1a004f08 <memchr>
1a004b4a:	b138      	cbz	r0, 1a004b5c <_svfiprintf_r+0x164>
1a004b4c:	9a04      	ldr	r2, [sp, #16]
1a004b4e:	ebc8 0000 	rsb	r0, r8, r0
1a004b52:	2340      	movs	r3, #64	; 0x40
1a004b54:	4083      	lsls	r3, r0
1a004b56:	4313      	orrs	r3, r2
1a004b58:	9304      	str	r3, [sp, #16]
1a004b5a:	3401      	adds	r4, #1
1a004b5c:	7821      	ldrb	r1, [r4, #0]
1a004b5e:	481a      	ldr	r0, [pc, #104]	; (1a004bc8 <_svfiprintf_r+0x1d0>)
1a004b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004b64:	2206      	movs	r2, #6
1a004b66:	f104 0801 	add.w	r8, r4, #1
1a004b6a:	f000 f9cd 	bl	1a004f08 <memchr>
1a004b6e:	b188      	cbz	r0, 1a004b94 <_svfiprintf_r+0x19c>
1a004b70:	4b16      	ldr	r3, [pc, #88]	; (1a004bcc <_svfiprintf_r+0x1d4>)
1a004b72:	b933      	cbnz	r3, 1a004b82 <_svfiprintf_r+0x18a>
1a004b74:	9b03      	ldr	r3, [sp, #12]
1a004b76:	3307      	adds	r3, #7
1a004b78:	f023 0307 	bic.w	r3, r3, #7
1a004b7c:	3308      	adds	r3, #8
1a004b7e:	9303      	str	r3, [sp, #12]
1a004b80:	e013      	b.n	1a004baa <_svfiprintf_r+0x1b2>
1a004b82:	ab03      	add	r3, sp, #12
1a004b84:	9300      	str	r3, [sp, #0]
1a004b86:	4630      	mov	r0, r6
1a004b88:	a904      	add	r1, sp, #16
1a004b8a:	462a      	mov	r2, r5
1a004b8c:	4b10      	ldr	r3, [pc, #64]	; (1a004bd0 <_svfiprintf_r+0x1d8>)
1a004b8e:	f3af 8000 	nop.w
1a004b92:	e007      	b.n	1a004ba4 <_svfiprintf_r+0x1ac>
1a004b94:	ab03      	add	r3, sp, #12
1a004b96:	9300      	str	r3, [sp, #0]
1a004b98:	4630      	mov	r0, r6
1a004b9a:	a904      	add	r1, sp, #16
1a004b9c:	462a      	mov	r2, r5
1a004b9e:	4b0c      	ldr	r3, [pc, #48]	; (1a004bd0 <_svfiprintf_r+0x1d8>)
1a004ba0:	f000 f892 	bl	1a004cc8 <_printf_i>
1a004ba4:	1c42      	adds	r2, r0, #1
1a004ba6:	4607      	mov	r7, r0
1a004ba8:	d003      	beq.n	1a004bb2 <_svfiprintf_r+0x1ba>
1a004baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004bac:	443b      	add	r3, r7
1a004bae:	9309      	str	r3, [sp, #36]	; 0x24
1a004bb0:	e741      	b.n	1a004a36 <_svfiprintf_r+0x3e>
1a004bb2:	89ab      	ldrh	r3, [r5, #12]
1a004bb4:	065b      	lsls	r3, r3, #25
1a004bb6:	d401      	bmi.n	1a004bbc <_svfiprintf_r+0x1c4>
1a004bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004bba:	e001      	b.n	1a004bc0 <_svfiprintf_r+0x1c8>
1a004bbc:	f04f 30ff 	mov.w	r0, #4294967295
1a004bc0:	b01d      	add	sp, #116	; 0x74
1a004bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004bc6:	bf00      	nop
1a004bc8:	1a005400 	.word	0x1a005400
1a004bcc:	00000000 	.word	0x00000000
1a004bd0:	1a004945 	.word	0x1a004945
1a004bd4:	1a0053f6 	.word	0x1a0053f6
1a004bd8:	1a0053fc 	.word	0x1a0053fc

1a004bdc <_printf_common>:
1a004bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004be0:	4691      	mov	r9, r2
1a004be2:	461f      	mov	r7, r3
1a004be4:	688a      	ldr	r2, [r1, #8]
1a004be6:	690b      	ldr	r3, [r1, #16]
1a004be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004bec:	4293      	cmp	r3, r2
1a004bee:	bfb8      	it	lt
1a004bf0:	4613      	movlt	r3, r2
1a004bf2:	f8c9 3000 	str.w	r3, [r9]
1a004bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a004bfa:	4606      	mov	r6, r0
1a004bfc:	460c      	mov	r4, r1
1a004bfe:	b112      	cbz	r2, 1a004c06 <_printf_common+0x2a>
1a004c00:	3301      	adds	r3, #1
1a004c02:	f8c9 3000 	str.w	r3, [r9]
1a004c06:	6823      	ldr	r3, [r4, #0]
1a004c08:	0699      	lsls	r1, r3, #26
1a004c0a:	bf42      	ittt	mi
1a004c0c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004c10:	3302      	addmi	r3, #2
1a004c12:	f8c9 3000 	strmi.w	r3, [r9]
1a004c16:	6825      	ldr	r5, [r4, #0]
1a004c18:	f015 0506 	ands.w	r5, r5, #6
1a004c1c:	d01c      	beq.n	1a004c58 <_printf_common+0x7c>
1a004c1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004c22:	6822      	ldr	r2, [r4, #0]
1a004c24:	3300      	adds	r3, #0
1a004c26:	bf18      	it	ne
1a004c28:	2301      	movne	r3, #1
1a004c2a:	0692      	lsls	r2, r2, #26
1a004c2c:	d51f      	bpl.n	1a004c6e <_printf_common+0x92>
1a004c2e:	18e1      	adds	r1, r4, r3
1a004c30:	1c5a      	adds	r2, r3, #1
1a004c32:	2030      	movs	r0, #48	; 0x30
1a004c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004c38:	4422      	add	r2, r4
1a004c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a004c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004c42:	3302      	adds	r3, #2
1a004c44:	e013      	b.n	1a004c6e <_printf_common+0x92>
1a004c46:	4630      	mov	r0, r6
1a004c48:	4639      	mov	r1, r7
1a004c4a:	f104 0219 	add.w	r2, r4, #25
1a004c4e:	2301      	movs	r3, #1
1a004c50:	47c0      	blx	r8
1a004c52:	3001      	adds	r0, #1
1a004c54:	d007      	beq.n	1a004c66 <_printf_common+0x8a>
1a004c56:	3501      	adds	r5, #1
1a004c58:	68e3      	ldr	r3, [r4, #12]
1a004c5a:	f8d9 2000 	ldr.w	r2, [r9]
1a004c5e:	1a9b      	subs	r3, r3, r2
1a004c60:	429d      	cmp	r5, r3
1a004c62:	dbf0      	blt.n	1a004c46 <_printf_common+0x6a>
1a004c64:	e7db      	b.n	1a004c1e <_printf_common+0x42>
1a004c66:	f04f 30ff 	mov.w	r0, #4294967295
1a004c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004c6e:	4630      	mov	r0, r6
1a004c70:	4639      	mov	r1, r7
1a004c72:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004c76:	47c0      	blx	r8
1a004c78:	3001      	adds	r0, #1
1a004c7a:	d0f4      	beq.n	1a004c66 <_printf_common+0x8a>
1a004c7c:	6822      	ldr	r2, [r4, #0]
1a004c7e:	f8d9 5000 	ldr.w	r5, [r9]
1a004c82:	68e3      	ldr	r3, [r4, #12]
1a004c84:	f002 0206 	and.w	r2, r2, #6
1a004c88:	2a04      	cmp	r2, #4
1a004c8a:	bf08      	it	eq
1a004c8c:	1b5d      	subeq	r5, r3, r5
1a004c8e:	6922      	ldr	r2, [r4, #16]
1a004c90:	68a3      	ldr	r3, [r4, #8]
1a004c92:	bf0c      	ite	eq
1a004c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004c98:	2500      	movne	r5, #0
1a004c9a:	4293      	cmp	r3, r2
1a004c9c:	bfc4      	itt	gt
1a004c9e:	1a9b      	subgt	r3, r3, r2
1a004ca0:	18ed      	addgt	r5, r5, r3
1a004ca2:	f04f 0900 	mov.w	r9, #0
1a004ca6:	45a9      	cmp	r9, r5
1a004ca8:	da0a      	bge.n	1a004cc0 <_printf_common+0xe4>
1a004caa:	4630      	mov	r0, r6
1a004cac:	4639      	mov	r1, r7
1a004cae:	f104 021a 	add.w	r2, r4, #26
1a004cb2:	2301      	movs	r3, #1
1a004cb4:	47c0      	blx	r8
1a004cb6:	3001      	adds	r0, #1
1a004cb8:	d0d5      	beq.n	1a004c66 <_printf_common+0x8a>
1a004cba:	f109 0901 	add.w	r9, r9, #1
1a004cbe:	e7f2      	b.n	1a004ca6 <_printf_common+0xca>
1a004cc0:	2000      	movs	r0, #0
1a004cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

1a004cc8 <_printf_i>:
1a004cc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
1a004ccc:	460c      	mov	r4, r1
1a004cce:	4617      	mov	r7, r2
1a004cd0:	7e22      	ldrb	r2, [r4, #24]
1a004cd2:	2a6e      	cmp	r2, #110	; 0x6e
1a004cd4:	4698      	mov	r8, r3
1a004cd6:	4606      	mov	r6, r0
1a004cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004cda:	f101 0143 	add.w	r1, r1, #67	; 0x43
1a004cde:	f000 80af 	beq.w	1a004e40 <_printf_i+0x178>
1a004ce2:	d812      	bhi.n	1a004d0a <_printf_i+0x42>
1a004ce4:	2a63      	cmp	r2, #99	; 0x63
1a004ce6:	d023      	beq.n	1a004d30 <_printf_i+0x68>
1a004ce8:	d80a      	bhi.n	1a004d00 <_printf_i+0x38>
1a004cea:	2a00      	cmp	r2, #0
1a004cec:	f000 80bc 	beq.w	1a004e68 <_printf_i+0x1a0>
1a004cf0:	2a58      	cmp	r2, #88	; 0x58
1a004cf2:	f040 80cb 	bne.w	1a004e8c <_printf_i+0x1c4>
1a004cf6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a004cfa:	f8df e204 	ldr.w	lr, [pc, #516]	; 1a004f00 <_printf_i+0x238>
1a004cfe:	e057      	b.n	1a004db0 <_printf_i+0xe8>
1a004d00:	2a64      	cmp	r2, #100	; 0x64
1a004d02:	d01e      	beq.n	1a004d42 <_printf_i+0x7a>
1a004d04:	2a69      	cmp	r2, #105	; 0x69
1a004d06:	d01c      	beq.n	1a004d42 <_printf_i+0x7a>
1a004d08:	e0c0      	b.n	1a004e8c <_printf_i+0x1c4>
1a004d0a:	2a73      	cmp	r2, #115	; 0x73
1a004d0c:	f000 80b0 	beq.w	1a004e70 <_printf_i+0x1a8>
1a004d10:	d809      	bhi.n	1a004d26 <_printf_i+0x5e>
1a004d12:	2a6f      	cmp	r2, #111	; 0x6f
1a004d14:	d02e      	beq.n	1a004d74 <_printf_i+0xac>
1a004d16:	2a70      	cmp	r2, #112	; 0x70
1a004d18:	f040 80b8 	bne.w	1a004e8c <_printf_i+0x1c4>
1a004d1c:	6822      	ldr	r2, [r4, #0]
1a004d1e:	f042 0220 	orr.w	r2, r2, #32
1a004d22:	6022      	str	r2, [r4, #0]
1a004d24:	e03f      	b.n	1a004da6 <_printf_i+0xde>
1a004d26:	2a75      	cmp	r2, #117	; 0x75
1a004d28:	d024      	beq.n	1a004d74 <_printf_i+0xac>
1a004d2a:	2a78      	cmp	r2, #120	; 0x78
1a004d2c:	d03b      	beq.n	1a004da6 <_printf_i+0xde>
1a004d2e:	e0ad      	b.n	1a004e8c <_printf_i+0x1c4>
1a004d30:	681a      	ldr	r2, [r3, #0]
1a004d32:	1d11      	adds	r1, r2, #4
1a004d34:	6019      	str	r1, [r3, #0]
1a004d36:	6813      	ldr	r3, [r2, #0]
1a004d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004d40:	e0a8      	b.n	1a004e94 <_printf_i+0x1cc>
1a004d42:	6820      	ldr	r0, [r4, #0]
1a004d44:	681a      	ldr	r2, [r3, #0]
1a004d46:	f010 0f80 	tst.w	r0, #128	; 0x80
1a004d4a:	d002      	beq.n	1a004d52 <_printf_i+0x8a>
1a004d4c:	1d10      	adds	r0, r2, #4
1a004d4e:	6018      	str	r0, [r3, #0]
1a004d50:	e008      	b.n	1a004d64 <_printf_i+0x9c>
1a004d52:	f010 0f40 	tst.w	r0, #64	; 0x40
1a004d56:	f102 0004 	add.w	r0, r2, #4
1a004d5a:	6018      	str	r0, [r3, #0]
1a004d5c:	d002      	beq.n	1a004d64 <_printf_i+0x9c>
1a004d5e:	f9b2 3000 	ldrsh.w	r3, [r2]
1a004d62:	e000      	b.n	1a004d66 <_printf_i+0x9e>
1a004d64:	6813      	ldr	r3, [r2, #0]
1a004d66:	2b00      	cmp	r3, #0
1a004d68:	da3e      	bge.n	1a004de8 <_printf_i+0x120>
1a004d6a:	222d      	movs	r2, #45	; 0x2d
1a004d6c:	425b      	negs	r3, r3
1a004d6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a004d72:	e039      	b.n	1a004de8 <_printf_i+0x120>
1a004d74:	6820      	ldr	r0, [r4, #0]
1a004d76:	681a      	ldr	r2, [r3, #0]
1a004d78:	f010 0f80 	tst.w	r0, #128	; 0x80
1a004d7c:	d002      	beq.n	1a004d84 <_printf_i+0xbc>
1a004d7e:	1d10      	adds	r0, r2, #4
1a004d80:	6018      	str	r0, [r3, #0]
1a004d82:	e007      	b.n	1a004d94 <_printf_i+0xcc>
1a004d84:	f010 0f40 	tst.w	r0, #64	; 0x40
1a004d88:	f102 0004 	add.w	r0, r2, #4
1a004d8c:	6018      	str	r0, [r3, #0]
1a004d8e:	d001      	beq.n	1a004d94 <_printf_i+0xcc>
1a004d90:	8813      	ldrh	r3, [r2, #0]
1a004d92:	e000      	b.n	1a004d96 <_printf_i+0xce>
1a004d94:	6813      	ldr	r3, [r2, #0]
1a004d96:	7e22      	ldrb	r2, [r4, #24]
1a004d98:	f8df e164 	ldr.w	lr, [pc, #356]	; 1a004f00 <_printf_i+0x238>
1a004d9c:	2a6f      	cmp	r2, #111	; 0x6f
1a004d9e:	bf0c      	ite	eq
1a004da0:	2208      	moveq	r2, #8
1a004da2:	220a      	movne	r2, #10
1a004da4:	e01c      	b.n	1a004de0 <_printf_i+0x118>
1a004da6:	2278      	movs	r2, #120	; 0x78
1a004da8:	f8df e158 	ldr.w	lr, [pc, #344]	; 1a004f04 <_printf_i+0x23c>
1a004dac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a004db0:	6822      	ldr	r2, [r4, #0]
1a004db2:	6818      	ldr	r0, [r3, #0]
1a004db4:	f012 0f80 	tst.w	r2, #128	; 0x80
1a004db8:	f100 0504 	add.w	r5, r0, #4
1a004dbc:	601d      	str	r5, [r3, #0]
1a004dbe:	d103      	bne.n	1a004dc8 <_printf_i+0x100>
1a004dc0:	0655      	lsls	r5, r2, #25
1a004dc2:	d501      	bpl.n	1a004dc8 <_printf_i+0x100>
1a004dc4:	8803      	ldrh	r3, [r0, #0]
1a004dc6:	e000      	b.n	1a004dca <_printf_i+0x102>
1a004dc8:	6803      	ldr	r3, [r0, #0]
1a004dca:	07d0      	lsls	r0, r2, #31
1a004dcc:	bf44      	itt	mi
1a004dce:	f042 0220 	orrmi.w	r2, r2, #32
1a004dd2:	6022      	strmi	r2, [r4, #0]
1a004dd4:	b91b      	cbnz	r3, 1a004dde <_printf_i+0x116>
1a004dd6:	6822      	ldr	r2, [r4, #0]
1a004dd8:	f022 0220 	bic.w	r2, r2, #32
1a004ddc:	6022      	str	r2, [r4, #0]
1a004dde:	2210      	movs	r2, #16
1a004de0:	2000      	movs	r0, #0
1a004de2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
1a004de6:	e002      	b.n	1a004dee <_printf_i+0x126>
1a004de8:	f8df e114 	ldr.w	lr, [pc, #276]	; 1a004f00 <_printf_i+0x238>
1a004dec:	220a      	movs	r2, #10
1a004dee:	6865      	ldr	r5, [r4, #4]
1a004df0:	60a5      	str	r5, [r4, #8]
1a004df2:	2d00      	cmp	r5, #0
1a004df4:	bfa2      	ittt	ge
1a004df6:	6820      	ldrge	r0, [r4, #0]
1a004df8:	f020 0004 	bicge.w	r0, r0, #4
1a004dfc:	6020      	strge	r0, [r4, #0]
1a004dfe:	b903      	cbnz	r3, 1a004e02 <_printf_i+0x13a>
1a004e00:	b165      	cbz	r5, 1a004e1c <_printf_i+0x154>
1a004e02:	460d      	mov	r5, r1
1a004e04:	fbb3 f0f2 	udiv	r0, r3, r2
1a004e08:	fb02 3310 	mls	r3, r2, r0, r3
1a004e0c:	f81e 3003 	ldrb.w	r3, [lr, r3]
1a004e10:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a004e14:	4603      	mov	r3, r0
1a004e16:	2800      	cmp	r0, #0
1a004e18:	d1f4      	bne.n	1a004e04 <_printf_i+0x13c>
1a004e1a:	e000      	b.n	1a004e1e <_printf_i+0x156>
1a004e1c:	460d      	mov	r5, r1
1a004e1e:	2a08      	cmp	r2, #8
1a004e20:	d10b      	bne.n	1a004e3a <_printf_i+0x172>
1a004e22:	6823      	ldr	r3, [r4, #0]
1a004e24:	07da      	lsls	r2, r3, #31
1a004e26:	d508      	bpl.n	1a004e3a <_printf_i+0x172>
1a004e28:	6923      	ldr	r3, [r4, #16]
1a004e2a:	6862      	ldr	r2, [r4, #4]
1a004e2c:	429a      	cmp	r2, r3
1a004e2e:	bfde      	ittt	le
1a004e30:	2330      	movle	r3, #48	; 0x30
1a004e32:	f805 3c01 	strble.w	r3, [r5, #-1]
1a004e36:	f105 35ff 	addle.w	r5, r5, #4294967295
1a004e3a:	1b49      	subs	r1, r1, r5
1a004e3c:	6121      	str	r1, [r4, #16]
1a004e3e:	e02e      	b.n	1a004e9e <_printf_i+0x1d6>
1a004e40:	6825      	ldr	r5, [r4, #0]
1a004e42:	681a      	ldr	r2, [r3, #0]
1a004e44:	6960      	ldr	r0, [r4, #20]
1a004e46:	f015 0f80 	tst.w	r5, #128	; 0x80
1a004e4a:	d003      	beq.n	1a004e54 <_printf_i+0x18c>
1a004e4c:	1d15      	adds	r5, r2, #4
1a004e4e:	601d      	str	r5, [r3, #0]
1a004e50:	6813      	ldr	r3, [r2, #0]
1a004e52:	e008      	b.n	1a004e66 <_printf_i+0x19e>
1a004e54:	f015 0f40 	tst.w	r5, #64	; 0x40
1a004e58:	f102 0504 	add.w	r5, r2, #4
1a004e5c:	601d      	str	r5, [r3, #0]
1a004e5e:	6813      	ldr	r3, [r2, #0]
1a004e60:	d001      	beq.n	1a004e66 <_printf_i+0x19e>
1a004e62:	8018      	strh	r0, [r3, #0]
1a004e64:	e000      	b.n	1a004e68 <_printf_i+0x1a0>
1a004e66:	6018      	str	r0, [r3, #0]
1a004e68:	2300      	movs	r3, #0
1a004e6a:	6123      	str	r3, [r4, #16]
1a004e6c:	460d      	mov	r5, r1
1a004e6e:	e016      	b.n	1a004e9e <_printf_i+0x1d6>
1a004e70:	681a      	ldr	r2, [r3, #0]
1a004e72:	1d11      	adds	r1, r2, #4
1a004e74:	6019      	str	r1, [r3, #0]
1a004e76:	6815      	ldr	r5, [r2, #0]
1a004e78:	6862      	ldr	r2, [r4, #4]
1a004e7a:	4628      	mov	r0, r5
1a004e7c:	2100      	movs	r1, #0
1a004e7e:	f000 f843 	bl	1a004f08 <memchr>
1a004e82:	b108      	cbz	r0, 1a004e88 <_printf_i+0x1c0>
1a004e84:	1b40      	subs	r0, r0, r5
1a004e86:	6060      	str	r0, [r4, #4]
1a004e88:	6863      	ldr	r3, [r4, #4]
1a004e8a:	e004      	b.n	1a004e96 <_printf_i+0x1ce>
1a004e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004e90:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
1a004e94:	2301      	movs	r3, #1
1a004e96:	6123      	str	r3, [r4, #16]
1a004e98:	2300      	movs	r3, #0
1a004e9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004e9e:	f8cd 8000 	str.w	r8, [sp]
1a004ea2:	4630      	mov	r0, r6
1a004ea4:	4621      	mov	r1, r4
1a004ea6:	aa03      	add	r2, sp, #12
1a004ea8:	463b      	mov	r3, r7
1a004eaa:	f7ff fe97 	bl	1a004bdc <_printf_common>
1a004eae:	3001      	adds	r0, #1
1a004eb0:	d102      	bne.n	1a004eb8 <_printf_i+0x1f0>
1a004eb2:	f04f 30ff 	mov.w	r0, #4294967295
1a004eb6:	e01f      	b.n	1a004ef8 <_printf_i+0x230>
1a004eb8:	4630      	mov	r0, r6
1a004eba:	4639      	mov	r1, r7
1a004ebc:	462a      	mov	r2, r5
1a004ebe:	6923      	ldr	r3, [r4, #16]
1a004ec0:	47c0      	blx	r8
1a004ec2:	3001      	adds	r0, #1
1a004ec4:	d0f5      	beq.n	1a004eb2 <_printf_i+0x1ea>
1a004ec6:	6823      	ldr	r3, [r4, #0]
1a004ec8:	079b      	lsls	r3, r3, #30
1a004eca:	d405      	bmi.n	1a004ed8 <_printf_i+0x210>
1a004ecc:	68e0      	ldr	r0, [r4, #12]
1a004ece:	9b03      	ldr	r3, [sp, #12]
1a004ed0:	4298      	cmp	r0, r3
1a004ed2:	bfb8      	it	lt
1a004ed4:	4618      	movlt	r0, r3
1a004ed6:	e00f      	b.n	1a004ef8 <_printf_i+0x230>
1a004ed8:	2500      	movs	r5, #0
1a004eda:	68e3      	ldr	r3, [r4, #12]
1a004edc:	9a03      	ldr	r2, [sp, #12]
1a004ede:	1a9b      	subs	r3, r3, r2
1a004ee0:	429d      	cmp	r5, r3
1a004ee2:	daf3      	bge.n	1a004ecc <_printf_i+0x204>
1a004ee4:	4630      	mov	r0, r6
1a004ee6:	4639      	mov	r1, r7
1a004ee8:	f104 0219 	add.w	r2, r4, #25
1a004eec:	2301      	movs	r3, #1
1a004eee:	47c0      	blx	r8
1a004ef0:	3001      	adds	r0, #1
1a004ef2:	d0de      	beq.n	1a004eb2 <_printf_i+0x1ea>
1a004ef4:	3501      	adds	r5, #1
1a004ef6:	e7f0      	b.n	1a004eda <_printf_i+0x212>
1a004ef8:	b004      	add	sp, #16
1a004efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004efe:	bf00      	nop
1a004f00:	1a005407 	.word	0x1a005407
1a004f04:	1a005418 	.word	0x1a005418

1a004f08 <memchr>:
1a004f08:	b510      	push	{r4, lr}
1a004f0a:	b2c9      	uxtb	r1, r1
1a004f0c:	4402      	add	r2, r0
1a004f0e:	4290      	cmp	r0, r2
1a004f10:	4603      	mov	r3, r0
1a004f12:	d006      	beq.n	1a004f22 <memchr+0x1a>
1a004f14:	781c      	ldrb	r4, [r3, #0]
1a004f16:	428c      	cmp	r4, r1
1a004f18:	f100 0001 	add.w	r0, r0, #1
1a004f1c:	d1f7      	bne.n	1a004f0e <memchr+0x6>
1a004f1e:	4618      	mov	r0, r3
1a004f20:	bd10      	pop	{r4, pc}
1a004f22:	2000      	movs	r0, #0
1a004f24:	bd10      	pop	{r4, pc}

1a004f26 <memmove>:
1a004f26:	4281      	cmp	r1, r0
1a004f28:	b510      	push	{r4, lr}
1a004f2a:	eb01 0302 	add.w	r3, r1, r2
1a004f2e:	d301      	bcc.n	1a004f34 <memmove+0xe>
1a004f30:	1e42      	subs	r2, r0, #1
1a004f32:	e00b      	b.n	1a004f4c <memmove+0x26>
1a004f34:	4298      	cmp	r0, r3
1a004f36:	d2fb      	bcs.n	1a004f30 <memmove+0xa>
1a004f38:	1881      	adds	r1, r0, r2
1a004f3a:	1ad2      	subs	r2, r2, r3
1a004f3c:	42d3      	cmn	r3, r2
1a004f3e:	d004      	beq.n	1a004f4a <memmove+0x24>
1a004f40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a004f44:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a004f48:	e7f8      	b.n	1a004f3c <memmove+0x16>
1a004f4a:	bd10      	pop	{r4, pc}
1a004f4c:	4299      	cmp	r1, r3
1a004f4e:	d004      	beq.n	1a004f5a <memmove+0x34>
1a004f50:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004f54:	f802 4f01 	strb.w	r4, [r2, #1]!
1a004f58:	e7f8      	b.n	1a004f4c <memmove+0x26>
1a004f5a:	bd10      	pop	{r4, pc}

1a004f5c <_realloc_r>:
1a004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004f5e:	4607      	mov	r7, r0
1a004f60:	4615      	mov	r5, r2
1a004f62:	460e      	mov	r6, r1
1a004f64:	b921      	cbnz	r1, 1a004f70 <_realloc_r+0x14>
1a004f66:	4611      	mov	r1, r2
1a004f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a004f6c:	f7ff bc94 	b.w	1a004898 <_malloc_r>
1a004f70:	b91a      	cbnz	r2, 1a004f7a <_realloc_r+0x1e>
1a004f72:	f7ff fc4d 	bl	1a004810 <_free_r>
1a004f76:	4628      	mov	r0, r5
1a004f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004f7a:	f000 f815 	bl	1a004fa8 <_malloc_usable_size_r>
1a004f7e:	42a8      	cmp	r0, r5
1a004f80:	d20e      	bcs.n	1a004fa0 <_realloc_r+0x44>
1a004f82:	4638      	mov	r0, r7
1a004f84:	4629      	mov	r1, r5
1a004f86:	f7ff fc87 	bl	1a004898 <_malloc_r>
1a004f8a:	4604      	mov	r4, r0
1a004f8c:	b150      	cbz	r0, 1a004fa4 <_realloc_r+0x48>
1a004f8e:	4631      	mov	r1, r6
1a004f90:	462a      	mov	r2, r5
1a004f92:	f7ff fbdd 	bl	1a004750 <memcpy>
1a004f96:	4638      	mov	r0, r7
1a004f98:	4631      	mov	r1, r6
1a004f9a:	f7ff fc39 	bl	1a004810 <_free_r>
1a004f9e:	e001      	b.n	1a004fa4 <_realloc_r+0x48>
1a004fa0:	4630      	mov	r0, r6
1a004fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004fa4:	4620      	mov	r0, r4
1a004fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a004fa8 <_malloc_usable_size_r>:
1a004fa8:	f851 0c04 	ldr.w	r0, [r1, #-4]
1a004fac:	2800      	cmp	r0, #0
1a004fae:	bfbe      	ittt	lt
1a004fb0:	1809      	addlt	r1, r1, r0
1a004fb2:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
1a004fb6:	18c0      	addlt	r0, r0, r3
1a004fb8:	3804      	subs	r0, #4
1a004fba:	4770      	bx	lr
1a004fbc:	6b736154 	.word	0x6b736154
1a004fc0:	61557854 	.word	0x61557854
1a004fc4:	00007472 	.word	0x00007472
1a004fc8:	6b736154 	.word	0x6b736154
1a004fcc:	76726553 	.word	0x76726553
1a004fd0:	00656369 	.word	0x00656369
1a004fd4:	6b736154 	.word	0x6b736154
1a004fd8:	4d6f545f 	.word	0x4d6f545f
1a004fdc:	73757961 	.word	0x73757961
1a004fe0:	616c7563 	.word	0x616c7563
1a004fe4:	504f5f73 	.word	0x504f5f73
1a004fe8:	00000030 	.word	0x00000030
1a004fec:	6b736154 	.word	0x6b736154
1a004ff0:	4d6f545f 	.word	0x4d6f545f
1a004ff4:	73756e69 	.word	0x73756e69
1a004ff8:	616c7563 	.word	0x616c7563
1a004ffc:	504f5f73 	.word	0x504f5f73
1a005000:	00000031 	.word	0x00000031
1a005004:	73547872 	.word	0x73547872
1a005008:	25203a6b 	.word	0x25203a6b
1a00500c:	000a0d73 	.word	0x000a0d73
1a005010:	74737547 	.word	0x74737547
1a005014:	2d6f7661 	.word	0x2d6f7661
1a005018:	63614a20 	.word	0x63614a20
1a00501c:	206f626f 	.word	0x206f626f
1a005020:	754a202d 	.word	0x754a202d
1a005024:	6e61696c 	.word	0x6e61696c
1a005028:	61522d20 	.word	0x61522d20
1a00502c:	6c656166 	.word	0x6c656166
1a005030:	00000000 	.word	0x00000000
1a005034:	5f315054 	.word	0x5f315054
1a005038:	616e6946 	.word	0x616e6946
1a00503c:	7266206c 	.word	0x7266206c
1a005040:	54526565 	.word	0x54526565
1a005044:	0000534f 	.word	0x0000534f
1a005048:	454c4449 	.word	0x454c4449
1a00504c:	00000000 	.word	0x00000000
1a005050:	51726d54 	.word	0x51726d54
1a005054:	00000000 	.word	0x00000000
1a005058:	20726d54 	.word	0x20726d54
1a00505c:	00637653 	.word	0x00637653

1a005060 <ultrasonicSensorsIrqMap>:
1a005060:	00020100                                ....

1a005064 <gpioPinsInit>:
1a005064:	02000104 00050701 05010d03 04080100     ................
1a005074:	02020002 02000304 00000403 04070002     ................
1a005084:	030c0300 09050402 05040103 04030208     ................
1a005094:	04020305 06040504 0802000c 03000b06     ................
1a0050a4:	00090607 07060503 060f0504 03030004     ................
1a0050b4:	02000404 00050404 06040502 04060200     ................
1a0050c4:	0c050408 05040a04 0003010e 14010a00     ................
1a0050d4:	010f0000 0d000012 00001101 0010010c     ................
1a0050e4:	07070300 000f0300 01000001 00000000     ................
1a0050f4:	000a0600 08060603 06100504 04030005     ................
1a005104:	03000106 04090400 04010d05 010b0000     ................
1a005114:	0200000f 00000001 00010104 02010800     ................
1a005124:	01090000 09010006 05040002 04010200     ................
1a005134:	02020105 02020504 0e00000a 01000b02     ................
1a005144:	000c020b 00040c01 04000200 01020001     ................
1a005154:	02000204 00030402 03070302 070b0300     ................
1a005164:	0c030004 03000507 0006070d 01020e03     ................
1a005174:	04010504 06020006 02000504 00040405     ................
1a005184:	08040402 040c0504 0d050409 05040a04     ................
1a005194:	0005010e 00000801 636b6974 69547265     ........tikcerTi
1a0051a4:	0072656d                                mer.

1a0051a8 <lpcUarts>:
1a0051a8:	40081000 06020406 00180205 40081000     ...@...........@
1a0051b8:	09070509 00180706 40082000 00000000     ......... .@....
1a0051c8:	00190000 400c1000 07060107 001a0602     .......@........
1a0051d8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0051e8:	02020302 001b0204                       ........

1a0051f0 <GpioPorts>:
1a0051f0:	03030003 0f050403 05031005 07030603     ................
1a005200:	00000802                                ....

1a005204 <OscRateIn>:
1a005204:	00b71b00                                ....

1a005208 <ExtRateIn>:
1a005208:	00000000                                ....

1a00520c <GpioButtons>:
1a00520c:	08000400 09010900                       ........

1a005214 <GpioLeds>:
1a005214:	01050005 0e000205 0c010b01              ............

1a005220 <InitClkStates>:
1a005220:	00010308 00010307 01010f01              ............

1a00522c <pinmuxing>:
1a00522c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00523c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00524c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00525c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00526c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00527c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00528c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00529c:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a0052ac:	00b31201 00f01301 00b31401 00b60707     ................
1a0052bc:	00f20000 00b60100                       ........

1a0052c4 <UART_BClock>:
1a0052c4:	01a201c2 01620182                       ......b.

1a0052cc <UART_PClock>:
1a0052cc:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0052dc:	000000ff                                ....

1a0052e0 <periph_to_base>:
1a0052e0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0052f0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005300:	000100e0 01000100 01200003 00060120     .......... . ...
1a005310:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005320:	01820013 00120182 01a201a2 01c20011     ................
1a005330:	001001c2 01e201e2 0202000f 000e0202     ................
1a005340:	02220222 0223000d 001c0223              "."...#.#...

1a00534c <InitClkStates>:
1a00534c:	00010100 00010909 0001090a 01010701     ................
1a00535c:	00010902 00010906 0101090c 0001090d     ................
1a00536c:	0001090e 0001090f 00010910 00010911     ................
1a00537c:	00010912 00010913 00011114 00011119     ................
1a00538c:	0001111a 0001111b                       ........

1a005394 <__sf_fake_stdin>:
	...

1a0053b4 <__sf_fake_stdout>:
	...

1a0053d4 <__sf_fake_stderr>:
	...
1a0053f4:	2d230043 00202b30 004c6c68 45676665     C.#-0+ .hlL.efgE
1a005404:	30004746 34333231 38373635 43424139     FG.0123456789ABC
1a005414:	00464544 33323130 37363534 62613938     DEF.0123456789ab
1a005424:	66656463 ffffff00                       cdef....
